
Mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000633c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069ec  080069ec  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080069ec  080069ec  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069ec  080069ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069f0  080069f0  000169f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080069f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000298  20000078  08006a6c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08006a6c  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012781  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002572  00000000  00000000  00032822  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001330  00000000  00000000  00034d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001228  00000000  00000000  000360c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015f78  00000000  00000000  000372f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d18f  00000000  00000000  0004d268  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ccb7  00000000  00000000  0005a3f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d70ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054ec  00000000  00000000  000d712c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08006430 	.word	0x08006430

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08006430 	.word	0x08006430

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <NRF24_DelayMicroSeconds+0x38>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0a      	ldr	r2, [pc, #40]	; (8000198 <NRF24_DelayMicroSeconds+0x3c>)
 800016e:	fba2 2303 	umull	r2, r3, r2, r3
 8000172:	0c9a      	lsrs	r2, r3, #18
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	fb02 f303 	mul.w	r3, r2, r3
 800017a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800017c:	bf00      	nop
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	1e5a      	subs	r2, r3, #1
 8000182:	60fa      	str	r2, [r7, #12]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d1fa      	bne.n	800017e <NRF24_DelayMicroSeconds+0x22>
}
 8000188:	bf00      	nop
 800018a:	3714      	adds	r7, #20
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000008 	.word	0x20000008
 8000198:	165e9f81 	.word	0x165e9f81

0800019c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d008      	beq.n	80001bc <NRF24_csn+0x20>
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <NRF24_csn+0x38>)
 80001ac:	6818      	ldr	r0, [r3, #0]
 80001ae:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <NRF24_csn+0x3c>)
 80001b0:	881b      	ldrh	r3, [r3, #0]
 80001b2:	2201      	movs	r2, #1
 80001b4:	4619      	mov	r1, r3
 80001b6:	f002 fdfd 	bl	8002db4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80001ba:	e007      	b.n	80001cc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <NRF24_csn+0x38>)
 80001be:	6818      	ldr	r0, [r3, #0]
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <NRF24_csn+0x3c>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	2200      	movs	r2, #0
 80001c6:	4619      	mov	r1, r3
 80001c8:	f002 fdf4 	bl	8002db4 <HAL_GPIO_WritePin>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	2000009c 	.word	0x2000009c
 80001d8:	200000a0 	.word	0x200000a0

080001dc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d008      	beq.n	80001fc <NRF24_ce+0x20>
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <NRF24_ce+0x38>)
 80001ec:	6818      	ldr	r0, [r3, #0]
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <NRF24_ce+0x3c>)
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	2201      	movs	r2, #1
 80001f4:	4619      	mov	r1, r3
 80001f6:	f002 fddd 	bl	8002db4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80001fa:	e007      	b.n	800020c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <NRF24_ce+0x38>)
 80001fe:	6818      	ldr	r0, [r3, #0]
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <NRF24_ce+0x3c>)
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	2200      	movs	r2, #0
 8000206:	4619      	mov	r1, r3
 8000208:	f002 fdd4 	bl	8002db4 <HAL_GPIO_WritePin>
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	2000009c 	.word	0x2000009c
 8000218:	200000a2 	.word	0x200000a2

0800021c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000226:	2000      	movs	r0, #0
 8000228:	f7ff ffb8 	bl	800019c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	f003 031f 	and.w	r3, r3, #31
 8000232:	b2db      	uxtb	r3, r3
 8000234:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000236:	f107 010c 	add.w	r1, r7, #12
 800023a:	2364      	movs	r3, #100	; 0x64
 800023c:	2201      	movs	r2, #1
 800023e:	480a      	ldr	r0, [pc, #40]	; (8000268 <NRF24_read_register+0x4c>)
 8000240:	f004 fa77 	bl	8004732 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	1c59      	adds	r1, r3, #1
 800024a:	2364      	movs	r3, #100	; 0x64
 800024c:	2201      	movs	r2, #1
 800024e:	4806      	ldr	r0, [pc, #24]	; (8000268 <NRF24_read_register+0x4c>)
 8000250:	f004 fba3 	bl	800499a <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000254:	7b7b      	ldrb	r3, [r7, #13]
 8000256:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f7ff ff9f 	bl	800019c <NRF24_csn>
	return retData;
 800025e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	200000a4 	.word	0x200000a4

0800026c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	6039      	str	r1, [r7, #0]
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ff8d 	bl	800019c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 031f 	and.w	r3, r3, #31
 8000288:	b2db      	uxtb	r3, r3
 800028a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800028c:	f107 010c 	add.w	r1, r7, #12
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2201      	movs	r2, #1
 8000294:	4808      	ldr	r0, [pc, #32]	; (80002b8 <NRF24_read_registerN+0x4c>)
 8000296:	f004 fa4c 	bl	8004732 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800029a:	79bb      	ldrb	r3, [r7, #6]
 800029c:	b29a      	uxth	r2, r3
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	6839      	ldr	r1, [r7, #0]
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <NRF24_read_registerN+0x4c>)
 80002a4:	f004 fb79 	bl	800499a <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f7ff ff77 	bl	800019c <NRF24_csn>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000a4 	.word	0x200000a4

080002bc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	460a      	mov	r2, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80002cc:	2000      	movs	r0, #0
 80002ce:	f7ff ff65 	bl	800019c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f043 0320 	orr.w	r3, r3, #32
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80002e0:	f107 010c 	add.w	r1, r7, #12
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	2202      	movs	r2, #2
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <NRF24_write_register+0x40>)
 80002ea:	f004 fa22 	bl	8004732 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f7ff ff54 	bl	800019c <NRF24_csn>
}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000a4 	.word	0x200000a4

08000300 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	6039      	str	r1, [r7, #0]
 800030a:	71fb      	strb	r3, [r7, #7]
 800030c:	4613      	mov	r3, r2
 800030e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000310:	2000      	movs	r0, #0
 8000312:	f7ff ff43 	bl	800019c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	b2db      	uxtb	r3, r3
 800031e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000320:	f107 010c 	add.w	r1, r7, #12
 8000324:	2364      	movs	r3, #100	; 0x64
 8000326:	2201      	movs	r2, #1
 8000328:	4808      	ldr	r0, [pc, #32]	; (800034c <NRF24_write_registerN+0x4c>)
 800032a:	f004 fa02 	bl	8004732 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	b29a      	uxth	r2, r3
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	6839      	ldr	r1, [r7, #0]
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <NRF24_write_registerN+0x4c>)
 8000338:	f004 f9fb 	bl	8004732 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800033c:	2001      	movs	r0, #1
 800033e:	f7ff ff2d 	bl	800019c <NRF24_csn>
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200000a4 	.word	0x200000a4

08000350 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800035c:	2000      	movs	r0, #0
 800035e:	f7ff ff1d 	bl	800019c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000362:	23a0      	movs	r3, #160	; 0xa0
 8000364:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000366:	f107 010f 	add.w	r1, r7, #15
 800036a:	2364      	movs	r3, #100	; 0x64
 800036c:	2201      	movs	r2, #1
 800036e:	4808      	ldr	r0, [pc, #32]	; (8000390 <NRF24_write_payload+0x40>)
 8000370:	f004 f9df 	bl	8004732 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	b29a      	uxth	r2, r3
 8000378:	2364      	movs	r3, #100	; 0x64
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	4804      	ldr	r0, [pc, #16]	; (8000390 <NRF24_write_payload+0x40>)
 800037e:	f004 f9d8 	bl	8004732 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff ff0a 	bl	800019c <NRF24_csn>
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	200000a4 	.word	0x200000a4

08000394 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
 800039c:	460b      	mov	r3, r1
 800039e:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 80003a0:	f000 fa10 	bl	80007c4 <NRF24_getPayloadSize>
 80003a4:	4603      	mov	r3, r0
 80003a6:	461a      	mov	r2, r3
 80003a8:	78fb      	ldrb	r3, [r7, #3]
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d303      	bcc.n	80003b6 <NRF24_read_payload+0x22>
 80003ae:	f000 fa09 	bl	80007c4 <NRF24_getPayloadSize>
 80003b2:	4603      	mov	r3, r0
 80003b4:	e000      	b.n	80003b8 <NRF24_read_payload+0x24>
 80003b6:	78fb      	ldrb	r3, [r7, #3]
 80003b8:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f7ff feee 	bl	800019c <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 80003c0:	2361      	movs	r3, #97	; 0x61
 80003c2:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 80003c4:	f107 010e 	add.w	r1, r7, #14
 80003c8:	2364      	movs	r3, #100	; 0x64
 80003ca:	2201      	movs	r2, #1
 80003cc:	4808      	ldr	r0, [pc, #32]	; (80003f0 <NRF24_read_payload+0x5c>)
 80003ce:	f004 f9b0 	bl	8004732 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 80003d2:	7bfb      	ldrb	r3, [r7, #15]
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	2364      	movs	r3, #100	; 0x64
 80003d8:	6879      	ldr	r1, [r7, #4]
 80003da:	4805      	ldr	r0, [pc, #20]	; (80003f0 <NRF24_read_payload+0x5c>)
 80003dc:	f004 fadd 	bl	800499a <HAL_SPI_Receive>
	NRF24_csn(1);
 80003e0:	2001      	movs	r0, #1
 80003e2:	f7ff fedb 	bl	800019c <NRF24_csn>
}
 80003e6:	bf00      	nop
 80003e8:	3710      	adds	r7, #16
 80003ea:	46bd      	mov	sp, r7
 80003ec:	bd80      	pop	{r7, pc}
 80003ee:	bf00      	nop
 80003f0:	200000a4 	.word	0x200000a4

080003f4 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80003f8:	21ff      	movs	r1, #255	; 0xff
 80003fa:	20e1      	movs	r0, #225	; 0xe1
 80003fc:	f7ff ff5e 	bl	80002bc <NRF24_write_register>
}
 8000400:	bf00      	nop
 8000402:	bd80      	pop	{r7, pc}

08000404 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000408:	21ff      	movs	r1, #255	; 0xff
 800040a:	20e2      	movs	r0, #226	; 0xe2
 800040c:	f7ff ff56 	bl	80002bc <NRF24_write_register>
}
 8000410:	bf00      	nop
 8000412:	bd80      	pop	{r7, pc}

08000414 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800041a:	2007      	movs	r0, #7
 800041c:	f7ff fefe 	bl	800021c <NRF24_read_register>
 8000420:	4603      	mov	r3, r0
 8000422:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000424:	79fb      	ldrb	r3, [r7, #7]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000430:	b082      	sub	sp, #8
 8000432:	b580      	push	{r7, lr}
 8000434:	b084      	sub	sp, #16
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
 800043a:	61fb      	str	r3, [r7, #28]
 800043c:	460b      	mov	r3, r1
 800043e:	807b      	strh	r3, [r7, #2]
 8000440:	4613      	mov	r3, r2
 8000442:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000444:	4b66      	ldr	r3, [pc, #408]	; (80005e0 <NRF24_begin+0x1b0>)
 8000446:	4618      	mov	r0, r3
 8000448:	f107 031c 	add.w	r3, r7, #28
 800044c:	2258      	movs	r2, #88	; 0x58
 800044e:	4619      	mov	r1, r3
 8000450:	f005 fbd2 	bl	8005bf8 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000454:	4a63      	ldr	r2, [pc, #396]	; (80005e4 <NRF24_begin+0x1b4>)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800045a:	4a63      	ldr	r2, [pc, #396]	; (80005e8 <NRF24_begin+0x1b8>)
 800045c:	887b      	ldrh	r3, [r7, #2]
 800045e:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000460:	4a62      	ldr	r2, [pc, #392]	; (80005ec <NRF24_begin+0x1bc>)
 8000462:	883b      	ldrh	r3, [r7, #0]
 8000464:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff fe98 	bl	800019c <NRF24_csn>
	NRF24_ce(0);
 800046c:	2000      	movs	r0, #0
 800046e:	f7ff feb5 	bl	80001dc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000472:	2005      	movs	r0, #5
 8000474:	f002 f834 	bl	80024e0 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000478:	2108      	movs	r1, #8
 800047a:	2000      	movs	r0, #0
 800047c:	f7ff ff1e 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000480:	213f      	movs	r1, #63	; 0x3f
 8000482:	2001      	movs	r0, #1
 8000484:	f7ff ff1a 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000488:	2103      	movs	r1, #3
 800048a:	2002      	movs	r0, #2
 800048c:	f7ff ff16 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000490:	2103      	movs	r1, #3
 8000492:	2003      	movs	r0, #3
 8000494:	f7ff ff12 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000498:	2103      	movs	r1, #3
 800049a:	2004      	movs	r0, #4
 800049c:	f7ff ff0e 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80004a0:	2102      	movs	r1, #2
 80004a2:	2005      	movs	r0, #5
 80004a4:	f7ff ff0a 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80004a8:	210f      	movs	r1, #15
 80004aa:	2006      	movs	r0, #6
 80004ac:	f7ff ff06 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80004b0:	210e      	movs	r1, #14
 80004b2:	2007      	movs	r0, #7
 80004b4:	f7ff ff02 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80004b8:	2100      	movs	r1, #0
 80004ba:	2008      	movs	r0, #8
 80004bc:	f7ff fefe 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80004c0:	2100      	movs	r1, #0
 80004c2:	2009      	movs	r0, #9
 80004c4:	f7ff fefa 	bl	80002bc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80004c8:	23e7      	movs	r3, #231	; 0xe7
 80004ca:	733b      	strb	r3, [r7, #12]
 80004cc:	23e7      	movs	r3, #231	; 0xe7
 80004ce:	72fb      	strb	r3, [r7, #11]
 80004d0:	23e7      	movs	r3, #231	; 0xe7
 80004d2:	72bb      	strb	r3, [r7, #10]
 80004d4:	23e7      	movs	r3, #231	; 0xe7
 80004d6:	727b      	strb	r3, [r7, #9]
 80004d8:	23e7      	movs	r3, #231	; 0xe7
 80004da:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	2205      	movs	r2, #5
 80004e2:	4619      	mov	r1, r3
 80004e4:	200a      	movs	r0, #10
 80004e6:	f7ff ff0b 	bl	8000300 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80004ea:	23c2      	movs	r3, #194	; 0xc2
 80004ec:	733b      	strb	r3, [r7, #12]
 80004ee:	23c2      	movs	r3, #194	; 0xc2
 80004f0:	72fb      	strb	r3, [r7, #11]
 80004f2:	23c2      	movs	r3, #194	; 0xc2
 80004f4:	72bb      	strb	r3, [r7, #10]
 80004f6:	23c2      	movs	r3, #194	; 0xc2
 80004f8:	727b      	strb	r3, [r7, #9]
 80004fa:	23c2      	movs	r3, #194	; 0xc2
 80004fc:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	2205      	movs	r2, #5
 8000504:	4619      	mov	r1, r3
 8000506:	200b      	movs	r0, #11
 8000508:	f7ff fefa 	bl	8000300 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 800050c:	21c3      	movs	r1, #195	; 0xc3
 800050e:	200c      	movs	r0, #12
 8000510:	f7ff fed4 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000514:	21c4      	movs	r1, #196	; 0xc4
 8000516:	200d      	movs	r0, #13
 8000518:	f7ff fed0 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 800051c:	21c5      	movs	r1, #197	; 0xc5
 800051e:	200e      	movs	r0, #14
 8000520:	f7ff fecc 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000524:	21c6      	movs	r1, #198	; 0xc6
 8000526:	200f      	movs	r0, #15
 8000528:	f7ff fec8 	bl	80002bc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 800052c:	23e7      	movs	r3, #231	; 0xe7
 800052e:	733b      	strb	r3, [r7, #12]
 8000530:	23e7      	movs	r3, #231	; 0xe7
 8000532:	72fb      	strb	r3, [r7, #11]
 8000534:	23e7      	movs	r3, #231	; 0xe7
 8000536:	72bb      	strb	r3, [r7, #10]
 8000538:	23e7      	movs	r3, #231	; 0xe7
 800053a:	727b      	strb	r3, [r7, #9]
 800053c:	23e7      	movs	r3, #231	; 0xe7
 800053e:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000540:	f107 0308 	add.w	r3, r7, #8
 8000544:	2205      	movs	r2, #5
 8000546:	4619      	mov	r1, r3
 8000548:	2010      	movs	r0, #16
 800054a:	f7ff fed9 	bl	8000300 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 800054e:	2100      	movs	r1, #0
 8000550:	2011      	movs	r0, #17
 8000552:	f7ff feb3 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000556:	2100      	movs	r1, #0
 8000558:	2012      	movs	r0, #18
 800055a:	f7ff feaf 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 800055e:	2100      	movs	r1, #0
 8000560:	2013      	movs	r0, #19
 8000562:	f7ff feab 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000566:	2100      	movs	r1, #0
 8000568:	2014      	movs	r0, #20
 800056a:	f7ff fea7 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800056e:	2100      	movs	r1, #0
 8000570:	2015      	movs	r0, #21
 8000572:	f7ff fea3 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000576:	2100      	movs	r1, #0
 8000578:	2016      	movs	r0, #22
 800057a:	f7ff fe9f 	bl	80002bc <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800057e:	f000 fb0b 	bl	8000b98 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000582:	2100      	movs	r1, #0
 8000584:	201c      	movs	r0, #28
 8000586:	f7ff fe99 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800058a:	2100      	movs	r1, #0
 800058c:	201d      	movs	r0, #29
 800058e:	f7ff fe95 	bl	80002bc <NRF24_write_register>
	printRadioSettings();
 8000592:	f000 fb1b 	bl	8000bcc <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000596:	210f      	movs	r1, #15
 8000598:	200f      	movs	r0, #15
 800059a:	f000 f8cd 	bl	8000738 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800059e:	2003      	movs	r0, #3
 80005a0:	f000 f9af 	bl	8000902 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 f9e5 	bl	8000974 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80005aa:	2002      	movs	r0, #2
 80005ac:	f000 fa28 	bl	8000a00 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80005b0:	f000 f97a 	bl	80008a8 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80005b4:	2020      	movs	r0, #32
 80005b6:	f000 f8ef 	bl	8000798 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80005ba:	f000 fae4 	bl	8000b86 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80005be:	204c      	movs	r0, #76	; 0x4c
 80005c0:	f000 f8d5 	bl	800076e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80005c4:	f7ff ff16 	bl	80003f4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80005c8:	f7ff ff1c 	bl	8000404 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80005cc:	f000 fa40 	bl	8000a50 <NRF24_powerDown>
	
}
 80005d0:	bf00      	nop
 80005d2:	3710      	adds	r7, #16
 80005d4:	46bd      	mov	sp, r7
 80005d6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80005da:	b002      	add	sp, #8
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop
 80005e0:	200000a4 	.word	0x200000a4
 80005e4:	2000009c 	.word	0x2000009c
 80005e8:	200000a0 	.word	0x200000a0
 80005ec:	200000a2 	.word	0x200000a2

080005f0 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80005f4:	2000      	movs	r0, #0
 80005f6:	f7ff fdf1 	bl	80001dc <NRF24_ce>
	NRF24_flush_tx();
 80005fa:	f7ff fefb 	bl	80003f4 <NRF24_flush_tx>
	NRF24_flush_rx();
 80005fe:	f7ff ff01 	bl	8000404 <NRF24_flush_rx>
}
 8000602:	bf00      	nop
 8000604:	bd80      	pop	{r7, pc}
	...

08000608 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000614:	f000 fab7 	bl	8000b86 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	4619      	mov	r1, r3
 800061c:	6878      	ldr	r0, [r7, #4]
 800061e:	f000 fa56 	bl	8000ace <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000622:	f001 ff53 	bl	80024cc <HAL_GetTick>
 8000626:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000628:	230a      	movs	r3, #10
 800062a:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 800062c:	f107 030d 	add.w	r3, r7, #13
 8000630:	2201      	movs	r2, #1
 8000632:	4619      	mov	r1, r3
 8000634:	2008      	movs	r0, #8
 8000636:	f7ff fe19 	bl	800026c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800063a:	f7ff feeb 	bl	8000414 <NRF24_get_status>
 800063e:	4603      	mov	r3, r0
 8000640:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000648:	2b00      	cmp	r3, #0
 800064a:	d107      	bne.n	800065c <NRF24_write+0x54>
 800064c:	f001 ff3e 	bl	80024cc <HAL_GetTick>
 8000650:	4602      	mov	r2, r0
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	1ad3      	subs	r3, r2, r3
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d8e7      	bhi.n	800062c <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 800065c:	f107 010b 	add.w	r1, r7, #11
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <NRF24_write+0x90>)
 8000666:	4618      	mov	r0, r3
 8000668:	f000 fa5a 	bl	8000b20 <NRF24_whatHappened>
	retStatus = tx_ok;
 800066c:	7b3b      	ldrb	r3, [r7, #12]
 800066e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <NRF24_write+0x90>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d005      	beq.n	8000684 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000678:	f000 f8ae 	bl	80007d8 <NRF24_getDynamicPayloadSize>
 800067c:	4603      	mov	r3, r0
 800067e:	461a      	mov	r2, r3
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <NRF24_write+0x94>)
 8000682:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000684:	f000 f80c 	bl	80006a0 <NRF24_available>
	NRF24_flush_tx();
 8000688:	f7ff feb4 	bl	80003f4 <NRF24_flush_tx>
	return retStatus;
 800068c:	7bbb      	ldrb	r3, [r7, #14]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3718      	adds	r7, #24
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000094 	.word	0x20000094
 800069c:	20000095 	.word	0x20000095

080006a0 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f000 f9e2 	bl	8000a6e <NRF24_availablePipe>
 80006aa:	4603      	mov	r3, r0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	460b      	mov	r3, r1
 80006ba:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 80006bc:	78fb      	ldrb	r3, [r7, #3]
 80006be:	4619      	mov	r1, r3
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f7ff fe67 	bl	8000394 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 80006c6:	2017      	movs	r0, #23
 80006c8:	f7ff fda8 	bl	800021c <NRF24_read_register>
 80006cc:	4603      	mov	r3, r0
 80006ce:	f003 0301 	and.w	r3, r3, #1
 80006d2:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 80006d4:	f7ff fe96 	bl	8000404 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80006d8:	f000 f87e 	bl	80007d8 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80006dc:	7bfb      	ldrb	r3, [r7, #15]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	bf14      	ite	ne
 80006e2:	2301      	movne	r3, #1
 80006e4:	2300      	moveq	r3, #0
 80006e6:	b2db      	uxtb	r3, r3
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80006fa:	463b      	mov	r3, r7
 80006fc:	2205      	movs	r2, #5
 80006fe:	4619      	mov	r1, r3
 8000700:	200a      	movs	r0, #10
 8000702:	f7ff fdfd 	bl	8000300 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000706:	463b      	mov	r3, r7
 8000708:	2205      	movs	r2, #5
 800070a:	4619      	mov	r1, r3
 800070c:	2010      	movs	r0, #16
 800070e:	f7ff fdf7 	bl	8000300 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000712:	2320      	movs	r3, #32
 8000714:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000716:	4b07      	ldr	r3, [pc, #28]	; (8000734 <NRF24_openWritingPipe+0x44>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	7bfa      	ldrb	r2, [r7, #15]
 800071c:	4293      	cmp	r3, r2
 800071e:	bf28      	it	cs
 8000720:	4613      	movcs	r3, r2
 8000722:	b2db      	uxtb	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	2011      	movs	r0, #17
 8000728:	f7ff fdc8 	bl	80002bc <NRF24_write_register>
}
 800072c:	bf00      	nop
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000096 	.word	0x20000096

08000738 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	460a      	mov	r2, r1
 8000742:	71fb      	strb	r3, [r7, #7]
 8000744:	4613      	mov	r3, r2
 8000746:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	011b      	lsls	r3, r3, #4
 800074c:	b25a      	sxtb	r2, r3
 800074e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000752:	f003 030f 	and.w	r3, r3, #15
 8000756:	b25b      	sxtb	r3, r3
 8000758:	4313      	orrs	r3, r2
 800075a:	b25b      	sxtb	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	4619      	mov	r1, r3
 8000760:	2004      	movs	r0, #4
 8000762:	f7ff fdab 	bl	80002bc <NRF24_write_register>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800076e:	b580      	push	{r7, lr}
 8000770:	b084      	sub	sp, #16
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8000778:	237f      	movs	r3, #127	; 0x7f
 800077a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800077c:	7bfa      	ldrb	r2, [r7, #15]
 800077e:	79fb      	ldrb	r3, [r7, #7]
 8000780:	4293      	cmp	r3, r2
 8000782:	bf28      	it	cs
 8000784:	4613      	movcs	r3, r2
 8000786:	b2db      	uxtb	r3, r3
 8000788:	4619      	mov	r1, r3
 800078a:	2005      	movs	r0, #5
 800078c:	f7ff fd96 	bl	80002bc <NRF24_write_register>
}
 8000790:	bf00      	nop
 8000792:	3710      	adds	r7, #16
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}

08000798 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80007a2:	2320      	movs	r3, #32
 80007a4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80007a6:	7bfa      	ldrb	r2, [r7, #15]
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	4293      	cmp	r3, r2
 80007ac:	bf28      	it	cs
 80007ae:	4613      	movcs	r3, r2
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <NRF24_setPayloadSize+0x28>)
 80007b4:	701a      	strb	r2, [r3, #0]
}
 80007b6:	bf00      	nop
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	20000096 	.word	0x20000096

080007c4 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
	return payload_size;
 80007c8:	4b02      	ldr	r3, [pc, #8]	; (80007d4 <NRF24_getPayloadSize+0x10>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bc80      	pop	{r7}
 80007d2:	4770      	bx	lr
 80007d4:	20000096 	.word	0x20000096

080007d8 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80007dc:	2060      	movs	r0, #96	; 0x60
 80007de:	f7ff fd1d 	bl	800021c <NRF24_read_register>
 80007e2:	4603      	mov	r3, r0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	bd80      	pop	{r7, pc}

080007e8 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80007ec:	201d      	movs	r0, #29
 80007ee:	f7ff fd15 	bl	800021c <NRF24_read_register>
 80007f2:	4603      	mov	r3, r0
 80007f4:	f043 0306 	orr.w	r3, r3, #6
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	4619      	mov	r1, r3
 80007fc:	201d      	movs	r0, #29
 80007fe:	f7ff fd5d 	bl	80002bc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8000802:	201d      	movs	r0, #29
 8000804:	f7ff fd0a 	bl	800021c <NRF24_read_register>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d10c      	bne.n	8000828 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800080e:	f000 f9c3 	bl	8000b98 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 8000812:	201d      	movs	r0, #29
 8000814:	f7ff fd02 	bl	800021c <NRF24_read_register>
 8000818:	4603      	mov	r3, r0
 800081a:	f043 0306 	orr.w	r3, r3, #6
 800081e:	b2db      	uxtb	r3, r3
 8000820:	4619      	mov	r1, r3
 8000822:	201d      	movs	r0, #29
 8000824:	f7ff fd4a 	bl	80002bc <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000828:	201c      	movs	r0, #28
 800082a:	f7ff fcf7 	bl	800021c <NRF24_read_register>
 800082e:	4603      	mov	r3, r0
 8000830:	f043 0303 	orr.w	r3, r3, #3
 8000834:	b2db      	uxtb	r3, r3
 8000836:	4619      	mov	r1, r3
 8000838:	201c      	movs	r0, #28
 800083a:	f7ff fd3f 	bl	80002bc <NRF24_write_register>
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
	...

08000844 <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8000848:	201d      	movs	r0, #29
 800084a:	f7ff fce7 	bl	800021c <NRF24_read_register>
 800084e:	4603      	mov	r3, r0
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	b2db      	uxtb	r3, r3
 8000856:	4619      	mov	r1, r3
 8000858:	201d      	movs	r0, #29
 800085a:	f7ff fd2f 	bl	80002bc <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 800085e:	201d      	movs	r0, #29
 8000860:	f7ff fcdc 	bl	800021c <NRF24_read_register>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d10c      	bne.n	8000884 <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 800086a:	f000 f995 	bl	8000b98 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 800086e:	201d      	movs	r0, #29
 8000870:	f7ff fcd4 	bl	800021c <NRF24_read_register>
 8000874:	4603      	mov	r3, r0
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	b2db      	uxtb	r3, r3
 800087c:	4619      	mov	r1, r3
 800087e:	201d      	movs	r0, #29
 8000880:	f7ff fd1c 	bl	80002bc <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 8000884:	201c      	movs	r0, #28
 8000886:	f7ff fcc9 	bl	800021c <NRF24_read_register>
 800088a:	4603      	mov	r3, r0
 800088c:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4619      	mov	r1, r3
 8000894:	201c      	movs	r0, #28
 8000896:	f7ff fd11 	bl	80002bc <NRF24_write_register>
  dynamic_payloads_enabled = true;
 800089a:	4b02      	ldr	r3, [pc, #8]	; (80008a4 <NRF24_enableDynamicPayloads+0x60>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]
	
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}
 80008a4:	20000097 	.word	0x20000097

080008a8 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80008ac:	201d      	movs	r0, #29
 80008ae:	f7ff fcb5 	bl	800021c <NRF24_read_register>
 80008b2:	4603      	mov	r3, r0
 80008b4:	f023 0304 	bic.w	r3, r3, #4
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	201d      	movs	r0, #29
 80008be:	f7ff fcfd 	bl	80002bc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80008c2:	2100      	movs	r1, #0
 80008c4:	201c      	movs	r0, #28
 80008c6:	f7ff fcf9 	bl	80002bc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80008ca:	4b02      	ldr	r3, [pc, #8]	; (80008d4 <NRF24_disableDynamicPayloads+0x2c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	701a      	strb	r2, [r3, #0]
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000097 	.word	0x20000097

080008d8 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d004      	beq.n	80008f2 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80008e8:	213f      	movs	r1, #63	; 0x3f
 80008ea:	2001      	movs	r0, #1
 80008ec:	f7ff fce6 	bl	80002bc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80008f0:	e003      	b.n	80008fa <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80008f2:	2100      	movs	r1, #0
 80008f4:	2001      	movs	r0, #1
 80008f6:	f7ff fce1 	bl	80002bc <NRF24_write_register>
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8000902:	b580      	push	{r7, lr}
 8000904:	b084      	sub	sp, #16
 8000906:	af00      	add	r7, sp, #0
 8000908:	4603      	mov	r3, r0
 800090a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800090c:	2006      	movs	r0, #6
 800090e:	f7ff fc85 	bl	800021c <NRF24_read_register>
 8000912:	4603      	mov	r3, r0
 8000914:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	f023 0306 	bic.w	r3, r3, #6
 800091c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b03      	cmp	r3, #3
 8000922:	d104      	bne.n	800092e <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8000924:	7bfb      	ldrb	r3, [r7, #15]
 8000926:	f043 0306 	orr.w	r3, r3, #6
 800092a:	73fb      	strb	r3, [r7, #15]
 800092c:	e019      	b.n	8000962 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800092e:	79fb      	ldrb	r3, [r7, #7]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d104      	bne.n	800093e <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	f043 0304 	orr.w	r3, r3, #4
 800093a:	73fb      	strb	r3, [r7, #15]
 800093c:	e011      	b.n	8000962 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800093e:	79fb      	ldrb	r3, [r7, #7]
 8000940:	2b01      	cmp	r3, #1
 8000942:	d104      	bne.n	800094e <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8000944:	7bfb      	ldrb	r3, [r7, #15]
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e009      	b.n	8000962 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	d006      	beq.n	8000962 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	2b04      	cmp	r3, #4
 8000958:	d103      	bne.n	8000962 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800095a:	7bfb      	ldrb	r3, [r7, #15]
 800095c:	f043 0306 	orr.w	r3, r3, #6
 8000960:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8000962:	7bfb      	ldrb	r3, [r7, #15]
 8000964:	4619      	mov	r1, r3
 8000966:	2006      	movs	r0, #6
 8000968:	f7ff fca8 	bl	80002bc <NRF24_write_register>
}
 800096c:	bf00      	nop
 800096e:	3710      	adds	r7, #16
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800097e:	2300      	movs	r3, #0
 8000980:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000982:	2006      	movs	r0, #6
 8000984:	f7ff fc4a 	bl	800021c <NRF24_read_register>
 8000988:	4603      	mov	r3, r0
 800098a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <NRF24_setDataRate+0x88>)
 800098e:	2200      	movs	r2, #0
 8000990:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8000992:	7bbb      	ldrb	r3, [r7, #14]
 8000994:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000998:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b02      	cmp	r3, #2
 800099e:	d107      	bne.n	80009b0 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80009a0:	4b16      	ldr	r3, [pc, #88]	; (80009fc <NRF24_setDataRate+0x88>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	f043 0320 	orr.w	r3, r3, #32
 80009ac:	73bb      	strb	r3, [r7, #14]
 80009ae:	e00d      	b.n	80009cc <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80009b0:	79fb      	ldrb	r3, [r7, #7]
 80009b2:	2b01      	cmp	r3, #1
 80009b4:	d107      	bne.n	80009c6 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80009b6:	4b11      	ldr	r3, [pc, #68]	; (80009fc <NRF24_setDataRate+0x88>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80009bc:	7bbb      	ldrb	r3, [r7, #14]
 80009be:	f043 0308 	orr.w	r3, r3, #8
 80009c2:	73bb      	strb	r3, [r7, #14]
 80009c4:	e002      	b.n	80009cc <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80009c6:	4b0d      	ldr	r3, [pc, #52]	; (80009fc <NRF24_setDataRate+0x88>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	4619      	mov	r1, r3
 80009d0:	2006      	movs	r0, #6
 80009d2:	f7ff fc73 	bl	80002bc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80009d6:	2006      	movs	r0, #6
 80009d8:	f7ff fc20 	bl	800021c <NRF24_read_register>
 80009dc:	4603      	mov	r3, r0
 80009de:	461a      	mov	r2, r3
 80009e0:	7bbb      	ldrb	r3, [r7, #14]
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d102      	bne.n	80009ec <NRF24_setDataRate+0x78>
  {
    result = true;
 80009e6:	2301      	movs	r3, #1
 80009e8:	73fb      	strb	r3, [r7, #15]
 80009ea:	e002      	b.n	80009f2 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80009ec:	4b03      	ldr	r3, [pc, #12]	; (80009fc <NRF24_setDataRate+0x88>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80009f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000098 	.word	0x20000098

08000a00 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000a0a:	2000      	movs	r0, #0
 8000a0c:	f7ff fc06 	bl	800021c <NRF24_read_register>
 8000a10:	4603      	mov	r3, r0
 8000a12:	f023 030c 	bic.w	r3, r3, #12
 8000a16:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8000a18:	79fb      	ldrb	r3, [r7, #7]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d00f      	beq.n	8000a3e <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	2b01      	cmp	r3, #1
 8000a22:	d104      	bne.n	8000a2e <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	f043 0308 	orr.w	r3, r3, #8
 8000a2a:	73fb      	strb	r3, [r7, #15]
 8000a2c:	e007      	b.n	8000a3e <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8000a2e:	7bfb      	ldrb	r3, [r7, #15]
 8000a30:	f043 0308 	orr.w	r3, r3, #8
 8000a34:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8000a36:	7bfb      	ldrb	r3, [r7, #15]
 8000a38:	f043 0304 	orr.w	r3, r3, #4
 8000a3c:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	4619      	mov	r1, r3
 8000a42:	2000      	movs	r0, #0
 8000a44:	f7ff fc3a 	bl	80002bc <NRF24_write_register>
}
 8000a48:	bf00      	nop
 8000a4a:	3710      	adds	r7, #16
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8000a54:	2000      	movs	r0, #0
 8000a56:	f7ff fbe1 	bl	800021c <NRF24_read_register>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	f023 0302 	bic.w	r3, r3, #2
 8000a60:	b2db      	uxtb	r3, r3
 8000a62:	4619      	mov	r1, r3
 8000a64:	2000      	movs	r0, #0
 8000a66:	f7ff fc29 	bl	80002bc <NRF24_write_register>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}

08000a6e <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b084      	sub	sp, #16
 8000a72:	af00      	add	r7, sp, #0
 8000a74:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000a76:	f7ff fccd 	bl	8000414 <NRF24_get_status>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8000a7e:	7bfb      	ldrb	r3, [r7, #15]
 8000a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf14      	ite	ne
 8000a88:	2301      	movne	r3, #1
 8000a8a:	2300      	moveq	r3, #0
 8000a8c:	73bb      	strb	r3, [r7, #14]

  if (result)
 8000a8e:	7bbb      	ldrb	r3, [r7, #14]
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d017      	beq.n	8000ac4 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d007      	beq.n	8000aaa <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	085b      	lsrs	r3, r3, #1
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	f003 0307 	and.w	r3, r3, #7
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000aaa:	2140      	movs	r1, #64	; 0x40
 8000aac:	2007      	movs	r0, #7
 8000aae:	f7ff fc05 	bl	80002bc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	f003 0320 	and.w	r3, r3, #32
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000abc:	2120      	movs	r1, #32
 8000abe:	2007      	movs	r0, #7
 8000ac0:	f7ff fbfc 	bl	80002bc <NRF24_write_register>
    }
  }
  return result;
 8000ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b082      	sub	sp, #8
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000ada:	2000      	movs	r0, #0
 8000adc:	f7ff fb9e 	bl	800021c <NRF24_read_register>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	f043 0302 	orr.w	r3, r3, #2
 8000ae6:	b2db      	uxtb	r3, r3
 8000ae8:	f023 0301 	bic.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	4619      	mov	r1, r3
 8000af0:	2000      	movs	r0, #0
 8000af2:	f7ff fbe3 	bl	80002bc <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8000af6:	2096      	movs	r0, #150	; 0x96
 8000af8:	f7ff fb30 	bl	800015c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000afc:	78fb      	ldrb	r3, [r7, #3]
 8000afe:	4619      	mov	r1, r3
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fc25 	bl	8000350 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000b06:	2001      	movs	r0, #1
 8000b08:	f7ff fb68 	bl	80001dc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000b0c:	200f      	movs	r0, #15
 8000b0e:	f7ff fb25 	bl	800015c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f7ff fb62 	bl	80001dc <NRF24_ce>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000b2c:	f7ff fc72 	bl	8000414 <NRF24_get_status>
 8000b30:	4603      	mov	r3, r0
 8000b32:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2200      	movs	r2, #0
 8000b38:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000b3a:	2170      	movs	r1, #112	; 0x70
 8000b3c:	2007      	movs	r0, #7
 8000b3e:	f7ff fbbd 	bl	80002bc <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8000b42:	7dfb      	ldrb	r3, [r7, #23]
 8000b44:	f003 0320 	and.w	r3, r3, #32
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bf14      	ite	ne
 8000b4c:	2301      	movne	r3, #1
 8000b4e:	2300      	moveq	r3, #0
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	f003 0310 	and.w	r3, r3, #16
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bf14      	ite	ne
 8000b60:	2301      	movne	r3, #1
 8000b62:	2300      	moveq	r3, #0
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8000b6a:	7dfb      	ldrb	r3, [r7, #23]
 8000b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bf14      	ite	ne
 8000b74:	2301      	movne	r3, #1
 8000b76:	2300      	moveq	r3, #0
 8000b78:	b2da      	uxtb	r2, r3
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	701a      	strb	r2, [r3, #0]
}
 8000b7e:	bf00      	nop
 8000b80:	3718      	adds	r7, #24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000b8a:	2170      	movs	r1, #112	; 0x70
 8000b8c:	2007      	movs	r0, #7
 8000b8e:	f7ff fb95 	bl	80002bc <NRF24_write_register>
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
	...

08000b98 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f7ff fafc 	bl	800019c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000ba4:	2350      	movs	r3, #80	; 0x50
 8000ba6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000ba8:	2373      	movs	r3, #115	; 0x73
 8000baa:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000bac:	1d39      	adds	r1, r7, #4
 8000bae:	2364      	movs	r3, #100	; 0x64
 8000bb0:	2202      	movs	r2, #2
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <NRF24_ACTIVATE_cmd+0x30>)
 8000bb4:	f003 fdbd 	bl	8004732 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f7ff faef 	bl	800019c <NRF24_csn>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000a4 	.word	0x200000a4

08000bcc <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bce:	b0a1      	sub	sp, #132	; 0x84
 8000bd0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000bd2:	f107 0308 	add.w	r3, r7, #8
 8000bd6:	4ab6      	ldr	r2, [pc, #728]	; (8000eb0 <printRadioSettings+0x2e4>)
 8000bd8:	461c      	mov	r4, r3
 8000bda:	4615      	mov	r5, r2
 8000bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000be6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000be8:	682b      	ldr	r3, [r5, #0]
 8000bea:	461a      	mov	r2, r3
 8000bec:	8022      	strh	r2, [r4, #0]
 8000bee:	3402      	adds	r4, #2
 8000bf0:	0c1b      	lsrs	r3, r3, #16
 8000bf2:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f7ff faa7 	bl	800014c <strlen>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	b29a      	uxth	r2, r3
 8000c02:	f107 0108 	add.w	r1, r7, #8
 8000c06:	230a      	movs	r3, #10
 8000c08:	48aa      	ldr	r0, [pc, #680]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000c0a:	f004 fe0e 	bl	800582a <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000c0e:	2000      	movs	r0, #0
 8000c10:	f7ff fb04 	bl	800021c <NRF24_read_register>
 8000c14:	4603      	mov	r3, r0
 8000c16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000c1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c1e:	f003 0308 	and.w	r3, r3, #8
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d020      	beq.n	8000c68 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000c26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00b      	beq.n	8000c4a <printRadioSettings+0x7e>
 8000c32:	f107 0308 	add.w	r3, r7, #8
 8000c36:	4aa0      	ldr	r2, [pc, #640]	; (8000eb8 <printRadioSettings+0x2ec>)
 8000c38:	461c      	mov	r4, r3
 8000c3a:	4615      	mov	r5, r2
 8000c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c40:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c44:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000c48:	e017      	b.n	8000c7a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000c4a:	f107 0308 	add.w	r3, r7, #8
 8000c4e:	4a9b      	ldr	r2, [pc, #620]	; (8000ebc <printRadioSettings+0x2f0>)
 8000c50:	461c      	mov	r4, r3
 8000c52:	4615      	mov	r5, r2
 8000c54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000c5c:	c403      	stmia	r4!, {r0, r1}
 8000c5e:	8022      	strh	r2, [r4, #0]
 8000c60:	3402      	adds	r4, #2
 8000c62:	0c13      	lsrs	r3, r2, #16
 8000c64:	7023      	strb	r3, [r4, #0]
 8000c66:	e008      	b.n	8000c7a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000c68:	f107 0308 	add.w	r3, r7, #8
 8000c6c:	4a94      	ldr	r2, [pc, #592]	; (8000ec0 <printRadioSettings+0x2f4>)
 8000c6e:	461c      	mov	r4, r3
 8000c70:	4615      	mov	r5, r2
 8000c72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c76:	682b      	ldr	r3, [r5, #0]
 8000c78:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fa64 	bl	800014c <strlen>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	f107 0108 	add.w	r1, r7, #8
 8000c8c:	230a      	movs	r3, #10
 8000c8e:	4889      	ldr	r0, [pc, #548]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000c90:	f004 fdcb 	bl	800582a <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000c94:	2001      	movs	r0, #1
 8000c96:	f7ff fac1 	bl	800021c <NRF24_read_register>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000ca0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ca4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	bfcc      	ite	gt
 8000cac:	2301      	movgt	r3, #1
 8000cae:	2300      	movle	r3, #0
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cb4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cb8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	bfcc      	ite	gt
 8000cc0:	2301      	movgt	r3, #1
 8000cc2:	2300      	movle	r3, #0
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cc8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ccc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bfcc      	ite	gt
 8000cd4:	2301      	movgt	r3, #1
 8000cd6:	2300      	movle	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cdc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ce0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	bfcc      	ite	gt
 8000ce8:	2301      	movgt	r3, #1
 8000cea:	2300      	movle	r3, #0
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000cf0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cf4:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	bfcc      	ite	gt
 8000cfc:	2301      	movgt	r3, #1
 8000cfe:	2300      	movle	r3, #0
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d08:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	bfcc      	ite	gt
 8000d10:	2301      	movgt	r3, #1
 8000d12:	2300      	movle	r3, #0
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f107 0008 	add.w	r0, r7, #8
 8000d1a:	9303      	str	r3, [sp, #12]
 8000d1c:	9402      	str	r4, [sp, #8]
 8000d1e:	9101      	str	r1, [sp, #4]
 8000d20:	9200      	str	r2, [sp, #0]
 8000d22:	4633      	mov	r3, r6
 8000d24:	462a      	mov	r2, r5
 8000d26:	4967      	ldr	r1, [pc, #412]	; (8000ec4 <printRadioSettings+0x2f8>)
 8000d28:	f004 ff7a 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d2c:	f107 0308 	add.w	r3, r7, #8
 8000d30:	4618      	mov	r0, r3
 8000d32:	f7ff fa0b 	bl	800014c <strlen>
 8000d36:	4603      	mov	r3, r0
 8000d38:	b29a      	uxth	r2, r3
 8000d3a:	f107 0108 	add.w	r1, r7, #8
 8000d3e:	230a      	movs	r3, #10
 8000d40:	485c      	ldr	r0, [pc, #368]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000d42:	f004 fd72 	bl	800582a <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000d46:	2002      	movs	r0, #2
 8000d48:	f7ff fa68 	bl	800021c <NRF24_read_register>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d52:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d56:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	bfcc      	ite	gt
 8000d5e:	2301      	movgt	r3, #1
 8000d60:	2300      	movle	r3, #0
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d6a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	bfcc      	ite	gt
 8000d72:	2301      	movgt	r3, #1
 8000d74:	2300      	movle	r3, #0
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d7a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d7e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	bfcc      	ite	gt
 8000d86:	2301      	movgt	r3, #1
 8000d88:	2300      	movle	r3, #0
 8000d8a:	b2db      	uxtb	r3, r3
 8000d8c:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000d8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d92:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	bfcc      	ite	gt
 8000d9a:	2301      	movgt	r3, #1
 8000d9c:	2300      	movle	r3, #0
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000da2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000da6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	bfcc      	ite	gt
 8000dae:	2301      	movgt	r3, #1
 8000db0:	2300      	movle	r3, #0
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000db6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dba:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	bfcc      	ite	gt
 8000dc2:	2301      	movgt	r3, #1
 8000dc4:	2300      	movle	r3, #0
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	f107 0008 	add.w	r0, r7, #8
 8000dcc:	9303      	str	r3, [sp, #12]
 8000dce:	9402      	str	r4, [sp, #8]
 8000dd0:	9101      	str	r1, [sp, #4]
 8000dd2:	9200      	str	r2, [sp, #0]
 8000dd4:	4633      	mov	r3, r6
 8000dd6:	462a      	mov	r2, r5
 8000dd8:	493b      	ldr	r1, [pc, #236]	; (8000ec8 <printRadioSettings+0x2fc>)
 8000dda:	f004 ff21 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000dde:	f107 0308 	add.w	r3, r7, #8
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff f9b2 	bl	800014c <strlen>
 8000de8:	4603      	mov	r3, r0
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f107 0108 	add.w	r1, r7, #8
 8000df0:	230a      	movs	r3, #10
 8000df2:	4830      	ldr	r0, [pc, #192]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000df4:	f004 fd19 	bl	800582a <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000df8:	2003      	movs	r0, #3
 8000dfa:	f7ff fa0f 	bl	800021c <NRF24_read_register>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000e08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e0c:	3302      	adds	r3, #2
 8000e0e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000e12:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	492c      	ldr	r1, [pc, #176]	; (8000ecc <printRadioSettings+0x300>)
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f004 feff 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e22:	f107 0308 	add.w	r3, r7, #8
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff f990 	bl	800014c <strlen>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	b29a      	uxth	r2, r3
 8000e30:	f107 0108 	add.w	r1, r7, #8
 8000e34:	230a      	movs	r3, #10
 8000e36:	481f      	ldr	r0, [pc, #124]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000e38:	f004 fcf7 	bl	800582a <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000e3c:	2005      	movs	r0, #5
 8000e3e:	f7ff f9ed 	bl	800021c <NRF24_read_register>
 8000e42:	4603      	mov	r3, r0
 8000e44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000e48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000e50:	f107 0308 	add.w	r3, r7, #8
 8000e54:	491e      	ldr	r1, [pc, #120]	; (8000ed0 <printRadioSettings+0x304>)
 8000e56:	4618      	mov	r0, r3
 8000e58:	f004 fee2 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e5c:	f107 0308 	add.w	r3, r7, #8
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff f973 	bl	800014c <strlen>
 8000e66:	4603      	mov	r3, r0
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	f107 0108 	add.w	r1, r7, #8
 8000e6e:	230a      	movs	r3, #10
 8000e70:	4810      	ldr	r0, [pc, #64]	; (8000eb4 <printRadioSettings+0x2e8>)
 8000e72:	f004 fcda 	bl	800582a <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000e76:	2006      	movs	r0, #6
 8000e78:	f7ff f9d0 	bl	800021c <NRF24_read_register>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000e82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e86:	f003 0308 	and.w	r3, r3, #8
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d024      	beq.n	8000ed8 <printRadioSettings+0x30c>
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	4a10      	ldr	r2, [pc, #64]	; (8000ed4 <printRadioSettings+0x308>)
 8000e94:	461c      	mov	r4, r3
 8000e96:	4615      	mov	r5, r2
 8000e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e9c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000ea0:	6020      	str	r0, [r4, #0]
 8000ea2:	3404      	adds	r4, #4
 8000ea4:	8021      	strh	r1, [r4, #0]
 8000ea6:	3402      	adds	r4, #2
 8000ea8:	0c0b      	lsrs	r3, r1, #16
 8000eaa:	7023      	strb	r3, [r4, #0]
 8000eac:	e023      	b.n	8000ef6 <printRadioSettings+0x32a>
 8000eae:	bf00      	nop
 8000eb0:	08006448 	.word	0x08006448
 8000eb4:	200000fc 	.word	0x200000fc
 8000eb8:	0800647c 	.word	0x0800647c
 8000ebc:	08006498 	.word	0x08006498
 8000ec0:	080064b4 	.word	0x080064b4
 8000ec4:	080064c8 	.word	0x080064c8
 8000ec8:	0800650c 	.word	0x0800650c
 8000ecc:	08006558 	.word	0x08006558
 8000ed0:	08006574 	.word	0x08006574
 8000ed4:	08006588 	.word	0x08006588
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000ed8:	f107 0308 	add.w	r3, r7, #8
 8000edc:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <printRadioSettings+0x3b8>)
 8000ede:	461c      	mov	r4, r3
 8000ee0:	4615      	mov	r5, r2
 8000ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ee6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000eea:	6020      	str	r0, [r4, #0]
 8000eec:	3404      	adds	r4, #4
 8000eee:	8021      	strh	r1, [r4, #0]
 8000ef0:	3402      	adds	r4, #2
 8000ef2:	0c0b      	lsrs	r3, r1, #16
 8000ef4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff f926 	bl	800014c <strlen>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	f107 0108 	add.w	r1, r7, #8
 8000f08:	230a      	movs	r3, #10
 8000f0a:	481f      	ldr	r0, [pc, #124]	; (8000f88 <printRadioSettings+0x3bc>)
 8000f0c:	f004 fc8d 	bl	800582a <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000f10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f14:	f003 0306 	and.w	r3, r3, #6
 8000f18:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000f1c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f20:	085b      	lsrs	r3, r3, #1
 8000f22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000f26:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d109      	bne.n	8000f42 <printRadioSettings+0x376>
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	4a16      	ldr	r2, [pc, #88]	; (8000f8c <printRadioSettings+0x3c0>)
 8000f34:	461c      	mov	r4, r3
 8000f36:	4615      	mov	r5, r2
 8000f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f3c:	682b      	ldr	r3, [r5, #0]
 8000f3e:	6023      	str	r3, [r4, #0]
 8000f40:	e037      	b.n	8000fb2 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000f42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d109      	bne.n	8000f5e <printRadioSettings+0x392>
 8000f4a:	f107 0308 	add.w	r3, r7, #8
 8000f4e:	4a10      	ldr	r2, [pc, #64]	; (8000f90 <printRadioSettings+0x3c4>)
 8000f50:	461c      	mov	r4, r3
 8000f52:	4615      	mov	r5, r2
 8000f54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f58:	682b      	ldr	r3, [r5, #0]
 8000f5a:	6023      	str	r3, [r4, #0]
 8000f5c:	e029      	b.n	8000fb2 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000f5e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d118      	bne.n	8000f98 <printRadioSettings+0x3cc>
 8000f66:	f107 0308 	add.w	r3, r7, #8
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <printRadioSettings+0x3c8>)
 8000f6c:	461c      	mov	r4, r3
 8000f6e:	4615      	mov	r5, r2
 8000f70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000f72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000f74:	682b      	ldr	r3, [r5, #0]
 8000f76:	461a      	mov	r2, r3
 8000f78:	8022      	strh	r2, [r4, #0]
 8000f7a:	3402      	adds	r4, #2
 8000f7c:	0c1b      	lsrs	r3, r3, #16
 8000f7e:	7023      	strb	r3, [r4, #0]
 8000f80:	e017      	b.n	8000fb2 <printRadioSettings+0x3e6>
 8000f82:	bf00      	nop
 8000f84:	080065a0 	.word	0x080065a0
 8000f88:	200000fc 	.word	0x200000fc
 8000f8c:	080065b8 	.word	0x080065b8
 8000f90:	080065cc 	.word	0x080065cc
 8000f94:	080065e0 	.word	0x080065e0
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000f98:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000f9c:	2b03      	cmp	r3, #3
 8000f9e:	d108      	bne.n	8000fb2 <printRadioSettings+0x3e6>
 8000fa0:	f107 0308 	add.w	r3, r7, #8
 8000fa4:	4ad7      	ldr	r2, [pc, #860]	; (8001304 <printRadioSettings+0x738>)
 8000fa6:	461c      	mov	r4, r3
 8000fa8:	4615      	mov	r5, r2
 8000faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fae:	682b      	ldr	r3, [r5, #0]
 8000fb0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fb2:	f107 0308 	add.w	r3, r7, #8
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff f8c8 	bl	800014c <strlen>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	b29a      	uxth	r2, r3
 8000fc0:	f107 0108 	add.w	r1, r7, #8
 8000fc4:	230a      	movs	r3, #10
 8000fc6:	48d0      	ldr	r0, [pc, #832]	; (8001308 <printRadioSettings+0x73c>)
 8000fc8:	f004 fc2f 	bl	800582a <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2205      	movs	r2, #5
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f7ff f94a 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000fd8:	793b      	ldrb	r3, [r7, #4]
 8000fda:	461c      	mov	r4, r3
 8000fdc:	78fb      	ldrb	r3, [r7, #3]
 8000fde:	461d      	mov	r5, r3
 8000fe0:	78bb      	ldrb	r3, [r7, #2]
 8000fe2:	787a      	ldrb	r2, [r7, #1]
 8000fe4:	7839      	ldrb	r1, [r7, #0]
 8000fe6:	f107 0008 	add.w	r0, r7, #8
 8000fea:	9102      	str	r1, [sp, #8]
 8000fec:	9201      	str	r2, [sp, #4]
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	462b      	mov	r3, r5
 8000ff2:	4622      	mov	r2, r4
 8000ff4:	49c5      	ldr	r1, [pc, #788]	; (800130c <printRadioSettings+0x740>)
 8000ff6:	f004 fe13 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ffa:	f107 0308 	add.w	r3, r7, #8
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff f8a4 	bl	800014c <strlen>
 8001004:	4603      	mov	r3, r0
 8001006:	b29a      	uxth	r2, r3
 8001008:	f107 0108 	add.w	r1, r7, #8
 800100c:	230a      	movs	r3, #10
 800100e:	48be      	ldr	r0, [pc, #760]	; (8001308 <printRadioSettings+0x73c>)
 8001010:	f004 fc0b 	bl	800582a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001014:	463b      	mov	r3, r7
 8001016:	2205      	movs	r2, #5
 8001018:	4619      	mov	r1, r3
 800101a:	200b      	movs	r0, #11
 800101c:	f7ff f926 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001020:	793b      	ldrb	r3, [r7, #4]
 8001022:	461c      	mov	r4, r3
 8001024:	78fb      	ldrb	r3, [r7, #3]
 8001026:	461d      	mov	r5, r3
 8001028:	78bb      	ldrb	r3, [r7, #2]
 800102a:	787a      	ldrb	r2, [r7, #1]
 800102c:	7839      	ldrb	r1, [r7, #0]
 800102e:	f107 0008 	add.w	r0, r7, #8
 8001032:	9102      	str	r1, [sp, #8]
 8001034:	9201      	str	r2, [sp, #4]
 8001036:	9300      	str	r3, [sp, #0]
 8001038:	462b      	mov	r3, r5
 800103a:	4622      	mov	r2, r4
 800103c:	49b4      	ldr	r1, [pc, #720]	; (8001310 <printRadioSettings+0x744>)
 800103e:	f004 fdef 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff f880 	bl	800014c <strlen>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	f107 0108 	add.w	r1, r7, #8
 8001054:	230a      	movs	r3, #10
 8001056:	48ac      	ldr	r0, [pc, #688]	; (8001308 <printRadioSettings+0x73c>)
 8001058:	f004 fbe7 	bl	800582a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800105c:	463b      	mov	r3, r7
 800105e:	2201      	movs	r2, #1
 8001060:	4619      	mov	r1, r3
 8001062:	200c      	movs	r0, #12
 8001064:	f7ff f902 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001068:	783b      	ldrb	r3, [r7, #0]
 800106a:	461a      	mov	r2, r3
 800106c:	f107 0308 	add.w	r3, r7, #8
 8001070:	49a8      	ldr	r1, [pc, #672]	; (8001314 <printRadioSettings+0x748>)
 8001072:	4618      	mov	r0, r3
 8001074:	f004 fdd4 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f865 	bl	800014c <strlen>
 8001082:	4603      	mov	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	f107 0108 	add.w	r1, r7, #8
 800108a:	230a      	movs	r3, #10
 800108c:	489e      	ldr	r0, [pc, #632]	; (8001308 <printRadioSettings+0x73c>)
 800108e:	f004 fbcc 	bl	800582a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001092:	463b      	mov	r3, r7
 8001094:	2201      	movs	r2, #1
 8001096:	4619      	mov	r1, r3
 8001098:	200d      	movs	r0, #13
 800109a:	f7ff f8e7 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800109e:	783b      	ldrb	r3, [r7, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	f107 0308 	add.w	r3, r7, #8
 80010a6:	499c      	ldr	r1, [pc, #624]	; (8001318 <printRadioSettings+0x74c>)
 80010a8:	4618      	mov	r0, r3
 80010aa:	f004 fdb9 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010ae:	f107 0308 	add.w	r3, r7, #8
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff f84a 	bl	800014c <strlen>
 80010b8:	4603      	mov	r3, r0
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	f107 0108 	add.w	r1, r7, #8
 80010c0:	230a      	movs	r3, #10
 80010c2:	4891      	ldr	r0, [pc, #580]	; (8001308 <printRadioSettings+0x73c>)
 80010c4:	f004 fbb1 	bl	800582a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 80010c8:	463b      	mov	r3, r7
 80010ca:	2201      	movs	r2, #1
 80010cc:	4619      	mov	r1, r3
 80010ce:	200e      	movs	r0, #14
 80010d0:	f7ff f8cc 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80010d4:	783b      	ldrb	r3, [r7, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	498f      	ldr	r1, [pc, #572]	; (800131c <printRadioSettings+0x750>)
 80010de:	4618      	mov	r0, r3
 80010e0:	f004 fd9e 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010e4:	f107 0308 	add.w	r3, r7, #8
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f82f 	bl	800014c <strlen>
 80010ee:	4603      	mov	r3, r0
 80010f0:	b29a      	uxth	r2, r3
 80010f2:	f107 0108 	add.w	r1, r7, #8
 80010f6:	230a      	movs	r3, #10
 80010f8:	4883      	ldr	r0, [pc, #524]	; (8001308 <printRadioSettings+0x73c>)
 80010fa:	f004 fb96 	bl	800582a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80010fe:	463b      	mov	r3, r7
 8001100:	2201      	movs	r2, #1
 8001102:	4619      	mov	r1, r3
 8001104:	200f      	movs	r0, #15
 8001106:	f7ff f8b1 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800110a:	783b      	ldrb	r3, [r7, #0]
 800110c:	461a      	mov	r2, r3
 800110e:	f107 0308 	add.w	r3, r7, #8
 8001112:	4983      	ldr	r1, [pc, #524]	; (8001320 <printRadioSettings+0x754>)
 8001114:	4618      	mov	r0, r3
 8001116:	f004 fd83 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800111a:	f107 0308 	add.w	r3, r7, #8
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f814 	bl	800014c <strlen>
 8001124:	4603      	mov	r3, r0
 8001126:	b29a      	uxth	r2, r3
 8001128:	f107 0108 	add.w	r1, r7, #8
 800112c:	230a      	movs	r3, #10
 800112e:	4876      	ldr	r0, [pc, #472]	; (8001308 <printRadioSettings+0x73c>)
 8001130:	f004 fb7b 	bl	800582a <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001134:	463b      	mov	r3, r7
 8001136:	2205      	movs	r2, #5
 8001138:	4619      	mov	r1, r3
 800113a:	2010      	movs	r0, #16
 800113c:	f7ff f896 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001140:	793b      	ldrb	r3, [r7, #4]
 8001142:	461c      	mov	r4, r3
 8001144:	78fb      	ldrb	r3, [r7, #3]
 8001146:	461d      	mov	r5, r3
 8001148:	78bb      	ldrb	r3, [r7, #2]
 800114a:	787a      	ldrb	r2, [r7, #1]
 800114c:	7839      	ldrb	r1, [r7, #0]
 800114e:	f107 0008 	add.w	r0, r7, #8
 8001152:	9102      	str	r1, [sp, #8]
 8001154:	9201      	str	r2, [sp, #4]
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	462b      	mov	r3, r5
 800115a:	4622      	mov	r2, r4
 800115c:	4971      	ldr	r1, [pc, #452]	; (8001324 <printRadioSettings+0x758>)
 800115e:	f004 fd5f 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001162:	f107 0308 	add.w	r3, r7, #8
 8001166:	4618      	mov	r0, r3
 8001168:	f7fe fff0 	bl	800014c <strlen>
 800116c:	4603      	mov	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	f107 0108 	add.w	r1, r7, #8
 8001174:	230a      	movs	r3, #10
 8001176:	4864      	ldr	r0, [pc, #400]	; (8001308 <printRadioSettings+0x73c>)
 8001178:	f004 fb57 	bl	800582a <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800117c:	2011      	movs	r0, #17
 800117e:	f7ff f84d 	bl	800021c <NRF24_read_register>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001188:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800118c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001190:	f107 0308 	add.w	r3, r7, #8
 8001194:	4964      	ldr	r1, [pc, #400]	; (8001328 <printRadioSettings+0x75c>)
 8001196:	4618      	mov	r0, r3
 8001198:	f004 fd42 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800119c:	f107 0308 	add.w	r3, r7, #8
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7fe ffd3 	bl	800014c <strlen>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29a      	uxth	r2, r3
 80011aa:	f107 0108 	add.w	r1, r7, #8
 80011ae:	230a      	movs	r3, #10
 80011b0:	4855      	ldr	r0, [pc, #340]	; (8001308 <printRadioSettings+0x73c>)
 80011b2:	f004 fb3a 	bl	800582a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 80011b6:	2012      	movs	r0, #18
 80011b8:	f7ff f830 	bl	800021c <NRF24_read_register>
 80011bc:	4603      	mov	r3, r0
 80011be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80011ca:	f107 0308 	add.w	r3, r7, #8
 80011ce:	4957      	ldr	r1, [pc, #348]	; (800132c <printRadioSettings+0x760>)
 80011d0:	4618      	mov	r0, r3
 80011d2:	f004 fd25 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80011d6:	f107 0308 	add.w	r3, r7, #8
 80011da:	4618      	mov	r0, r3
 80011dc:	f7fe ffb6 	bl	800014c <strlen>
 80011e0:	4603      	mov	r3, r0
 80011e2:	b29a      	uxth	r2, r3
 80011e4:	f107 0108 	add.w	r1, r7, #8
 80011e8:	230a      	movs	r3, #10
 80011ea:	4847      	ldr	r0, [pc, #284]	; (8001308 <printRadioSettings+0x73c>)
 80011ec:	f004 fb1d 	bl	800582a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80011f0:	2013      	movs	r0, #19
 80011f2:	f7ff f813 	bl	800021c <NRF24_read_register>
 80011f6:	4603      	mov	r3, r0
 80011f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80011fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001200:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001204:	f107 0308 	add.w	r3, r7, #8
 8001208:	4949      	ldr	r1, [pc, #292]	; (8001330 <printRadioSettings+0x764>)
 800120a:	4618      	mov	r0, r3
 800120c:	f004 fd08 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001210:	f107 0308 	add.w	r3, r7, #8
 8001214:	4618      	mov	r0, r3
 8001216:	f7fe ff99 	bl	800014c <strlen>
 800121a:	4603      	mov	r3, r0
 800121c:	b29a      	uxth	r2, r3
 800121e:	f107 0108 	add.w	r1, r7, #8
 8001222:	230a      	movs	r3, #10
 8001224:	4838      	ldr	r0, [pc, #224]	; (8001308 <printRadioSettings+0x73c>)
 8001226:	f004 fb00 	bl	800582a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 800122a:	2014      	movs	r0, #20
 800122c:	f7fe fff6 	bl	800021c <NRF24_read_register>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001236:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800123a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800123e:	f107 0308 	add.w	r3, r7, #8
 8001242:	493c      	ldr	r1, [pc, #240]	; (8001334 <printRadioSettings+0x768>)
 8001244:	4618      	mov	r0, r3
 8001246:	f004 fceb 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4618      	mov	r0, r3
 8001250:	f7fe ff7c 	bl	800014c <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	b29a      	uxth	r2, r3
 8001258:	f107 0108 	add.w	r1, r7, #8
 800125c:	230a      	movs	r3, #10
 800125e:	482a      	ldr	r0, [pc, #168]	; (8001308 <printRadioSettings+0x73c>)
 8001260:	f004 fae3 	bl	800582a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001264:	2015      	movs	r0, #21
 8001266:	f7fe ffd9 	bl	800021c <NRF24_read_register>
 800126a:	4603      	mov	r3, r0
 800126c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001270:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001274:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001278:	f107 0308 	add.w	r3, r7, #8
 800127c:	492e      	ldr	r1, [pc, #184]	; (8001338 <printRadioSettings+0x76c>)
 800127e:	4618      	mov	r0, r3
 8001280:	f004 fcce 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001284:	f107 0308 	add.w	r3, r7, #8
 8001288:	4618      	mov	r0, r3
 800128a:	f7fe ff5f 	bl	800014c <strlen>
 800128e:	4603      	mov	r3, r0
 8001290:	b29a      	uxth	r2, r3
 8001292:	f107 0108 	add.w	r1, r7, #8
 8001296:	230a      	movs	r3, #10
 8001298:	481b      	ldr	r0, [pc, #108]	; (8001308 <printRadioSettings+0x73c>)
 800129a:	f004 fac6 	bl	800582a <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800129e:	2016      	movs	r0, #22
 80012a0:	f7fe ffbc 	bl	800021c <NRF24_read_register>
 80012a4:	4603      	mov	r3, r0
 80012a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80012aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80012b2:	f107 0308 	add.w	r3, r7, #8
 80012b6:	4921      	ldr	r1, [pc, #132]	; (800133c <printRadioSettings+0x770>)
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 fcb1 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012be:	f107 0308 	add.w	r3, r7, #8
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7fe ff42 	bl	800014c <strlen>
 80012c8:	4603      	mov	r3, r0
 80012ca:	b29a      	uxth	r2, r3
 80012cc:	f107 0108 	add.w	r1, r7, #8
 80012d0:	230a      	movs	r3, #10
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <printRadioSettings+0x73c>)
 80012d4:	f004 faa9 	bl	800582a <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80012d8:	201c      	movs	r0, #28
 80012da:	f7fe ff9f 	bl	800021c <NRF24_read_register>
 80012de:	4603      	mov	r3, r0
 80012e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012e8:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	bfcc      	ite	gt
 80012f0:	2301      	movgt	r3, #1
 80012f2:	2300      	movle	r3, #0
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80012f8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	e01e      	b.n	8001340 <printRadioSettings+0x774>
 8001302:	bf00      	nop
 8001304:	080065f4 	.word	0x080065f4
 8001308:	200000fc 	.word	0x200000fc
 800130c:	08006608 	.word	0x08006608
 8001310:	08006638 	.word	0x08006638
 8001314:	08006668 	.word	0x08006668
 8001318:	08006690 	.word	0x08006690
 800131c:	080066b8 	.word	0x080066b8
 8001320:	080066e0 	.word	0x080066e0
 8001324:	08006708 	.word	0x08006708
 8001328:	08006734 	.word	0x08006734
 800132c:	08006750 	.word	0x08006750
 8001330:	0800676c 	.word	0x0800676c
 8001334:	08006788 	.word	0x08006788
 8001338:	080067a4 	.word	0x080067a4
 800133c:	080067c0 	.word	0x080067c0
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001340:	2b00      	cmp	r3, #0
 8001342:	bfcc      	ite	gt
 8001344:	2301      	movgt	r3, #1
 8001346:	2300      	movle	r3, #0
 8001348:	b2db      	uxtb	r3, r3
 800134a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800134c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001350:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001354:	2b00      	cmp	r3, #0
 8001356:	bfcc      	ite	gt
 8001358:	2301      	movgt	r3, #1
 800135a:	2300      	movle	r3, #0
 800135c:	b2db      	uxtb	r3, r3
 800135e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001360:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001364:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001368:	2b00      	cmp	r3, #0
 800136a:	bfcc      	ite	gt
 800136c:	2301      	movgt	r3, #1
 800136e:	2300      	movle	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001374:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001378:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800137c:	2b00      	cmp	r3, #0
 800137e:	bfcc      	ite	gt
 8001380:	2301      	movgt	r3, #1
 8001382:	2300      	movle	r3, #0
 8001384:	b2db      	uxtb	r3, r3
 8001386:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001388:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800138c:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001390:	2b00      	cmp	r3, #0
 8001392:	bfcc      	ite	gt
 8001394:	2301      	movgt	r3, #1
 8001396:	2300      	movle	r3, #0
 8001398:	b2db      	uxtb	r3, r3
 800139a:	f107 0008 	add.w	r0, r7, #8
 800139e:	9303      	str	r3, [sp, #12]
 80013a0:	9402      	str	r4, [sp, #8]
 80013a2:	9101      	str	r1, [sp, #4]
 80013a4:	9200      	str	r2, [sp, #0]
 80013a6:	4633      	mov	r3, r6
 80013a8:	462a      	mov	r2, r5
 80013aa:	494a      	ldr	r1, [pc, #296]	; (80014d4 <printRadioSettings+0x908>)
 80013ac:	f004 fc38 	bl	8005c20 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80013b0:	f107 0308 	add.w	r3, r7, #8
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7fe fec9 	bl	800014c <strlen>
 80013ba:	4603      	mov	r3, r0
 80013bc:	b29a      	uxth	r2, r3
 80013be:	f107 0108 	add.w	r1, r7, #8
 80013c2:	230a      	movs	r3, #10
 80013c4:	4844      	ldr	r0, [pc, #272]	; (80014d8 <printRadioSettings+0x90c>)
 80013c6:	f004 fa30 	bl	800582a <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80013ca:	201d      	movs	r0, #29
 80013cc:	f7fe ff26 	bl	800021c <NRF24_read_register>
 80013d0:	4603      	mov	r3, r0
 80013d2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80013d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d00c      	beq.n	80013fc <printRadioSettings+0x830>
 80013e2:	f107 0308 	add.w	r3, r7, #8
 80013e6:	4a3d      	ldr	r2, [pc, #244]	; (80014dc <printRadioSettings+0x910>)
 80013e8:	461c      	mov	r4, r3
 80013ea:	4615      	mov	r5, r2
 80013ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013f0:	e895 0003 	ldmia.w	r5, {r0, r1}
 80013f4:	6020      	str	r0, [r4, #0]
 80013f6:	3404      	adds	r4, #4
 80013f8:	8021      	strh	r1, [r4, #0]
 80013fa:	e00e      	b.n	800141a <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80013fc:	f107 0308 	add.w	r3, r7, #8
 8001400:	4a37      	ldr	r2, [pc, #220]	; (80014e0 <printRadioSettings+0x914>)
 8001402:	461c      	mov	r4, r3
 8001404:	4615      	mov	r5, r2
 8001406:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001408:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800140a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800140e:	6020      	str	r0, [r4, #0]
 8001410:	3404      	adds	r4, #4
 8001412:	8021      	strh	r1, [r4, #0]
 8001414:	3402      	adds	r4, #2
 8001416:	0c0b      	lsrs	r3, r1, #16
 8001418:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800141a:	f107 0308 	add.w	r3, r7, #8
 800141e:	4618      	mov	r0, r3
 8001420:	f7fe fe94 	bl	800014c <strlen>
 8001424:	4603      	mov	r3, r0
 8001426:	b29a      	uxth	r2, r3
 8001428:	f107 0108 	add.w	r1, r7, #8
 800142c:	230a      	movs	r3, #10
 800142e:	482a      	ldr	r0, [pc, #168]	; (80014d8 <printRadioSettings+0x90c>)
 8001430:	f004 f9fb 	bl	800582a <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001434:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00b      	beq.n	8001458 <printRadioSettings+0x88c>
 8001440:	f107 0308 	add.w	r3, r7, #8
 8001444:	4a27      	ldr	r2, [pc, #156]	; (80014e4 <printRadioSettings+0x918>)
 8001446:	461c      	mov	r4, r3
 8001448:	4615      	mov	r5, r2
 800144a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800144c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800144e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001452:	c403      	stmia	r4!, {r0, r1}
 8001454:	8022      	strh	r2, [r4, #0]
 8001456:	e00d      	b.n	8001474 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	4a22      	ldr	r2, [pc, #136]	; (80014e8 <printRadioSettings+0x91c>)
 800145e:	461c      	mov	r4, r3
 8001460:	4615      	mov	r5, r2
 8001462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001466:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800146a:	c403      	stmia	r4!, {r0, r1}
 800146c:	8022      	strh	r2, [r4, #0]
 800146e:	3402      	adds	r4, #2
 8001470:	0c13      	lsrs	r3, r2, #16
 8001472:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001474:	f107 0308 	add.w	r3, r7, #8
 8001478:	4618      	mov	r0, r3
 800147a:	f7fe fe67 	bl	800014c <strlen>
 800147e:	4603      	mov	r3, r0
 8001480:	b29a      	uxth	r2, r3
 8001482:	f107 0108 	add.w	r1, r7, #8
 8001486:	230a      	movs	r3, #10
 8001488:	4813      	ldr	r0, [pc, #76]	; (80014d8 <printRadioSettings+0x90c>)
 800148a:	f004 f9ce 	bl	800582a <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800148e:	f107 0308 	add.w	r3, r7, #8
 8001492:	4a16      	ldr	r2, [pc, #88]	; (80014ec <printRadioSettings+0x920>)
 8001494:	461c      	mov	r4, r3
 8001496:	4615      	mov	r5, r2
 8001498:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800149c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800149e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a4:	682b      	ldr	r3, [r5, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	8022      	strh	r2, [r4, #0]
 80014aa:	3402      	adds	r4, #2
 80014ac:	0c1b      	lsrs	r3, r3, #16
 80014ae:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7fe fe49 	bl	800014c <strlen>
 80014ba:	4603      	mov	r3, r0
 80014bc:	b29a      	uxth	r2, r3
 80014be:	f107 0108 	add.w	r1, r7, #8
 80014c2:	230a      	movs	r3, #10
 80014c4:	4804      	ldr	r0, [pc, #16]	; (80014d8 <printRadioSettings+0x90c>)
 80014c6:	f004 f9b0 	bl	800582a <HAL_UART_Transmit>
}
 80014ca:	bf00      	nop
 80014cc:	3774      	adds	r7, #116	; 0x74
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	080067dc 	.word	0x080067dc
 80014d8:	200000fc 	.word	0x200000fc
 80014dc:	08006828 	.word	0x08006828
 80014e0:	08006840 	.word	0x08006840
 80014e4:	08006858 	.word	0x08006858
 80014e8:	08006874 	.word	0x08006874
 80014ec:	08006448 	.word	0x08006448

080014f0 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 80014f8:	2254      	movs	r2, #84	; 0x54
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <MPU6050_Init+0x1c>)
 80014fe:	f004 fb7b 	bl	8005bf8 <memcpy>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000013c 	.word	0x2000013c

08001510 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af02      	add	r7, sp, #8
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	71fb      	strb	r3, [r7, #7]
 800151c:	4613      	mov	r3, r2
 800151e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001520:	23d0      	movs	r3, #208	; 0xd0
 8001522:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	b299      	uxth	r1, r3
 800152c:	f107 020c 	add.w	r2, r7, #12
 8001530:	230a      	movs	r3, #10
 8001532:	9300      	str	r3, [sp, #0]
 8001534:	2301      	movs	r3, #1
 8001536:	4809      	ldr	r0, [pc, #36]	; (800155c <I2C_Read+0x4c>)
 8001538:	f001 fd94 	bl	8003064 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 800153c:	7bfb      	ldrb	r3, [r7, #15]
 800153e:	b299      	uxth	r1, r3
 8001540:	79bb      	ldrb	r3, [r7, #6]
 8001542:	b29a      	uxth	r2, r3
 8001544:	2364      	movs	r3, #100	; 0x64
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	4613      	mov	r3, r2
 800154a:	683a      	ldr	r2, [r7, #0]
 800154c:	4803      	ldr	r0, [pc, #12]	; (800155c <I2C_Read+0x4c>)
 800154e:	f001 fe87 	bl	8003260 <HAL_I2C_Master_Receive>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	2000013c 	.word	0x2000013c

08001560 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	460a      	mov	r2, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001578:	23d0      	movs	r3, #208	; 0xd0
 800157a:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	b299      	uxth	r1, r3
 8001580:	f107 020c 	add.w	r2, r7, #12
 8001584:	2364      	movs	r3, #100	; 0x64
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	2302      	movs	r3, #2
 800158a:	4803      	ldr	r0, [pc, #12]	; (8001598 <I2C_Write8+0x38>)
 800158c:	f001 fd6a 	bl	8003064 <HAL_I2C_Master_Transmit>
}
 8001590:	bf00      	nop
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	2000013c 	.word	0x2000013c

0800159c <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 80015a8:	2180      	movs	r1, #128	; 0x80
 80015aa:	206b      	movs	r0, #107	; 0x6b
 80015ac:	f7ff ffd8 	bl	8001560 <I2C_Write8>
	HAL_Delay(100);
 80015b0:	2064      	movs	r0, #100	; 0x64
 80015b2:	f000 ff95 	bl	80024e0 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	791b      	ldrb	r3, [r3, #4]
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	b25b      	sxtb	r3, r3
 80015c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015cc:	b25a      	sxtb	r2, r3
 80015ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b25b      	sxtb	r3, r3
 80015d6:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
 80015da:	4619      	mov	r1, r3
 80015dc:	206b      	movs	r0, #107	; 0x6b
 80015de:	f7ff ffbf 	bl	8001560 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80015e2:	2064      	movs	r0, #100	; 0x64
 80015e4:	f000 ff7c 	bl	80024e0 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	78db      	ldrb	r3, [r3, #3]
 80015f0:	f003 0307 	and.w	r3, r3, #7
 80015f4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	4619      	mov	r1, r3
 80015fa:	201a      	movs	r0, #26
 80015fc:	f7ff ffb0 	bl	8001560 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	785b      	ldrb	r3, [r3, #1]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f003 0318 	and.w	r3, r3, #24
 8001610:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	4619      	mov	r1, r3
 8001616:	201b      	movs	r0, #27
 8001618:	f7ff ffa2 	bl	8001560 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 800161c:	2300      	movs	r3, #0
 800161e:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	789b      	ldrb	r3, [r3, #2]
 8001624:	00db      	lsls	r3, r3, #3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	f003 0318 	and.w	r3, r3, #24
 800162c:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 800162e:	7bfb      	ldrb	r3, [r7, #15]
 8001630:	4619      	mov	r1, r3
 8001632:	201c      	movs	r0, #28
 8001634:	f7ff ff94 	bl	8001560 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001638:	2004      	movs	r0, #4
 800163a:	f000 f857 	bl	80016ec <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	789b      	ldrb	r3, [r3, #2]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d81a      	bhi.n	800167c <MPU6050_Config+0xe0>
 8001646:	a201      	add	r2, pc, #4	; (adr r2, 800164c <MPU6050_Config+0xb0>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	0800165d 	.word	0x0800165d
 8001650:	08001665 	.word	0x08001665
 8001654:	0800166d 	.word	0x0800166d
 8001658:	08001675 	.word	0x08001675
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 800165c:	4b1a      	ldr	r3, [pc, #104]	; (80016c8 <MPU6050_Config+0x12c>)
 800165e:	4a1b      	ldr	r2, [pc, #108]	; (80016cc <MPU6050_Config+0x130>)
 8001660:	601a      	str	r2, [r3, #0]
			break;
 8001662:	e00c      	b.n	800167e <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001664:	4b18      	ldr	r3, [pc, #96]	; (80016c8 <MPU6050_Config+0x12c>)
 8001666:	4a1a      	ldr	r2, [pc, #104]	; (80016d0 <MPU6050_Config+0x134>)
 8001668:	601a      	str	r2, [r3, #0]
				break;
 800166a:	e008      	b.n	800167e <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 800166c:	4b16      	ldr	r3, [pc, #88]	; (80016c8 <MPU6050_Config+0x12c>)
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <MPU6050_Config+0x138>)
 8001670:	601a      	str	r2, [r3, #0]
			break;
 8001672:	e004      	b.n	800167e <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001674:	4b14      	ldr	r3, [pc, #80]	; (80016c8 <MPU6050_Config+0x12c>)
 8001676:	4a18      	ldr	r2, [pc, #96]	; (80016d8 <MPU6050_Config+0x13c>)
 8001678:	601a      	str	r2, [r3, #0]
			break;
 800167a:	e000      	b.n	800167e <MPU6050_Config+0xe2>
		
		default:
			break;
 800167c:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	785b      	ldrb	r3, [r3, #1]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d81a      	bhi.n	80016bc <MPU6050_Config+0x120>
 8001686:	a201      	add	r2, pc, #4	; (adr r2, 800168c <MPU6050_Config+0xf0>)
 8001688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800168c:	0800169d 	.word	0x0800169d
 8001690:	080016a5 	.word	0x080016a5
 8001694:	080016ad 	.word	0x080016ad
 8001698:	080016b5 	.word	0x080016b5
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MPU6050_Config+0x140>)
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <MPU6050_Config+0x144>)
 80016a0:	601a      	str	r2, [r3, #0]
			break;
 80016a2:	e00c      	b.n	80016be <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 80016a4:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <MPU6050_Config+0x140>)
 80016a6:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <MPU6050_Config+0x148>)
 80016a8:	601a      	str	r2, [r3, #0]
				break;
 80016aa:	e008      	b.n	80016be <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 80016ac:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MPU6050_Config+0x140>)
 80016ae:	4a0e      	ldr	r2, [pc, #56]	; (80016e8 <MPU6050_Config+0x14c>)
 80016b0:	601a      	str	r2, [r3, #0]
			break;
 80016b2:	e004      	b.n	80016be <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MPU6050_Config+0x140>)
 80016b6:	4a05      	ldr	r2, [pc, #20]	; (80016cc <MPU6050_Config+0x130>)
 80016b8:	601a      	str	r2, [r3, #0]
			break;
 80016ba:	e000      	b.n	80016be <MPU6050_Config+0x122>
		
		default:
			break;
 80016bc:	bf00      	nop
	}
	
}
 80016be:	bf00      	nop
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	20000190 	.word	0x20000190
 80016cc:	3d7a0000 	.word	0x3d7a0000
 80016d0:	3dfa0000 	.word	0x3dfa0000
 80016d4:	3e7a0000 	.word	0x3e7a0000
 80016d8:	3efa0000 	.word	0x3efa0000
 80016dc:	20000194 	.word	0x20000194
 80016e0:	3bfa0000 	.word	0x3bfa0000
 80016e4:	3c7a0000 	.word	0x3c7a0000
 80016e8:	3cfa0000 	.word	0x3cfa0000

080016ec <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	4619      	mov	r1, r3
 80016fa:	2019      	movs	r0, #25
 80016fc:	f7ff ff30 	bl	8001560 <I2C_Write8>
}
 8001700:	bf00      	nop
 8001702:	3708      	adds	r7, #8
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	//i2cBuf[1] = 0;

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001710:	f107 031c 	add.w	r3, r7, #28
 8001714:	3301      	adds	r3, #1
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	203a      	movs	r0, #58	; 0x3a
 800171c:	f7ff fef8 	bl	8001510 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001720:	7f7b      	ldrb	r3, [r7, #29]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d04f      	beq.n	80017c6 <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	2206      	movs	r2, #6
 800172c:	4619      	mov	r1, r3
 800172e:	203b      	movs	r0, #59	; 0x3b
 8001730:	f7ff feee 	bl	8001510 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001734:	7d3b      	ldrb	r3, [r7, #20]
 8001736:	b29b      	uxth	r3, r3
 8001738:	021b      	lsls	r3, r3, #8
 800173a:	b29a      	uxth	r2, r3
 800173c:	7d7b      	ldrb	r3, [r7, #21]
 800173e:	b29b      	uxth	r3, r3
 8001740:	4413      	add	r3, r2
 8001742:	b29b      	uxth	r3, r3
 8001744:	b21a      	sxth	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 800174a:	7dbb      	ldrb	r3, [r7, #22]
 800174c:	b29b      	uxth	r3, r3
 800174e:	021b      	lsls	r3, r3, #8
 8001750:	b29a      	uxth	r2, r3
 8001752:	7dfb      	ldrb	r3, [r7, #23]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4413      	add	r3, r2
 8001758:	b29b      	uxth	r3, r3
 800175a:	b21a      	sxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8001760:	7e3b      	ldrb	r3, [r7, #24]
 8001762:	b29b      	uxth	r3, r3
 8001764:	021b      	lsls	r3, r3, #8
 8001766:	b29a      	uxth	r2, r3
 8001768:	7e7b      	ldrb	r3, [r7, #25]
 800176a:	b29b      	uxth	r3, r3
 800176c:	4413      	add	r3, r2
 800176e:	b29b      	uxth	r3, r3
 8001770:	b21a      	sxth	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 8001776:	f107 030c 	add.w	r3, r7, #12
 800177a:	2206      	movs	r2, #6
 800177c:	4619      	mov	r1, r3
 800177e:	2043      	movs	r0, #67	; 0x43
 8001780:	f7ff fec6 	bl	8001510 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 8001784:	7b3b      	ldrb	r3, [r7, #12]
 8001786:	b29b      	uxth	r3, r3
 8001788:	021b      	lsls	r3, r3, #8
 800178a:	b29a      	uxth	r2, r3
 800178c:	7b7b      	ldrb	r3, [r7, #13]
 800178e:	b29b      	uxth	r3, r3
 8001790:	4413      	add	r3, r2
 8001792:	b29b      	uxth	r3, r3
 8001794:	b21a      	sxth	r2, r3
 8001796:	4b0e      	ldr	r3, [pc, #56]	; (80017d0 <MPU6050_Get_Accel_RawData+0xc8>)
 8001798:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 800179a:	7bbb      	ldrb	r3, [r7, #14]
 800179c:	b29b      	uxth	r3, r3
 800179e:	021b      	lsls	r3, r3, #8
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	4413      	add	r3, r2
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	b21a      	sxth	r2, r3
 80017ac:	4b08      	ldr	r3, [pc, #32]	; (80017d0 <MPU6050_Get_Accel_RawData+0xc8>)
 80017ae:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 80017b0:	7c3b      	ldrb	r3, [r7, #16]
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	021b      	lsls	r3, r3, #8
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	7c7b      	ldrb	r3, [r7, #17]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	4413      	add	r3, r2
 80017be:	b29b      	uxth	r3, r3
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <MPU6050_Get_Accel_RawData+0xc8>)
 80017c4:	809a      	strh	r2, [r3, #4]
			GyroRW[0] = 9;
			GyroRW[1] = 9;
			GyroRW[2] = 9;
			*/
	}
}
 80017c6:	bf00      	nop
 80017c8:	3720      	adds	r7, #32
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	20000198 	.word	0x20000198

080017d4 <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MPU6050_Get_Gyro_RawData+0x30>)
 80017de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <MPU6050_Get_Gyro_RawData+0x30>)
 80017e8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 80017f0:	4b04      	ldr	r3, [pc, #16]	; (8001804 <MPU6050_Get_Gyro_RawData+0x30>)
 80017f2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	809a      	strh	r2, [r3, #4]
	
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20000198 	.word	0x20000198

08001808 <MotorSetValue>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint64_t PipeAddres = 0x11223344AA;

void MotorSetValue(int16_t Left, int16_t Right)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	460a      	mov	r2, r1
 8001812:	80fb      	strh	r3, [r7, #6]
 8001814:	4613      	mov	r3, r2
 8001816:	80bb      	strh	r3, [r7, #4]
	if (Left > 0) {
 8001818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800181c:	2b00      	cmp	r3, #0
 800181e:	dd0a      	ble.n	8001836 <MotorSetValue+0x2e>
		SetPwm(Left, 1);
 8001820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001824:	2101      	movs	r1, #1
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f82e 	bl	8001888 <SetPwm>
		SetPwm(0, 2);
 800182c:	2102      	movs	r1, #2
 800182e:	2000      	movs	r0, #0
 8001830:	f000 f82a 	bl	8001888 <SetPwm>
 8001834:	e00a      	b.n	800184c <MotorSetValue+0x44>
	} else {
		SetPwm(0, 1);
 8001836:	2101      	movs	r1, #1
 8001838:	2000      	movs	r0, #0
 800183a:	f000 f825 	bl	8001888 <SetPwm>
		SetPwm(-1 * Left, 2);
 800183e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001842:	425b      	negs	r3, r3
 8001844:	2102      	movs	r1, #2
 8001846:	4618      	mov	r0, r3
 8001848:	f000 f81e 	bl	8001888 <SetPwm>
	}
	if (Right > 0) {
 800184c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	dd0a      	ble.n	800186a <MotorSetValue+0x62>
		SetPwm(Right, 4);
 8001854:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001858:	2104      	movs	r1, #4
 800185a:	4618      	mov	r0, r3
 800185c:	f000 f814 	bl	8001888 <SetPwm>
		SetPwm(0, 3);
 8001860:	2103      	movs	r1, #3
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f810 	bl	8001888 <SetPwm>
		SetPwm(0, 4);
		SetPwm(-1 * Right, 3);
	}


}
 8001868:	e00a      	b.n	8001880 <MotorSetValue+0x78>
		SetPwm(0, 4);
 800186a:	2104      	movs	r1, #4
 800186c:	2000      	movs	r0, #0
 800186e:	f000 f80b 	bl	8001888 <SetPwm>
		SetPwm(-1 * Right, 3);
 8001872:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001876:	425b      	negs	r3, r3
 8001878:	2103      	movs	r1, #3
 800187a:	4618      	mov	r0, r3
 800187c:	f000 f804 	bl	8001888 <SetPwm>
}
 8001880:	bf00      	nop
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}

08001888 <SetPwm>:

void SetPwm(uint16_t Value, uint16_t Channel) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	80fb      	strh	r3, [r7, #6]
 8001894:	4613      	mov	r3, r2
 8001896:	80bb      	strh	r3, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001898:	2360      	movs	r3, #96	; 0x60
 800189a:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = Value;
 800189c:	88fb      	ldrh	r3, [r7, #6]
 800189e:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a0:	2300      	movs	r3, #0
 80018a2:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]

    switch(Channel) {
 80018a8:	88bb      	ldrh	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	2b03      	cmp	r3, #3
 80018ae:	d83b      	bhi.n	8001928 <SetPwm+0xa0>
 80018b0:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <SetPwm+0x30>)
 80018b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b6:	bf00      	nop
 80018b8:	080018c9 	.word	0x080018c9
 80018bc:	080018e1 	.word	0x080018e1
 80018c0:	080018f9 	.word	0x080018f9
 80018c4:	08001911 	.word	0x08001911
    case 1: {
    	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	2200      	movs	r2, #0
 80018ce:	4619      	mov	r1, r3
 80018d0:	4818      	ldr	r0, [pc, #96]	; (8001934 <SetPwm+0xac>)
 80018d2:	f003 fc45 	bl	8005160 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80018d6:	2100      	movs	r1, #0
 80018d8:	4816      	ldr	r0, [pc, #88]	; (8001934 <SetPwm+0xac>)
 80018da:	f003 fc0f 	bl	80050fc <HAL_TIM_PWM_Start>
		break;
 80018de:	e024      	b.n	800192a <SetPwm+0xa2>
    }
    case 2: {
		HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 80018e0:	f107 030c 	add.w	r3, r7, #12
 80018e4:	2204      	movs	r2, #4
 80018e6:	4619      	mov	r1, r3
 80018e8:	4812      	ldr	r0, [pc, #72]	; (8001934 <SetPwm+0xac>)
 80018ea:	f003 fc39 	bl	8005160 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80018ee:	2104      	movs	r1, #4
 80018f0:	4810      	ldr	r0, [pc, #64]	; (8001934 <SetPwm+0xac>)
 80018f2:	f003 fc03 	bl	80050fc <HAL_TIM_PWM_Start>
		break;
 80018f6:	e018      	b.n	800192a <SetPwm+0xa2>
	}
    case 3: {
		HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 80018f8:	f107 030c 	add.w	r3, r7, #12
 80018fc:	2208      	movs	r2, #8
 80018fe:	4619      	mov	r1, r3
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <SetPwm+0xac>)
 8001902:	f003 fc2d 	bl	8005160 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001906:	2108      	movs	r1, #8
 8001908:	480a      	ldr	r0, [pc, #40]	; (8001934 <SetPwm+0xac>)
 800190a:	f003 fbf7 	bl	80050fc <HAL_TIM_PWM_Start>
		break;
 800190e:	e00c      	b.n	800192a <SetPwm+0xa2>
	}
    case 4: {
		HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4);
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	220c      	movs	r2, #12
 8001916:	4619      	mov	r1, r3
 8001918:	4806      	ldr	r0, [pc, #24]	; (8001934 <SetPwm+0xac>)
 800191a:	f003 fc21 	bl	8005160 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800191e:	210c      	movs	r1, #12
 8001920:	4804      	ldr	r0, [pc, #16]	; (8001934 <SetPwm+0xac>)
 8001922:	f003 fbeb 	bl	80050fc <HAL_TIM_PWM_Start>
		break;
 8001926:	e000      	b.n	800192a <SetPwm+0xa2>
	}
    default : {
    	// Blad XDD
    	break;
 8001928:	bf00      	nop
    }
    }

}
 800192a:	bf00      	nop
 800192c:	3728      	adds	r7, #40	; 0x28
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200001ac 	.word	0x200001ac

08001938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001938:	b590      	push	{r4, r7, lr}
 800193a:	b0b5      	sub	sp, #212	; 0xd4
 800193c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE BEGIN 1 */

	MPU_ConfigTypeDef MpuConfig;
	RawData_Def AccelData, GyroData;
	ScaledData_Def AccelScaled, GyroScaled;
	char Msg[32] = "HI";
 800193e:	f644 1348 	movw	r3, #18760	; 0x4948
 8001942:	623b      	str	r3, [r7, #32]
 8001944:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
 8001954:	615a      	str	r2, [r3, #20]
 8001956:	619a      	str	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001958:	f000 fd60 	bl	800241c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800195c:	f000 f904 	bl	8001b68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001960:	f000 faa4 	bl	8001eac <MX_GPIO_Init>
  MX_ADC1_Init();
 8001964:	f000 f95c 	bl	8001c20 <MX_ADC1_Init>
  MX_I2C2_Init();
 8001968:	f000 f998 	bl	8001c9c <MX_I2C2_Init>
  MX_SPI1_Init();
 800196c:	f000 f9c4 	bl	8001cf8 <MX_SPI1_Init>
  MX_TIM4_Init();
 8001970:	f000 f9f8 	bl	8001d64 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001974:	f000 fa70 	bl	8001e58 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8001978:	4c75      	ldr	r4, [pc, #468]	; (8001b50 <main+0x218>)
 800197a:	4668      	mov	r0, sp
 800197c:	1d23      	adds	r3, r4, #4
 800197e:	2254      	movs	r2, #84	; 0x54
 8001980:	4619      	mov	r1, r3
 8001982:	f004 f939 	bl	8005bf8 <memcpy>
 8001986:	6823      	ldr	r3, [r4, #0]
 8001988:	2202      	movs	r2, #2
 800198a:	2101      	movs	r1, #1
 800198c:	4871      	ldr	r0, [pc, #452]	; (8001b54 <main+0x21c>)
 800198e:	f7fe fd4f 	bl	8000430 <NRF24_begin>

  NRF24_stopListening();
 8001992:	f7fe fe2d 	bl	80005f0 <NRF24_stopListening>
  NRF24_openWritingPipe(PipeAddres);
 8001996:	4b70      	ldr	r3, [pc, #448]	; (8001b58 <main+0x220>)
 8001998:	cb18      	ldmia	r3, {r3, r4}
 800199a:	4618      	mov	r0, r3
 800199c:	4621      	mov	r1, r4
 800199e:	f7fe fea7 	bl	80006f0 <NRF24_openWritingPipe>
  NRF24_setAutoAck(true);
 80019a2:	2001      	movs	r0, #1
 80019a4:	f7fe ff98 	bl	80008d8 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80019a8:	2034      	movs	r0, #52	; 0x34
 80019aa:	f7fe fee0 	bl	800076e <NRF24_setChannel>
  NRF24_setPayloadSize(13);
 80019ae:	200d      	movs	r0, #13
 80019b0:	f7fe fef2 	bl	8000798 <NRF24_setPayloadSize>

  NRF24_enableDynamicPayloads();
 80019b4:	f7fe ff46 	bl	8000844 <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 80019b8:	f7fe ff16 	bl	80007e8 <NRF24_enableAckPayload>

  __HAL_RCC_I2C2_FORCE_RESET();
 80019bc:	4b67      	ldr	r3, [pc, #412]	; (8001b5c <main+0x224>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	4a66      	ldr	r2, [pc, #408]	; (8001b5c <main+0x224>)
 80019c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019c6:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 80019c8:	4b64      	ldr	r3, [pc, #400]	; (8001b5c <main+0x224>)
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	4a63      	ldr	r2, [pc, #396]	; (8001b5c <main+0x224>)
 80019ce:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019d2:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 80019d4:	f000 f962 	bl	8001c9c <MX_I2C2_Init>
  __HAL_RCC_I2C2_FORCE_RESET();
 80019d8:	4b60      	ldr	r3, [pc, #384]	; (8001b5c <main+0x224>)
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	4a5f      	ldr	r2, [pc, #380]	; (8001b5c <main+0x224>)
 80019de:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019e2:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 80019e4:	4b5d      	ldr	r3, [pc, #372]	; (8001b5c <main+0x224>)
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	4a5c      	ldr	r2, [pc, #368]	; (8001b5c <main+0x224>)
 80019ea:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80019ee:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 80019f0:	f000 f954 	bl	8001c9c <MX_I2C2_Init>

  MPU6050_Init(&hi2c2);
 80019f4:	485a      	ldr	r0, [pc, #360]	; (8001b60 <main+0x228>)
 80019f6:	f7ff fd7b 	bl	80014f0 <MPU6050_Init>

  MpuConfig.Accel_Full_Scale = AFS_SEL_8g;
 80019fa:	2302      	movs	r3, #2
 80019fc:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
  MpuConfig.ClockSource = Internal_8MHz;
 8001a00:	2300      	movs	r3, #0
 8001a02:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
  MpuConfig.CONFIG_DLPF = DLPF_260A_256G_Hz;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
  MpuConfig.Gyro_Full_Scale = FS_SEL_1000;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
  MpuConfig.Sleep_Mode_Bit = 0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  MPU6050_Config(&MpuConfig);
 8001a18:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fdbd 	bl	800159c <MPU6050_Config>
	  //MX_I2C2_Init();
	  //__HAL_RCC_I2C2_FORCE_RESET();
	  //__HAL_RCC_I2C2_RELEASE_RESET();
	  //MX_I2C2_Init();

	  MPU6050_Get_Accel_RawData(&AccelData);	// Najpier trzeba akcelerometr
 8001a22:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fe6e 	bl	8001708 <MPU6050_Get_Accel_RawData>
	  MPU6050_Get_Gyro_RawData(&GyroData);		// Potem zyroskop
 8001a2c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff fecf 	bl	80017d4 <MPU6050_Get_Gyro_RawData>

	  Msg[0] = FUNC_ACCEL_GYRO_DATA;
 8001a36:	2380      	movs	r3, #128	; 0x80
 8001a38:	f887 3020 	strb.w	r3, [r7, #32]
	  Msg[1] = AccelData.x;
 8001a3c:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	  Msg[2] = AccelData.x >> 8;
 8001a46:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001a4a:	121b      	asrs	r3, r3, #8
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	  Msg[3] = AccelData.y;
 8001a54:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	  Msg[4] = AccelData.y >> 8;
 8001a5e:	f9b7 3062 	ldrsh.w	r3, [r7, #98]	; 0x62
 8001a62:	121b      	asrs	r3, r3, #8
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	  Msg[5] = AccelData.z;
 8001a6c:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	  Msg[6] = AccelData.z >> 8;
 8001a76:	f9b7 3064 	ldrsh.w	r3, [r7, #100]	; 0x64
 8001a7a:	121b      	asrs	r3, r3, #8
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	  Msg[7] = GyroData.x;
 8001a84:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	  Msg[8] = GyroData.x >> 8;
 8001a8e:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001a92:	121b      	asrs	r3, r3, #8
 8001a94:	b21b      	sxth	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	  Msg[9] = GyroData.y;
 8001a9c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	  Msg[10] = GyroData.y >> 8;
 8001aa6:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8001aaa:	121b      	asrs	r3, r3, #8
 8001aac:	b21b      	sxth	r3, r3
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	  Msg[11] = GyroData.z;
 8001ab4:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	  Msg[12] = GyroData.z >> 8;
 8001abe:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001ac2:	121b      	asrs	r3, r3, #8
 8001ac4:	b21b      	sxth	r3, r3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	  if (NRF24_write(Msg, 13))
 8001acc:	f107 0320 	add.w	r3, r7, #32
 8001ad0:	210d      	movs	r1, #13
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7fe fd98 	bl	8000608 <NRF24_write>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d004      	beq.n	8001ae8 <main+0x1b0>
	  {
		  //HAL_Delay(1);
		  NRF24_read(RF_RxData, 16);
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2110      	movs	r1, #16
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f7fe fde4 	bl	80006b0 <NRF24_read>

	  }

	  HAL_Delay(1);
 8001ae8:	2001      	movs	r0, #1
 8001aea:	f000 fcf9 	bl	80024e0 <HAL_Delay>
	  if (RF_RxData[0] == FUNC_JOYSTICK_DATA) {
 8001aee:	783b      	ldrb	r3, [r7, #0]
 8001af0:	2b81      	cmp	r3, #129	; 0x81
 8001af2:	d196      	bne.n	8001a22 <main+0xea>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8001af4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001af8:	481a      	ldr	r0, [pc, #104]	; (8001b64 <main+0x22c>)
 8001afa:	f001 f973 	bl	8002de4 <HAL_GPIO_TogglePin>
		  int16_t Forward = (unsigned char)RF_RxData[1] | (((uint16_t)RF_RxData[2]) << 8);
 8001afe:	787b      	ldrb	r3, [r7, #1]
 8001b00:	b21a      	sxth	r2, r3
 8001b02:	78bb      	ldrb	r3, [r7, #2]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	b21b      	sxth	r3, r3
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
		  int16_t Direction = (unsigned char)RF_RxData[3] | (((uint16_t)RF_RxData[4]) << 8);
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	b21a      	sxth	r2, r3
 8001b12:	793b      	ldrb	r3, [r7, #4]
 8001b14:	021b      	lsls	r3, r3, #8
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		  int16_t Left = Forward + Direction;
 8001b1e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001b22:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001b26:	4413      	add	r3, r2
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
		  int16_t Right = Forward - Direction;
 8001b2e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8001b32:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

		  MotorSetValue(Left, Right);
 8001b3e:	f9b7 2070 	ldrsh.w	r2, [r7, #112]	; 0x70
 8001b42:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 8001b46:	4611      	mov	r1, r2
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7ff fe5d 	bl	8001808 <MotorSetValue>
	  MPU6050_Get_Accel_RawData(&AccelData);	// Najpier trzeba akcelerometr
 8001b4e:	e768      	b.n	8001a22 <main+0xea>
 8001b50:	200002b0 	.word	0x200002b0
 8001b54:	40010c00 	.word	0x40010c00
 8001b58:	20000000 	.word	0x20000000
 8001b5c:	40021000 	.word	0x40021000
 8001b60:	200001ec 	.word	0x200001ec
 8001b64:	40011000 	.word	0x40011000

08001b68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b094      	sub	sp, #80	; 0x50
 8001b6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b72:	2228      	movs	r2, #40	; 0x28
 8001b74:	2100      	movs	r1, #0
 8001b76:	4618      	mov	r0, r3
 8001b78:	f004 f849 	bl	8005c0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b8c:	1d3b      	adds	r3, r7, #4
 8001b8e:	2200      	movs	r2, #0
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	605a      	str	r2, [r3, #4]
 8001b94:	609a      	str	r2, [r3, #8]
 8001b96:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001baa:	2302      	movs	r3, #2
 8001bac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bb4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bb8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f002 f884 	bl	8003ccc <HAL_RCC_OscConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001bca:	f000 f9db 	bl	8001f84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bce:	230f      	movs	r3, #15
 8001bd0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bde:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	2102      	movs	r1, #2
 8001bea:	4618      	mov	r0, r3
 8001bec:	f002 faee 	bl	80041cc <HAL_RCC_ClockConfig>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001bf6:	f000 f9c5 	bl	8001f84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c02:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 fc7c 	bl	8004504 <HAL_RCCEx_PeriphCLKConfig>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001c12:	f000 f9b7 	bl	8001f84 <Error_Handler>
  }
}
 8001c16:	bf00      	nop
 8001c18:	3750      	adds	r7, #80	; 0x50
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
	...

08001c20 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b084      	sub	sp, #16
 8001c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <MX_ADC1_Init+0x74>)
 8001c32:	4a19      	ldr	r2, [pc, #100]	; (8001c98 <MX_ADC1_Init+0x78>)
 8001c34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <MX_ADC1_Init+0x74>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001c3c:	4b15      	ldr	r3, [pc, #84]	; (8001c94 <MX_ADC1_Init+0x74>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <MX_ADC1_Init+0x74>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001c48:	4b12      	ldr	r3, [pc, #72]	; (8001c94 <MX_ADC1_Init+0x74>)
 8001c4a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001c4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001c50:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <MX_ADC1_Init+0x74>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001c56:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <MX_ADC1_Init+0x74>)
 8001c58:	2201      	movs	r2, #1
 8001c5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001c5c:	480d      	ldr	r0, [pc, #52]	; (8001c94 <MX_ADC1_Init+0x74>)
 8001c5e:	f000 fc61 	bl	8002524 <HAL_ADC_Init>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8001c68:	f000 f98c 	bl	8001f84 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001c70:	2301      	movs	r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001c74:	2300      	movs	r3, #0
 8001c76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001c78:	1d3b      	adds	r3, r7, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4805      	ldr	r0, [pc, #20]	; (8001c94 <MX_ADC1_Init+0x74>)
 8001c7e:	f000 fd29 	bl	80026d4 <HAL_ADC_ConfigChannel>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8001c88:	f000 f97c 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c8c:	bf00      	nop
 8001c8e:	3710      	adds	r7, #16
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000240 	.word	0x20000240
 8001c98:	40012400 	.word	0x40012400

08001c9c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001ca0:	4b12      	ldr	r3, [pc, #72]	; (8001cec <MX_I2C2_Init+0x50>)
 8001ca2:	4a13      	ldr	r2, [pc, #76]	; (8001cf0 <MX_I2C2_Init+0x54>)
 8001ca4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001ca6:	4b11      	ldr	r3, [pc, #68]	; (8001cec <MX_I2C2_Init+0x50>)
 8001ca8:	4a12      	ldr	r2, [pc, #72]	; (8001cf4 <MX_I2C2_Init+0x58>)
 8001caa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <MX_I2C2_Init+0x50>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <MX_I2C2_Init+0x50>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <MX_I2C2_Init+0x50>)
 8001cba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cbe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cc0:	4b0a      	ldr	r3, [pc, #40]	; (8001cec <MX_I2C2_Init+0x50>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cc6:	4b09      	ldr	r3, [pc, #36]	; (8001cec <MX_I2C2_Init+0x50>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ccc:	4b07      	ldr	r3, [pc, #28]	; (8001cec <MX_I2C2_Init+0x50>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <MX_I2C2_Init+0x50>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cd8:	4804      	ldr	r0, [pc, #16]	; (8001cec <MX_I2C2_Init+0x50>)
 8001cda:	f001 f89b 	bl	8002e14 <HAL_I2C_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ce4:	f000 f94e 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ce8:	bf00      	nop
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200001ec 	.word	0x200001ec
 8001cf0:	40005800 	.word	0x40005800
 8001cf4:	00061a80 	.word	0x00061a80

08001cf8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001cfe:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <MX_SPI1_Init+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d02:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d04:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d08:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d0a:	4b14      	ldr	r3, [pc, #80]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d10:	4b12      	ldr	r3, [pc, #72]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d16:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d28:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d44:	220a      	movs	r2, #10
 8001d46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_SPI1_Init+0x64>)
 8001d4a:	f002 fc91 	bl	8004670 <HAL_SPI_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d54:	f000 f916 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200002b0 	.word	0x200002b0
 8001d60:	40013000 	.word	0x40013000

08001d64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08a      	sub	sp, #40	; 0x28
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6a:	f107 0320 	add.w	r3, r7, #32
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d74:	1d3b      	adds	r3, r7, #4
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	605a      	str	r2, [r3, #4]
 8001d7c:	609a      	str	r2, [r3, #8]
 8001d7e:	60da      	str	r2, [r3, #12]
 8001d80:	611a      	str	r2, [r3, #16]
 8001d82:	615a      	str	r2, [r3, #20]
 8001d84:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d86:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001d88:	4a32      	ldr	r2, [pc, #200]	; (8001e54 <MX_TIM4_Init+0xf0>)
 8001d8a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = MOTOR_PRESCALLER;
 8001d8c:	4b30      	ldr	r3, [pc, #192]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001d8e:	2247      	movs	r2, #71	; 0x47
 8001d90:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d92:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_COUNTER;
 8001d98:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001d9a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001d9e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da0:	4b2b      	ldr	r3, [pc, #172]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da6:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001dac:	4828      	ldr	r0, [pc, #160]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001dae:	f003 f979 	bl	80050a4 <HAL_TIM_PWM_Init>
 8001db2:	4603      	mov	r3, r0
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d001      	beq.n	8001dbc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001db8:	f000 f8e4 	bl	8001f84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dc4:	f107 0320 	add.w	r3, r7, #32
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4821      	ldr	r0, [pc, #132]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001dcc:	f003 fc9c 	bl	8005708 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001dd6:	f000 f8d5 	bl	8001f84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dda:	2360      	movs	r3, #96	; 0x60
 8001ddc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dea:	1d3b      	adds	r3, r7, #4
 8001dec:	2200      	movs	r2, #0
 8001dee:	4619      	mov	r1, r3
 8001df0:	4817      	ldr	r0, [pc, #92]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001df2:	f003 f9b5 	bl	8005160 <HAL_TIM_PWM_ConfigChannel>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001dfc:	f000 f8c2 	bl	8001f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e00:	1d3b      	adds	r3, r7, #4
 8001e02:	2204      	movs	r2, #4
 8001e04:	4619      	mov	r1, r3
 8001e06:	4812      	ldr	r0, [pc, #72]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001e08:	f003 f9aa 	bl	8005160 <HAL_TIM_PWM_ConfigChannel>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8001e12:	f000 f8b7 	bl	8001f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e16:	1d3b      	adds	r3, r7, #4
 8001e18:	2208      	movs	r2, #8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001e1e:	f003 f99f 	bl	8005160 <HAL_TIM_PWM_ConfigChannel>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8001e28:	f000 f8ac 	bl	8001f84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001e2c:	1d3b      	adds	r3, r7, #4
 8001e2e:	220c      	movs	r2, #12
 8001e30:	4619      	mov	r1, r3
 8001e32:	4807      	ldr	r0, [pc, #28]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001e34:	f003 f994 	bl	8005160 <HAL_TIM_PWM_ConfigChannel>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001e3e:	f000 f8a1 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001e42:	4803      	ldr	r0, [pc, #12]	; (8001e50 <MX_TIM4_Init+0xec>)
 8001e44:	f000 f9ba 	bl	80021bc <HAL_TIM_MspPostInit>

}
 8001e48:	bf00      	nop
 8001e4a:	3728      	adds	r7, #40	; 0x28
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200001ac 	.word	0x200001ac
 8001e54:	40000800 	.word	0x40000800

08001e58 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e5e:	4a12      	ldr	r2, [pc, #72]	; (8001ea8 <MX_USART1_UART_Init+0x50>)
 8001e60:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e62:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e68:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e70:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e7e:	220c      	movs	r2, #12
 8001e80:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e82:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_USART1_UART_Init+0x4c>)
 8001e90:	f003 fc7e 	bl	8005790 <HAL_UART_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e9a:	f000 f873 	bl	8001f84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000270 	.word	0x20000270
 8001ea8:	40013800 	.word	0x40013800

08001eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b088      	sub	sp, #32
 8001eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb2:	f107 0310 	add.w	r3, r7, #16
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	605a      	str	r2, [r3, #4]
 8001ebc:	609a      	str	r2, [r3, #8]
 8001ebe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a2c      	ldr	r2, [pc, #176]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001ec6:	f043 0310 	orr.w	r3, r3, #16
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed8:	4b27      	ldr	r3, [pc, #156]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001eda:	699b      	ldr	r3, [r3, #24]
 8001edc:	4a26      	ldr	r2, [pc, #152]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001ede:	f043 0320 	orr.w	r3, r3, #32
 8001ee2:	6193      	str	r3, [r2, #24]
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	f003 0320 	and.w	r3, r3, #32
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	4a20      	ldr	r2, [pc, #128]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001ef6:	f043 0304 	orr.w	r3, r3, #4
 8001efa:	6193      	str	r3, [r2, #24]
 8001efc:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f08:	4b1b      	ldr	r3, [pc, #108]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001f0a:	699b      	ldr	r3, [r3, #24]
 8001f0c:	4a1a      	ldr	r2, [pc, #104]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001f0e:	f043 0308 	orr.w	r3, r3, #8
 8001f12:	6193      	str	r3, [r2, #24]
 8001f14:	4b18      	ldr	r3, [pc, #96]	; (8001f78 <MX_GPIO_Init+0xcc>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0308 	and.w	r3, r3, #8
 8001f1c:	603b      	str	r3, [r7, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f20:	2200      	movs	r2, #0
 8001f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f26:	4815      	ldr	r0, [pc, #84]	; (8001f7c <MX_GPIO_Init+0xd0>)
 8001f28:	f000 ff44 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2103      	movs	r1, #3
 8001f30:	4813      	ldr	r0, [pc, #76]	; (8001f80 <MX_GPIO_Init+0xd4>)
 8001f32:	f000 ff3f 	bl	8002db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001f36:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f44:	2302      	movs	r3, #2
 8001f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001f48:	f107 0310 	add.w	r3, r7, #16
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	480b      	ldr	r0, [pc, #44]	; (8001f7c <MX_GPIO_Init+0xd0>)
 8001f50:	f000 fdd6 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8001f54:	2303      	movs	r3, #3
 8001f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2302      	movs	r3, #2
 8001f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f64:	f107 0310 	add.w	r3, r7, #16
 8001f68:	4619      	mov	r1, r3
 8001f6a:	4805      	ldr	r0, [pc, #20]	; (8001f80 <MX_GPIO_Init+0xd4>)
 8001f6c:	f000 fdc8 	bl	8002b00 <HAL_GPIO_Init>

}
 8001f70:	bf00      	nop
 8001f72:	3720      	adds	r7, #32
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40011000 	.word	0x40011000
 8001f80:	40010c00 	.word	0x40010c00

08001f84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bc80      	pop	{r7}
 8001f8e:	4770      	bx	lr

08001f90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f96:	4b15      	ldr	r3, [pc, #84]	; (8001fec <HAL_MspInit+0x5c>)
 8001f98:	699b      	ldr	r3, [r3, #24]
 8001f9a:	4a14      	ldr	r2, [pc, #80]	; (8001fec <HAL_MspInit+0x5c>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	6193      	str	r3, [r2, #24]
 8001fa2:	4b12      	ldr	r3, [pc, #72]	; (8001fec <HAL_MspInit+0x5c>)
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fae:	4b0f      	ldr	r3, [pc, #60]	; (8001fec <HAL_MspInit+0x5c>)
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	; (8001fec <HAL_MspInit+0x5c>)
 8001fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	61d3      	str	r3, [r2, #28]
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_MspInit+0x5c>)
 8001fbc:	69db      	ldr	r3, [r3, #28]
 8001fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	607b      	str	r3, [r7, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fc6:	4b0a      	ldr	r3, [pc, #40]	; (8001ff0 <HAL_MspInit+0x60>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	4a04      	ldr	r2, [pc, #16]	; (8001ff0 <HAL_MspInit+0x60>)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	3714      	adds	r7, #20
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000

08001ff4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b088      	sub	sp, #32
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ffc:	f107 0310 	add.w	r3, r7, #16
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a14      	ldr	r2, [pc, #80]	; (8002060 <HAL_ADC_MspInit+0x6c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d121      	bne.n	8002058 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002014:	4b13      	ldr	r3, [pc, #76]	; (8002064 <HAL_ADC_MspInit+0x70>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a12      	ldr	r2, [pc, #72]	; (8002064 <HAL_ADC_MspInit+0x70>)
 800201a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b10      	ldr	r3, [pc, #64]	; (8002064 <HAL_ADC_MspInit+0x70>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002028:	60fb      	str	r3, [r7, #12]
 800202a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_ADC_MspInit+0x70>)
 800202e:	699b      	ldr	r3, [r3, #24]
 8002030:	4a0c      	ldr	r2, [pc, #48]	; (8002064 <HAL_ADC_MspInit+0x70>)
 8002032:	f043 0304 	orr.w	r3, r3, #4
 8002036:	6193      	str	r3, [r2, #24]
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <HAL_ADC_MspInit+0x70>)
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	60bb      	str	r3, [r7, #8]
 8002042:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = BAT_3V7_Pin|BAT_7V6_Pin;
 8002044:	2318      	movs	r3, #24
 8002046:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002048:	2303      	movs	r3, #3
 800204a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800204c:	f107 0310 	add.w	r3, r7, #16
 8002050:	4619      	mov	r1, r3
 8002052:	4805      	ldr	r0, [pc, #20]	; (8002068 <HAL_ADC_MspInit+0x74>)
 8002054:	f000 fd54 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002058:	bf00      	nop
 800205a:	3720      	adds	r7, #32
 800205c:	46bd      	mov	sp, r7
 800205e:	bd80      	pop	{r7, pc}
 8002060:	40012400 	.word	0x40012400
 8002064:	40021000 	.word	0x40021000
 8002068:	40010800 	.word	0x40010800

0800206c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a16      	ldr	r2, [pc, #88]	; (80020e0 <HAL_I2C_MspInit+0x74>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d124      	bne.n	80020d6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800208c:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_I2C_MspInit+0x78>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4a14      	ldr	r2, [pc, #80]	; (80020e4 <HAL_I2C_MspInit+0x78>)
 8002092:	f043 0308 	orr.w	r3, r3, #8
 8002096:	6193      	str	r3, [r2, #24]
 8002098:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_I2C_MspInit+0x78>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	f003 0308 	and.w	r3, r3, #8
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020aa:	2312      	movs	r3, #18
 80020ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020ae:	2303      	movs	r3, #3
 80020b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020b2:	f107 0310 	add.w	r3, r7, #16
 80020b6:	4619      	mov	r1, r3
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <HAL_I2C_MspInit+0x7c>)
 80020ba:	f000 fd21 	bl	8002b00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_I2C_MspInit+0x78>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	4a08      	ldr	r2, [pc, #32]	; (80020e4 <HAL_I2C_MspInit+0x78>)
 80020c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020c8:	61d3      	str	r3, [r2, #28]
 80020ca:	4b06      	ldr	r3, [pc, #24]	; (80020e4 <HAL_I2C_MspInit+0x78>)
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80020d6:	bf00      	nop
 80020d8:	3720      	adds	r7, #32
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40005800 	.word	0x40005800
 80020e4:	40021000 	.word	0x40021000
 80020e8:	40010c00 	.word	0x40010c00

080020ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f4:	f107 0310 	add.w	r3, r7, #16
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
 80020fc:	605a      	str	r2, [r3, #4]
 80020fe:	609a      	str	r2, [r3, #8]
 8002100:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a1b      	ldr	r2, [pc, #108]	; (8002174 <HAL_SPI_MspInit+0x88>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d12f      	bne.n	800216c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800210c:	4b1a      	ldr	r3, [pc, #104]	; (8002178 <HAL_SPI_MspInit+0x8c>)
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	4a19      	ldr	r2, [pc, #100]	; (8002178 <HAL_SPI_MspInit+0x8c>)
 8002112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002116:	6193      	str	r3, [r2, #24]
 8002118:	4b17      	ldr	r3, [pc, #92]	; (8002178 <HAL_SPI_MspInit+0x8c>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_SPI_MspInit+0x8c>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	4a13      	ldr	r2, [pc, #76]	; (8002178 <HAL_SPI_MspInit+0x8c>)
 800212a:	f043 0304 	orr.w	r3, r3, #4
 800212e:	6193      	str	r3, [r2, #24]
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_SPI_MspInit+0x8c>)
 8002132:	699b      	ldr	r3, [r3, #24]
 8002134:	f003 0304 	and.w	r3, r3, #4
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800213c:	23a0      	movs	r3, #160	; 0xa0
 800213e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002144:	2303      	movs	r3, #3
 8002146:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002148:	f107 0310 	add.w	r3, r7, #16
 800214c:	4619      	mov	r1, r3
 800214e:	480b      	ldr	r0, [pc, #44]	; (800217c <HAL_SPI_MspInit+0x90>)
 8002150:	f000 fcd6 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002154:	2340      	movs	r3, #64	; 0x40
 8002156:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002158:	2300      	movs	r3, #0
 800215a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	4619      	mov	r1, r3
 8002166:	4805      	ldr	r0, [pc, #20]	; (800217c <HAL_SPI_MspInit+0x90>)
 8002168:	f000 fcca 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800216c:	bf00      	nop
 800216e:	3720      	adds	r7, #32
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40013000 	.word	0x40013000
 8002178:	40021000 	.word	0x40021000
 800217c:	40010800 	.word	0x40010800

08002180 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002180:	b480      	push	{r7}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_TIM_PWM_MspInit+0x34>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d10b      	bne.n	80021aa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <HAL_TIM_PWM_MspInit+0x38>)
 8002194:	69db      	ldr	r3, [r3, #28]
 8002196:	4a08      	ldr	r2, [pc, #32]	; (80021b8 <HAL_TIM_PWM_MspInit+0x38>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	61d3      	str	r3, [r2, #28]
 800219e:	4b06      	ldr	r3, [pc, #24]	; (80021b8 <HAL_TIM_PWM_MspInit+0x38>)
 80021a0:	69db      	ldr	r3, [r3, #28]
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr
 80021b4:	40000800 	.word	0x40000800
 80021b8:	40021000 	.word	0x40021000

080021bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b088      	sub	sp, #32
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c4:	f107 0310 	add.w	r3, r7, #16
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]
 80021cc:	605a      	str	r2, [r3, #4]
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a10      	ldr	r2, [pc, #64]	; (8002218 <HAL_TIM_MspPostInit+0x5c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d118      	bne.n	800220e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021dc:	4b0f      	ldr	r3, [pc, #60]	; (800221c <HAL_TIM_MspPostInit+0x60>)
 80021de:	699b      	ldr	r3, [r3, #24]
 80021e0:	4a0e      	ldr	r2, [pc, #56]	; (800221c <HAL_TIM_MspPostInit+0x60>)
 80021e2:	f043 0308 	orr.w	r3, r3, #8
 80021e6:	6193      	str	r3, [r2, #24]
 80021e8:	4b0c      	ldr	r3, [pc, #48]	; (800221c <HAL_TIM_MspPostInit+0x60>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	f003 0308 	and.w	r3, r3, #8
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = MOTOR_1A_Pin|MOTOR_1B_Pin|MOTOR_2A_Pin|MOTOR_2B_Pin;
 80021f4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80021f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2302      	movs	r3, #2
 8002200:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002202:	f107 0310 	add.w	r3, r7, #16
 8002206:	4619      	mov	r1, r3
 8002208:	4805      	ldr	r0, [pc, #20]	; (8002220 <HAL_TIM_MspPostInit+0x64>)
 800220a:	f000 fc79 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800220e:	bf00      	nop
 8002210:	3720      	adds	r7, #32
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40000800 	.word	0x40000800
 800221c:	40021000 	.word	0x40021000
 8002220:	40010c00 	.word	0x40010c00

08002224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0310 	add.w	r3, r7, #16
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a1c      	ldr	r2, [pc, #112]	; (80022b0 <HAL_UART_MspInit+0x8c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d131      	bne.n	80022a8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002244:	4b1b      	ldr	r3, [pc, #108]	; (80022b4 <HAL_UART_MspInit+0x90>)
 8002246:	699b      	ldr	r3, [r3, #24]
 8002248:	4a1a      	ldr	r2, [pc, #104]	; (80022b4 <HAL_UART_MspInit+0x90>)
 800224a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800224e:	6193      	str	r3, [r2, #24]
 8002250:	4b18      	ldr	r3, [pc, #96]	; (80022b4 <HAL_UART_MspInit+0x90>)
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800225c:	4b15      	ldr	r3, [pc, #84]	; (80022b4 <HAL_UART_MspInit+0x90>)
 800225e:	699b      	ldr	r3, [r3, #24]
 8002260:	4a14      	ldr	r2, [pc, #80]	; (80022b4 <HAL_UART_MspInit+0x90>)
 8002262:	f043 0304 	orr.w	r3, r3, #4
 8002266:	6193      	str	r3, [r2, #24]
 8002268:	4b12      	ldr	r3, [pc, #72]	; (80022b4 <HAL_UART_MspInit+0x90>)
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002274:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002278:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800227a:	2302      	movs	r3, #2
 800227c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800227e:	2303      	movs	r3, #3
 8002280:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0310 	add.w	r3, r7, #16
 8002286:	4619      	mov	r1, r3
 8002288:	480b      	ldr	r0, [pc, #44]	; (80022b8 <HAL_UART_MspInit+0x94>)
 800228a:	f000 fc39 	bl	8002b00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800228e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002292:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002294:	2300      	movs	r3, #0
 8002296:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229c:	f107 0310 	add.w	r3, r7, #16
 80022a0:	4619      	mov	r1, r3
 80022a2:	4805      	ldr	r0, [pc, #20]	; (80022b8 <HAL_UART_MspInit+0x94>)
 80022a4:	f000 fc2c 	bl	8002b00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022a8:	bf00      	nop
 80022aa:	3720      	adds	r7, #32
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40013800 	.word	0x40013800
 80022b4:	40021000 	.word	0x40021000
 80022b8:	40010800 	.word	0x40010800

080022bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022cc:	e7fe      	b.n	80022cc <HardFault_Handler+0x4>

080022ce <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022ce:	b480      	push	{r7}
 80022d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d2:	e7fe      	b.n	80022d2 <MemManage_Handler+0x4>

080022d4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d8:	e7fe      	b.n	80022d8 <BusFault_Handler+0x4>

080022da <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022da:	b480      	push	{r7}
 80022dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022de:	e7fe      	b.n	80022de <UsageFault_Handler+0x4>

080022e0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022e0:	b480      	push	{r7}
 80022e2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022e4:	bf00      	nop
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022f0:	bf00      	nop
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bc80      	pop	{r7}
 80022f6:	4770      	bx	lr

080022f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002308:	f000 f8ce 	bl	80024a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800230c:	bf00      	nop
 800230e:	bd80      	pop	{r7, pc}

08002310 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002318:	4b11      	ldr	r3, [pc, #68]	; (8002360 <_sbrk+0x50>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d102      	bne.n	8002326 <_sbrk+0x16>
		heap_end = &end;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <_sbrk+0x50>)
 8002322:	4a10      	ldr	r2, [pc, #64]	; (8002364 <_sbrk+0x54>)
 8002324:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <_sbrk+0x50>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800232c:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <_sbrk+0x50>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4413      	add	r3, r2
 8002334:	466a      	mov	r2, sp
 8002336:	4293      	cmp	r3, r2
 8002338:	d907      	bls.n	800234a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800233a:	f003 fc33 	bl	8005ba4 <__errno>
 800233e:	4602      	mov	r2, r0
 8002340:	230c      	movs	r3, #12
 8002342:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002344:	f04f 33ff 	mov.w	r3, #4294967295
 8002348:	e006      	b.n	8002358 <_sbrk+0x48>
	}

	heap_end += incr;
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <_sbrk+0x50>)
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4413      	add	r3, r2
 8002352:	4a03      	ldr	r2, [pc, #12]	; (8002360 <_sbrk+0x50>)
 8002354:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002356:	68fb      	ldr	r3, [r7, #12]
}
 8002358:	4618      	mov	r0, r3
 800235a:	3710      	adds	r7, #16
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	200001a0 	.word	0x200001a0
 8002364:	20000310 	.word	0x20000310

08002368 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800236c:	4b15      	ldr	r3, [pc, #84]	; (80023c4 <SystemInit+0x5c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a14      	ldr	r2, [pc, #80]	; (80023c4 <SystemInit+0x5c>)
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002378:	4b12      	ldr	r3, [pc, #72]	; (80023c4 <SystemInit+0x5c>)
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	4911      	ldr	r1, [pc, #68]	; (80023c4 <SystemInit+0x5c>)
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <SystemInit+0x60>)
 8002380:	4013      	ands	r3, r2
 8002382:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002384:	4b0f      	ldr	r3, [pc, #60]	; (80023c4 <SystemInit+0x5c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a0e      	ldr	r2, [pc, #56]	; (80023c4 <SystemInit+0x5c>)
 800238a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800238e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002392:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002394:	4b0b      	ldr	r3, [pc, #44]	; (80023c4 <SystemInit+0x5c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a0a      	ldr	r2, [pc, #40]	; (80023c4 <SystemInit+0x5c>)
 800239a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <SystemInit+0x5c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <SystemInit+0x5c>)
 80023a6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80023aa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80023ac:	4b05      	ldr	r3, [pc, #20]	; (80023c4 <SystemInit+0x5c>)
 80023ae:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80023b2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <SystemInit+0x64>)
 80023b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ba:	609a      	str	r2, [r3, #8]
#endif 
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	bc80      	pop	{r7}
 80023c2:	4770      	bx	lr
 80023c4:	40021000 	.word	0x40021000
 80023c8:	f8ff0000 	.word	0xf8ff0000
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80023d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80023d2:	e003      	b.n	80023dc <LoopCopyDataInit>

080023d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80023d4:	4b0b      	ldr	r3, [pc, #44]	; (8002404 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80023d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80023d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80023da:	3104      	adds	r1, #4

080023dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80023dc:	480a      	ldr	r0, [pc, #40]	; (8002408 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80023de:	4b0b      	ldr	r3, [pc, #44]	; (800240c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80023e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80023e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80023e4:	d3f6      	bcc.n	80023d4 <CopyDataInit>
  ldr r2, =_sbss
 80023e6:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80023e8:	e002      	b.n	80023f0 <LoopFillZerobss>

080023ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80023ec:	f842 3b04 	str.w	r3, [r2], #4

080023f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80023f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80023f4:	d3f9      	bcc.n	80023ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023f6:	f7ff ffb7 	bl	8002368 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f003 fbd9 	bl	8005bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023fe:	f7ff fa9b 	bl	8001938 <main>
  bx lr
 8002402:	4770      	bx	lr
  ldr r3, =_sidata
 8002404:	080069f4 	.word	0x080069f4
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800240c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8002410:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8002414:	20000310 	.word	0x20000310

08002418 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002418:	e7fe      	b.n	8002418 <ADC1_2_IRQHandler>
	...

0800241c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002420:	4b08      	ldr	r3, [pc, #32]	; (8002444 <HAL_Init+0x28>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a07      	ldr	r2, [pc, #28]	; (8002444 <HAL_Init+0x28>)
 8002426:	f043 0310 	orr.w	r3, r3, #16
 800242a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800242c:	2003      	movs	r0, #3
 800242e:	f000 fb33 	bl	8002a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002432:	2000      	movs	r0, #0
 8002434:	f000 f808 	bl	8002448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002438:	f7ff fdaa 	bl	8001f90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40022000 	.word	0x40022000

08002448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002450:	4b12      	ldr	r3, [pc, #72]	; (800249c <HAL_InitTick+0x54>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	4b12      	ldr	r3, [pc, #72]	; (80024a0 <HAL_InitTick+0x58>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	4619      	mov	r1, r3
 800245a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002462:	fbb2 f3f3 	udiv	r3, r2, r3
 8002466:	4618      	mov	r0, r3
 8002468:	f000 fb3d 	bl	8002ae6 <HAL_SYSTICK_Config>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00e      	b.n	8002494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2b0f      	cmp	r3, #15
 800247a:	d80a      	bhi.n	8002492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800247c:	2200      	movs	r2, #0
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	f04f 30ff 	mov.w	r0, #4294967295
 8002484:	f000 fb13 	bl	8002aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002488:	4a06      	ldr	r2, [pc, #24]	; (80024a4 <HAL_InitTick+0x5c>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e000      	b.n	8002494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000008 	.word	0x20000008
 80024a0:	20000010 	.word	0x20000010
 80024a4:	2000000c 	.word	0x2000000c

080024a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ac:	4b05      	ldr	r3, [pc, #20]	; (80024c4 <HAL_IncTick+0x1c>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <HAL_IncTick+0x20>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4413      	add	r3, r2
 80024b8:	4a03      	ldr	r2, [pc, #12]	; (80024c8 <HAL_IncTick+0x20>)
 80024ba:	6013      	str	r3, [r2, #0]
}
 80024bc:	bf00      	nop
 80024be:	46bd      	mov	sp, r7
 80024c0:	bc80      	pop	{r7}
 80024c2:	4770      	bx	lr
 80024c4:	20000010 	.word	0x20000010
 80024c8:	20000308 	.word	0x20000308

080024cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return uwTick;
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <HAL_GetTick+0x10>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	20000308 	.word	0x20000308

080024e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e8:	f7ff fff0 	bl	80024cc <HAL_GetTick>
 80024ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d005      	beq.n	8002506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024fa:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_Delay+0x40>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	4413      	add	r3, r2
 8002504:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002506:	bf00      	nop
 8002508:	f7ff ffe0 	bl	80024cc <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	429a      	cmp	r2, r3
 8002516:	d8f7      	bhi.n	8002508 <HAL_Delay+0x28>
  {
  }
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20000010 	.word	0x20000010

08002524 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800252c:	2300      	movs	r3, #0
 800252e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002534:	2300      	movs	r3, #0
 8002536:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	e0be      	b.n	80026c4 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	d109      	bne.n	8002568 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f7ff fd46 	bl	8001ff4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f000 f9ab 	bl	80028c4 <ADC_ConversionStop_Disable>
 800256e:	4603      	mov	r3, r0
 8002570:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	f040 8099 	bne.w	80026b2 <HAL_ADC_Init+0x18e>
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 8095 	bne.w	80026b2 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800258c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002590:	f023 0302 	bic.w	r3, r3, #2
 8002594:	f043 0202 	orr.w	r2, r3, #2
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025a4:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	7b1b      	ldrb	r3, [r3, #12]
 80025aa:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80025ac:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80025ae:	68ba      	ldr	r2, [r7, #8]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025bc:	d003      	beq.n	80025c6 <HAL_ADC_Init+0xa2>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d102      	bne.n	80025cc <HAL_ADC_Init+0xa8>
 80025c6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025ca:	e000      	b.n	80025ce <HAL_ADC_Init+0xaa>
 80025cc:	2300      	movs	r3, #0
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7d1b      	ldrb	r3, [r3, #20]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d119      	bne.n	8002610 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	7b1b      	ldrb	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d109      	bne.n	80025f8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	035a      	lsls	r2, r3, #13
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025f4:	613b      	str	r3, [r7, #16]
 80025f6:	e00b      	b.n	8002610 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025fc:	f043 0220 	orr.w	r2, r3, #32
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	f043 0201 	orr.w	r2, r3, #1
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	693a      	ldr	r2, [r7, #16]
 8002620:	430a      	orrs	r2, r1
 8002622:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	689a      	ldr	r2, [r3, #8]
 800262a:	4b28      	ldr	r3, [pc, #160]	; (80026cc <HAL_ADC_Init+0x1a8>)
 800262c:	4013      	ands	r3, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6812      	ldr	r2, [r2, #0]
 8002632:	68b9      	ldr	r1, [r7, #8]
 8002634:	430b      	orrs	r3, r1
 8002636:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	689b      	ldr	r3, [r3, #8]
 800263c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002640:	d003      	beq.n	800264a <HAL_ADC_Init+0x126>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d104      	bne.n	8002654 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	3b01      	subs	r3, #1
 8002650:	051b      	lsls	r3, r3, #20
 8002652:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800265a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	430a      	orrs	r2, r1
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689a      	ldr	r2, [r3, #8]
 800266e:	4b18      	ldr	r3, [pc, #96]	; (80026d0 <HAL_ADC_Init+0x1ac>)
 8002670:	4013      	ands	r3, r2
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	429a      	cmp	r2, r3
 8002676:	d10b      	bne.n	8002690 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002682:	f023 0303 	bic.w	r3, r3, #3
 8002686:	f043 0201 	orr.w	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800268e:	e018      	b.n	80026c2 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002694:	f023 0312 	bic.w	r3, r3, #18
 8002698:	f043 0210 	orr.w	r2, r3, #16
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	f043 0201 	orr.w	r2, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80026ac:	2301      	movs	r3, #1
 80026ae:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80026b0:	e007      	b.n	80026c2 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b6:	f043 0210 	orr.w	r2, r3, #16
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}
 80026cc:	ffe1f7fd 	.word	0xffe1f7fd
 80026d0:	ff1f0efe 	.word	0xff1f0efe

080026d4 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
 80026dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x20>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e0dc      	b.n	80028ae <HAL_ADC_ConfigChannel+0x1da>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b06      	cmp	r3, #6
 8002702:	d81c      	bhi.n	800273e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	685a      	ldr	r2, [r3, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	4413      	add	r3, r2
 8002714:	3b05      	subs	r3, #5
 8002716:	221f      	movs	r2, #31
 8002718:	fa02 f303 	lsl.w	r3, r2, r3
 800271c:	43db      	mvns	r3, r3
 800271e:	4019      	ands	r1, r3
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	6818      	ldr	r0, [r3, #0]
 8002724:	683b      	ldr	r3, [r7, #0]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	4613      	mov	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	4413      	add	r3, r2
 800272e:	3b05      	subs	r3, #5
 8002730:	fa00 f203 	lsl.w	r2, r0, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	635a      	str	r2, [r3, #52]	; 0x34
 800273c:	e03c      	b.n	80027b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d81c      	bhi.n	8002780 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	3b23      	subs	r3, #35	; 0x23
 8002758:	221f      	movs	r2, #31
 800275a:	fa02 f303 	lsl.w	r3, r2, r3
 800275e:	43db      	mvns	r3, r3
 8002760:	4019      	ands	r1, r3
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	6818      	ldr	r0, [r3, #0]
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	4613      	mov	r3, r2
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	4413      	add	r3, r2
 8002770:	3b23      	subs	r3, #35	; 0x23
 8002772:	fa00 f203 	lsl.w	r2, r0, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	430a      	orrs	r2, r1
 800277c:	631a      	str	r2, [r3, #48]	; 0x30
 800277e:	e01b      	b.n	80027b8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	3b41      	subs	r3, #65	; 0x41
 8002792:	221f      	movs	r2, #31
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	4019      	ands	r1, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685a      	ldr	r2, [r3, #4]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	3b41      	subs	r3, #65	; 0x41
 80027ac:	fa00 f203 	lsl.w	r2, r0, r3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b09      	cmp	r3, #9
 80027be:	d91c      	bls.n	80027fa <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68d9      	ldr	r1, [r3, #12]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	4613      	mov	r3, r2
 80027cc:	005b      	lsls	r3, r3, #1
 80027ce:	4413      	add	r3, r2
 80027d0:	3b1e      	subs	r3, #30
 80027d2:	2207      	movs	r2, #7
 80027d4:	fa02 f303 	lsl.w	r3, r2, r3
 80027d8:	43db      	mvns	r3, r3
 80027da:	4019      	ands	r1, r3
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	6898      	ldr	r0, [r3, #8]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	4613      	mov	r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	4413      	add	r3, r2
 80027ea:	3b1e      	subs	r3, #30
 80027ec:	fa00 f203 	lsl.w	r2, r0, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	60da      	str	r2, [r3, #12]
 80027f8:	e019      	b.n	800282e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6919      	ldr	r1, [r3, #16]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4613      	mov	r3, r2
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	4413      	add	r3, r2
 800280a:	2207      	movs	r2, #7
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43db      	mvns	r3, r3
 8002812:	4019      	ands	r1, r3
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6898      	ldr	r0, [r3, #8]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	4413      	add	r3, r2
 8002822:	fa00 f203 	lsl.w	r2, r0, r3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	430a      	orrs	r2, r1
 800282c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b10      	cmp	r3, #16
 8002834:	d003      	beq.n	800283e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800283a:	2b11      	cmp	r3, #17
 800283c:	d132      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1d      	ldr	r2, [pc, #116]	; (80028b8 <HAL_ADC_ConfigChannel+0x1e4>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d125      	bne.n	8002894 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d126      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	689a      	ldr	r2, [r3, #8]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002864:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2b10      	cmp	r3, #16
 800286c:	d11a      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800286e:	4b13      	ldr	r3, [pc, #76]	; (80028bc <HAL_ADC_ConfigChannel+0x1e8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a13      	ldr	r2, [pc, #76]	; (80028c0 <HAL_ADC_ConfigChannel+0x1ec>)
 8002874:	fba2 2303 	umull	r2, r3, r2, r3
 8002878:	0c9a      	lsrs	r2, r3, #18
 800287a:	4613      	mov	r3, r2
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	4413      	add	r3, r2
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002884:	e002      	b.n	800288c <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	3b01      	subs	r3, #1
 800288a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f9      	bne.n	8002886 <HAL_ADC_ConfigChannel+0x1b2>
 8002892:	e007      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002898:	f043 0220 	orr.w	r2, r3, #32
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80028ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr
 80028b8:	40012400 	.word	0x40012400
 80028bc:	20000008 	.word	0x20000008
 80028c0:	431bde83 	.word	0x431bde83

080028c4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d127      	bne.n	800292e <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80028ee:	f7ff fded 	bl	80024cc <HAL_GetTick>
 80028f2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80028f4:	e014      	b.n	8002920 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80028f6:	f7ff fde9 	bl	80024cc <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	2b02      	cmp	r3, #2
 8002902:	d90d      	bls.n	8002920 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	f043 0210 	orr.w	r2, r3, #16
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	f043 0201 	orr.w	r2, r3, #1
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e007      	b.n	8002930 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b01      	cmp	r3, #1
 800292c:	d0e3      	beq.n	80028f6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f003 0307 	and.w	r3, r3, #7
 8002946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002948:	4b0c      	ldr	r3, [pc, #48]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800294e:	68ba      	ldr	r2, [r7, #8]
 8002950:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002954:	4013      	ands	r3, r2
 8002956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002960:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002964:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800296a:	4a04      	ldr	r2, [pc, #16]	; (800297c <__NVIC_SetPriorityGrouping+0x44>)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	60d3      	str	r3, [r2, #12]
}
 8002970:	bf00      	nop
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	bc80      	pop	{r7}
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002980:	b480      	push	{r7}
 8002982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002984:	4b04      	ldr	r3, [pc, #16]	; (8002998 <__NVIC_GetPriorityGrouping+0x18>)
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	0a1b      	lsrs	r3, r3, #8
 800298a:	f003 0307 	and.w	r3, r3, #7
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	bc80      	pop	{r7}
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4603      	mov	r3, r0
 80029a4:	6039      	str	r1, [r7, #0]
 80029a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	db0a      	blt.n	80029c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	b2da      	uxtb	r2, r3
 80029b4:	490c      	ldr	r1, [pc, #48]	; (80029e8 <__NVIC_SetPriority+0x4c>)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	0112      	lsls	r2, r2, #4
 80029bc:	b2d2      	uxtb	r2, r2
 80029be:	440b      	add	r3, r1
 80029c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c4:	e00a      	b.n	80029dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4908      	ldr	r1, [pc, #32]	; (80029ec <__NVIC_SetPriority+0x50>)
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	3b04      	subs	r3, #4
 80029d4:	0112      	lsls	r2, r2, #4
 80029d6:	b2d2      	uxtb	r2, r2
 80029d8:	440b      	add	r3, r1
 80029da:	761a      	strb	r2, [r3, #24]
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000e100 	.word	0xe000e100
 80029ec:	e000ed00 	.word	0xe000ed00

080029f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b089      	sub	sp, #36	; 0x24
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	f1c3 0307 	rsb	r3, r3, #7
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	bf28      	it	cs
 8002a0e:	2304      	movcs	r3, #4
 8002a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3304      	adds	r3, #4
 8002a16:	2b06      	cmp	r3, #6
 8002a18:	d902      	bls.n	8002a20 <NVIC_EncodePriority+0x30>
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	3b03      	subs	r3, #3
 8002a1e:	e000      	b.n	8002a22 <NVIC_EncodePriority+0x32>
 8002a20:	2300      	movs	r3, #0
 8002a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a24:	f04f 32ff 	mov.w	r2, #4294967295
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	43da      	mvns	r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	401a      	ands	r2, r3
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a38:	f04f 31ff 	mov.w	r1, #4294967295
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	43d9      	mvns	r1, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a48:	4313      	orrs	r3, r2
         );
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3724      	adds	r7, #36	; 0x24
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b082      	sub	sp, #8
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a64:	d301      	bcc.n	8002a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a66:	2301      	movs	r3, #1
 8002a68:	e00f      	b.n	8002a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a6a:	4a0a      	ldr	r2, [pc, #40]	; (8002a94 <SysTick_Config+0x40>)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a72:	210f      	movs	r1, #15
 8002a74:	f04f 30ff 	mov.w	r0, #4294967295
 8002a78:	f7ff ff90 	bl	800299c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <SysTick_Config+0x40>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a82:	4b04      	ldr	r3, [pc, #16]	; (8002a94 <SysTick_Config+0x40>)
 8002a84:	2207      	movs	r2, #7
 8002a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	e000e010 	.word	0xe000e010

08002a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aa0:	6878      	ldr	r0, [r7, #4]
 8002aa2:	f7ff ff49 	bl	8002938 <__NVIC_SetPriorityGrouping>
}
 8002aa6:	bf00      	nop
 8002aa8:	3708      	adds	r7, #8
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b086      	sub	sp, #24
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	607a      	str	r2, [r7, #4]
 8002aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ac0:	f7ff ff5e 	bl	8002980 <__NVIC_GetPriorityGrouping>
 8002ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac6:	687a      	ldr	r2, [r7, #4]
 8002ac8:	68b9      	ldr	r1, [r7, #8]
 8002aca:	6978      	ldr	r0, [r7, #20]
 8002acc:	f7ff ff90 	bl	80029f0 <NVIC_EncodePriority>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff ff5f 	bl	800299c <__NVIC_SetPriority>
}
 8002ade:	bf00      	nop
 8002ae0:	3718      	adds	r7, #24
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7ff ffb0 	bl	8002a54 <SysTick_Config>
 8002af4:	4603      	mov	r3, r0
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b08b      	sub	sp, #44	; 0x2c
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b12:	e127      	b.n	8002d64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b14:	2201      	movs	r2, #1
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	69fa      	ldr	r2, [r7, #28]
 8002b24:	4013      	ands	r3, r2
 8002b26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	f040 8116 	bne.w	8002d5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	2b12      	cmp	r3, #18
 8002b38:	d034      	beq.n	8002ba4 <HAL_GPIO_Init+0xa4>
 8002b3a:	2b12      	cmp	r3, #18
 8002b3c:	d80d      	bhi.n	8002b5a <HAL_GPIO_Init+0x5a>
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d02b      	beq.n	8002b9a <HAL_GPIO_Init+0x9a>
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d804      	bhi.n	8002b50 <HAL_GPIO_Init+0x50>
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d031      	beq.n	8002bae <HAL_GPIO_Init+0xae>
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d01c      	beq.n	8002b88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002b4e:	e048      	b.n	8002be2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d043      	beq.n	8002bdc <HAL_GPIO_Init+0xdc>
 8002b54:	2b11      	cmp	r3, #17
 8002b56:	d01b      	beq.n	8002b90 <HAL_GPIO_Init+0x90>
          break;
 8002b58:	e043      	b.n	8002be2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b5a:	4a89      	ldr	r2, [pc, #548]	; (8002d80 <HAL_GPIO_Init+0x280>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d026      	beq.n	8002bae <HAL_GPIO_Init+0xae>
 8002b60:	4a87      	ldr	r2, [pc, #540]	; (8002d80 <HAL_GPIO_Init+0x280>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d806      	bhi.n	8002b74 <HAL_GPIO_Init+0x74>
 8002b66:	4a87      	ldr	r2, [pc, #540]	; (8002d84 <HAL_GPIO_Init+0x284>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d020      	beq.n	8002bae <HAL_GPIO_Init+0xae>
 8002b6c:	4a86      	ldr	r2, [pc, #536]	; (8002d88 <HAL_GPIO_Init+0x288>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01d      	beq.n	8002bae <HAL_GPIO_Init+0xae>
          break;
 8002b72:	e036      	b.n	8002be2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002b74:	4a85      	ldr	r2, [pc, #532]	; (8002d8c <HAL_GPIO_Init+0x28c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d019      	beq.n	8002bae <HAL_GPIO_Init+0xae>
 8002b7a:	4a85      	ldr	r2, [pc, #532]	; (8002d90 <HAL_GPIO_Init+0x290>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d016      	beq.n	8002bae <HAL_GPIO_Init+0xae>
 8002b80:	4a84      	ldr	r2, [pc, #528]	; (8002d94 <HAL_GPIO_Init+0x294>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d013      	beq.n	8002bae <HAL_GPIO_Init+0xae>
          break;
 8002b86:	e02c      	b.n	8002be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	623b      	str	r3, [r7, #32]
          break;
 8002b8e:	e028      	b.n	8002be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	3304      	adds	r3, #4
 8002b96:	623b      	str	r3, [r7, #32]
          break;
 8002b98:	e023      	b.n	8002be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	3308      	adds	r3, #8
 8002ba0:	623b      	str	r3, [r7, #32]
          break;
 8002ba2:	e01e      	b.n	8002be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	330c      	adds	r3, #12
 8002baa:	623b      	str	r3, [r7, #32]
          break;
 8002bac:	e019      	b.n	8002be2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d102      	bne.n	8002bbc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	623b      	str	r3, [r7, #32]
          break;
 8002bba:	e012      	b.n	8002be2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	689b      	ldr	r3, [r3, #8]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d105      	bne.n	8002bd0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bc4:	2308      	movs	r3, #8
 8002bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	611a      	str	r2, [r3, #16]
          break;
 8002bce:	e008      	b.n	8002be2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002bd0:	2308      	movs	r3, #8
 8002bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69fa      	ldr	r2, [r7, #28]
 8002bd8:	615a      	str	r2, [r3, #20]
          break;
 8002bda:	e002      	b.n	8002be2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	623b      	str	r3, [r7, #32]
          break;
 8002be0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	2bff      	cmp	r3, #255	; 0xff
 8002be6:	d801      	bhi.n	8002bec <HAL_GPIO_Init+0xec>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	e001      	b.n	8002bf0 <HAL_GPIO_Init+0xf0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3304      	adds	r3, #4
 8002bf0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	2bff      	cmp	r3, #255	; 0xff
 8002bf6:	d802      	bhi.n	8002bfe <HAL_GPIO_Init+0xfe>
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	e002      	b.n	8002c04 <HAL_GPIO_Init+0x104>
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	3b08      	subs	r3, #8
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	681a      	ldr	r2, [r3, #0]
 8002c0a:	210f      	movs	r1, #15
 8002c0c:	693b      	ldr	r3, [r7, #16]
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	43db      	mvns	r3, r3
 8002c14:	401a      	ands	r2, r3
 8002c16:	6a39      	ldr	r1, [r7, #32]
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	f000 8096 	beq.w	8002d5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002c32:	4b59      	ldr	r3, [pc, #356]	; (8002d98 <HAL_GPIO_Init+0x298>)
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	4a58      	ldr	r2, [pc, #352]	; (8002d98 <HAL_GPIO_Init+0x298>)
 8002c38:	f043 0301 	orr.w	r3, r3, #1
 8002c3c:	6193      	str	r3, [r2, #24]
 8002c3e:	4b56      	ldr	r3, [pc, #344]	; (8002d98 <HAL_GPIO_Init+0x298>)
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002c4a:	4a54      	ldr	r2, [pc, #336]	; (8002d9c <HAL_GPIO_Init+0x29c>)
 8002c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4e:	089b      	lsrs	r3, r3, #2
 8002c50:	3302      	adds	r3, #2
 8002c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	f003 0303 	and.w	r3, r3, #3
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	220f      	movs	r2, #15
 8002c62:	fa02 f303 	lsl.w	r3, r2, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	68fa      	ldr	r2, [r7, #12]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a4b      	ldr	r2, [pc, #300]	; (8002da0 <HAL_GPIO_Init+0x2a0>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d013      	beq.n	8002c9e <HAL_GPIO_Init+0x19e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a4a      	ldr	r2, [pc, #296]	; (8002da4 <HAL_GPIO_Init+0x2a4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d00d      	beq.n	8002c9a <HAL_GPIO_Init+0x19a>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a49      	ldr	r2, [pc, #292]	; (8002da8 <HAL_GPIO_Init+0x2a8>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d007      	beq.n	8002c96 <HAL_GPIO_Init+0x196>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a48      	ldr	r2, [pc, #288]	; (8002dac <HAL_GPIO_Init+0x2ac>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d101      	bne.n	8002c92 <HAL_GPIO_Init+0x192>
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e006      	b.n	8002ca0 <HAL_GPIO_Init+0x1a0>
 8002c92:	2304      	movs	r3, #4
 8002c94:	e004      	b.n	8002ca0 <HAL_GPIO_Init+0x1a0>
 8002c96:	2302      	movs	r3, #2
 8002c98:	e002      	b.n	8002ca0 <HAL_GPIO_Init+0x1a0>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e000      	b.n	8002ca0 <HAL_GPIO_Init+0x1a0>
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca2:	f002 0203 	and.w	r2, r2, #3
 8002ca6:	0092      	lsls	r2, r2, #2
 8002ca8:	4093      	lsls	r3, r2
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002cb0:	493a      	ldr	r1, [pc, #232]	; (8002d9c <HAL_GPIO_Init+0x29c>)
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb4:	089b      	lsrs	r3, r3, #2
 8002cb6:	3302      	adds	r3, #2
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d006      	beq.n	8002cd8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002cca:	4b39      	ldr	r3, [pc, #228]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	4938      	ldr	r1, [pc, #224]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002cd0:	69bb      	ldr	r3, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
 8002cd6:	e006      	b.n	8002ce6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cd8:	4b35      	ldr	r3, [pc, #212]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	4933      	ldr	r1, [pc, #204]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d006      	beq.n	8002d00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002cf2:	4b2f      	ldr	r3, [pc, #188]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002cf4:	685a      	ldr	r2, [r3, #4]
 8002cf6:	492e      	ldr	r1, [pc, #184]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	604b      	str	r3, [r1, #4]
 8002cfe:	e006      	b.n	8002d0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002d00:	4b2b      	ldr	r3, [pc, #172]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	43db      	mvns	r3, r3
 8002d08:	4929      	ldr	r1, [pc, #164]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d006      	beq.n	8002d28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d1a:	4b25      	ldr	r3, [pc, #148]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	4924      	ldr	r1, [pc, #144]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	608b      	str	r3, [r1, #8]
 8002d26:	e006      	b.n	8002d36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d28:	4b21      	ldr	r3, [pc, #132]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002d2a:	689a      	ldr	r2, [r3, #8]
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	43db      	mvns	r3, r3
 8002d30:	491f      	ldr	r1, [pc, #124]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d42:	4b1b      	ldr	r3, [pc, #108]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002d44:	68da      	ldr	r2, [r3, #12]
 8002d46:	491a      	ldr	r1, [pc, #104]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60cb      	str	r3, [r1, #12]
 8002d4e:	e006      	b.n	8002d5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d50:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002d52:	68da      	ldr	r2, [r3, #12]
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	4915      	ldr	r1, [pc, #84]	; (8002db0 <HAL_GPIO_Init+0x2b0>)
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	3301      	adds	r3, #1
 8002d62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	f47f aed0 	bne.w	8002b14 <HAL_GPIO_Init+0x14>
  }
}
 8002d74:	bf00      	nop
 8002d76:	372c      	adds	r7, #44	; 0x2c
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bc80      	pop	{r7}
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	10210000 	.word	0x10210000
 8002d84:	10110000 	.word	0x10110000
 8002d88:	10120000 	.word	0x10120000
 8002d8c:	10310000 	.word	0x10310000
 8002d90:	10320000 	.word	0x10320000
 8002d94:	10220000 	.word	0x10220000
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40010000 	.word	0x40010000
 8002da0:	40010800 	.word	0x40010800
 8002da4:	40010c00 	.word	0x40010c00
 8002da8:	40011000 	.word	0x40011000
 8002dac:	40011400 	.word	0x40011400
 8002db0:	40010400 	.word	0x40010400

08002db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b083      	sub	sp, #12
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dc4:	787b      	ldrb	r3, [r7, #1]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d003      	beq.n	8002dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dca:	887a      	ldrh	r2, [r7, #2]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002dd0:	e003      	b.n	8002dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002dd2:	887b      	ldrh	r3, [r7, #2]
 8002dd4:	041a      	lsls	r2, r3, #16
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	611a      	str	r2, [r3, #16]
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	460b      	mov	r3, r1
 8002dee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68da      	ldr	r2, [r3, #12]
 8002df4:	887b      	ldrh	r3, [r7, #2]
 8002df6:	4013      	ands	r3, r2
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d003      	beq.n	8002e04 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dfc:	887a      	ldrh	r2, [r7, #2]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002e02:	e002      	b.n	8002e0a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e04:	887a      	ldrh	r2, [r7, #2]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	611a      	str	r2, [r3, #16]
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b084      	sub	sp, #16
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e10f      	b.n	8003046 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d106      	bne.n	8002e40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f7ff f916 	bl	800206c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2224      	movs	r2, #36	; 0x24
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	681a      	ldr	r2, [r3, #0]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f022 0201 	bic.w	r2, r2, #1
 8002e56:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e58:	f001 fb0e 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 8002e5c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	4a7b      	ldr	r2, [pc, #492]	; (8003050 <HAL_I2C_Init+0x23c>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d807      	bhi.n	8002e78 <HAL_I2C_Init+0x64>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	4a7a      	ldr	r2, [pc, #488]	; (8003054 <HAL_I2C_Init+0x240>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	bf94      	ite	ls
 8002e70:	2301      	movls	r3, #1
 8002e72:	2300      	movhi	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	e006      	b.n	8002e86 <HAL_I2C_Init+0x72>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4a77      	ldr	r2, [pc, #476]	; (8003058 <HAL_I2C_Init+0x244>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	bf94      	ite	ls
 8002e80:	2301      	movls	r3, #1
 8002e82:	2300      	movhi	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e0db      	b.n	8003046 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	4a72      	ldr	r2, [pc, #456]	; (800305c <HAL_I2C_Init+0x248>)
 8002e92:	fba2 2303 	umull	r2, r3, r2, r3
 8002e96:	0c9b      	lsrs	r3, r3, #18
 8002e98:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6a1b      	ldr	r3, [r3, #32]
 8002eb4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4a64      	ldr	r2, [pc, #400]	; (8003050 <HAL_I2C_Init+0x23c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d802      	bhi.n	8002ec8 <HAL_I2C_Init+0xb4>
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	e009      	b.n	8002edc <HAL_I2C_Init+0xc8>
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	4a63      	ldr	r2, [pc, #396]	; (8003060 <HAL_I2C_Init+0x24c>)
 8002ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed8:	099b      	lsrs	r3, r3, #6
 8002eda:	3301      	adds	r3, #1
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	69db      	ldr	r3, [r3, #28]
 8002eea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	4956      	ldr	r1, [pc, #344]	; (8003050 <HAL_I2C_Init+0x23c>)
 8002ef8:	428b      	cmp	r3, r1
 8002efa:	d80d      	bhi.n	8002f18 <HAL_I2C_Init+0x104>
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	1e59      	subs	r1, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	005b      	lsls	r3, r3, #1
 8002f06:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b04      	cmp	r3, #4
 8002f12:	bf38      	it	cc
 8002f14:	2304      	movcc	r3, #4
 8002f16:	e04f      	b.n	8002fb8 <HAL_I2C_Init+0x1a4>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d111      	bne.n	8002f44 <HAL_I2C_Init+0x130>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	1e58      	subs	r0, r3, #1
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6859      	ldr	r1, [r3, #4]
 8002f28:	460b      	mov	r3, r1
 8002f2a:	005b      	lsls	r3, r3, #1
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	e012      	b.n	8002f6a <HAL_I2C_Init+0x156>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	1e58      	subs	r0, r3, #1
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6859      	ldr	r1, [r3, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	0099      	lsls	r1, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <HAL_I2C_Init+0x15e>
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e022      	b.n	8002fb8 <HAL_I2C_Init+0x1a4>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10e      	bne.n	8002f98 <HAL_I2C_Init+0x184>
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	1e58      	subs	r0, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	460b      	mov	r3, r1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	440b      	add	r3, r1
 8002f88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8c:	3301      	adds	r3, #1
 8002f8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f96:	e00f      	b.n	8002fb8 <HAL_I2C_Init+0x1a4>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1e58      	subs	r0, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6859      	ldr	r1, [r3, #4]
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	0099      	lsls	r1, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	6809      	ldr	r1, [r1, #0]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69da      	ldr	r2, [r3, #28]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	430a      	orrs	r2, r1
 8002fda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fe6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6911      	ldr	r1, [r2, #16]
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	68d2      	ldr	r2, [r2, #12]
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6812      	ldr	r2, [r2, #0]
 8002ff8:	430b      	orrs	r3, r1
 8002ffa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695a      	ldr	r2, [r3, #20]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	431a      	orrs	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2220      	movs	r2, #32
 8003032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	000186a0 	.word	0x000186a0
 8003054:	001e847f 	.word	0x001e847f
 8003058:	003d08ff 	.word	0x003d08ff
 800305c:	431bde83 	.word	0x431bde83
 8003060:	10624dd3 	.word	0x10624dd3

08003064 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b088      	sub	sp, #32
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	607a      	str	r2, [r7, #4]
 800306e:	461a      	mov	r2, r3
 8003070:	460b      	mov	r3, r1
 8003072:	817b      	strh	r3, [r7, #10]
 8003074:	4613      	mov	r3, r2
 8003076:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003078:	f7ff fa28 	bl	80024cc <HAL_GetTick>
 800307c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003084:	b2db      	uxtb	r3, r3
 8003086:	2b20      	cmp	r3, #32
 8003088:	f040 80e0 	bne.w	800324c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	2319      	movs	r3, #25
 8003092:	2201      	movs	r2, #1
 8003094:	4970      	ldr	r1, [pc, #448]	; (8003258 <HAL_I2C_Master_Transmit+0x1f4>)
 8003096:	68f8      	ldr	r0, [r7, #12]
 8003098:	f000 fc3c 	bl	8003914 <I2C_WaitOnFlagUntilTimeout>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80030a2:	2302      	movs	r3, #2
 80030a4:	e0d3      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_I2C_Master_Transmit+0x50>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e0cc      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d007      	beq.n	80030da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f042 0201 	orr.w	r2, r2, #1
 80030d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2221      	movs	r2, #33	; 0x21
 80030ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2210      	movs	r2, #16
 80030f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	893a      	ldrh	r2, [r7, #8]
 800310a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	4a50      	ldr	r2, [pc, #320]	; (800325c <HAL_I2C_Master_Transmit+0x1f8>)
 800311a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800311c:	8979      	ldrh	r1, [r7, #10]
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	6a3a      	ldr	r2, [r7, #32]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 faca 	bl	80036bc <I2C_MasterRequestWrite>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e08d      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003148:	e066      	b.n	8003218 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800314a:	697a      	ldr	r2, [r7, #20]
 800314c:	6a39      	ldr	r1, [r7, #32]
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 fcb6 	bl	8003ac0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d00d      	beq.n	8003176 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	2b04      	cmp	r3, #4
 8003160:	d107      	bne.n	8003172 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003170:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e06b      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	781a      	ldrb	r2, [r3, #0]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003186:	1c5a      	adds	r2, r3, #1
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003190:	b29b      	uxth	r3, r3
 8003192:	3b01      	subs	r3, #1
 8003194:	b29a      	uxth	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800319e:	3b01      	subs	r3, #1
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	695b      	ldr	r3, [r3, #20]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d11b      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x188>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d017      	beq.n	80031ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c0:	781a      	ldrb	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031cc:	1c5a      	adds	r2, r3, #1
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	3b01      	subs	r3, #1
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e4:	3b01      	subs	r3, #1
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031ec:	697a      	ldr	r2, [r7, #20]
 80031ee:	6a39      	ldr	r1, [r7, #32]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fca6 	bl	8003b42 <I2C_WaitOnBTFFlagUntilTimeout>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00d      	beq.n	8003218 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003212:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e01a      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d194      	bne.n	800314a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800322e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003248:	2300      	movs	r3, #0
 800324a:	e000      	b.n	800324e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800324c:	2302      	movs	r3, #2
  }
}
 800324e:	4618      	mov	r0, r3
 8003250:	3718      	adds	r7, #24
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	00100002 	.word	0x00100002
 800325c:	ffff0000 	.word	0xffff0000

08003260 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b08c      	sub	sp, #48	; 0x30
 8003264:	af02      	add	r7, sp, #8
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	607a      	str	r2, [r7, #4]
 800326a:	461a      	mov	r2, r3
 800326c:	460b      	mov	r3, r1
 800326e:	817b      	strh	r3, [r7, #10]
 8003270:	4613      	mov	r3, r2
 8003272:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003274:	f7ff f92a 	bl	80024cc <HAL_GetTick>
 8003278:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b20      	cmp	r3, #32
 8003284:	f040 8213 	bne.w	80036ae <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	2319      	movs	r3, #25
 800328e:	2201      	movs	r2, #1
 8003290:	497e      	ldr	r1, [pc, #504]	; (800348c <HAL_I2C_Master_Receive+0x22c>)
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fb3e 	bl	8003914 <I2C_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800329e:	2302      	movs	r3, #2
 80032a0:	e206      	b.n	80036b0 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d101      	bne.n	80032b0 <HAL_I2C_Master_Receive+0x50>
 80032ac:	2302      	movs	r3, #2
 80032ae:	e1ff      	b.n	80036b0 <HAL_I2C_Master_Receive+0x450>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0301 	and.w	r3, r3, #1
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d007      	beq.n	80032d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0201 	orr.w	r2, r2, #1
 80032d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2222      	movs	r2, #34	; 0x22
 80032ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2210      	movs	r2, #16
 80032f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	687a      	ldr	r2, [r7, #4]
 8003300:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	893a      	ldrh	r2, [r7, #8]
 8003306:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4a5e      	ldr	r2, [pc, #376]	; (8003490 <HAL_I2C_Master_Receive+0x230>)
 8003316:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003318:	8979      	ldrh	r1, [r7, #10]
 800331a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f000 fa42 	bl	80037a8 <I2C_MasterRequestRead>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e1c0      	b.n	80036b0 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003332:	2b00      	cmp	r3, #0
 8003334:	d113      	bne.n	800335e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003336:	2300      	movs	r3, #0
 8003338:	623b      	str	r3, [r7, #32]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	695b      	ldr	r3, [r3, #20]
 8003340:	623b      	str	r3, [r7, #32]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	623b      	str	r3, [r7, #32]
 800334a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	e194      	b.n	8003688 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003362:	2b01      	cmp	r3, #1
 8003364:	d11d      	bne.n	80033a2 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003374:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003376:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003378:	2300      	movs	r3, #0
 800337a:	61fb      	str	r3, [r7, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	61fb      	str	r3, [r7, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	699b      	ldr	r3, [r3, #24]
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800339c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800339e:	b662      	cpsie	i
 80033a0:	e172      	b.n	8003688 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d11d      	bne.n	80033e6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80033ba:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033bc:	2300      	movs	r3, #0
 80033be:	61bb      	str	r3, [r7, #24]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	61bb      	str	r3, [r7, #24]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	699b      	ldr	r3, [r3, #24]
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80033e2:	b662      	cpsie	i
 80033e4:	e150      	b.n	8003688 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699b      	ldr	r3, [r3, #24]
 8003408:	617b      	str	r3, [r7, #20]
 800340a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800340c:	e13c      	b.n	8003688 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003412:	2b03      	cmp	r3, #3
 8003414:	f200 80f5 	bhi.w	8003602 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341c:	2b01      	cmp	r3, #1
 800341e:	d123      	bne.n	8003468 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003422:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 fbcd 	bl	8003bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800342a:	4603      	mov	r3, r0
 800342c:	2b00      	cmp	r3, #0
 800342e:	d001      	beq.n	8003434 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e13d      	b.n	80036b0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	691a      	ldr	r2, [r3, #16]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	1c5a      	adds	r2, r3, #1
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	3b01      	subs	r3, #1
 8003460:	b29a      	uxth	r2, r3
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003466:	e10f      	b.n	8003688 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346c:	2b02      	cmp	r3, #2
 800346e:	d150      	bne.n	8003512 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003476:	2200      	movs	r2, #0
 8003478:	4906      	ldr	r1, [pc, #24]	; (8003494 <HAL_I2C_Master_Receive+0x234>)
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 fa4a 	bl	8003914 <I2C_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d008      	beq.n	8003498 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e112      	b.n	80036b0 <HAL_I2C_Master_Receive+0x450>
 800348a:	bf00      	nop
 800348c:	00100002 	.word	0x00100002
 8003490:	ffff0000 	.word	0xffff0000
 8003494:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003498:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034a8:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	3b01      	subs	r3, #1
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80034dc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	691a      	ldr	r2, [r3, #16]
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	b2d2      	uxtb	r2, r2
 80034ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	1c5a      	adds	r2, r3, #1
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fa:	3b01      	subs	r3, #1
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003510:	e0ba      	b.n	8003688 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003518:	2200      	movs	r2, #0
 800351a:	4967      	ldr	r1, [pc, #412]	; (80036b8 <HAL_I2C_Master_Receive+0x458>)
 800351c:	68f8      	ldr	r0, [r7, #12]
 800351e:	f000 f9f9 	bl	8003914 <I2C_WaitOnFlagUntilTimeout>
 8003522:	4603      	mov	r3, r0
 8003524:	2b00      	cmp	r3, #0
 8003526:	d001      	beq.n	800352c <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e0c1      	b.n	80036b0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681a      	ldr	r2, [r3, #0]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800353a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800353c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003572:	9300      	str	r3, [sp, #0]
 8003574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003576:	2200      	movs	r2, #0
 8003578:	494f      	ldr	r1, [pc, #316]	; (80036b8 <HAL_I2C_Master_Receive+0x458>)
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f9ca 	bl	8003914 <I2C_WaitOnFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e092      	b.n	80036b0 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003598:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	691a      	ldr	r2, [r3, #16]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a4:	b2d2      	uxtb	r2, r2
 80035a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	3b01      	subs	r3, #1
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80035cc:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d8:	b2d2      	uxtb	r2, r2
 80035da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	1c5a      	adds	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	3b01      	subs	r3, #1
 80035ec:	b29a      	uxth	r2, r3
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003600:	e042      	b.n	8003688 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003604:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 fadc 	bl	8003bc4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e04c      	b.n	80036b0 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	691a      	ldr	r2, [r3, #16]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	1c5a      	adds	r2, r3, #1
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003632:	3b01      	subs	r3, #1
 8003634:	b29a      	uxth	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0304 	and.w	r3, r3, #4
 8003652:	2b04      	cmp	r3, #4
 8003654:	d118      	bne.n	8003688 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003660:	b2d2      	uxtb	r2, r2
 8003662:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003668:	1c5a      	adds	r2, r3, #1
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	3b01      	subs	r3, #1
 8003674:	b29a      	uxth	r2, r3
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368c:	2b00      	cmp	r3, #0
 800368e:	f47f aebe 	bne.w	800340e <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2200      	movs	r2, #0
 80036a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036aa:	2300      	movs	r3, #0
 80036ac:	e000      	b.n	80036b0 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
  }
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3728      	adds	r7, #40	; 0x28
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	00010004 	.word	0x00010004

080036bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	607a      	str	r2, [r7, #4]
 80036c6:	603b      	str	r3, [r7, #0]
 80036c8:	460b      	mov	r3, r1
 80036ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80036d2:	697b      	ldr	r3, [r7, #20]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d006      	beq.n	80036e6 <I2C_MasterRequestWrite+0x2a>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d003      	beq.n	80036e6 <I2C_MasterRequestWrite+0x2a>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036e4:	d108      	bne.n	80036f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e00b      	b.n	8003710 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	2b12      	cmp	r3, #18
 80036fe:	d107      	bne.n	8003710 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800370e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	9300      	str	r3, [sp, #0]
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f8f9 	bl	8003914 <I2C_WaitOnFlagUntilTimeout>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e035      	b.n	8003798 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003734:	d108      	bne.n	8003748 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003736:	897b      	ldrh	r3, [r7, #10]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	461a      	mov	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003744:	611a      	str	r2, [r3, #16]
 8003746:	e01b      	b.n	8003780 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003748:	897b      	ldrh	r3, [r7, #10]
 800374a:	11db      	asrs	r3, r3, #7
 800374c:	b2db      	uxtb	r3, r3
 800374e:	f003 0306 	and.w	r3, r3, #6
 8003752:	b2db      	uxtb	r3, r3
 8003754:	f063 030f 	orn	r3, r3, #15
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	490e      	ldr	r1, [pc, #56]	; (80037a0 <I2C_MasterRequestWrite+0xe4>)
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	f000 f92b 	bl	80039c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800376c:	4603      	mov	r3, r0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d001      	beq.n	8003776 <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e010      	b.n	8003798 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003776:	897b      	ldrh	r3, [r7, #10]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	4907      	ldr	r1, [pc, #28]	; (80037a4 <I2C_MasterRequestWrite+0xe8>)
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f91b 	bl	80039c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d001      	beq.n	8003796 <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e000      	b.n	8003798 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3718      	adds	r7, #24
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	00010008 	.word	0x00010008
 80037a4:	00010002 	.word	0x00010002

080037a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b088      	sub	sp, #32
 80037ac:	af02      	add	r7, sp, #8
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	607a      	str	r2, [r7, #4]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	460b      	mov	r3, r1
 80037b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	2b08      	cmp	r3, #8
 80037d2:	d006      	beq.n	80037e2 <I2C_MasterRequestRead+0x3a>
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d003      	beq.n	80037e2 <I2C_MasterRequestRead+0x3a>
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e0:	d108      	bne.n	80037f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e00b      	b.n	800380c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f8:	2b11      	cmp	r3, #17
 80037fa:	d107      	bne.n	800380c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681a      	ldr	r2, [r3, #0]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f87b 	bl	8003914 <I2C_WaitOnFlagUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e06d      	b.n	8003904 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003830:	d108      	bne.n	8003844 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003832:	897b      	ldrh	r3, [r7, #10]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	b2da      	uxtb	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	611a      	str	r2, [r3, #16]
 8003842:	e053      	b.n	80038ec <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003844:	897b      	ldrh	r3, [r7, #10]
 8003846:	11db      	asrs	r3, r3, #7
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f003 0306 	and.w	r3, r3, #6
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f063 030f 	orn	r3, r3, #15
 8003854:	b2da      	uxtb	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	492a      	ldr	r1, [pc, #168]	; (800390c <I2C_MasterRequestRead+0x164>)
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f8ad 	bl	80039c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e048      	b.n	8003904 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003872:	897b      	ldrh	r3, [r7, #10]
 8003874:	b2da      	uxtb	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	4923      	ldr	r1, [pc, #140]	; (8003910 <I2C_MasterRequestRead+0x168>)
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 f89d 	bl	80039c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e038      	b.n	8003904 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	613b      	str	r3, [r7, #16]
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	699b      	ldr	r3, [r3, #24]
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038b6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 f825 	bl	8003914 <I2C_WaitOnFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d001      	beq.n	80038d4 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e017      	b.n	8003904 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80038d4:	897b      	ldrh	r3, [r7, #10]
 80038d6:	11db      	asrs	r3, r3, #7
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	f003 0306 	and.w	r3, r3, #6
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f063 030e 	orn	r3, r3, #14
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	4907      	ldr	r1, [pc, #28]	; (8003910 <I2C_MasterRequestRead+0x168>)
 80038f2:	68f8      	ldr	r0, [r7, #12]
 80038f4:	f000 f865 	bl	80039c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3718      	adds	r7, #24
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	00010008 	.word	0x00010008
 8003910:	00010002 	.word	0x00010002

08003914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	603b      	str	r3, [r7, #0]
 8003920:	4613      	mov	r3, r2
 8003922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003924:	e025      	b.n	8003972 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800392c:	d021      	beq.n	8003972 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392e:	f7fe fdcd 	bl	80024cc <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	429a      	cmp	r2, r3
 800393c:	d302      	bcc.n	8003944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d116      	bne.n	8003972 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f043 0220 	orr.w	r2, r3, #32
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e023      	b.n	80039ba <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d10d      	bne.n	8003998 <I2C_WaitOnFlagUntilTimeout+0x84>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	43da      	mvns	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4013      	ands	r3, r2
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf0c      	ite	eq
 800398e:	2301      	moveq	r3, #1
 8003990:	2300      	movne	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	461a      	mov	r2, r3
 8003996:	e00c      	b.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	43da      	mvns	r2, r3
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	4013      	ands	r3, r2
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	bf0c      	ite	eq
 80039aa:	2301      	moveq	r3, #1
 80039ac:	2300      	movne	r3, #0
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	461a      	mov	r2, r3
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d0b6      	beq.n	8003926 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b084      	sub	sp, #16
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	60f8      	str	r0, [r7, #12]
 80039ca:	60b9      	str	r1, [r7, #8]
 80039cc:	607a      	str	r2, [r7, #4]
 80039ce:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039d0:	e051      	b.n	8003a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	695b      	ldr	r3, [r3, #20]
 80039d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e0:	d123      	bne.n	8003a2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039fa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2220      	movs	r2, #32
 8003a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f043 0204 	orr.w	r2, r3, #4
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e046      	b.n	8003ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d021      	beq.n	8003a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a32:	f7fe fd4b 	bl	80024cc <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d116      	bne.n	8003a76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2220      	movs	r2, #32
 8003a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a62:	f043 0220 	orr.w	r2, r3, #32
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a72:	2301      	movs	r3, #1
 8003a74:	e020      	b.n	8003ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	0c1b      	lsrs	r3, r3, #16
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d10c      	bne.n	8003a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	43da      	mvns	r2, r3
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	e00b      	b.n	8003ab2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	43da      	mvns	r2, r3
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	bf14      	ite	ne
 8003aac:	2301      	movne	r3, #1
 8003aae:	2300      	moveq	r3, #0
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d18d      	bne.n	80039d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	60b9      	str	r1, [r7, #8]
 8003aca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003acc:	e02d      	b.n	8003b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ace:	68f8      	ldr	r0, [r7, #12]
 8003ad0:	f000 f8ce 	bl	8003c70 <I2C_IsAcknowledgeFailed>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e02d      	b.n	8003b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae4:	d021      	beq.n	8003b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae6:	f7fe fcf1 	bl	80024cc <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d302      	bcc.n	8003afc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d116      	bne.n	8003b2a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b16:	f043 0220 	orr.w	r2, r3, #32
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e007      	b.n	8003b3a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b34:	2b80      	cmp	r3, #128	; 0x80
 8003b36:	d1ca      	bne.n	8003ace <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}

08003b42 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b42:	b580      	push	{r7, lr}
 8003b44:	b084      	sub	sp, #16
 8003b46:	af00      	add	r7, sp, #0
 8003b48:	60f8      	str	r0, [r7, #12]
 8003b4a:	60b9      	str	r1, [r7, #8]
 8003b4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b4e:	e02d      	b.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	f000 f88d 	bl	8003c70 <I2C_IsAcknowledgeFailed>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d001      	beq.n	8003b60 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e02d      	b.n	8003bbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b66:	d021      	beq.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b68:	f7fe fcb0 	bl	80024cc <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d302      	bcc.n	8003b7e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d116      	bne.n	8003bac <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	2200      	movs	r2, #0
 8003b82:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b98:	f043 0220 	orr.w	r2, r3, #32
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	e007      	b.n	8003bbc <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0304 	and.w	r3, r3, #4
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d1ca      	bne.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bba:	2300      	movs	r3, #0
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b084      	sub	sp, #16
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bd0:	e042      	b.n	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	695b      	ldr	r3, [r3, #20]
 8003bd8:	f003 0310 	and.w	r3, r3, #16
 8003bdc:	2b10      	cmp	r3, #16
 8003bde:	d119      	bne.n	8003c14 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0210 	mvn.w	r2, #16
 8003be8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2200      	movs	r2, #0
 8003bee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e029      	b.n	8003c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c14:	f7fe fc5a 	bl	80024cc <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d302      	bcc.n	8003c2a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d116      	bne.n	8003c58 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f043 0220 	orr.w	r2, r3, #32
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e007      	b.n	8003c68 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d1b5      	bne.n	8003bd2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b083      	sub	sp, #12
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c86:	d11b      	bne.n	8003cc0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c90:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cac:	f043 0204 	orr.w	r2, r3, #4
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	370c      	adds	r7, #12
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e26c      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	f000 8087 	beq.w	8003dfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cec:	4b92      	ldr	r3, [pc, #584]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	f003 030c 	and.w	r3, r3, #12
 8003cf4:	2b04      	cmp	r3, #4
 8003cf6:	d00c      	beq.n	8003d12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003cf8:	4b8f      	ldr	r3, [pc, #572]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	f003 030c 	and.w	r3, r3, #12
 8003d00:	2b08      	cmp	r3, #8
 8003d02:	d112      	bne.n	8003d2a <HAL_RCC_OscConfig+0x5e>
 8003d04:	4b8c      	ldr	r3, [pc, #560]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d10b      	bne.n	8003d2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d12:	4b89      	ldr	r3, [pc, #548]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d06c      	beq.n	8003df8 <HAL_RCC_OscConfig+0x12c>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d168      	bne.n	8003df8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e246      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d32:	d106      	bne.n	8003d42 <HAL_RCC_OscConfig+0x76>
 8003d34:	4b80      	ldr	r3, [pc, #512]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a7f      	ldr	r2, [pc, #508]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	e02e      	b.n	8003da0 <HAL_RCC_OscConfig+0xd4>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10c      	bne.n	8003d64 <HAL_RCC_OscConfig+0x98>
 8003d4a:	4b7b      	ldr	r3, [pc, #492]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a7a      	ldr	r2, [pc, #488]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	4b78      	ldr	r3, [pc, #480]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a77      	ldr	r2, [pc, #476]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	e01d      	b.n	8003da0 <HAL_RCC_OscConfig+0xd4>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d6c:	d10c      	bne.n	8003d88 <HAL_RCC_OscConfig+0xbc>
 8003d6e:	4b72      	ldr	r3, [pc, #456]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a71      	ldr	r2, [pc, #452]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	4b6f      	ldr	r3, [pc, #444]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a6e      	ldr	r2, [pc, #440]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d84:	6013      	str	r3, [r2, #0]
 8003d86:	e00b      	b.n	8003da0 <HAL_RCC_OscConfig+0xd4>
 8003d88:	4b6b      	ldr	r3, [pc, #428]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a6a      	ldr	r2, [pc, #424]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b68      	ldr	r3, [pc, #416]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a67      	ldr	r2, [pc, #412]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d013      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da8:	f7fe fb90 	bl	80024cc <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fe fb8c 	bl	80024cc <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e1fa      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b5d      	ldr	r3, [pc, #372]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0f0      	beq.n	8003db0 <HAL_RCC_OscConfig+0xe4>
 8003dce:	e014      	b.n	8003dfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd0:	f7fe fb7c 	bl	80024cc <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd8:	f7fe fb78 	bl	80024cc <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b64      	cmp	r3, #100	; 0x64
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e1e6      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dea:	4b53      	ldr	r3, [pc, #332]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d1f0      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x10c>
 8003df6:	e000      	b.n	8003dfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f003 0302 	and.w	r3, r3, #2
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d063      	beq.n	8003ece <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e06:	4b4c      	ldr	r3, [pc, #304]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f003 030c 	and.w	r3, r3, #12
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d00b      	beq.n	8003e2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e12:	4b49      	ldr	r3, [pc, #292]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	2b08      	cmp	r3, #8
 8003e1c:	d11c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x18c>
 8003e1e:	4b46      	ldr	r3, [pc, #280]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d116      	bne.n	8003e58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	4b43      	ldr	r3, [pc, #268]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d005      	beq.n	8003e42 <HAL_RCC_OscConfig+0x176>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	691b      	ldr	r3, [r3, #16]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e1ba      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e42:	4b3d      	ldr	r3, [pc, #244]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	4939      	ldr	r1, [pc, #228]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	e03a      	b.n	8003ece <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d020      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e60:	4b36      	ldr	r3, [pc, #216]	; (8003f3c <HAL_RCC_OscConfig+0x270>)
 8003e62:	2201      	movs	r2, #1
 8003e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e66:	f7fe fb31 	bl	80024cc <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e6c:	e008      	b.n	8003e80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e6e:	f7fe fb2d 	bl	80024cc <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b02      	cmp	r3, #2
 8003e7a:	d901      	bls.n	8003e80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e19b      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e80:	4b2d      	ldr	r3, [pc, #180]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0302 	and.w	r3, r3, #2
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0f0      	beq.n	8003e6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8c:	4b2a      	ldr	r3, [pc, #168]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	4927      	ldr	r1, [pc, #156]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	600b      	str	r3, [r1, #0]
 8003ea0:	e015      	b.n	8003ece <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea2:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <HAL_RCC_OscConfig+0x270>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea8:	f7fe fb10 	bl	80024cc <HAL_GetTick>
 8003eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eae:	e008      	b.n	8003ec2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eb0:	f7fe fb0c 	bl	80024cc <HAL_GetTick>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	1ad3      	subs	r3, r2, r3
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e17a      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ec2:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d1f0      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 0308 	and.w	r3, r3, #8
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d03a      	beq.n	8003f50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	699b      	ldr	r3, [r3, #24]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d019      	beq.n	8003f16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ee2:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee8:	f7fe faf0 	bl	80024cc <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003eee:	e008      	b.n	8003f02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ef0:	f7fe faec 	bl	80024cc <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	2b02      	cmp	r3, #2
 8003efc:	d901      	bls.n	8003f02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e15a      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f02:	4b0d      	ldr	r3, [pc, #52]	; (8003f38 <HAL_RCC_OscConfig+0x26c>)
 8003f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f06:	f003 0302 	and.w	r3, r3, #2
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d0f0      	beq.n	8003ef0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f0e:	2001      	movs	r0, #1
 8003f10:	f000 fada 	bl	80044c8 <RCC_Delay>
 8003f14:	e01c      	b.n	8003f50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f16:	4b0a      	ldr	r3, [pc, #40]	; (8003f40 <HAL_RCC_OscConfig+0x274>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1c:	f7fe fad6 	bl	80024cc <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f22:	e00f      	b.n	8003f44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f24:	f7fe fad2 	bl	80024cc <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	2b02      	cmp	r3, #2
 8003f30:	d908      	bls.n	8003f44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e140      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
 8003f36:	bf00      	nop
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	42420000 	.word	0x42420000
 8003f40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f44:	4b9e      	ldr	r3, [pc, #632]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1e9      	bne.n	8003f24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80a6 	beq.w	80040aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f62:	4b97      	ldr	r3, [pc, #604]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8003f64:	69db      	ldr	r3, [r3, #28]
 8003f66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10d      	bne.n	8003f8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f6e:	4b94      	ldr	r3, [pc, #592]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	4a93      	ldr	r2, [pc, #588]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8003f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f78:	61d3      	str	r3, [r2, #28]
 8003f7a:	4b91      	ldr	r3, [pc, #580]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8003f7c:	69db      	ldr	r3, [r3, #28]
 8003f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f82:	60bb      	str	r3, [r7, #8]
 8003f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f86:	2301      	movs	r3, #1
 8003f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8a:	4b8e      	ldr	r3, [pc, #568]	; (80041c4 <HAL_RCC_OscConfig+0x4f8>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d118      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f96:	4b8b      	ldr	r3, [pc, #556]	; (80041c4 <HAL_RCC_OscConfig+0x4f8>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a8a      	ldr	r2, [pc, #552]	; (80041c4 <HAL_RCC_OscConfig+0x4f8>)
 8003f9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe fa93 	bl	80024cc <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003faa:	f7fe fa8f 	bl	80024cc <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b64      	cmp	r3, #100	; 0x64
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e0fd      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbc:	4b81      	ldr	r3, [pc, #516]	; (80041c4 <HAL_RCC_OscConfig+0x4f8>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d106      	bne.n	8003fde <HAL_RCC_OscConfig+0x312>
 8003fd0:	4b7b      	ldr	r3, [pc, #492]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	4a7a      	ldr	r2, [pc, #488]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8003fd6:	f043 0301 	orr.w	r3, r3, #1
 8003fda:	6213      	str	r3, [r2, #32]
 8003fdc:	e02d      	b.n	800403a <HAL_RCC_OscConfig+0x36e>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d10c      	bne.n	8004000 <HAL_RCC_OscConfig+0x334>
 8003fe6:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8003fe8:	6a1b      	ldr	r3, [r3, #32]
 8003fea:	4a75      	ldr	r2, [pc, #468]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8003fec:	f023 0301 	bic.w	r3, r3, #1
 8003ff0:	6213      	str	r3, [r2, #32]
 8003ff2:	4b73      	ldr	r3, [pc, #460]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	4a72      	ldr	r2, [pc, #456]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8003ff8:	f023 0304 	bic.w	r3, r3, #4
 8003ffc:	6213      	str	r3, [r2, #32]
 8003ffe:	e01c      	b.n	800403a <HAL_RCC_OscConfig+0x36e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	2b05      	cmp	r3, #5
 8004006:	d10c      	bne.n	8004022 <HAL_RCC_OscConfig+0x356>
 8004008:	4b6d      	ldr	r3, [pc, #436]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4a6c      	ldr	r2, [pc, #432]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 800400e:	f043 0304 	orr.w	r3, r3, #4
 8004012:	6213      	str	r3, [r2, #32]
 8004014:	4b6a      	ldr	r3, [pc, #424]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	4a69      	ldr	r2, [pc, #420]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 800401a:	f043 0301 	orr.w	r3, r3, #1
 800401e:	6213      	str	r3, [r2, #32]
 8004020:	e00b      	b.n	800403a <HAL_RCC_OscConfig+0x36e>
 8004022:	4b67      	ldr	r3, [pc, #412]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	4a66      	ldr	r2, [pc, #408]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8004028:	f023 0301 	bic.w	r3, r3, #1
 800402c:	6213      	str	r3, [r2, #32]
 800402e:	4b64      	ldr	r3, [pc, #400]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	4a63      	ldr	r2, [pc, #396]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8004034:	f023 0304 	bic.w	r3, r3, #4
 8004038:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	68db      	ldr	r3, [r3, #12]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d015      	beq.n	800406e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004042:	f7fe fa43 	bl	80024cc <HAL_GetTick>
 8004046:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004048:	e00a      	b.n	8004060 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800404a:	f7fe fa3f 	bl	80024cc <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	f241 3288 	movw	r2, #5000	; 0x1388
 8004058:	4293      	cmp	r3, r2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0ab      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004060:	4b57      	ldr	r3, [pc, #348]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d0ee      	beq.n	800404a <HAL_RCC_OscConfig+0x37e>
 800406c:	e014      	b.n	8004098 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800406e:	f7fe fa2d 	bl	80024cc <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004074:	e00a      	b.n	800408c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004076:	f7fe fa29 	bl	80024cc <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	f241 3288 	movw	r2, #5000	; 0x1388
 8004084:	4293      	cmp	r3, r2
 8004086:	d901      	bls.n	800408c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004088:	2303      	movs	r3, #3
 800408a:	e095      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800408c:	4b4c      	ldr	r3, [pc, #304]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 800408e:	6a1b      	ldr	r3, [r3, #32]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1ee      	bne.n	8004076 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004098:	7dfb      	ldrb	r3, [r7, #23]
 800409a:	2b01      	cmp	r3, #1
 800409c:	d105      	bne.n	80040aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800409e:	4b48      	ldr	r3, [pc, #288]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	4a47      	ldr	r2, [pc, #284]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 80040a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	f000 8081 	beq.w	80041b6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040b4:	4b42      	ldr	r3, [pc, #264]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d061      	beq.n	8004184 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d146      	bne.n	8004156 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040c8:	4b3f      	ldr	r3, [pc, #252]	; (80041c8 <HAL_RCC_OscConfig+0x4fc>)
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040ce:	f7fe f9fd 	bl	80024cc <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040d6:	f7fe f9f9 	bl	80024cc <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e067      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040e8:	4b35      	ldr	r3, [pc, #212]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6a1b      	ldr	r3, [r3, #32]
 80040f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040fc:	d108      	bne.n	8004110 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80040fe:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	492d      	ldr	r1, [pc, #180]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 800410c:	4313      	orrs	r3, r2
 800410e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004110:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a19      	ldr	r1, [r3, #32]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004120:	430b      	orrs	r3, r1
 8004122:	4927      	ldr	r1, [pc, #156]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8004124:	4313      	orrs	r3, r2
 8004126:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004128:	4b27      	ldr	r3, [pc, #156]	; (80041c8 <HAL_RCC_OscConfig+0x4fc>)
 800412a:	2201      	movs	r2, #1
 800412c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412e:	f7fe f9cd 	bl	80024cc <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004134:	e008      	b.n	8004148 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004136:	f7fe f9c9 	bl	80024cc <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	2b02      	cmp	r3, #2
 8004142:	d901      	bls.n	8004148 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e037      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004148:	4b1d      	ldr	r3, [pc, #116]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0f0      	beq.n	8004136 <HAL_RCC_OscConfig+0x46a>
 8004154:	e02f      	b.n	80041b6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004156:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <HAL_RCC_OscConfig+0x4fc>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fe f9b6 	bl	80024cc <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004164:	f7fe f9b2 	bl	80024cc <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e020      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004176:	4b12      	ldr	r3, [pc, #72]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1f0      	bne.n	8004164 <HAL_RCC_OscConfig+0x498>
 8004182:	e018      	b.n	80041b6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	2b01      	cmp	r3, #1
 800418a:	d101      	bne.n	8004190 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e013      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004190:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_OscConfig+0x4f4>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d001      	beq.n	80041b6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3718      	adds	r7, #24
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	40007000 	.word	0x40007000
 80041c8:	42420060 	.word	0x42420060

080041cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0d0      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80041e0:	4b6a      	ldr	r3, [pc, #424]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d910      	bls.n	8004210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b67      	ldr	r3, [pc, #412]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f023 0207 	bic.w	r2, r3, #7
 80041f6:	4965      	ldr	r1, [pc, #404]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b63      	ldr	r3, [pc, #396]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0b8      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d020      	beq.n	800425e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004228:	4b59      	ldr	r3, [pc, #356]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	4a58      	ldr	r2, [pc, #352]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800422e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004232:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0308 	and.w	r3, r3, #8
 800423c:	2b00      	cmp	r3, #0
 800423e:	d005      	beq.n	800424c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004240:	4b53      	ldr	r3, [pc, #332]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	4a52      	ldr	r2, [pc, #328]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004246:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800424a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800424c:	4b50      	ldr	r3, [pc, #320]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	494d      	ldr	r1, [pc, #308]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800425a:	4313      	orrs	r3, r2
 800425c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d040      	beq.n	80042ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004272:	4b47      	ldr	r3, [pc, #284]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d115      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e07f      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	2b02      	cmp	r3, #2
 8004288:	d107      	bne.n	800429a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800428a:	4b41      	ldr	r3, [pc, #260]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d109      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e073      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800429a:	4b3d      	ldr	r3, [pc, #244]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d101      	bne.n	80042aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e06b      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042aa:	4b39      	ldr	r3, [pc, #228]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f023 0203 	bic.w	r2, r3, #3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4936      	ldr	r1, [pc, #216]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 80042b8:	4313      	orrs	r3, r2
 80042ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042bc:	f7fe f906 	bl	80024cc <HAL_GetTick>
 80042c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	e00a      	b.n	80042da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042c4:	f7fe f902 	bl	80024cc <HAL_GetTick>
 80042c8:	4602      	mov	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d901      	bls.n	80042da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042d6:	2303      	movs	r3, #3
 80042d8:	e053      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042da:	4b2d      	ldr	r3, [pc, #180]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 020c 	and.w	r2, r3, #12
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d1eb      	bne.n	80042c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80042ec:	4b27      	ldr	r3, [pc, #156]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0307 	and.w	r3, r3, #7
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d210      	bcs.n	800431c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042fa:	4b24      	ldr	r3, [pc, #144]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 0207 	bic.w	r2, r3, #7
 8004302:	4922      	ldr	r1, [pc, #136]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	4313      	orrs	r3, r2
 8004308:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800430a:	4b20      	ldr	r3, [pc, #128]	; (800438c <HAL_RCC_ClockConfig+0x1c0>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0307 	and.w	r3, r3, #7
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	429a      	cmp	r2, r3
 8004316:	d001      	beq.n	800431c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e032      	b.n	8004382 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f003 0304 	and.w	r3, r3, #4
 8004324:	2b00      	cmp	r3, #0
 8004326:	d008      	beq.n	800433a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004328:	4b19      	ldr	r3, [pc, #100]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	4916      	ldr	r1, [pc, #88]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004336:	4313      	orrs	r3, r2
 8004338:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d009      	beq.n	800435a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004346:	4b12      	ldr	r3, [pc, #72]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	00db      	lsls	r3, r3, #3
 8004354:	490e      	ldr	r1, [pc, #56]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004356:	4313      	orrs	r3, r2
 8004358:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800435a:	f000 f821 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800435e:	4601      	mov	r1, r0
 8004360:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <HAL_RCC_ClockConfig+0x1c4>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	091b      	lsrs	r3, r3, #4
 8004366:	f003 030f 	and.w	r3, r3, #15
 800436a:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <HAL_RCC_ClockConfig+0x1c8>)
 800436c:	5cd3      	ldrb	r3, [r2, r3]
 800436e:	fa21 f303 	lsr.w	r3, r1, r3
 8004372:	4a09      	ldr	r2, [pc, #36]	; (8004398 <HAL_RCC_ClockConfig+0x1cc>)
 8004374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004376:	4b09      	ldr	r3, [pc, #36]	; (800439c <HAL_RCC_ClockConfig+0x1d0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4618      	mov	r0, r3
 800437c:	f7fe f864 	bl	8002448 <HAL_InitTick>

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40022000 	.word	0x40022000
 8004390:	40021000 	.word	0x40021000
 8004394:	080069a0 	.word	0x080069a0
 8004398:	20000008 	.word	0x20000008
 800439c:	2000000c 	.word	0x2000000c

080043a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b490      	push	{r4, r7}
 80043a2:	b08a      	sub	sp, #40	; 0x28
 80043a4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80043a6:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <HAL_RCC_GetSysClockFreq+0xb0>)
 80043a8:	1d3c      	adds	r4, r7, #4
 80043aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80043b0:	4b28      	ldr	r3, [pc, #160]	; (8004454 <HAL_RCC_GetSysClockFreq+0xb4>)
 80043b2:	881b      	ldrh	r3, [r3, #0]
 80043b4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	61fb      	str	r3, [r7, #28]
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
 80043be:	2300      	movs	r3, #0
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80043ca:	4b23      	ldr	r3, [pc, #140]	; (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f003 030c 	and.w	r3, r3, #12
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d002      	beq.n	80043e0 <HAL_RCC_GetSysClockFreq+0x40>
 80043da:	2b08      	cmp	r3, #8
 80043dc:	d003      	beq.n	80043e6 <HAL_RCC_GetSysClockFreq+0x46>
 80043de:	e02d      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80043e0:	4b1e      	ldr	r3, [pc, #120]	; (800445c <HAL_RCC_GetSysClockFreq+0xbc>)
 80043e2:	623b      	str	r3, [r7, #32]
      break;
 80043e4:	e02d      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	0c9b      	lsrs	r3, r3, #18
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80043f2:	4413      	add	r3, r2
 80043f4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80043f8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d013      	beq.n	800442c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004404:	4b14      	ldr	r3, [pc, #80]	; (8004458 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	0c5b      	lsrs	r3, r3, #17
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8004412:	4413      	add	r3, r2
 8004414:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004418:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	4a0f      	ldr	r2, [pc, #60]	; (800445c <HAL_RCC_GetSysClockFreq+0xbc>)
 800441e:	fb02 f203 	mul.w	r2, r2, r3
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	fbb2 f3f3 	udiv	r3, r2, r3
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
 800442a:	e004      	b.n	8004436 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4a0c      	ldr	r2, [pc, #48]	; (8004460 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004430:	fb02 f303 	mul.w	r3, r2, r3
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	623b      	str	r3, [r7, #32]
      break;
 800443a:	e002      	b.n	8004442 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800443c:	4b07      	ldr	r3, [pc, #28]	; (800445c <HAL_RCC_GetSysClockFreq+0xbc>)
 800443e:	623b      	str	r3, [r7, #32]
      break;
 8004440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004442:	6a3b      	ldr	r3, [r7, #32]
}
 8004444:	4618      	mov	r0, r3
 8004446:	3728      	adds	r7, #40	; 0x28
 8004448:	46bd      	mov	sp, r7
 800444a:	bc90      	pop	{r4, r7}
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	0800698c 	.word	0x0800698c
 8004454:	0800699c 	.word	0x0800699c
 8004458:	40021000 	.word	0x40021000
 800445c:	007a1200 	.word	0x007a1200
 8004460:	003d0900 	.word	0x003d0900

08004464 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004468:	4b02      	ldr	r3, [pc, #8]	; (8004474 <HAL_RCC_GetHCLKFreq+0x10>)
 800446a:	681b      	ldr	r3, [r3, #0]
}
 800446c:	4618      	mov	r0, r3
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	20000008 	.word	0x20000008

08004478 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800447c:	f7ff fff2 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 8004480:	4601      	mov	r1, r0
 8004482:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	0a1b      	lsrs	r3, r3, #8
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	4a03      	ldr	r2, [pc, #12]	; (800449c <HAL_RCC_GetPCLK1Freq+0x24>)
 800448e:	5cd3      	ldrb	r3, [r2, r3]
 8004490:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004494:	4618      	mov	r0, r3
 8004496:	bd80      	pop	{r7, pc}
 8004498:	40021000 	.word	0x40021000
 800449c:	080069b0 	.word	0x080069b0

080044a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044a4:	f7ff ffde 	bl	8004464 <HAL_RCC_GetHCLKFreq>
 80044a8:	4601      	mov	r1, r0
 80044aa:	4b05      	ldr	r3, [pc, #20]	; (80044c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	0adb      	lsrs	r3, r3, #11
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	4a03      	ldr	r2, [pc, #12]	; (80044c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044b6:	5cd3      	ldrb	r3, [r2, r3]
 80044b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80044bc:	4618      	mov	r0, r3
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40021000 	.word	0x40021000
 80044c4:	080069b0 	.word	0x080069b0

080044c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b085      	sub	sp, #20
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80044d0:	4b0a      	ldr	r3, [pc, #40]	; (80044fc <RCC_Delay+0x34>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a0a      	ldr	r2, [pc, #40]	; (8004500 <RCC_Delay+0x38>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	0a5b      	lsrs	r3, r3, #9
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	fb02 f303 	mul.w	r3, r2, r3
 80044e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80044e4:	bf00      	nop
  }
  while (Delay --);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	1e5a      	subs	r2, r3, #1
 80044ea:	60fa      	str	r2, [r7, #12]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1f9      	bne.n	80044e4 <RCC_Delay+0x1c>
}
 80044f0:	bf00      	nop
 80044f2:	3714      	adds	r7, #20
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bc80      	pop	{r7}
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	20000008 	.word	0x20000008
 8004500:	10624dd3 	.word	0x10624dd3

08004504 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800450c:	2300      	movs	r3, #0
 800450e:	613b      	str	r3, [r7, #16]
 8004510:	2300      	movs	r3, #0
 8004512:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d07d      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8004520:	2300      	movs	r3, #0
 8004522:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004524:	4b4f      	ldr	r3, [pc, #316]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004526:	69db      	ldr	r3, [r3, #28]
 8004528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10d      	bne.n	800454c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004530:	4b4c      	ldr	r3, [pc, #304]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	4a4b      	ldr	r2, [pc, #300]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453a:	61d3      	str	r3, [r2, #28]
 800453c:	4b49      	ldr	r3, [pc, #292]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004544:	60bb      	str	r3, [r7, #8]
 8004546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004548:	2301      	movs	r3, #1
 800454a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800454c:	4b46      	ldr	r3, [pc, #280]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d118      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004558:	4b43      	ldr	r3, [pc, #268]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a42      	ldr	r2, [pc, #264]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800455e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004562:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004564:	f7fd ffb2 	bl	80024cc <HAL_GetTick>
 8004568:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800456a:	e008      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800456c:	f7fd ffae 	bl	80024cc <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e06d      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800457e:	4b3a      	ldr	r3, [pc, #232]	; (8004668 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004586:	2b00      	cmp	r3, #0
 8004588:	d0f0      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800458a:	4b36      	ldr	r3, [pc, #216]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004592:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d02e      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d027      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045a8:	4b2e      	ldr	r3, [pc, #184]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045b0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045b2:	4b2e      	ldr	r3, [pc, #184]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045b4:	2201      	movs	r2, #1
 80045b6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045b8:	4b2c      	ldr	r3, [pc, #176]	; (800466c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80045be:	4a29      	ldr	r2, [pc, #164]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d014      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ce:	f7fd ff7d 	bl	80024cc <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d4:	e00a      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d6:	f7fd ff79 	bl	80024cc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d901      	bls.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e036      	b.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ec:	4b1d      	ldr	r3, [pc, #116]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f003 0302 	and.w	r3, r3, #2
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0ee      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045f8:	4b1a      	ldr	r3, [pc, #104]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4917      	ldr	r1, [pc, #92]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004606:	4313      	orrs	r3, r2
 8004608:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d105      	bne.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004610:	4b14      	ldr	r3, [pc, #80]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	4a13      	ldr	r2, [pc, #76]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004616:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800461a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004628:	4b0e      	ldr	r3, [pc, #56]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	490b      	ldr	r1, [pc, #44]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004636:	4313      	orrs	r3, r2
 8004638:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0310 	and.w	r3, r3, #16
 8004642:	2b00      	cmp	r3, #0
 8004644:	d008      	beq.n	8004658 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004646:	4b07      	ldr	r3, [pc, #28]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	4904      	ldr	r1, [pc, #16]	; (8004664 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
 8004668:	40007000 	.word	0x40007000
 800466c:	42420440 	.word	0x42420440

08004670 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e053      	b.n	800472a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fd fd25 	bl	80020ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046b8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	431a      	orrs	r2, r3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	699b      	ldr	r3, [r3, #24]
 80046da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	69db      	ldr	r3, [r3, #28]
 80046e4:	431a      	orrs	r2, r3
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	ea42 0103 	orr.w	r1, r2, r3
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	430a      	orrs	r2, r1
 80046f8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	699b      	ldr	r3, [r3, #24]
 80046fe:	0c1a      	lsrs	r2, r3, #16
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f002 0204 	and.w	r2, r2, #4
 8004708:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	69da      	ldr	r2, [r3, #28]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004718:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b088      	sub	sp, #32
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800474c:	2b01      	cmp	r3, #1
 800474e:	d101      	bne.n	8004754 <HAL_SPI_Transmit+0x22>
 8004750:	2302      	movs	r3, #2
 8004752:	e11e      	b.n	8004992 <HAL_SPI_Transmit+0x260>
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800475c:	f7fd feb6 	bl	80024cc <HAL_GetTick>
 8004760:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004762:	88fb      	ldrh	r3, [r7, #6]
 8004764:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b01      	cmp	r3, #1
 8004770:	d002      	beq.n	8004778 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004772:	2302      	movs	r3, #2
 8004774:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004776:	e103      	b.n	8004980 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_SPI_Transmit+0x52>
 800477e:	88fb      	ldrh	r3, [r7, #6]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d102      	bne.n	800478a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004788:	e0fa      	b.n	8004980 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2203      	movs	r2, #3
 800478e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	88fa      	ldrh	r2, [r7, #6]
 80047a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	88fa      	ldrh	r2, [r7, #6]
 80047a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2200      	movs	r2, #0
 80047ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2200      	movs	r2, #0
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047d0:	d107      	bne.n	80047e2 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681a      	ldr	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047e0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ec:	2b40      	cmp	r3, #64	; 0x40
 80047ee:	d007      	beq.n	8004800 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047fe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004808:	d14b      	bne.n	80048a2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <HAL_SPI_Transmit+0xe6>
 8004812:	8afb      	ldrh	r3, [r7, #22]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d13e      	bne.n	8004896 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800481c:	881a      	ldrh	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004828:	1c9a      	adds	r2, r3, #2
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004832:	b29b      	uxth	r3, r3
 8004834:	3b01      	subs	r3, #1
 8004836:	b29a      	uxth	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800483c:	e02b      	b.n	8004896 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	689b      	ldr	r3, [r3, #8]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b02      	cmp	r3, #2
 800484a:	d112      	bne.n	8004872 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	881a      	ldrh	r2, [r3, #0]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485c:	1c9a      	adds	r2, r3, #2
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004866:	b29b      	uxth	r3, r3
 8004868:	3b01      	subs	r3, #1
 800486a:	b29a      	uxth	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004870:	e011      	b.n	8004896 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004872:	f7fd fe2b 	bl	80024cc <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	69bb      	ldr	r3, [r7, #24]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	683a      	ldr	r2, [r7, #0]
 800487e:	429a      	cmp	r2, r3
 8004880:	d803      	bhi.n	800488a <HAL_SPI_Transmit+0x158>
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004888:	d102      	bne.n	8004890 <HAL_SPI_Transmit+0x15e>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d102      	bne.n	8004896 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004890:	2303      	movs	r3, #3
 8004892:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004894:	e074      	b.n	8004980 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800489a:	b29b      	uxth	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d1ce      	bne.n	800483e <HAL_SPI_Transmit+0x10c>
 80048a0:	e04c      	b.n	800493c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_SPI_Transmit+0x17e>
 80048aa:	8afb      	ldrh	r3, [r7, #22]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d140      	bne.n	8004932 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	7812      	ldrb	r2, [r2, #0]
 80048bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80048d6:	e02c      	b.n	8004932 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b02      	cmp	r3, #2
 80048e4:	d113      	bne.n	800490e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	330c      	adds	r3, #12
 80048f0:	7812      	ldrb	r2, [r2, #0]
 80048f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004902:	b29b      	uxth	r3, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	b29a      	uxth	r2, r3
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	86da      	strh	r2, [r3, #54]	; 0x36
 800490c:	e011      	b.n	8004932 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800490e:	f7fd fddd 	bl	80024cc <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	429a      	cmp	r2, r3
 800491c:	d803      	bhi.n	8004926 <HAL_SPI_Transmit+0x1f4>
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004924:	d102      	bne.n	800492c <HAL_SPI_Transmit+0x1fa>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d102      	bne.n	8004932 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004930:	e026      	b.n	8004980 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004936:	b29b      	uxth	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1cd      	bne.n	80048d8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	6839      	ldr	r1, [r7, #0]
 8004940:	68f8      	ldr	r0, [r7, #12]
 8004942:	f000 fb91 	bl	8005068 <SPI_EndRxTxTransaction>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2220      	movs	r2, #32
 8004950:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	689b      	ldr	r3, [r3, #8]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10a      	bne.n	8004970 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800495a:	2300      	movs	r3, #0
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	613b      	str	r3, [r7, #16]
 800496e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e000      	b.n	8004980 <HAL_SPI_Transmit+0x24e>
  }

error:
 800497e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2200      	movs	r2, #0
 800498c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004990:	7ffb      	ldrb	r3, [r7, #31]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3720      	adds	r7, #32
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b088      	sub	sp, #32
 800499e:	af02      	add	r7, sp, #8
 80049a0:	60f8      	str	r0, [r7, #12]
 80049a2:	60b9      	str	r1, [r7, #8]
 80049a4:	603b      	str	r3, [r7, #0]
 80049a6:	4613      	mov	r3, r2
 80049a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049aa:	2300      	movs	r3, #0
 80049ac:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049b6:	d112      	bne.n	80049de <HAL_SPI_Receive+0x44>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10e      	bne.n	80049de <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2204      	movs	r2, #4
 80049c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80049c8:	88fa      	ldrh	r2, [r7, #6]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	68ba      	ldr	r2, [r7, #8]
 80049d2:	68b9      	ldr	r1, [r7, #8]
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f8e9 	bl	8004bac <HAL_SPI_TransmitReceive>
 80049da:	4603      	mov	r3, r0
 80049dc:	e0e2      	b.n	8004ba4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d101      	bne.n	80049ec <HAL_SPI_Receive+0x52>
 80049e8:	2302      	movs	r3, #2
 80049ea:	e0db      	b.n	8004ba4 <HAL_SPI_Receive+0x20a>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049f4:	f7fd fd6a 	bl	80024cc <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d002      	beq.n	8004a0c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004a06:	2302      	movs	r3, #2
 8004a08:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a0a:	e0c2      	b.n	8004b92 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <HAL_SPI_Receive+0x7e>
 8004a12:	88fb      	ldrh	r3, [r7, #6]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d102      	bne.n	8004a1e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004a1c:	e0b9      	b.n	8004b92 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2204      	movs	r2, #4
 8004a22:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	88fa      	ldrh	r2, [r7, #6]
 8004a36:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	88fa      	ldrh	r2, [r7, #6]
 8004a3c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2200      	movs	r2, #0
 8004a42:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a64:	d107      	bne.n	8004a76 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a74:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a80:	2b40      	cmp	r3, #64	; 0x40
 8004a82:	d007      	beq.n	8004a94 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a92:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d162      	bne.n	8004b62 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004a9c:	e02e      	b.n	8004afc <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d115      	bne.n	8004ad8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f103 020c 	add.w	r2, r3, #12
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab8:	7812      	ldrb	r2, [r2, #0]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	1c5a      	adds	r2, r3, #1
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ad6:	e011      	b.n	8004afc <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ad8:	f7fd fcf8 	bl	80024cc <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d803      	bhi.n	8004af0 <HAL_SPI_Receive+0x156>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aee:	d102      	bne.n	8004af6 <HAL_SPI_Receive+0x15c>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004afa:	e04a      	b.n	8004b92 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1cb      	bne.n	8004a9e <HAL_SPI_Receive+0x104>
 8004b06:	e031      	b.n	8004b6c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	f003 0301 	and.w	r3, r3, #1
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d113      	bne.n	8004b3e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68da      	ldr	r2, [r3, #12]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	b292      	uxth	r2, r2
 8004b22:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b28:	1c9a      	adds	r2, r3, #2
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004b3c:	e011      	b.n	8004b62 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b3e:	f7fd fcc5 	bl	80024cc <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d803      	bhi.n	8004b56 <HAL_SPI_Receive+0x1bc>
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b54:	d102      	bne.n	8004b5c <HAL_SPI_Receive+0x1c2>
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d102      	bne.n	8004b62 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004b60:	e017      	b.n	8004b92 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1cd      	bne.n	8004b08 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	6839      	ldr	r1, [r7, #0]
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fa27 	bl	8004fc4 <SPI_EndRxTransaction>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d002      	beq.n	8004b82 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	75fb      	strb	r3, [r7, #23]
 8004b8e:	e000      	b.n	8004b92 <HAL_SPI_Receive+0x1f8>
  }

error :
 8004b90:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08c      	sub	sp, #48	; 0x30
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d101      	bne.n	8004bd2 <HAL_SPI_TransmitReceive+0x26>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	e18a      	b.n	8004ee8 <HAL_SPI_TransmitReceive+0x33c>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004bda:	f7fd fc77 	bl	80024cc <HAL_GetTick>
 8004bde:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004be6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004bf0:	887b      	ldrh	r3, [r7, #2]
 8004bf2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004bf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d00f      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x70>
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c02:	d107      	bne.n	8004c14 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d103      	bne.n	8004c14 <HAL_SPI_TransmitReceive+0x68>
 8004c0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004c10:	2b04      	cmp	r3, #4
 8004c12:	d003      	beq.n	8004c1c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004c14:	2302      	movs	r3, #2
 8004c16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c1a:	e15b      	b.n	8004ed4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x82>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <HAL_SPI_TransmitReceive+0x82>
 8004c28:	887b      	ldrh	r3, [r7, #2]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d103      	bne.n	8004c36 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004c34:	e14e      	b.n	8004ed4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	2b04      	cmp	r3, #4
 8004c40:	d003      	beq.n	8004c4a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2205      	movs	r2, #5
 8004c46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	887a      	ldrh	r2, [r7, #2]
 8004c5a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	887a      	ldrh	r2, [r7, #2]
 8004c60:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	887a      	ldrh	r2, [r7, #2]
 8004c6c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	887a      	ldrh	r2, [r7, #2]
 8004c72:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8a:	2b40      	cmp	r3, #64	; 0x40
 8004c8c:	d007      	beq.n	8004c9e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ca6:	d178      	bne.n	8004d9a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d002      	beq.n	8004cb6 <HAL_SPI_TransmitReceive+0x10a>
 8004cb0:	8b7b      	ldrh	r3, [r7, #26]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d166      	bne.n	8004d84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	881a      	ldrh	r2, [r3, #0]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	1c9a      	adds	r2, r3, #2
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	b29a      	uxth	r2, r3
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004cda:	e053      	b.n	8004d84 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 0302 	and.w	r3, r3, #2
 8004ce6:	2b02      	cmp	r3, #2
 8004ce8:	d11b      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x176>
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d016      	beq.n	8004d22 <HAL_SPI_TransmitReceive+0x176>
 8004cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d113      	bne.n	8004d22 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	881a      	ldrh	r2, [r3, #0]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	1c9a      	adds	r2, r3, #2
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	3b01      	subs	r3, #1
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f003 0301 	and.w	r3, r3, #1
 8004d2c:	2b01      	cmp	r3, #1
 8004d2e:	d119      	bne.n	8004d64 <HAL_SPI_TransmitReceive+0x1b8>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d014      	beq.n	8004d64 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d44:	b292      	uxth	r2, r2
 8004d46:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4c:	1c9a      	adds	r2, r3, #2
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b29a      	uxth	r2, r3
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d60:	2301      	movs	r3, #1
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004d64:	f7fd fbb2 	bl	80024cc <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d807      	bhi.n	8004d84 <HAL_SPI_TransmitReceive+0x1d8>
 8004d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d7a:	d003      	beq.n	8004d84 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004d82:	e0a7      	b.n	8004ed4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1a6      	bne.n	8004cdc <HAL_SPI_TransmitReceive+0x130>
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1a1      	bne.n	8004cdc <HAL_SPI_TransmitReceive+0x130>
 8004d98:	e07c      	b.n	8004e94 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d002      	beq.n	8004da8 <HAL_SPI_TransmitReceive+0x1fc>
 8004da2:	8b7b      	ldrh	r3, [r7, #26]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d16b      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	330c      	adds	r3, #12
 8004db2:	7812      	ldrb	r2, [r2, #0]
 8004db4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dce:	e057      	b.n	8004e80 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b02      	cmp	r3, #2
 8004ddc:	d11c      	bne.n	8004e18 <HAL_SPI_TransmitReceive+0x26c>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d017      	beq.n	8004e18 <HAL_SPI_TransmitReceive+0x26c>
 8004de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d114      	bne.n	8004e18 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	330c      	adds	r3, #12
 8004df8:	7812      	ldrb	r2, [r2, #0]
 8004dfa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e00:	1c5a      	adds	r2, r3, #1
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	b29a      	uxth	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d119      	bne.n	8004e5a <HAL_SPI_TransmitReceive+0x2ae>
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d014      	beq.n	8004e5a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e56:	2301      	movs	r3, #1
 8004e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004e5a:	f7fd fb37 	bl	80024cc <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d803      	bhi.n	8004e72 <HAL_SPI_TransmitReceive+0x2c6>
 8004e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d102      	bne.n	8004e78 <HAL_SPI_TransmitReceive+0x2cc>
 8004e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d103      	bne.n	8004e80 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e7e:	e029      	b.n	8004ed4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e84:	b29b      	uxth	r3, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d1a2      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x224>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d19d      	bne.n	8004dd0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f8e5 	bl	8005068 <SPI_EndRxTxTransaction>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d006      	beq.n	8004eb2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2220      	movs	r2, #32
 8004eae:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004eb0:	e010      	b.n	8004ed4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d10b      	bne.n	8004ed2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004eba:	2300      	movs	r3, #0
 8004ebc:	617b      	str	r3, [r7, #20]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	617b      	str	r3, [r7, #20]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	e000      	b.n	8004ed4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004ed2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004ee4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3730      	adds	r7, #48	; 0x30
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	603b      	str	r3, [r7, #0]
 8004efc:	4613      	mov	r3, r2
 8004efe:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f00:	e04c      	b.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f08:	d048      	beq.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004f0a:	f7fd fadf 	bl	80024cc <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	69bb      	ldr	r3, [r7, #24]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d902      	bls.n	8004f20 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d13d      	bne.n	8004f9c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004f2e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f38:	d111      	bne.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f42:	d004      	beq.n	8004f4e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f4c:	d107      	bne.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f5c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f66:	d10f      	bne.n	8004f88 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f76:	601a      	str	r2, [r3, #0]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	681a      	ldr	r2, [r3, #0]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f86:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2200      	movs	r2, #0
 8004f94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e00f      	b.n	8004fbc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	bf0c      	ite	eq
 8004fac:	2301      	moveq	r3, #1
 8004fae:	2300      	movne	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d1a3      	bne.n	8004f02 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3710      	adds	r7, #16
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fd8:	d111      	bne.n	8004ffe <SPI_EndRxTransaction+0x3a>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe2:	d004      	beq.n	8004fee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fec:	d107      	bne.n	8004ffe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffc:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005006:	d117      	bne.n	8005038 <SPI_EndRxTransaction+0x74>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005010:	d112      	bne.n	8005038 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	2200      	movs	r2, #0
 800501a:	2101      	movs	r1, #1
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f7ff ff67 	bl	8004ef0 <SPI_WaitFlagStateUntilTimeout>
 8005022:	4603      	mov	r3, r0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d01a      	beq.n	800505e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502c:	f043 0220 	orr.w	r2, r3, #32
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e013      	b.n	8005060 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2200      	movs	r2, #0
 8005040:	2180      	movs	r1, #128	; 0x80
 8005042:	68f8      	ldr	r0, [r7, #12]
 8005044:	f7ff ff54 	bl	8004ef0 <SPI_WaitFlagStateUntilTimeout>
 8005048:	4603      	mov	r3, r0
 800504a:	2b00      	cmp	r3, #0
 800504c:	d007      	beq.n	800505e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005052:	f043 0220 	orr.w	r2, r3, #32
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e000      	b.n	8005060 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800505e:	2300      	movs	r3, #0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3710      	adds	r7, #16
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af02      	add	r7, sp, #8
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	2200      	movs	r2, #0
 800507c:	2180      	movs	r1, #128	; 0x80
 800507e:	68f8      	ldr	r0, [r7, #12]
 8005080:	f7ff ff36 	bl	8004ef0 <SPI_WaitFlagStateUntilTimeout>
 8005084:	4603      	mov	r3, r0
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508e:	f043 0220 	orr.w	r2, r3, #32
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e000      	b.n	800509c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800509a:	2300      	movs	r3, #0
}
 800509c:	4618      	mov	r0, r3
 800509e:	3710      	adds	r7, #16
 80050a0:	46bd      	mov	sp, r7
 80050a2:	bd80      	pop	{r7, pc}

080050a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e01d      	b.n	80050f2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fd f858 	bl	8002180 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f000 f902 	bl	80052ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3708      	adds	r7, #8
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
	...

080050fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2201      	movs	r2, #1
 800510c:	6839      	ldr	r1, [r7, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fad6 	bl	80056c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a10      	ldr	r2, [pc, #64]	; (800515c <HAL_TIM_PWM_Start+0x60>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d107      	bne.n	800512e <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800512c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0307 	and.w	r3, r3, #7
 8005138:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2b06      	cmp	r3, #6
 800513e:	d007      	beq.n	8005150 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f042 0201 	orr.w	r2, r2, #1
 800514e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40012c00 	.word	0x40012c00

08005160 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	60f8      	str	r0, [r7, #12]
 8005168:	60b9      	str	r1, [r7, #8]
 800516a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005176:	2302      	movs	r3, #2
 8005178:	e0b4      	b.n	80052e4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2202      	movs	r2, #2
 8005186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2b0c      	cmp	r3, #12
 800518e:	f200 809f 	bhi.w	80052d0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005192:	a201      	add	r2, pc, #4	; (adr r2, 8005198 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005198:	080051cd 	.word	0x080051cd
 800519c:	080052d1 	.word	0x080052d1
 80051a0:	080052d1 	.word	0x080052d1
 80051a4:	080052d1 	.word	0x080052d1
 80051a8:	0800520d 	.word	0x0800520d
 80051ac:	080052d1 	.word	0x080052d1
 80051b0:	080052d1 	.word	0x080052d1
 80051b4:	080052d1 	.word	0x080052d1
 80051b8:	0800524f 	.word	0x0800524f
 80051bc:	080052d1 	.word	0x080052d1
 80051c0:	080052d1 	.word	0x080052d1
 80051c4:	080052d1 	.word	0x080052d1
 80051c8:	0800528f 	.word	0x0800528f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 f8ec 	bl	80053b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0208 	orr.w	r2, r2, #8
 80051e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0204 	bic.w	r2, r2, #4
 80051f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6999      	ldr	r1, [r3, #24]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691a      	ldr	r2, [r3, #16]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	430a      	orrs	r2, r1
 8005208:	619a      	str	r2, [r3, #24]
      break;
 800520a:	e062      	b.n	80052d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	68b9      	ldr	r1, [r7, #8]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f932 	bl	800547c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	699a      	ldr	r2, [r3, #24]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005226:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699a      	ldr	r2, [r3, #24]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005236:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6999      	ldr	r1, [r3, #24]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	021a      	lsls	r2, r3, #8
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	619a      	str	r2, [r3, #24]
      break;
 800524c:	e041      	b.n	80052d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 f97b 	bl	8005550 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0208 	orr.w	r2, r2, #8
 8005268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 0204 	bic.w	r2, r2, #4
 8005278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69d9      	ldr	r1, [r3, #28]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691a      	ldr	r2, [r3, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	61da      	str	r2, [r3, #28]
      break;
 800528c:	e021      	b.n	80052d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68b9      	ldr	r1, [r7, #8]
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f9c5 	bl	8005624 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	69da      	ldr	r2, [r3, #28]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052a8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	69da      	ldr	r2, [r3, #28]
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	69d9      	ldr	r1, [r3, #28]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	021a      	lsls	r2, r3, #8
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	61da      	str	r2, [r3, #28]
      break;
 80052ce:	e000      	b.n	80052d2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80052d0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2201      	movs	r2, #1
 80052d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052e2:	2300      	movs	r3, #0
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3710      	adds	r7, #16
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b085      	sub	sp, #20
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	4a29      	ldr	r2, [pc, #164]	; (80053a4 <TIM_Base_SetConfig+0xb8>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d00b      	beq.n	800531c <TIM_Base_SetConfig+0x30>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800530a:	d007      	beq.n	800531c <TIM_Base_SetConfig+0x30>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4a26      	ldr	r2, [pc, #152]	; (80053a8 <TIM_Base_SetConfig+0xbc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d003      	beq.n	800531c <TIM_Base_SetConfig+0x30>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a25      	ldr	r2, [pc, #148]	; (80053ac <TIM_Base_SetConfig+0xc0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d108      	bne.n	800532e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005322:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	68fa      	ldr	r2, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <TIM_Base_SetConfig+0xb8>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00b      	beq.n	800534e <TIM_Base_SetConfig+0x62>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533c:	d007      	beq.n	800534e <TIM_Base_SetConfig+0x62>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a19      	ldr	r2, [pc, #100]	; (80053a8 <TIM_Base_SetConfig+0xbc>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d003      	beq.n	800534e <TIM_Base_SetConfig+0x62>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a18      	ldr	r2, [pc, #96]	; (80053ac <TIM_Base_SetConfig+0xc0>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d108      	bne.n	8005360 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	68db      	ldr	r3, [r3, #12]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	4313      	orrs	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	68fa      	ldr	r2, [r7, #12]
 8005372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681a      	ldr	r2, [r3, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a07      	ldr	r2, [pc, #28]	; (80053a4 <TIM_Base_SetConfig+0xb8>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d103      	bne.n	8005394 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	615a      	str	r2, [r3, #20]
}
 800539a:	bf00      	nop
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	bc80      	pop	{r7}
 80053a2:	4770      	bx	lr
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40000400 	.word	0x40000400
 80053ac:	40000800 	.word	0x40000800

080053b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	f023 0201 	bic.w	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 0303 	bic.w	r3, r3, #3
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f023 0302 	bic.w	r3, r3, #2
 80053f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a1c      	ldr	r2, [pc, #112]	; (8005478 <TIM_OC1_SetConfig+0xc8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d10c      	bne.n	8005426 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f023 0308 	bic.w	r3, r3, #8
 8005412:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4313      	orrs	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f023 0304 	bic.w	r3, r3, #4
 8005424:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	4a13      	ldr	r2, [pc, #76]	; (8005478 <TIM_OC1_SetConfig+0xc8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d111      	bne.n	8005452 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005434:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800543c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4313      	orrs	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	693a      	ldr	r2, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	685a      	ldr	r2, [r3, #4]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	621a      	str	r2, [r3, #32]
}
 800546c:	bf00      	nop
 800546e:	371c      	adds	r7, #28
 8005470:	46bd      	mov	sp, r7
 8005472:	bc80      	pop	{r7}
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40012c00 	.word	0x40012c00

0800547c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800547c:	b480      	push	{r7}
 800547e:	b087      	sub	sp, #28
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6a1b      	ldr	r3, [r3, #32]
 800548a:	f023 0210 	bic.w	r2, r3, #16
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	021b      	lsls	r3, r3, #8
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0320 	bic.w	r3, r3, #32
 80054c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	011b      	lsls	r3, r3, #4
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a1d      	ldr	r2, [pc, #116]	; (800554c <TIM_OC2_SetConfig+0xd0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d10d      	bne.n	80054f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	011b      	lsls	r3, r3, #4
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a14      	ldr	r2, [pc, #80]	; (800554c <TIM_OC2_SetConfig+0xd0>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d113      	bne.n	8005528 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005506:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800550e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	693a      	ldr	r2, [r7, #16]
 8005518:	4313      	orrs	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	699b      	ldr	r3, [r3, #24]
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	693a      	ldr	r2, [r7, #16]
 800552c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	621a      	str	r2, [r3, #32]
}
 8005542:	bf00      	nop
 8005544:	371c      	adds	r7, #28
 8005546:	46bd      	mov	sp, r7
 8005548:	bc80      	pop	{r7}
 800554a:	4770      	bx	lr
 800554c:	40012c00 	.word	0x40012c00

08005550 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a1b      	ldr	r3, [r3, #32]
 800555e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a1b      	ldr	r3, [r3, #32]
 800556a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f023 0303 	bic.w	r3, r3, #3
 8005586:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	4313      	orrs	r3, r2
 8005590:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005598:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	021b      	lsls	r3, r3, #8
 80055a0:	697a      	ldr	r2, [r7, #20]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a1d      	ldr	r2, [pc, #116]	; (8005620 <TIM_OC3_SetConfig+0xd0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d10d      	bne.n	80055ca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055b4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	021b      	lsls	r3, r3, #8
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a14      	ldr	r2, [pc, #80]	; (8005620 <TIM_OC3_SetConfig+0xd0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d113      	bne.n	80055fa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	693a      	ldr	r2, [r7, #16]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	011b      	lsls	r3, r3, #4
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68fa      	ldr	r2, [r7, #12]
 8005604:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	685a      	ldr	r2, [r3, #4]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	621a      	str	r2, [r3, #32]
}
 8005614:	bf00      	nop
 8005616:	371c      	adds	r7, #28
 8005618:	46bd      	mov	sp, r7
 800561a:	bc80      	pop	{r7}
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40012c00 	.word	0x40012c00

08005624 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005652:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800565a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	021b      	lsls	r3, r3, #8
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	4313      	orrs	r3, r2
 8005666:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800566e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	031b      	lsls	r3, r3, #12
 8005676:	693a      	ldr	r2, [r7, #16]
 8005678:	4313      	orrs	r3, r2
 800567a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a0f      	ldr	r2, [pc, #60]	; (80056bc <TIM_OC4_SetConfig+0x98>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d109      	bne.n	8005698 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800568a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	019b      	lsls	r3, r3, #6
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	4313      	orrs	r3, r2
 8005696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	685a      	ldr	r2, [r3, #4]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	693a      	ldr	r2, [r7, #16]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bc80      	pop	{r7}
 80056ba:	4770      	bx	lr
 80056bc:	40012c00 	.word	0x40012c00

080056c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056c0:	b480      	push	{r7}
 80056c2:	b087      	sub	sp, #28
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	60f8      	str	r0, [r7, #12]
 80056c8:	60b9      	str	r1, [r7, #8]
 80056ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	2201      	movs	r2, #1
 80056d4:	fa02 f303 	lsl.w	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	6a1a      	ldr	r2, [r3, #32]
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	43db      	mvns	r3, r3
 80056e2:	401a      	ands	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6a1a      	ldr	r2, [r3, #32]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f003 031f 	and.w	r3, r3, #31
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	fa01 f303 	lsl.w	r3, r1, r3
 80056f8:	431a      	orrs	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	bc80      	pop	{r7}
 8005706:	4770      	bx	lr

08005708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005708:	b480      	push	{r7}
 800570a:	b085      	sub	sp, #20
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800571c:	2302      	movs	r3, #2
 800571e:	e032      	b.n	8005786 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2202      	movs	r2, #2
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005746:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68fa      	ldr	r2, [r7, #12]
 800574e:	4313      	orrs	r3, r2
 8005750:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005758:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	4313      	orrs	r3, r2
 8005762:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68ba      	ldr	r2, [r7, #8]
 8005772:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005784:	2300      	movs	r3, #0
}
 8005786:	4618      	mov	r0, r3
 8005788:	3714      	adds	r7, #20
 800578a:	46bd      	mov	sp, r7
 800578c:	bc80      	pop	{r7}
 800578e:	4770      	bx	lr

08005790 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e03f      	b.n	8005822 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2200      	movs	r2, #0
 80057b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f7fc fd34 	bl	8002224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2224      	movs	r2, #36	; 0x24
 80057c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f90b 	bl	80059f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	695a      	ldr	r2, [r3, #20]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	68da      	ldr	r2, [r3, #12]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005808:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582a:	b580      	push	{r7, lr}
 800582c:	b088      	sub	sp, #32
 800582e:	af02      	add	r7, sp, #8
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	603b      	str	r3, [r7, #0]
 8005836:	4613      	mov	r3, r2
 8005838:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b20      	cmp	r3, #32
 8005848:	f040 8083 	bne.w	8005952 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d002      	beq.n	8005858 <HAL_UART_Transmit+0x2e>
 8005852:	88fb      	ldrh	r3, [r7, #6]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e07b      	b.n	8005954 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005862:	2b01      	cmp	r3, #1
 8005864:	d101      	bne.n	800586a <HAL_UART_Transmit+0x40>
 8005866:	2302      	movs	r3, #2
 8005868:	e074      	b.n	8005954 <HAL_UART_Transmit+0x12a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	2201      	movs	r2, #1
 800586e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2221      	movs	r2, #33	; 0x21
 800587c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005880:	f7fc fe24 	bl	80024cc <HAL_GetTick>
 8005884:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	88fa      	ldrh	r2, [r7, #6]
 800588a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	88fa      	ldrh	r2, [r7, #6]
 8005890:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005892:	e042      	b.n	800591a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005898:	b29b      	uxth	r3, r3
 800589a:	3b01      	subs	r3, #1
 800589c:	b29a      	uxth	r2, r3
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058aa:	d122      	bne.n	80058f2 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	9300      	str	r3, [sp, #0]
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	2200      	movs	r2, #0
 80058b4:	2180      	movs	r1, #128	; 0x80
 80058b6:	68f8      	ldr	r0, [r7, #12]
 80058b8:	f000 f850 	bl	800595c <UART_WaitOnFlagUntilTimeout>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d001      	beq.n	80058c6 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e046      	b.n	8005954 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	881b      	ldrh	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d103      	bne.n	80058ea <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	3302      	adds	r3, #2
 80058e6:	60bb      	str	r3, [r7, #8]
 80058e8:	e017      	b.n	800591a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	3301      	adds	r3, #1
 80058ee:	60bb      	str	r3, [r7, #8]
 80058f0:	e013      	b.n	800591a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2200      	movs	r2, #0
 80058fa:	2180      	movs	r1, #128	; 0x80
 80058fc:	68f8      	ldr	r0, [r7, #12]
 80058fe:	f000 f82d 	bl	800595c <UART_WaitOnFlagUntilTimeout>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8005908:	2303      	movs	r3, #3
 800590a:	e023      	b.n	8005954 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	60ba      	str	r2, [r7, #8]
 8005912:	781a      	ldrb	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800591e:	b29b      	uxth	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d1b7      	bne.n	8005894 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2200      	movs	r2, #0
 800592c:	2140      	movs	r1, #64	; 0x40
 800592e:	68f8      	ldr	r0, [r7, #12]
 8005930:	f000 f814 	bl	800595c <UART_WaitOnFlagUntilTimeout>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d001      	beq.n	800593e <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800593a:	2303      	movs	r3, #3
 800593c:	e00a      	b.n	8005954 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2220      	movs	r2, #32
 8005942:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	e000      	b.n	8005954 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005952:	2302      	movs	r3, #2
  }
}
 8005954:	4618      	mov	r0, r3
 8005956:	3718      	adds	r7, #24
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b084      	sub	sp, #16
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	603b      	str	r3, [r7, #0]
 8005968:	4613      	mov	r3, r2
 800596a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800596c:	e02c      	b.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005974:	d028      	beq.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005976:	69bb      	ldr	r3, [r7, #24]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d007      	beq.n	800598c <UART_WaitOnFlagUntilTimeout+0x30>
 800597c:	f7fc fda6 	bl	80024cc <HAL_GetTick>
 8005980:	4602      	mov	r2, r0
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	69ba      	ldr	r2, [r7, #24]
 8005988:	429a      	cmp	r2, r3
 800598a:	d21d      	bcs.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800599a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	695a      	ldr	r2, [r3, #20]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f022 0201 	bic.w	r2, r2, #1
 80059aa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80059c4:	2303      	movs	r3, #3
 80059c6:	e00f      	b.n	80059e8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	4013      	ands	r3, r2
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	bf0c      	ite	eq
 80059d8:	2301      	moveq	r3, #1
 80059da:	2300      	movne	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	461a      	mov	r2, r3
 80059e0:	79fb      	ldrb	r3, [r7, #7]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	d0c3      	beq.n	800596e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059e6:	2300      	movs	r3, #0
}
 80059e8:	4618      	mov	r0, r3
 80059ea:	3710      	adds	r7, #16
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}

080059f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	691b      	ldr	r3, [r3, #16]
 80059fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	689a      	ldr	r2, [r3, #8]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	431a      	orrs	r2, r3
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005a2a:	f023 030c 	bic.w	r3, r3, #12
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	6812      	ldr	r2, [r2, #0]
 8005a32:	68f9      	ldr	r1, [r7, #12]
 8005a34:	430b      	orrs	r3, r1
 8005a36:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	699a      	ldr	r2, [r3, #24]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	430a      	orrs	r2, r1
 8005a4c:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a52      	ldr	r2, [pc, #328]	; (8005b9c <UART_SetConfig+0x1ac>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d14e      	bne.n	8005af6 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005a58:	f7fe fd22 	bl	80044a0 <HAL_RCC_GetPCLK2Freq>
 8005a5c:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a5e:	68ba      	ldr	r2, [r7, #8]
 8005a60:	4613      	mov	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4413      	add	r3, r2
 8005a66:	009a      	lsls	r2, r3, #2
 8005a68:	441a      	add	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	685b      	ldr	r3, [r3, #4]
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a74:	4a4a      	ldr	r2, [pc, #296]	; (8005ba0 <UART_SetConfig+0x1b0>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	0119      	lsls	r1, r3, #4
 8005a7e:	68ba      	ldr	r2, [r7, #8]
 8005a80:	4613      	mov	r3, r2
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	009a      	lsls	r2, r3, #2
 8005a88:	441a      	add	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a94:	4b42      	ldr	r3, [pc, #264]	; (8005ba0 <UART_SetConfig+0x1b0>)
 8005a96:	fba3 0302 	umull	r0, r3, r3, r2
 8005a9a:	095b      	lsrs	r3, r3, #5
 8005a9c:	2064      	movs	r0, #100	; 0x64
 8005a9e:	fb00 f303 	mul.w	r3, r0, r3
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	3332      	adds	r3, #50	; 0x32
 8005aa8:	4a3d      	ldr	r2, [pc, #244]	; (8005ba0 <UART_SetConfig+0x1b0>)
 8005aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8005aae:	095b      	lsrs	r3, r3, #5
 8005ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ab4:	4419      	add	r1, r3
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009a      	lsls	r2, r3, #2
 8005ac0:	441a      	add	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005acc:	4b34      	ldr	r3, [pc, #208]	; (8005ba0 <UART_SetConfig+0x1b0>)
 8005ace:	fba3 0302 	umull	r0, r3, r3, r2
 8005ad2:	095b      	lsrs	r3, r3, #5
 8005ad4:	2064      	movs	r0, #100	; 0x64
 8005ad6:	fb00 f303 	mul.w	r3, r0, r3
 8005ada:	1ad3      	subs	r3, r2, r3
 8005adc:	011b      	lsls	r3, r3, #4
 8005ade:	3332      	adds	r3, #50	; 0x32
 8005ae0:	4a2f      	ldr	r2, [pc, #188]	; (8005ba0 <UART_SetConfig+0x1b0>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	095b      	lsrs	r3, r3, #5
 8005ae8:	f003 020f 	and.w	r2, r3, #15
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	440a      	add	r2, r1
 8005af2:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8005af4:	e04d      	b.n	8005b92 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8005af6:	f7fe fcbf 	bl	8004478 <HAL_RCC_GetPCLK1Freq>
 8005afa:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4413      	add	r3, r2
 8005b04:	009a      	lsls	r2, r3, #2
 8005b06:	441a      	add	r2, r3
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b12:	4a23      	ldr	r2, [pc, #140]	; (8005ba0 <UART_SetConfig+0x1b0>)
 8005b14:	fba2 2303 	umull	r2, r3, r2, r3
 8005b18:	095b      	lsrs	r3, r3, #5
 8005b1a:	0119      	lsls	r1, r3, #4
 8005b1c:	68ba      	ldr	r2, [r7, #8]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009a      	lsls	r2, r3, #2
 8005b26:	441a      	add	r2, r3
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	009b      	lsls	r3, r3, #2
 8005b2e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b32:	4b1b      	ldr	r3, [pc, #108]	; (8005ba0 <UART_SetConfig+0x1b0>)
 8005b34:	fba3 0302 	umull	r0, r3, r3, r2
 8005b38:	095b      	lsrs	r3, r3, #5
 8005b3a:	2064      	movs	r0, #100	; 0x64
 8005b3c:	fb00 f303 	mul.w	r3, r0, r3
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	011b      	lsls	r3, r3, #4
 8005b44:	3332      	adds	r3, #50	; 0x32
 8005b46:	4a16      	ldr	r2, [pc, #88]	; (8005ba0 <UART_SetConfig+0x1b0>)
 8005b48:	fba2 2303 	umull	r2, r3, r2, r3
 8005b4c:	095b      	lsrs	r3, r3, #5
 8005b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b52:	4419      	add	r1, r3
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	4613      	mov	r3, r2
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	4413      	add	r3, r2
 8005b5c:	009a      	lsls	r2, r3, #2
 8005b5e:	441a      	add	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ba0 <UART_SetConfig+0x1b0>)
 8005b6c:	fba3 0302 	umull	r0, r3, r3, r2
 8005b70:	095b      	lsrs	r3, r3, #5
 8005b72:	2064      	movs	r0, #100	; 0x64
 8005b74:	fb00 f303 	mul.w	r3, r0, r3
 8005b78:	1ad3      	subs	r3, r2, r3
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	3332      	adds	r3, #50	; 0x32
 8005b7e:	4a08      	ldr	r2, [pc, #32]	; (8005ba0 <UART_SetConfig+0x1b0>)
 8005b80:	fba2 2303 	umull	r2, r3, r2, r3
 8005b84:	095b      	lsrs	r3, r3, #5
 8005b86:	f003 020f 	and.w	r2, r3, #15
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	440a      	add	r2, r1
 8005b90:	609a      	str	r2, [r3, #8]
}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	40013800 	.word	0x40013800
 8005ba0:	51eb851f 	.word	0x51eb851f

08005ba4 <__errno>:
 8005ba4:	4b01      	ldr	r3, [pc, #4]	; (8005bac <__errno+0x8>)
 8005ba6:	6818      	ldr	r0, [r3, #0]
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	20000014 	.word	0x20000014

08005bb0 <__libc_init_array>:
 8005bb0:	b570      	push	{r4, r5, r6, lr}
 8005bb2:	2500      	movs	r5, #0
 8005bb4:	4e0c      	ldr	r6, [pc, #48]	; (8005be8 <__libc_init_array+0x38>)
 8005bb6:	4c0d      	ldr	r4, [pc, #52]	; (8005bec <__libc_init_array+0x3c>)
 8005bb8:	1ba4      	subs	r4, r4, r6
 8005bba:	10a4      	asrs	r4, r4, #2
 8005bbc:	42a5      	cmp	r5, r4
 8005bbe:	d109      	bne.n	8005bd4 <__libc_init_array+0x24>
 8005bc0:	f000 fc36 	bl	8006430 <_init>
 8005bc4:	2500      	movs	r5, #0
 8005bc6:	4e0a      	ldr	r6, [pc, #40]	; (8005bf0 <__libc_init_array+0x40>)
 8005bc8:	4c0a      	ldr	r4, [pc, #40]	; (8005bf4 <__libc_init_array+0x44>)
 8005bca:	1ba4      	subs	r4, r4, r6
 8005bcc:	10a4      	asrs	r4, r4, #2
 8005bce:	42a5      	cmp	r5, r4
 8005bd0:	d105      	bne.n	8005bde <__libc_init_array+0x2e>
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005bd8:	4798      	blx	r3
 8005bda:	3501      	adds	r5, #1
 8005bdc:	e7ee      	b.n	8005bbc <__libc_init_array+0xc>
 8005bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005be2:	4798      	blx	r3
 8005be4:	3501      	adds	r5, #1
 8005be6:	e7f2      	b.n	8005bce <__libc_init_array+0x1e>
 8005be8:	080069ec 	.word	0x080069ec
 8005bec:	080069ec 	.word	0x080069ec
 8005bf0:	080069ec 	.word	0x080069ec
 8005bf4:	080069f0 	.word	0x080069f0

08005bf8 <memcpy>:
 8005bf8:	b510      	push	{r4, lr}
 8005bfa:	1e43      	subs	r3, r0, #1
 8005bfc:	440a      	add	r2, r1
 8005bfe:	4291      	cmp	r1, r2
 8005c00:	d100      	bne.n	8005c04 <memcpy+0xc>
 8005c02:	bd10      	pop	{r4, pc}
 8005c04:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c08:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c0c:	e7f7      	b.n	8005bfe <memcpy+0x6>

08005c0e <memset>:
 8005c0e:	4603      	mov	r3, r0
 8005c10:	4402      	add	r2, r0
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d100      	bne.n	8005c18 <memset+0xa>
 8005c16:	4770      	bx	lr
 8005c18:	f803 1b01 	strb.w	r1, [r3], #1
 8005c1c:	e7f9      	b.n	8005c12 <memset+0x4>
	...

08005c20 <siprintf>:
 8005c20:	b40e      	push	{r1, r2, r3}
 8005c22:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c26:	b500      	push	{lr}
 8005c28:	b09c      	sub	sp, #112	; 0x70
 8005c2a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c2c:	9002      	str	r0, [sp, #8]
 8005c2e:	9006      	str	r0, [sp, #24]
 8005c30:	9107      	str	r1, [sp, #28]
 8005c32:	9104      	str	r1, [sp, #16]
 8005c34:	4808      	ldr	r0, [pc, #32]	; (8005c58 <siprintf+0x38>)
 8005c36:	4909      	ldr	r1, [pc, #36]	; (8005c5c <siprintf+0x3c>)
 8005c38:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c3c:	9105      	str	r1, [sp, #20]
 8005c3e:	6800      	ldr	r0, [r0, #0]
 8005c40:	a902      	add	r1, sp, #8
 8005c42:	9301      	str	r3, [sp, #4]
 8005c44:	f000 f866 	bl	8005d14 <_svfiprintf_r>
 8005c48:	2200      	movs	r2, #0
 8005c4a:	9b02      	ldr	r3, [sp, #8]
 8005c4c:	701a      	strb	r2, [r3, #0]
 8005c4e:	b01c      	add	sp, #112	; 0x70
 8005c50:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c54:	b003      	add	sp, #12
 8005c56:	4770      	bx	lr
 8005c58:	20000014 	.word	0x20000014
 8005c5c:	ffff0208 	.word	0xffff0208

08005c60 <__ssputs_r>:
 8005c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c64:	688e      	ldr	r6, [r1, #8]
 8005c66:	4682      	mov	sl, r0
 8005c68:	429e      	cmp	r6, r3
 8005c6a:	460c      	mov	r4, r1
 8005c6c:	4690      	mov	r8, r2
 8005c6e:	4699      	mov	r9, r3
 8005c70:	d837      	bhi.n	8005ce2 <__ssputs_r+0x82>
 8005c72:	898a      	ldrh	r2, [r1, #12]
 8005c74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005c78:	d031      	beq.n	8005cde <__ssputs_r+0x7e>
 8005c7a:	2302      	movs	r3, #2
 8005c7c:	6825      	ldr	r5, [r4, #0]
 8005c7e:	6909      	ldr	r1, [r1, #16]
 8005c80:	1a6f      	subs	r7, r5, r1
 8005c82:	6965      	ldr	r5, [r4, #20]
 8005c84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005c88:	fb95 f5f3 	sdiv	r5, r5, r3
 8005c8c:	f109 0301 	add.w	r3, r9, #1
 8005c90:	443b      	add	r3, r7
 8005c92:	429d      	cmp	r5, r3
 8005c94:	bf38      	it	cc
 8005c96:	461d      	movcc	r5, r3
 8005c98:	0553      	lsls	r3, r2, #21
 8005c9a:	d530      	bpl.n	8005cfe <__ssputs_r+0x9e>
 8005c9c:	4629      	mov	r1, r5
 8005c9e:	f000 fb2d 	bl	80062fc <_malloc_r>
 8005ca2:	4606      	mov	r6, r0
 8005ca4:	b950      	cbnz	r0, 8005cbc <__ssputs_r+0x5c>
 8005ca6:	230c      	movs	r3, #12
 8005ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cac:	f8ca 3000 	str.w	r3, [sl]
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cbc:	463a      	mov	r2, r7
 8005cbe:	6921      	ldr	r1, [r4, #16]
 8005cc0:	f7ff ff9a 	bl	8005bf8 <memcpy>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005cca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	6126      	str	r6, [r4, #16]
 8005cd2:	443e      	add	r6, r7
 8005cd4:	6026      	str	r6, [r4, #0]
 8005cd6:	464e      	mov	r6, r9
 8005cd8:	6165      	str	r5, [r4, #20]
 8005cda:	1bed      	subs	r5, r5, r7
 8005cdc:	60a5      	str	r5, [r4, #8]
 8005cde:	454e      	cmp	r6, r9
 8005ce0:	d900      	bls.n	8005ce4 <__ssputs_r+0x84>
 8005ce2:	464e      	mov	r6, r9
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	4641      	mov	r1, r8
 8005ce8:	6820      	ldr	r0, [r4, #0]
 8005cea:	f000 faa1 	bl	8006230 <memmove>
 8005cee:	68a3      	ldr	r3, [r4, #8]
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	1b9b      	subs	r3, r3, r6
 8005cf4:	60a3      	str	r3, [r4, #8]
 8005cf6:	6823      	ldr	r3, [r4, #0]
 8005cf8:	441e      	add	r6, r3
 8005cfa:	6026      	str	r6, [r4, #0]
 8005cfc:	e7dc      	b.n	8005cb8 <__ssputs_r+0x58>
 8005cfe:	462a      	mov	r2, r5
 8005d00:	f000 fb56 	bl	80063b0 <_realloc_r>
 8005d04:	4606      	mov	r6, r0
 8005d06:	2800      	cmp	r0, #0
 8005d08:	d1e2      	bne.n	8005cd0 <__ssputs_r+0x70>
 8005d0a:	6921      	ldr	r1, [r4, #16]
 8005d0c:	4650      	mov	r0, sl
 8005d0e:	f000 faa9 	bl	8006264 <_free_r>
 8005d12:	e7c8      	b.n	8005ca6 <__ssputs_r+0x46>

08005d14 <_svfiprintf_r>:
 8005d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d18:	461d      	mov	r5, r3
 8005d1a:	898b      	ldrh	r3, [r1, #12]
 8005d1c:	b09d      	sub	sp, #116	; 0x74
 8005d1e:	061f      	lsls	r7, r3, #24
 8005d20:	4680      	mov	r8, r0
 8005d22:	460c      	mov	r4, r1
 8005d24:	4616      	mov	r6, r2
 8005d26:	d50f      	bpl.n	8005d48 <_svfiprintf_r+0x34>
 8005d28:	690b      	ldr	r3, [r1, #16]
 8005d2a:	b96b      	cbnz	r3, 8005d48 <_svfiprintf_r+0x34>
 8005d2c:	2140      	movs	r1, #64	; 0x40
 8005d2e:	f000 fae5 	bl	80062fc <_malloc_r>
 8005d32:	6020      	str	r0, [r4, #0]
 8005d34:	6120      	str	r0, [r4, #16]
 8005d36:	b928      	cbnz	r0, 8005d44 <_svfiprintf_r+0x30>
 8005d38:	230c      	movs	r3, #12
 8005d3a:	f8c8 3000 	str.w	r3, [r8]
 8005d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d42:	e0c8      	b.n	8005ed6 <_svfiprintf_r+0x1c2>
 8005d44:	2340      	movs	r3, #64	; 0x40
 8005d46:	6163      	str	r3, [r4, #20]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4c:	2320      	movs	r3, #32
 8005d4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d52:	2330      	movs	r3, #48	; 0x30
 8005d54:	f04f 0b01 	mov.w	fp, #1
 8005d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d5c:	9503      	str	r5, [sp, #12]
 8005d5e:	4637      	mov	r7, r6
 8005d60:	463d      	mov	r5, r7
 8005d62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005d66:	b10b      	cbz	r3, 8005d6c <_svfiprintf_r+0x58>
 8005d68:	2b25      	cmp	r3, #37	; 0x25
 8005d6a:	d13e      	bne.n	8005dea <_svfiprintf_r+0xd6>
 8005d6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8005d70:	d00b      	beq.n	8005d8a <_svfiprintf_r+0x76>
 8005d72:	4653      	mov	r3, sl
 8005d74:	4632      	mov	r2, r6
 8005d76:	4621      	mov	r1, r4
 8005d78:	4640      	mov	r0, r8
 8005d7a:	f7ff ff71 	bl	8005c60 <__ssputs_r>
 8005d7e:	3001      	adds	r0, #1
 8005d80:	f000 80a4 	beq.w	8005ecc <_svfiprintf_r+0x1b8>
 8005d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d86:	4453      	add	r3, sl
 8005d88:	9309      	str	r3, [sp, #36]	; 0x24
 8005d8a:	783b      	ldrb	r3, [r7, #0]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f000 809d 	beq.w	8005ecc <_svfiprintf_r+0x1b8>
 8005d92:	2300      	movs	r3, #0
 8005d94:	f04f 32ff 	mov.w	r2, #4294967295
 8005d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d9c:	9304      	str	r3, [sp, #16]
 8005d9e:	9307      	str	r3, [sp, #28]
 8005da0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005da4:	931a      	str	r3, [sp, #104]	; 0x68
 8005da6:	462f      	mov	r7, r5
 8005da8:	2205      	movs	r2, #5
 8005daa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8005dae:	4850      	ldr	r0, [pc, #320]	; (8005ef0 <_svfiprintf_r+0x1dc>)
 8005db0:	f000 fa30 	bl	8006214 <memchr>
 8005db4:	9b04      	ldr	r3, [sp, #16]
 8005db6:	b9d0      	cbnz	r0, 8005dee <_svfiprintf_r+0xda>
 8005db8:	06d9      	lsls	r1, r3, #27
 8005dba:	bf44      	itt	mi
 8005dbc:	2220      	movmi	r2, #32
 8005dbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dc2:	071a      	lsls	r2, r3, #28
 8005dc4:	bf44      	itt	mi
 8005dc6:	222b      	movmi	r2, #43	; 0x2b
 8005dc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005dcc:	782a      	ldrb	r2, [r5, #0]
 8005dce:	2a2a      	cmp	r2, #42	; 0x2a
 8005dd0:	d015      	beq.n	8005dfe <_svfiprintf_r+0xea>
 8005dd2:	462f      	mov	r7, r5
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	250a      	movs	r5, #10
 8005dd8:	9a07      	ldr	r2, [sp, #28]
 8005dda:	4639      	mov	r1, r7
 8005ddc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005de0:	3b30      	subs	r3, #48	; 0x30
 8005de2:	2b09      	cmp	r3, #9
 8005de4:	d94d      	bls.n	8005e82 <_svfiprintf_r+0x16e>
 8005de6:	b1b8      	cbz	r0, 8005e18 <_svfiprintf_r+0x104>
 8005de8:	e00f      	b.n	8005e0a <_svfiprintf_r+0xf6>
 8005dea:	462f      	mov	r7, r5
 8005dec:	e7b8      	b.n	8005d60 <_svfiprintf_r+0x4c>
 8005dee:	4a40      	ldr	r2, [pc, #256]	; (8005ef0 <_svfiprintf_r+0x1dc>)
 8005df0:	463d      	mov	r5, r7
 8005df2:	1a80      	subs	r0, r0, r2
 8005df4:	fa0b f000 	lsl.w	r0, fp, r0
 8005df8:	4318      	orrs	r0, r3
 8005dfa:	9004      	str	r0, [sp, #16]
 8005dfc:	e7d3      	b.n	8005da6 <_svfiprintf_r+0x92>
 8005dfe:	9a03      	ldr	r2, [sp, #12]
 8005e00:	1d11      	adds	r1, r2, #4
 8005e02:	6812      	ldr	r2, [r2, #0]
 8005e04:	9103      	str	r1, [sp, #12]
 8005e06:	2a00      	cmp	r2, #0
 8005e08:	db01      	blt.n	8005e0e <_svfiprintf_r+0xfa>
 8005e0a:	9207      	str	r2, [sp, #28]
 8005e0c:	e004      	b.n	8005e18 <_svfiprintf_r+0x104>
 8005e0e:	4252      	negs	r2, r2
 8005e10:	f043 0302 	orr.w	r3, r3, #2
 8005e14:	9207      	str	r2, [sp, #28]
 8005e16:	9304      	str	r3, [sp, #16]
 8005e18:	783b      	ldrb	r3, [r7, #0]
 8005e1a:	2b2e      	cmp	r3, #46	; 0x2e
 8005e1c:	d10c      	bne.n	8005e38 <_svfiprintf_r+0x124>
 8005e1e:	787b      	ldrb	r3, [r7, #1]
 8005e20:	2b2a      	cmp	r3, #42	; 0x2a
 8005e22:	d133      	bne.n	8005e8c <_svfiprintf_r+0x178>
 8005e24:	9b03      	ldr	r3, [sp, #12]
 8005e26:	3702      	adds	r7, #2
 8005e28:	1d1a      	adds	r2, r3, #4
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	9203      	str	r2, [sp, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bfb8      	it	lt
 8005e32:	f04f 33ff 	movlt.w	r3, #4294967295
 8005e36:	9305      	str	r3, [sp, #20]
 8005e38:	4d2e      	ldr	r5, [pc, #184]	; (8005ef4 <_svfiprintf_r+0x1e0>)
 8005e3a:	2203      	movs	r2, #3
 8005e3c:	7839      	ldrb	r1, [r7, #0]
 8005e3e:	4628      	mov	r0, r5
 8005e40:	f000 f9e8 	bl	8006214 <memchr>
 8005e44:	b138      	cbz	r0, 8005e56 <_svfiprintf_r+0x142>
 8005e46:	2340      	movs	r3, #64	; 0x40
 8005e48:	1b40      	subs	r0, r0, r5
 8005e4a:	fa03 f000 	lsl.w	r0, r3, r0
 8005e4e:	9b04      	ldr	r3, [sp, #16]
 8005e50:	3701      	adds	r7, #1
 8005e52:	4303      	orrs	r3, r0
 8005e54:	9304      	str	r3, [sp, #16]
 8005e56:	7839      	ldrb	r1, [r7, #0]
 8005e58:	2206      	movs	r2, #6
 8005e5a:	4827      	ldr	r0, [pc, #156]	; (8005ef8 <_svfiprintf_r+0x1e4>)
 8005e5c:	1c7e      	adds	r6, r7, #1
 8005e5e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e62:	f000 f9d7 	bl	8006214 <memchr>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d038      	beq.n	8005edc <_svfiprintf_r+0x1c8>
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <_svfiprintf_r+0x1e8>)
 8005e6c:	bb13      	cbnz	r3, 8005eb4 <_svfiprintf_r+0x1a0>
 8005e6e:	9b03      	ldr	r3, [sp, #12]
 8005e70:	3307      	adds	r3, #7
 8005e72:	f023 0307 	bic.w	r3, r3, #7
 8005e76:	3308      	adds	r3, #8
 8005e78:	9303      	str	r3, [sp, #12]
 8005e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7c:	444b      	add	r3, r9
 8005e7e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e80:	e76d      	b.n	8005d5e <_svfiprintf_r+0x4a>
 8005e82:	fb05 3202 	mla	r2, r5, r2, r3
 8005e86:	2001      	movs	r0, #1
 8005e88:	460f      	mov	r7, r1
 8005e8a:	e7a6      	b.n	8005dda <_svfiprintf_r+0xc6>
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	250a      	movs	r5, #10
 8005e90:	4619      	mov	r1, r3
 8005e92:	3701      	adds	r7, #1
 8005e94:	9305      	str	r3, [sp, #20]
 8005e96:	4638      	mov	r0, r7
 8005e98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e9c:	3a30      	subs	r2, #48	; 0x30
 8005e9e:	2a09      	cmp	r2, #9
 8005ea0:	d903      	bls.n	8005eaa <_svfiprintf_r+0x196>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0c8      	beq.n	8005e38 <_svfiprintf_r+0x124>
 8005ea6:	9105      	str	r1, [sp, #20]
 8005ea8:	e7c6      	b.n	8005e38 <_svfiprintf_r+0x124>
 8005eaa:	fb05 2101 	mla	r1, r5, r1, r2
 8005eae:	2301      	movs	r3, #1
 8005eb0:	4607      	mov	r7, r0
 8005eb2:	e7f0      	b.n	8005e96 <_svfiprintf_r+0x182>
 8005eb4:	ab03      	add	r3, sp, #12
 8005eb6:	9300      	str	r3, [sp, #0]
 8005eb8:	4622      	mov	r2, r4
 8005eba:	4b11      	ldr	r3, [pc, #68]	; (8005f00 <_svfiprintf_r+0x1ec>)
 8005ebc:	a904      	add	r1, sp, #16
 8005ebe:	4640      	mov	r0, r8
 8005ec0:	f3af 8000 	nop.w
 8005ec4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005ec8:	4681      	mov	r9, r0
 8005eca:	d1d6      	bne.n	8005e7a <_svfiprintf_r+0x166>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	065b      	lsls	r3, r3, #25
 8005ed0:	f53f af35 	bmi.w	8005d3e <_svfiprintf_r+0x2a>
 8005ed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ed6:	b01d      	add	sp, #116	; 0x74
 8005ed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005edc:	ab03      	add	r3, sp, #12
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	4622      	mov	r2, r4
 8005ee2:	4b07      	ldr	r3, [pc, #28]	; (8005f00 <_svfiprintf_r+0x1ec>)
 8005ee4:	a904      	add	r1, sp, #16
 8005ee6:	4640      	mov	r0, r8
 8005ee8:	f000 f882 	bl	8005ff0 <_printf_i>
 8005eec:	e7ea      	b.n	8005ec4 <_svfiprintf_r+0x1b0>
 8005eee:	bf00      	nop
 8005ef0:	080069b8 	.word	0x080069b8
 8005ef4:	080069be 	.word	0x080069be
 8005ef8:	080069c2 	.word	0x080069c2
 8005efc:	00000000 	.word	0x00000000
 8005f00:	08005c61 	.word	0x08005c61

08005f04 <_printf_common>:
 8005f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f08:	4691      	mov	r9, r2
 8005f0a:	461f      	mov	r7, r3
 8005f0c:	688a      	ldr	r2, [r1, #8]
 8005f0e:	690b      	ldr	r3, [r1, #16]
 8005f10:	4606      	mov	r6, r0
 8005f12:	4293      	cmp	r3, r2
 8005f14:	bfb8      	it	lt
 8005f16:	4613      	movlt	r3, r2
 8005f18:	f8c9 3000 	str.w	r3, [r9]
 8005f1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005f20:	460c      	mov	r4, r1
 8005f22:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005f26:	b112      	cbz	r2, 8005f2e <_printf_common+0x2a>
 8005f28:	3301      	adds	r3, #1
 8005f2a:	f8c9 3000 	str.w	r3, [r9]
 8005f2e:	6823      	ldr	r3, [r4, #0]
 8005f30:	0699      	lsls	r1, r3, #26
 8005f32:	bf42      	ittt	mi
 8005f34:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005f38:	3302      	addmi	r3, #2
 8005f3a:	f8c9 3000 	strmi.w	r3, [r9]
 8005f3e:	6825      	ldr	r5, [r4, #0]
 8005f40:	f015 0506 	ands.w	r5, r5, #6
 8005f44:	d107      	bne.n	8005f56 <_printf_common+0x52>
 8005f46:	f104 0a19 	add.w	sl, r4, #25
 8005f4a:	68e3      	ldr	r3, [r4, #12]
 8005f4c:	f8d9 2000 	ldr.w	r2, [r9]
 8005f50:	1a9b      	subs	r3, r3, r2
 8005f52:	42ab      	cmp	r3, r5
 8005f54:	dc29      	bgt.n	8005faa <_printf_common+0xa6>
 8005f56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005f5a:	6822      	ldr	r2, [r4, #0]
 8005f5c:	3300      	adds	r3, #0
 8005f5e:	bf18      	it	ne
 8005f60:	2301      	movne	r3, #1
 8005f62:	0692      	lsls	r2, r2, #26
 8005f64:	d42e      	bmi.n	8005fc4 <_printf_common+0xc0>
 8005f66:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	4630      	mov	r0, r6
 8005f6e:	47c0      	blx	r8
 8005f70:	3001      	adds	r0, #1
 8005f72:	d021      	beq.n	8005fb8 <_printf_common+0xb4>
 8005f74:	6823      	ldr	r3, [r4, #0]
 8005f76:	68e5      	ldr	r5, [r4, #12]
 8005f78:	f003 0306 	and.w	r3, r3, #6
 8005f7c:	2b04      	cmp	r3, #4
 8005f7e:	bf18      	it	ne
 8005f80:	2500      	movne	r5, #0
 8005f82:	f8d9 2000 	ldr.w	r2, [r9]
 8005f86:	f04f 0900 	mov.w	r9, #0
 8005f8a:	bf08      	it	eq
 8005f8c:	1aad      	subeq	r5, r5, r2
 8005f8e:	68a3      	ldr	r3, [r4, #8]
 8005f90:	6922      	ldr	r2, [r4, #16]
 8005f92:	bf08      	it	eq
 8005f94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	bfc4      	itt	gt
 8005f9c:	1a9b      	subgt	r3, r3, r2
 8005f9e:	18ed      	addgt	r5, r5, r3
 8005fa0:	341a      	adds	r4, #26
 8005fa2:	454d      	cmp	r5, r9
 8005fa4:	d11a      	bne.n	8005fdc <_printf_common+0xd8>
 8005fa6:	2000      	movs	r0, #0
 8005fa8:	e008      	b.n	8005fbc <_printf_common+0xb8>
 8005faa:	2301      	movs	r3, #1
 8005fac:	4652      	mov	r2, sl
 8005fae:	4639      	mov	r1, r7
 8005fb0:	4630      	mov	r0, r6
 8005fb2:	47c0      	blx	r8
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d103      	bne.n	8005fc0 <_printf_common+0xbc>
 8005fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc0:	3501      	adds	r5, #1
 8005fc2:	e7c2      	b.n	8005f4a <_printf_common+0x46>
 8005fc4:	2030      	movs	r0, #48	; 0x30
 8005fc6:	18e1      	adds	r1, r4, r3
 8005fc8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005fcc:	1c5a      	adds	r2, r3, #1
 8005fce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005fd2:	4422      	add	r2, r4
 8005fd4:	3302      	adds	r3, #2
 8005fd6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fda:	e7c4      	b.n	8005f66 <_printf_common+0x62>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	4622      	mov	r2, r4
 8005fe0:	4639      	mov	r1, r7
 8005fe2:	4630      	mov	r0, r6
 8005fe4:	47c0      	blx	r8
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	d0e6      	beq.n	8005fb8 <_printf_common+0xb4>
 8005fea:	f109 0901 	add.w	r9, r9, #1
 8005fee:	e7d8      	b.n	8005fa2 <_printf_common+0x9e>

08005ff0 <_printf_i>:
 8005ff0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005ff4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	7e09      	ldrb	r1, [r1, #24]
 8005ffc:	b085      	sub	sp, #20
 8005ffe:	296e      	cmp	r1, #110	; 0x6e
 8006000:	4617      	mov	r7, r2
 8006002:	4606      	mov	r6, r0
 8006004:	4698      	mov	r8, r3
 8006006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006008:	f000 80b3 	beq.w	8006172 <_printf_i+0x182>
 800600c:	d822      	bhi.n	8006054 <_printf_i+0x64>
 800600e:	2963      	cmp	r1, #99	; 0x63
 8006010:	d036      	beq.n	8006080 <_printf_i+0x90>
 8006012:	d80a      	bhi.n	800602a <_printf_i+0x3a>
 8006014:	2900      	cmp	r1, #0
 8006016:	f000 80b9 	beq.w	800618c <_printf_i+0x19c>
 800601a:	2958      	cmp	r1, #88	; 0x58
 800601c:	f000 8083 	beq.w	8006126 <_printf_i+0x136>
 8006020:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006024:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006028:	e032      	b.n	8006090 <_printf_i+0xa0>
 800602a:	2964      	cmp	r1, #100	; 0x64
 800602c:	d001      	beq.n	8006032 <_printf_i+0x42>
 800602e:	2969      	cmp	r1, #105	; 0x69
 8006030:	d1f6      	bne.n	8006020 <_printf_i+0x30>
 8006032:	6820      	ldr	r0, [r4, #0]
 8006034:	6813      	ldr	r3, [r2, #0]
 8006036:	0605      	lsls	r5, r0, #24
 8006038:	f103 0104 	add.w	r1, r3, #4
 800603c:	d52a      	bpl.n	8006094 <_printf_i+0xa4>
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	6011      	str	r1, [r2, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	da03      	bge.n	800604e <_printf_i+0x5e>
 8006046:	222d      	movs	r2, #45	; 0x2d
 8006048:	425b      	negs	r3, r3
 800604a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800604e:	486f      	ldr	r0, [pc, #444]	; (800620c <_printf_i+0x21c>)
 8006050:	220a      	movs	r2, #10
 8006052:	e039      	b.n	80060c8 <_printf_i+0xd8>
 8006054:	2973      	cmp	r1, #115	; 0x73
 8006056:	f000 809d 	beq.w	8006194 <_printf_i+0x1a4>
 800605a:	d808      	bhi.n	800606e <_printf_i+0x7e>
 800605c:	296f      	cmp	r1, #111	; 0x6f
 800605e:	d020      	beq.n	80060a2 <_printf_i+0xb2>
 8006060:	2970      	cmp	r1, #112	; 0x70
 8006062:	d1dd      	bne.n	8006020 <_printf_i+0x30>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	f043 0320 	orr.w	r3, r3, #32
 800606a:	6023      	str	r3, [r4, #0]
 800606c:	e003      	b.n	8006076 <_printf_i+0x86>
 800606e:	2975      	cmp	r1, #117	; 0x75
 8006070:	d017      	beq.n	80060a2 <_printf_i+0xb2>
 8006072:	2978      	cmp	r1, #120	; 0x78
 8006074:	d1d4      	bne.n	8006020 <_printf_i+0x30>
 8006076:	2378      	movs	r3, #120	; 0x78
 8006078:	4865      	ldr	r0, [pc, #404]	; (8006210 <_printf_i+0x220>)
 800607a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800607e:	e055      	b.n	800612c <_printf_i+0x13c>
 8006080:	6813      	ldr	r3, [r2, #0]
 8006082:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006086:	1d19      	adds	r1, r3, #4
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	6011      	str	r1, [r2, #0]
 800608c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006090:	2301      	movs	r3, #1
 8006092:	e08c      	b.n	80061ae <_printf_i+0x1be>
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f010 0f40 	tst.w	r0, #64	; 0x40
 800609a:	6011      	str	r1, [r2, #0]
 800609c:	bf18      	it	ne
 800609e:	b21b      	sxthne	r3, r3
 80060a0:	e7cf      	b.n	8006042 <_printf_i+0x52>
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	6825      	ldr	r5, [r4, #0]
 80060a6:	1d18      	adds	r0, r3, #4
 80060a8:	6010      	str	r0, [r2, #0]
 80060aa:	0628      	lsls	r0, r5, #24
 80060ac:	d501      	bpl.n	80060b2 <_printf_i+0xc2>
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	e002      	b.n	80060b8 <_printf_i+0xc8>
 80060b2:	0668      	lsls	r0, r5, #25
 80060b4:	d5fb      	bpl.n	80060ae <_printf_i+0xbe>
 80060b6:	881b      	ldrh	r3, [r3, #0]
 80060b8:	296f      	cmp	r1, #111	; 0x6f
 80060ba:	bf14      	ite	ne
 80060bc:	220a      	movne	r2, #10
 80060be:	2208      	moveq	r2, #8
 80060c0:	4852      	ldr	r0, [pc, #328]	; (800620c <_printf_i+0x21c>)
 80060c2:	2100      	movs	r1, #0
 80060c4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060c8:	6865      	ldr	r5, [r4, #4]
 80060ca:	2d00      	cmp	r5, #0
 80060cc:	60a5      	str	r5, [r4, #8]
 80060ce:	f2c0 8095 	blt.w	80061fc <_printf_i+0x20c>
 80060d2:	6821      	ldr	r1, [r4, #0]
 80060d4:	f021 0104 	bic.w	r1, r1, #4
 80060d8:	6021      	str	r1, [r4, #0]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d13d      	bne.n	800615a <_printf_i+0x16a>
 80060de:	2d00      	cmp	r5, #0
 80060e0:	f040 808e 	bne.w	8006200 <_printf_i+0x210>
 80060e4:	4665      	mov	r5, ip
 80060e6:	2a08      	cmp	r2, #8
 80060e8:	d10b      	bne.n	8006102 <_printf_i+0x112>
 80060ea:	6823      	ldr	r3, [r4, #0]
 80060ec:	07db      	lsls	r3, r3, #31
 80060ee:	d508      	bpl.n	8006102 <_printf_i+0x112>
 80060f0:	6923      	ldr	r3, [r4, #16]
 80060f2:	6862      	ldr	r2, [r4, #4]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	bfde      	ittt	le
 80060f8:	2330      	movle	r3, #48	; 0x30
 80060fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006102:	ebac 0305 	sub.w	r3, ip, r5
 8006106:	6123      	str	r3, [r4, #16]
 8006108:	f8cd 8000 	str.w	r8, [sp]
 800610c:	463b      	mov	r3, r7
 800610e:	aa03      	add	r2, sp, #12
 8006110:	4621      	mov	r1, r4
 8006112:	4630      	mov	r0, r6
 8006114:	f7ff fef6 	bl	8005f04 <_printf_common>
 8006118:	3001      	adds	r0, #1
 800611a:	d14d      	bne.n	80061b8 <_printf_i+0x1c8>
 800611c:	f04f 30ff 	mov.w	r0, #4294967295
 8006120:	b005      	add	sp, #20
 8006122:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006126:	4839      	ldr	r0, [pc, #228]	; (800620c <_printf_i+0x21c>)
 8006128:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800612c:	6813      	ldr	r3, [r2, #0]
 800612e:	6821      	ldr	r1, [r4, #0]
 8006130:	1d1d      	adds	r5, r3, #4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6015      	str	r5, [r2, #0]
 8006136:	060a      	lsls	r2, r1, #24
 8006138:	d50b      	bpl.n	8006152 <_printf_i+0x162>
 800613a:	07ca      	lsls	r2, r1, #31
 800613c:	bf44      	itt	mi
 800613e:	f041 0120 	orrmi.w	r1, r1, #32
 8006142:	6021      	strmi	r1, [r4, #0]
 8006144:	b91b      	cbnz	r3, 800614e <_printf_i+0x15e>
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	f022 0220 	bic.w	r2, r2, #32
 800614c:	6022      	str	r2, [r4, #0]
 800614e:	2210      	movs	r2, #16
 8006150:	e7b7      	b.n	80060c2 <_printf_i+0xd2>
 8006152:	064d      	lsls	r5, r1, #25
 8006154:	bf48      	it	mi
 8006156:	b29b      	uxthmi	r3, r3
 8006158:	e7ef      	b.n	800613a <_printf_i+0x14a>
 800615a:	4665      	mov	r5, ip
 800615c:	fbb3 f1f2 	udiv	r1, r3, r2
 8006160:	fb02 3311 	mls	r3, r2, r1, r3
 8006164:	5cc3      	ldrb	r3, [r0, r3]
 8006166:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800616a:	460b      	mov	r3, r1
 800616c:	2900      	cmp	r1, #0
 800616e:	d1f5      	bne.n	800615c <_printf_i+0x16c>
 8006170:	e7b9      	b.n	80060e6 <_printf_i+0xf6>
 8006172:	6813      	ldr	r3, [r2, #0]
 8006174:	6825      	ldr	r5, [r4, #0]
 8006176:	1d18      	adds	r0, r3, #4
 8006178:	6961      	ldr	r1, [r4, #20]
 800617a:	6010      	str	r0, [r2, #0]
 800617c:	0628      	lsls	r0, r5, #24
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	d501      	bpl.n	8006186 <_printf_i+0x196>
 8006182:	6019      	str	r1, [r3, #0]
 8006184:	e002      	b.n	800618c <_printf_i+0x19c>
 8006186:	066a      	lsls	r2, r5, #25
 8006188:	d5fb      	bpl.n	8006182 <_printf_i+0x192>
 800618a:	8019      	strh	r1, [r3, #0]
 800618c:	2300      	movs	r3, #0
 800618e:	4665      	mov	r5, ip
 8006190:	6123      	str	r3, [r4, #16]
 8006192:	e7b9      	b.n	8006108 <_printf_i+0x118>
 8006194:	6813      	ldr	r3, [r2, #0]
 8006196:	1d19      	adds	r1, r3, #4
 8006198:	6011      	str	r1, [r2, #0]
 800619a:	681d      	ldr	r5, [r3, #0]
 800619c:	6862      	ldr	r2, [r4, #4]
 800619e:	2100      	movs	r1, #0
 80061a0:	4628      	mov	r0, r5
 80061a2:	f000 f837 	bl	8006214 <memchr>
 80061a6:	b108      	cbz	r0, 80061ac <_printf_i+0x1bc>
 80061a8:	1b40      	subs	r0, r0, r5
 80061aa:	6060      	str	r0, [r4, #4]
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	6123      	str	r3, [r4, #16]
 80061b0:	2300      	movs	r3, #0
 80061b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061b6:	e7a7      	b.n	8006108 <_printf_i+0x118>
 80061b8:	6923      	ldr	r3, [r4, #16]
 80061ba:	462a      	mov	r2, r5
 80061bc:	4639      	mov	r1, r7
 80061be:	4630      	mov	r0, r6
 80061c0:	47c0      	blx	r8
 80061c2:	3001      	adds	r0, #1
 80061c4:	d0aa      	beq.n	800611c <_printf_i+0x12c>
 80061c6:	6823      	ldr	r3, [r4, #0]
 80061c8:	079b      	lsls	r3, r3, #30
 80061ca:	d413      	bmi.n	80061f4 <_printf_i+0x204>
 80061cc:	68e0      	ldr	r0, [r4, #12]
 80061ce:	9b03      	ldr	r3, [sp, #12]
 80061d0:	4298      	cmp	r0, r3
 80061d2:	bfb8      	it	lt
 80061d4:	4618      	movlt	r0, r3
 80061d6:	e7a3      	b.n	8006120 <_printf_i+0x130>
 80061d8:	2301      	movs	r3, #1
 80061da:	464a      	mov	r2, r9
 80061dc:	4639      	mov	r1, r7
 80061de:	4630      	mov	r0, r6
 80061e0:	47c0      	blx	r8
 80061e2:	3001      	adds	r0, #1
 80061e4:	d09a      	beq.n	800611c <_printf_i+0x12c>
 80061e6:	3501      	adds	r5, #1
 80061e8:	68e3      	ldr	r3, [r4, #12]
 80061ea:	9a03      	ldr	r2, [sp, #12]
 80061ec:	1a9b      	subs	r3, r3, r2
 80061ee:	42ab      	cmp	r3, r5
 80061f0:	dcf2      	bgt.n	80061d8 <_printf_i+0x1e8>
 80061f2:	e7eb      	b.n	80061cc <_printf_i+0x1dc>
 80061f4:	2500      	movs	r5, #0
 80061f6:	f104 0919 	add.w	r9, r4, #25
 80061fa:	e7f5      	b.n	80061e8 <_printf_i+0x1f8>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1ac      	bne.n	800615a <_printf_i+0x16a>
 8006200:	7803      	ldrb	r3, [r0, #0]
 8006202:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006206:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800620a:	e76c      	b.n	80060e6 <_printf_i+0xf6>
 800620c:	080069c9 	.word	0x080069c9
 8006210:	080069da 	.word	0x080069da

08006214 <memchr>:
 8006214:	b510      	push	{r4, lr}
 8006216:	b2c9      	uxtb	r1, r1
 8006218:	4402      	add	r2, r0
 800621a:	4290      	cmp	r0, r2
 800621c:	4603      	mov	r3, r0
 800621e:	d101      	bne.n	8006224 <memchr+0x10>
 8006220:	2300      	movs	r3, #0
 8006222:	e003      	b.n	800622c <memchr+0x18>
 8006224:	781c      	ldrb	r4, [r3, #0]
 8006226:	3001      	adds	r0, #1
 8006228:	428c      	cmp	r4, r1
 800622a:	d1f6      	bne.n	800621a <memchr+0x6>
 800622c:	4618      	mov	r0, r3
 800622e:	bd10      	pop	{r4, pc}

08006230 <memmove>:
 8006230:	4288      	cmp	r0, r1
 8006232:	b510      	push	{r4, lr}
 8006234:	eb01 0302 	add.w	r3, r1, r2
 8006238:	d807      	bhi.n	800624a <memmove+0x1a>
 800623a:	1e42      	subs	r2, r0, #1
 800623c:	4299      	cmp	r1, r3
 800623e:	d00a      	beq.n	8006256 <memmove+0x26>
 8006240:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006244:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006248:	e7f8      	b.n	800623c <memmove+0xc>
 800624a:	4283      	cmp	r3, r0
 800624c:	d9f5      	bls.n	800623a <memmove+0xa>
 800624e:	1881      	adds	r1, r0, r2
 8006250:	1ad2      	subs	r2, r2, r3
 8006252:	42d3      	cmn	r3, r2
 8006254:	d100      	bne.n	8006258 <memmove+0x28>
 8006256:	bd10      	pop	{r4, pc}
 8006258:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800625c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006260:	e7f7      	b.n	8006252 <memmove+0x22>
	...

08006264 <_free_r>:
 8006264:	b538      	push	{r3, r4, r5, lr}
 8006266:	4605      	mov	r5, r0
 8006268:	2900      	cmp	r1, #0
 800626a:	d043      	beq.n	80062f4 <_free_r+0x90>
 800626c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006270:	1f0c      	subs	r4, r1, #4
 8006272:	2b00      	cmp	r3, #0
 8006274:	bfb8      	it	lt
 8006276:	18e4      	addlt	r4, r4, r3
 8006278:	f000 f8d0 	bl	800641c <__malloc_lock>
 800627c:	4a1e      	ldr	r2, [pc, #120]	; (80062f8 <_free_r+0x94>)
 800627e:	6813      	ldr	r3, [r2, #0]
 8006280:	4610      	mov	r0, r2
 8006282:	b933      	cbnz	r3, 8006292 <_free_r+0x2e>
 8006284:	6063      	str	r3, [r4, #4]
 8006286:	6014      	str	r4, [r2, #0]
 8006288:	4628      	mov	r0, r5
 800628a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800628e:	f000 b8c6 	b.w	800641e <__malloc_unlock>
 8006292:	42a3      	cmp	r3, r4
 8006294:	d90b      	bls.n	80062ae <_free_r+0x4a>
 8006296:	6821      	ldr	r1, [r4, #0]
 8006298:	1862      	adds	r2, r4, r1
 800629a:	4293      	cmp	r3, r2
 800629c:	bf01      	itttt	eq
 800629e:	681a      	ldreq	r2, [r3, #0]
 80062a0:	685b      	ldreq	r3, [r3, #4]
 80062a2:	1852      	addeq	r2, r2, r1
 80062a4:	6022      	streq	r2, [r4, #0]
 80062a6:	6063      	str	r3, [r4, #4]
 80062a8:	6004      	str	r4, [r0, #0]
 80062aa:	e7ed      	b.n	8006288 <_free_r+0x24>
 80062ac:	4613      	mov	r3, r2
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	b10a      	cbz	r2, 80062b6 <_free_r+0x52>
 80062b2:	42a2      	cmp	r2, r4
 80062b4:	d9fa      	bls.n	80062ac <_free_r+0x48>
 80062b6:	6819      	ldr	r1, [r3, #0]
 80062b8:	1858      	adds	r0, r3, r1
 80062ba:	42a0      	cmp	r0, r4
 80062bc:	d10b      	bne.n	80062d6 <_free_r+0x72>
 80062be:	6820      	ldr	r0, [r4, #0]
 80062c0:	4401      	add	r1, r0
 80062c2:	1858      	adds	r0, r3, r1
 80062c4:	4282      	cmp	r2, r0
 80062c6:	6019      	str	r1, [r3, #0]
 80062c8:	d1de      	bne.n	8006288 <_free_r+0x24>
 80062ca:	6810      	ldr	r0, [r2, #0]
 80062cc:	6852      	ldr	r2, [r2, #4]
 80062ce:	4401      	add	r1, r0
 80062d0:	6019      	str	r1, [r3, #0]
 80062d2:	605a      	str	r2, [r3, #4]
 80062d4:	e7d8      	b.n	8006288 <_free_r+0x24>
 80062d6:	d902      	bls.n	80062de <_free_r+0x7a>
 80062d8:	230c      	movs	r3, #12
 80062da:	602b      	str	r3, [r5, #0]
 80062dc:	e7d4      	b.n	8006288 <_free_r+0x24>
 80062de:	6820      	ldr	r0, [r4, #0]
 80062e0:	1821      	adds	r1, r4, r0
 80062e2:	428a      	cmp	r2, r1
 80062e4:	bf01      	itttt	eq
 80062e6:	6811      	ldreq	r1, [r2, #0]
 80062e8:	6852      	ldreq	r2, [r2, #4]
 80062ea:	1809      	addeq	r1, r1, r0
 80062ec:	6021      	streq	r1, [r4, #0]
 80062ee:	6062      	str	r2, [r4, #4]
 80062f0:	605c      	str	r4, [r3, #4]
 80062f2:	e7c9      	b.n	8006288 <_free_r+0x24>
 80062f4:	bd38      	pop	{r3, r4, r5, pc}
 80062f6:	bf00      	nop
 80062f8:	200001a4 	.word	0x200001a4

080062fc <_malloc_r>:
 80062fc:	b570      	push	{r4, r5, r6, lr}
 80062fe:	1ccd      	adds	r5, r1, #3
 8006300:	f025 0503 	bic.w	r5, r5, #3
 8006304:	3508      	adds	r5, #8
 8006306:	2d0c      	cmp	r5, #12
 8006308:	bf38      	it	cc
 800630a:	250c      	movcc	r5, #12
 800630c:	2d00      	cmp	r5, #0
 800630e:	4606      	mov	r6, r0
 8006310:	db01      	blt.n	8006316 <_malloc_r+0x1a>
 8006312:	42a9      	cmp	r1, r5
 8006314:	d903      	bls.n	800631e <_malloc_r+0x22>
 8006316:	230c      	movs	r3, #12
 8006318:	6033      	str	r3, [r6, #0]
 800631a:	2000      	movs	r0, #0
 800631c:	bd70      	pop	{r4, r5, r6, pc}
 800631e:	f000 f87d 	bl	800641c <__malloc_lock>
 8006322:	4a21      	ldr	r2, [pc, #132]	; (80063a8 <_malloc_r+0xac>)
 8006324:	6814      	ldr	r4, [r2, #0]
 8006326:	4621      	mov	r1, r4
 8006328:	b991      	cbnz	r1, 8006350 <_malloc_r+0x54>
 800632a:	4c20      	ldr	r4, [pc, #128]	; (80063ac <_malloc_r+0xb0>)
 800632c:	6823      	ldr	r3, [r4, #0]
 800632e:	b91b      	cbnz	r3, 8006338 <_malloc_r+0x3c>
 8006330:	4630      	mov	r0, r6
 8006332:	f000 f863 	bl	80063fc <_sbrk_r>
 8006336:	6020      	str	r0, [r4, #0]
 8006338:	4629      	mov	r1, r5
 800633a:	4630      	mov	r0, r6
 800633c:	f000 f85e 	bl	80063fc <_sbrk_r>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d124      	bne.n	800638e <_malloc_r+0x92>
 8006344:	230c      	movs	r3, #12
 8006346:	4630      	mov	r0, r6
 8006348:	6033      	str	r3, [r6, #0]
 800634a:	f000 f868 	bl	800641e <__malloc_unlock>
 800634e:	e7e4      	b.n	800631a <_malloc_r+0x1e>
 8006350:	680b      	ldr	r3, [r1, #0]
 8006352:	1b5b      	subs	r3, r3, r5
 8006354:	d418      	bmi.n	8006388 <_malloc_r+0x8c>
 8006356:	2b0b      	cmp	r3, #11
 8006358:	d90f      	bls.n	800637a <_malloc_r+0x7e>
 800635a:	600b      	str	r3, [r1, #0]
 800635c:	18cc      	adds	r4, r1, r3
 800635e:	50cd      	str	r5, [r1, r3]
 8006360:	4630      	mov	r0, r6
 8006362:	f000 f85c 	bl	800641e <__malloc_unlock>
 8006366:	f104 000b 	add.w	r0, r4, #11
 800636a:	1d23      	adds	r3, r4, #4
 800636c:	f020 0007 	bic.w	r0, r0, #7
 8006370:	1ac3      	subs	r3, r0, r3
 8006372:	d0d3      	beq.n	800631c <_malloc_r+0x20>
 8006374:	425a      	negs	r2, r3
 8006376:	50e2      	str	r2, [r4, r3]
 8006378:	e7d0      	b.n	800631c <_malloc_r+0x20>
 800637a:	684b      	ldr	r3, [r1, #4]
 800637c:	428c      	cmp	r4, r1
 800637e:	bf16      	itet	ne
 8006380:	6063      	strne	r3, [r4, #4]
 8006382:	6013      	streq	r3, [r2, #0]
 8006384:	460c      	movne	r4, r1
 8006386:	e7eb      	b.n	8006360 <_malloc_r+0x64>
 8006388:	460c      	mov	r4, r1
 800638a:	6849      	ldr	r1, [r1, #4]
 800638c:	e7cc      	b.n	8006328 <_malloc_r+0x2c>
 800638e:	1cc4      	adds	r4, r0, #3
 8006390:	f024 0403 	bic.w	r4, r4, #3
 8006394:	42a0      	cmp	r0, r4
 8006396:	d005      	beq.n	80063a4 <_malloc_r+0xa8>
 8006398:	1a21      	subs	r1, r4, r0
 800639a:	4630      	mov	r0, r6
 800639c:	f000 f82e 	bl	80063fc <_sbrk_r>
 80063a0:	3001      	adds	r0, #1
 80063a2:	d0cf      	beq.n	8006344 <_malloc_r+0x48>
 80063a4:	6025      	str	r5, [r4, #0]
 80063a6:	e7db      	b.n	8006360 <_malloc_r+0x64>
 80063a8:	200001a4 	.word	0x200001a4
 80063ac:	200001a8 	.word	0x200001a8

080063b0 <_realloc_r>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	4607      	mov	r7, r0
 80063b4:	4614      	mov	r4, r2
 80063b6:	460e      	mov	r6, r1
 80063b8:	b921      	cbnz	r1, 80063c4 <_realloc_r+0x14>
 80063ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063be:	4611      	mov	r1, r2
 80063c0:	f7ff bf9c 	b.w	80062fc <_malloc_r>
 80063c4:	b922      	cbnz	r2, 80063d0 <_realloc_r+0x20>
 80063c6:	f7ff ff4d 	bl	8006264 <_free_r>
 80063ca:	4625      	mov	r5, r4
 80063cc:	4628      	mov	r0, r5
 80063ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063d0:	f000 f826 	bl	8006420 <_malloc_usable_size_r>
 80063d4:	42a0      	cmp	r0, r4
 80063d6:	d20f      	bcs.n	80063f8 <_realloc_r+0x48>
 80063d8:	4621      	mov	r1, r4
 80063da:	4638      	mov	r0, r7
 80063dc:	f7ff ff8e 	bl	80062fc <_malloc_r>
 80063e0:	4605      	mov	r5, r0
 80063e2:	2800      	cmp	r0, #0
 80063e4:	d0f2      	beq.n	80063cc <_realloc_r+0x1c>
 80063e6:	4631      	mov	r1, r6
 80063e8:	4622      	mov	r2, r4
 80063ea:	f7ff fc05 	bl	8005bf8 <memcpy>
 80063ee:	4631      	mov	r1, r6
 80063f0:	4638      	mov	r0, r7
 80063f2:	f7ff ff37 	bl	8006264 <_free_r>
 80063f6:	e7e9      	b.n	80063cc <_realloc_r+0x1c>
 80063f8:	4635      	mov	r5, r6
 80063fa:	e7e7      	b.n	80063cc <_realloc_r+0x1c>

080063fc <_sbrk_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	2300      	movs	r3, #0
 8006400:	4c05      	ldr	r4, [pc, #20]	; (8006418 <_sbrk_r+0x1c>)
 8006402:	4605      	mov	r5, r0
 8006404:	4608      	mov	r0, r1
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	f7fb ff82 	bl	8002310 <_sbrk>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_sbrk_r+0x1a>
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	b103      	cbz	r3, 8006416 <_sbrk_r+0x1a>
 8006414:	602b      	str	r3, [r5, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	2000030c 	.word	0x2000030c

0800641c <__malloc_lock>:
 800641c:	4770      	bx	lr

0800641e <__malloc_unlock>:
 800641e:	4770      	bx	lr

08006420 <_malloc_usable_size_r>:
 8006420:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006424:	1f18      	subs	r0, r3, #4
 8006426:	2b00      	cmp	r3, #0
 8006428:	bfbc      	itt	lt
 800642a:	580b      	ldrlt	r3, [r1, r0]
 800642c:	18c0      	addlt	r0, r0, r3
 800642e:	4770      	bx	lr

08006430 <_init>:
 8006430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006432:	bf00      	nop
 8006434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006436:	bc08      	pop	{r3}
 8006438:	469e      	mov	lr, r3
 800643a:	4770      	bx	lr

0800643c <_fini>:
 800643c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800643e:	bf00      	nop
 8006440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006442:	bc08      	pop	{r3}
 8006444:	469e      	mov	lr, r3
 8006446:	4770      	bx	lr
