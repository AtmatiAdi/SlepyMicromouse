
Mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000937c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001314  0800948c  0800948c  0001948c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a7a0  0800a7a0  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800a7a0  0800a7a0  0001a7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a7a8  0800a7a8  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a7a8  0800a7a8  0001a7a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a7ac  0800a7ac  0001a7ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  0800a7b0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  20000148  0800a8f4  00020148  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200009ac  0800a8f4  000209ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   000174ca  00000000  00000000  0002016d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f3a  00000000  00000000  00037637  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014f8  00000000  00000000  0003a578  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013b0  00000000  00000000  0003ba70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000169e9  00000000  00000000  0003ce20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f7d0  00000000  00000000  00053809  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d754  00000000  00000000  00062fd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e072d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d60  00000000  00000000  000e07a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000148 	.word	0x20000148
 800012c:	00000000 	.word	0x00000000
 8000130:	08009474 	.word	0x08009474

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000014c 	.word	0x2000014c
 800014c:	08009474 	.word	0x08009474

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__aeabi_d2iz>:
 80008fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000900:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000904:	d215      	bcs.n	8000932 <__aeabi_d2iz+0x36>
 8000906:	d511      	bpl.n	800092c <__aeabi_d2iz+0x30>
 8000908:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800090c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000910:	d912      	bls.n	8000938 <__aeabi_d2iz+0x3c>
 8000912:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000916:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800091a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800091e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000922:	fa23 f002 	lsr.w	r0, r3, r2
 8000926:	bf18      	it	ne
 8000928:	4240      	negne	r0, r0
 800092a:	4770      	bx	lr
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	4770      	bx	lr
 8000932:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000936:	d105      	bne.n	8000944 <__aeabi_d2iz+0x48>
 8000938:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800093c:	bf08      	it	eq
 800093e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop

0800094c <__aeabi_ldivmod>:
 800094c:	b97b      	cbnz	r3, 800096e <__aeabi_ldivmod+0x22>
 800094e:	b972      	cbnz	r2, 800096e <__aeabi_ldivmod+0x22>
 8000950:	2900      	cmp	r1, #0
 8000952:	bfbe      	ittt	lt
 8000954:	2000      	movlt	r0, #0
 8000956:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800095a:	e006      	blt.n	800096a <__aeabi_ldivmod+0x1e>
 800095c:	bf08      	it	eq
 800095e:	2800      	cmpeq	r0, #0
 8000960:	bf1c      	itt	ne
 8000962:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000966:	f04f 30ff 	movne.w	r0, #4294967295
 800096a:	f000 b9a7 	b.w	8000cbc <__aeabi_idiv0>
 800096e:	f1ad 0c08 	sub.w	ip, sp, #8
 8000972:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000976:	2900      	cmp	r1, #0
 8000978:	db09      	blt.n	800098e <__aeabi_ldivmod+0x42>
 800097a:	2b00      	cmp	r3, #0
 800097c:	db1a      	blt.n	80009b4 <__aeabi_ldivmod+0x68>
 800097e:	f000 f835 	bl	80009ec <__udivmoddi4>
 8000982:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000986:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800098a:	b004      	add	sp, #16
 800098c:	4770      	bx	lr
 800098e:	4240      	negs	r0, r0
 8000990:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000994:	2b00      	cmp	r3, #0
 8000996:	db1b      	blt.n	80009d0 <__aeabi_ldivmod+0x84>
 8000998:	f000 f828 	bl	80009ec <__udivmoddi4>
 800099c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009a4:	b004      	add	sp, #16
 80009a6:	4240      	negs	r0, r0
 80009a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009ac:	4252      	negs	r2, r2
 80009ae:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009b2:	4770      	bx	lr
 80009b4:	4252      	negs	r2, r2
 80009b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009ba:	f000 f817 	bl	80009ec <__udivmoddi4>
 80009be:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c6:	b004      	add	sp, #16
 80009c8:	4240      	negs	r0, r0
 80009ca:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80009ce:	4770      	bx	lr
 80009d0:	4252      	negs	r2, r2
 80009d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009d6:	f000 f809 	bl	80009ec <__udivmoddi4>
 80009da:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e2:	b004      	add	sp, #16
 80009e4:	4252      	negs	r2, r2
 80009e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	468c      	mov	ip, r1
 80009f2:	4604      	mov	r4, r0
 80009f4:	9e08      	ldr	r6, [sp, #32]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d14b      	bne.n	8000a92 <__udivmoddi4+0xa6>
 80009fa:	428a      	cmp	r2, r1
 80009fc:	4615      	mov	r5, r2
 80009fe:	d967      	bls.n	8000ad0 <__udivmoddi4+0xe4>
 8000a00:	fab2 f282 	clz	r2, r2
 8000a04:	b14a      	cbz	r2, 8000a1a <__udivmoddi4+0x2e>
 8000a06:	f1c2 0720 	rsb	r7, r2, #32
 8000a0a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a0e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a12:	4095      	lsls	r5, r2
 8000a14:	ea47 0c03 	orr.w	ip, r7, r3
 8000a18:	4094      	lsls	r4, r2
 8000a1a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a1e:	fbbc f7fe 	udiv	r7, ip, lr
 8000a22:	fa1f f885 	uxth.w	r8, r5
 8000a26:	fb0e c317 	mls	r3, lr, r7, ip
 8000a2a:	fb07 f908 	mul.w	r9, r7, r8
 8000a2e:	0c21      	lsrs	r1, r4, #16
 8000a30:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a34:	4599      	cmp	r9, r3
 8000a36:	d909      	bls.n	8000a4c <__udivmoddi4+0x60>
 8000a38:	18eb      	adds	r3, r5, r3
 8000a3a:	f107 31ff 	add.w	r1, r7, #4294967295
 8000a3e:	f080 811c 	bcs.w	8000c7a <__udivmoddi4+0x28e>
 8000a42:	4599      	cmp	r9, r3
 8000a44:	f240 8119 	bls.w	8000c7a <__udivmoddi4+0x28e>
 8000a48:	3f02      	subs	r7, #2
 8000a4a:	442b      	add	r3, r5
 8000a4c:	eba3 0309 	sub.w	r3, r3, r9
 8000a50:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a54:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a58:	fb00 f108 	mul.w	r1, r0, r8
 8000a5c:	b2a4      	uxth	r4, r4
 8000a5e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a62:	42a1      	cmp	r1, r4
 8000a64:	d909      	bls.n	8000a7a <__udivmoddi4+0x8e>
 8000a66:	192c      	adds	r4, r5, r4
 8000a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a6c:	f080 8107 	bcs.w	8000c7e <__udivmoddi4+0x292>
 8000a70:	42a1      	cmp	r1, r4
 8000a72:	f240 8104 	bls.w	8000c7e <__udivmoddi4+0x292>
 8000a76:	3802      	subs	r0, #2
 8000a78:	442c      	add	r4, r5
 8000a7a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a7e:	2700      	movs	r7, #0
 8000a80:	1a64      	subs	r4, r4, r1
 8000a82:	b11e      	cbz	r6, 8000a8c <__udivmoddi4+0xa0>
 8000a84:	2300      	movs	r3, #0
 8000a86:	40d4      	lsrs	r4, r2
 8000a88:	e9c6 4300 	strd	r4, r3, [r6]
 8000a8c:	4639      	mov	r1, r7
 8000a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a92:	428b      	cmp	r3, r1
 8000a94:	d909      	bls.n	8000aaa <__udivmoddi4+0xbe>
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	f000 80ec 	beq.w	8000c74 <__udivmoddi4+0x288>
 8000a9c:	2700      	movs	r7, #0
 8000a9e:	e9c6 0100 	strd	r0, r1, [r6]
 8000aa2:	4638      	mov	r0, r7
 8000aa4:	4639      	mov	r1, r7
 8000aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aaa:	fab3 f783 	clz	r7, r3
 8000aae:	2f00      	cmp	r7, #0
 8000ab0:	d148      	bne.n	8000b44 <__udivmoddi4+0x158>
 8000ab2:	428b      	cmp	r3, r1
 8000ab4:	d302      	bcc.n	8000abc <__udivmoddi4+0xd0>
 8000ab6:	4282      	cmp	r2, r0
 8000ab8:	f200 80fb 	bhi.w	8000cb2 <__udivmoddi4+0x2c6>
 8000abc:	1a84      	subs	r4, r0, r2
 8000abe:	eb61 0303 	sbc.w	r3, r1, r3
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	469c      	mov	ip, r3
 8000ac6:	2e00      	cmp	r6, #0
 8000ac8:	d0e0      	beq.n	8000a8c <__udivmoddi4+0xa0>
 8000aca:	e9c6 4c00 	strd	r4, ip, [r6]
 8000ace:	e7dd      	b.n	8000a8c <__udivmoddi4+0xa0>
 8000ad0:	b902      	cbnz	r2, 8000ad4 <__udivmoddi4+0xe8>
 8000ad2:	deff      	udf	#255	; 0xff
 8000ad4:	fab2 f282 	clz	r2, r2
 8000ad8:	2a00      	cmp	r2, #0
 8000ada:	f040 808f 	bne.w	8000bfc <__udivmoddi4+0x210>
 8000ade:	2701      	movs	r7, #1
 8000ae0:	1b49      	subs	r1, r1, r5
 8000ae2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000ae6:	fa1f f985 	uxth.w	r9, r5
 8000aea:	fbb1 fef8 	udiv	lr, r1, r8
 8000aee:	fb08 111e 	mls	r1, r8, lr, r1
 8000af2:	fb09 f00e 	mul.w	r0, r9, lr
 8000af6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000afa:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000afe:	4298      	cmp	r0, r3
 8000b00:	d907      	bls.n	8000b12 <__udivmoddi4+0x126>
 8000b02:	18eb      	adds	r3, r5, r3
 8000b04:	f10e 31ff 	add.w	r1, lr, #4294967295
 8000b08:	d202      	bcs.n	8000b10 <__udivmoddi4+0x124>
 8000b0a:	4298      	cmp	r0, r3
 8000b0c:	f200 80cd 	bhi.w	8000caa <__udivmoddi4+0x2be>
 8000b10:	468e      	mov	lr, r1
 8000b12:	1a1b      	subs	r3, r3, r0
 8000b14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b18:	fb08 3310 	mls	r3, r8, r0, r3
 8000b1c:	fb09 f900 	mul.w	r9, r9, r0
 8000b20:	b2a4      	uxth	r4, r4
 8000b22:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b26:	45a1      	cmp	r9, r4
 8000b28:	d907      	bls.n	8000b3a <__udivmoddi4+0x14e>
 8000b2a:	192c      	adds	r4, r5, r4
 8000b2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b30:	d202      	bcs.n	8000b38 <__udivmoddi4+0x14c>
 8000b32:	45a1      	cmp	r9, r4
 8000b34:	f200 80b6 	bhi.w	8000ca4 <__udivmoddi4+0x2b8>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	eba4 0409 	sub.w	r4, r4, r9
 8000b3e:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000b42:	e79e      	b.n	8000a82 <__udivmoddi4+0x96>
 8000b44:	f1c7 0520 	rsb	r5, r7, #32
 8000b48:	40bb      	lsls	r3, r7
 8000b4a:	fa22 fc05 	lsr.w	ip, r2, r5
 8000b4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b52:	fa21 f405 	lsr.w	r4, r1, r5
 8000b56:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5a:	fbb4 f9fe 	udiv	r9, r4, lr
 8000b5e:	fa1f f88c 	uxth.w	r8, ip
 8000b62:	fb0e 4419 	mls	r4, lr, r9, r4
 8000b66:	fa20 f305 	lsr.w	r3, r0, r5
 8000b6a:	40b9      	lsls	r1, r7
 8000b6c:	fb09 fa08 	mul.w	sl, r9, r8
 8000b70:	4319      	orrs	r1, r3
 8000b72:	0c0b      	lsrs	r3, r1, #16
 8000b74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b78:	45a2      	cmp	sl, r4
 8000b7a:	fa02 f207 	lsl.w	r2, r2, r7
 8000b7e:	fa00 f307 	lsl.w	r3, r0, r7
 8000b82:	d90b      	bls.n	8000b9c <__udivmoddi4+0x1b0>
 8000b84:	eb1c 0404 	adds.w	r4, ip, r4
 8000b88:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b8c:	f080 8088 	bcs.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b90:	45a2      	cmp	sl, r4
 8000b92:	f240 8085 	bls.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b96:	f1a9 0902 	sub.w	r9, r9, #2
 8000b9a:	4464      	add	r4, ip
 8000b9c:	eba4 040a 	sub.w	r4, r4, sl
 8000ba0:	fbb4 f0fe 	udiv	r0, r4, lr
 8000ba4:	fb0e 4410 	mls	r4, lr, r0, r4
 8000ba8:	fb00 fa08 	mul.w	sl, r0, r8
 8000bac:	b289      	uxth	r1, r1
 8000bae:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000bb2:	45a2      	cmp	sl, r4
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x1dc>
 8000bb6:	eb1c 0404 	adds.w	r4, ip, r4
 8000bba:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bbe:	d26b      	bcs.n	8000c98 <__udivmoddi4+0x2ac>
 8000bc0:	45a2      	cmp	sl, r4
 8000bc2:	d969      	bls.n	8000c98 <__udivmoddi4+0x2ac>
 8000bc4:	3802      	subs	r0, #2
 8000bc6:	4464      	add	r4, ip
 8000bc8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bcc:	fba0 8902 	umull	r8, r9, r0, r2
 8000bd0:	eba4 040a 	sub.w	r4, r4, sl
 8000bd4:	454c      	cmp	r4, r9
 8000bd6:	4641      	mov	r1, r8
 8000bd8:	46ce      	mov	lr, r9
 8000bda:	d354      	bcc.n	8000c86 <__udivmoddi4+0x29a>
 8000bdc:	d051      	beq.n	8000c82 <__udivmoddi4+0x296>
 8000bde:	2e00      	cmp	r6, #0
 8000be0:	d069      	beq.n	8000cb6 <__udivmoddi4+0x2ca>
 8000be2:	1a5a      	subs	r2, r3, r1
 8000be4:	eb64 040e 	sbc.w	r4, r4, lr
 8000be8:	fa04 f505 	lsl.w	r5, r4, r5
 8000bec:	fa22 f307 	lsr.w	r3, r2, r7
 8000bf0:	40fc      	lsrs	r4, r7
 8000bf2:	431d      	orrs	r5, r3
 8000bf4:	e9c6 5400 	strd	r5, r4, [r6]
 8000bf8:	2700      	movs	r7, #0
 8000bfa:	e747      	b.n	8000a8c <__udivmoddi4+0xa0>
 8000bfc:	4095      	lsls	r5, r2
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	fa21 f003 	lsr.w	r0, r1, r3
 8000c06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000c0a:	fbb0 f7f8 	udiv	r7, r0, r8
 8000c0e:	fa1f f985 	uxth.w	r9, r5
 8000c12:	fb08 0017 	mls	r0, r8, r7, r0
 8000c16:	fa24 f303 	lsr.w	r3, r4, r3
 8000c1a:	4091      	lsls	r1, r2
 8000c1c:	fb07 fc09 	mul.w	ip, r7, r9
 8000c20:	430b      	orrs	r3, r1
 8000c22:	0c19      	lsrs	r1, r3, #16
 8000c24:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c28:	458c      	cmp	ip, r1
 8000c2a:	fa04 f402 	lsl.w	r4, r4, r2
 8000c2e:	d907      	bls.n	8000c40 <__udivmoddi4+0x254>
 8000c30:	1869      	adds	r1, r5, r1
 8000c32:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c36:	d231      	bcs.n	8000c9c <__udivmoddi4+0x2b0>
 8000c38:	458c      	cmp	ip, r1
 8000c3a:	d92f      	bls.n	8000c9c <__udivmoddi4+0x2b0>
 8000c3c:	3f02      	subs	r7, #2
 8000c3e:	4429      	add	r1, r5
 8000c40:	eba1 010c 	sub.w	r1, r1, ip
 8000c44:	fbb1 f0f8 	udiv	r0, r1, r8
 8000c48:	fb08 1c10 	mls	ip, r8, r0, r1
 8000c4c:	fb00 fe09 	mul.w	lr, r0, r9
 8000c50:	b299      	uxth	r1, r3
 8000c52:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c56:	458e      	cmp	lr, r1
 8000c58:	d907      	bls.n	8000c6a <__udivmoddi4+0x27e>
 8000c5a:	1869      	adds	r1, r5, r1
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	d218      	bcs.n	8000c94 <__udivmoddi4+0x2a8>
 8000c62:	458e      	cmp	lr, r1
 8000c64:	d916      	bls.n	8000c94 <__udivmoddi4+0x2a8>
 8000c66:	3802      	subs	r0, #2
 8000c68:	4429      	add	r1, r5
 8000c6a:	eba1 010e 	sub.w	r1, r1, lr
 8000c6e:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c72:	e73a      	b.n	8000aea <__udivmoddi4+0xfe>
 8000c74:	4637      	mov	r7, r6
 8000c76:	4630      	mov	r0, r6
 8000c78:	e708      	b.n	8000a8c <__udivmoddi4+0xa0>
 8000c7a:	460f      	mov	r7, r1
 8000c7c:	e6e6      	b.n	8000a4c <__udivmoddi4+0x60>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	e6fb      	b.n	8000a7a <__udivmoddi4+0x8e>
 8000c82:	4543      	cmp	r3, r8
 8000c84:	d2ab      	bcs.n	8000bde <__udivmoddi4+0x1f2>
 8000c86:	ebb8 0102 	subs.w	r1, r8, r2
 8000c8a:	eb69 020c 	sbc.w	r2, r9, ip
 8000c8e:	3801      	subs	r0, #1
 8000c90:	4696      	mov	lr, r2
 8000c92:	e7a4      	b.n	8000bde <__udivmoddi4+0x1f2>
 8000c94:	4618      	mov	r0, r3
 8000c96:	e7e8      	b.n	8000c6a <__udivmoddi4+0x27e>
 8000c98:	4608      	mov	r0, r1
 8000c9a:	e795      	b.n	8000bc8 <__udivmoddi4+0x1dc>
 8000c9c:	4607      	mov	r7, r0
 8000c9e:	e7cf      	b.n	8000c40 <__udivmoddi4+0x254>
 8000ca0:	4681      	mov	r9, r0
 8000ca2:	e77b      	b.n	8000b9c <__udivmoddi4+0x1b0>
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	442c      	add	r4, r5
 8000ca8:	e747      	b.n	8000b3a <__udivmoddi4+0x14e>
 8000caa:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cae:	442b      	add	r3, r5
 8000cb0:	e72f      	b.n	8000b12 <__udivmoddi4+0x126>
 8000cb2:	4638      	mov	r0, r7
 8000cb4:	e707      	b.n	8000ac6 <__udivmoddi4+0xda>
 8000cb6:	4637      	mov	r7, r6
 8000cb8:	e6e8      	b.n	8000a8c <__udivmoddi4+0xa0>
 8000cba:	bf00      	nop

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <Init>:
 *      Author: atmat
 */

#include "AccelGyro.h"

void Init(I2C_HandleTypeDef *I2Chnd, TIM_HandleTypeDef *htim) {
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	memcpy(&Timer, htim, sizeof(*htim));
 8000cca:	2240      	movs	r2, #64	; 0x40
 8000ccc:	6839      	ldr	r1, [r7, #0]
 8000cce:	482d      	ldr	r0, [pc, #180]	; (8000d84 <Init+0xc4>)
 8000cd0:	f007 ffb4 	bl	8008c3c <memcpy>
	MPU6050_Init(I2Chnd);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f001 fc6f 	bl	80025b8 <MPU6050_Init>
	MpuConfig.Accel_Full_Scale = AFS_SEL_2g;
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <Init+0xc8>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	709a      	strb	r2, [r3, #2]
	MpuConfig.ClockSource = Internal_8MHz;
 8000ce0:	4b29      	ldr	r3, [pc, #164]	; (8000d88 <Init+0xc8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	701a      	strb	r2, [r3, #0]
	MpuConfig.CONFIG_DLPF = DLPF_260A_256G_Hz;
 8000ce6:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <Init+0xc8>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	70da      	strb	r2, [r3, #3]
	MpuConfig.Gyro_Full_Scale = FS_SEL_500;
 8000cec:	4b26      	ldr	r3, [pc, #152]	; (8000d88 <Init+0xc8>)
 8000cee:	2201      	movs	r2, #1
 8000cf0:	705a      	strb	r2, [r3, #1]
	MpuConfig.Sleep_Mode_Bit = 0;
 8000cf2:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <Init+0xc8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	711a      	strb	r2, [r3, #4]
	MPU6050_Config(&MpuConfig);
 8000cf8:	4823      	ldr	r0, [pc, #140]	; (8000d88 <Init+0xc8>)
 8000cfa:	f001 fcb3 	bl	8002664 <MPU6050_Config>

	for (int a = 0; a < 6; a++){
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	e034      	b.n	8000d6e <Init+0xae>
		LastAcceleration[a] = Callibration[a] = Velocity[a] = LastVelocity[a] = Distance[a] = 0;
 8000d04:	4a21      	ldr	r2, [pc, #132]	; (8000d8c <Init+0xcc>)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	441a      	add	r2, r3
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	f04f 0400 	mov.w	r4, #0
 8000d14:	e9c2 3400 	strd	r3, r4, [r2]
 8000d18:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <Init+0xcc>)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4413      	add	r3, r2
 8000d20:	cb18      	ldmia	r3, {r3, r4}
 8000d22:	491b      	ldr	r1, [pc, #108]	; (8000d90 <Init+0xd0>)
 8000d24:	68fa      	ldr	r2, [r7, #12]
 8000d26:	00d2      	lsls	r2, r2, #3
 8000d28:	440a      	add	r2, r1
 8000d2a:	e9c2 3400 	strd	r3, r4, [r2]
 8000d2e:	4a18      	ldr	r2, [pc, #96]	; (8000d90 <Init+0xd0>)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	4413      	add	r3, r2
 8000d36:	cb18      	ldmia	r3, {r3, r4}
 8000d38:	4916      	ldr	r1, [pc, #88]	; (8000d94 <Init+0xd4>)
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	00d2      	lsls	r2, r2, #3
 8000d3e:	440a      	add	r2, r1
 8000d40:	e9c2 3400 	strd	r3, r4, [r2]
 8000d44:	4a13      	ldr	r2, [pc, #76]	; (8000d94 <Init+0xd4>)
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	4413      	add	r3, r2
 8000d4c:	cb18      	ldmia	r3, {r3, r4}
 8000d4e:	b219      	sxth	r1, r3
 8000d50:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <Init+0xd8>)
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000d58:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <Init+0xd8>)
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000d60:	4a0e      	ldr	r2, [pc, #56]	; (8000d9c <Init+0xdc>)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int a = 0; a < 6; a++){
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	2b05      	cmp	r3, #5
 8000d72:	ddc7      	ble.n	8000d04 <Init+0x44>
	}
	HAL_TIM_Base_Start_IT(&Timer);
 8000d74:	4803      	ldr	r0, [pc, #12]	; (8000d84 <Init+0xc4>)
 8000d76:	f006 ff08 	bl	8007b8a <HAL_TIM_Base_Start_IT>
}
 8000d7a:	bf00      	nop
 8000d7c:	3714      	adds	r7, #20
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd90      	pop	{r4, r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000164 	.word	0x20000164
 8000d88:	2000079c 	.word	0x2000079c
 8000d8c:	200006c8 	.word	0x200006c8
 8000d90:	20000710 	.word	0x20000710
 8000d94:	20000758 	.word	0x20000758
 8000d98:	20000788 	.word	0x20000788
 8000d9c:	200006f8 	.word	0x200006f8

08000da0 <Update>:

void Update(){
 8000da0:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8000da4:	b082      	sub	sp, #8
 8000da6:	af00      	add	r7, sp, #0
	// Pobranie danych
	MPU6050_Get_Accel_RawData(&AccelData);	// Najpier trzeba akcelerometr
 8000da8:	4867      	ldr	r0, [pc, #412]	; (8000f48 <Update+0x1a8>)
 8000daa:	f001 fd11 	bl	80027d0 <MPU6050_Get_Accel_RawData>
	MPU6050_Get_Gyro_RawData(&GyroData);		// Potem zyroskop
 8000dae:	4867      	ldr	r0, [pc, #412]	; (8000f4c <Update+0x1ac>)
 8000db0:	f001 fd74 	bl	800289c <MPU6050_Get_Gyro_RawData>
	MiliSec  = Timer.Instance->CNT;
 8000db4:	4b66      	ldr	r3, [pc, #408]	; (8000f50 <Update+0x1b0>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dba:	461a      	mov	r2, r3
 8000dbc:	4b65      	ldr	r3, [pc, #404]	; (8000f54 <Update+0x1b4>)
 8000dbe:	601a      	str	r2, [r3, #0]
	Timer.Instance->CNT = 0;
 8000dc0:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <Update+0x1b0>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	625a      	str	r2, [r3, #36]	; 0x24
	// Raw data
	RawData[0] = AccelData.x;
 8000dc8:	4b5f      	ldr	r3, [pc, #380]	; (8000f48 <Update+0x1a8>)
 8000dca:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dce:	4b62      	ldr	r3, [pc, #392]	; (8000f58 <Update+0x1b8>)
 8000dd0:	801a      	strh	r2, [r3, #0]
	RawData[1] = AccelData.y;
 8000dd2:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <Update+0x1a8>)
 8000dd4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000dd8:	4b5f      	ldr	r3, [pc, #380]	; (8000f58 <Update+0x1b8>)
 8000dda:	805a      	strh	r2, [r3, #2]
	RawData[2] = AccelData.z;
 8000ddc:	4b5a      	ldr	r3, [pc, #360]	; (8000f48 <Update+0x1a8>)
 8000dde:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000de2:	4b5d      	ldr	r3, [pc, #372]	; (8000f58 <Update+0x1b8>)
 8000de4:	809a      	strh	r2, [r3, #4]
	RawData[3] = GyroData.x;
 8000de6:	4b59      	ldr	r3, [pc, #356]	; (8000f4c <Update+0x1ac>)
 8000de8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dec:	4b5a      	ldr	r3, [pc, #360]	; (8000f58 <Update+0x1b8>)
 8000dee:	80da      	strh	r2, [r3, #6]
	RawData[4] = GyroData.y;
 8000df0:	4b56      	ldr	r3, [pc, #344]	; (8000f4c <Update+0x1ac>)
 8000df2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000df6:	4b58      	ldr	r3, [pc, #352]	; (8000f58 <Update+0x1b8>)
 8000df8:	811a      	strh	r2, [r3, #8]
	RawData[5] = GyroData.z;
 8000dfa:	4b54      	ldr	r3, [pc, #336]	; (8000f4c <Update+0x1ac>)
 8000dfc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000e00:	4b55      	ldr	r3, [pc, #340]	; (8000f58 <Update+0x1b8>)
 8000e02:	815a      	strh	r2, [r3, #10]
	for (int a = 0; a < 6; a++){
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	e094      	b.n	8000f34 <Update+0x194>
		// Acceleration
		Acceleration[a] = RawData[a] - Callibration[a];
 8000e0a:	4a53      	ldr	r2, [pc, #332]	; (8000f58 <Update+0x1b8>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4951      	ldr	r1, [pc, #324]	; (8000f5c <Update+0x1bc>)
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	1ad3      	subs	r3, r2, r3
 8000e20:	b29b      	uxth	r3, r3
 8000e22:	b219      	sxth	r1, r3
 8000e24:	4a4e      	ldr	r2, [pc, #312]	; (8000f60 <Update+0x1c0>)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Velocity
		Velocity[a] += (Acceleration[a] + (Acceleration[a] - LastAcceleration[a]) / 2) * MiliSec;
 8000e2c:	4a4d      	ldr	r2, [pc, #308]	; (8000f64 <Update+0x1c4>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	4413      	add	r3, r2
 8000e34:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000e38:	4849      	ldr	r0, [pc, #292]	; (8000f60 <Update+0x1c0>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8000e40:	461c      	mov	r4, r3
 8000e42:	4847      	ldr	r0, [pc, #284]	; (8000f60 <Update+0x1c0>)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8000e4a:	461d      	mov	r5, r3
 8000e4c:	4846      	ldr	r0, [pc, #280]	; (8000f68 <Update+0x1c8>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8000e54:	1aeb      	subs	r3, r5, r3
 8000e56:	0fd8      	lsrs	r0, r3, #31
 8000e58:	4403      	add	r3, r0
 8000e5a:	105b      	asrs	r3, r3, #1
 8000e5c:	4423      	add	r3, r4
 8000e5e:	483d      	ldr	r0, [pc, #244]	; (8000f54 <Update+0x1b4>)
 8000e60:	6800      	ldr	r0, [r0, #0]
 8000e62:	fb00 f303 	mul.w	r3, r0, r3
 8000e66:	461d      	mov	r5, r3
 8000e68:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8000e6c:	186b      	adds	r3, r5, r1
 8000e6e:	eb46 0402 	adc.w	r4, r6, r2
 8000e72:	493c      	ldr	r1, [pc, #240]	; (8000f64 <Update+0x1c4>)
 8000e74:	687a      	ldr	r2, [r7, #4]
 8000e76:	00d2      	lsls	r2, r2, #3
 8000e78:	440a      	add	r2, r1
 8000e7a:	e9c2 3400 	strd	r3, r4, [r2]
		// Distance
		Distance[a] += (Velocity[a] + (Velocity[a] - LastVelocity[a]) / 2) * MiliSec;
 8000e7e:	4a3b      	ldr	r2, [pc, #236]	; (8000f6c <Update+0x1cc>)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	00db      	lsls	r3, r3, #3
 8000e84:	4413      	add	r3, r2
 8000e86:	e9d3 5600 	ldrd	r5, r6, [r3]
 8000e8a:	4a36      	ldr	r2, [pc, #216]	; (8000f64 <Update+0x1c4>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	00db      	lsls	r3, r3, #3
 8000e90:	4413      	add	r3, r2
 8000e92:	e9d3 1200 	ldrd	r1, r2, [r3]
 8000e96:	4833      	ldr	r0, [pc, #204]	; (8000f64 <Update+0x1c4>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	00db      	lsls	r3, r3, #3
 8000e9c:	4403      	add	r3, r0
 8000e9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8000ea2:	4833      	ldr	r0, [pc, #204]	; (8000f70 <Update+0x1d0>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	00db      	lsls	r3, r3, #3
 8000ea8:	4403      	add	r3, r0
 8000eaa:	cb18      	ldmia	r3, {r3, r4}
 8000eac:	ebb8 0803 	subs.w	r8, r8, r3
 8000eb0:	eb69 0904 	sbc.w	r9, r9, r4
 8000eb4:	46c3      	mov	fp, r8
 8000eb6:	46cc      	mov	ip, r9
 8000eb8:	ea4f 70dc 	mov.w	r0, ip, lsr #31
 8000ebc:	4680      	mov	r8, r0
 8000ebe:	f04f 0900 	mov.w	r9, #0
 8000ec2:	eb1b 0308 	adds.w	r3, fp, r8
 8000ec6:	eb4c 0409 	adc.w	r4, ip, r9
 8000eca:	1064      	asrs	r4, r4, #1
 8000ecc:	ea4f 0333 	mov.w	r3, r3, rrx
 8000ed0:	eb11 0803 	adds.w	r8, r1, r3
 8000ed4:	eb42 0904 	adc.w	r9, r2, r4
 8000ed8:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <Update+0x1b4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8000ee0:	fb03 fc09 	mul.w	ip, r3, r9
 8000ee4:	fb08 f004 	mul.w	r0, r8, r4
 8000ee8:	4460      	add	r0, ip
 8000eea:	fba8 8903 	umull	r8, r9, r8, r3
 8000eee:	eb00 0209 	add.w	r2, r0, r9
 8000ef2:	4691      	mov	r9, r2
 8000ef4:	eb18 0305 	adds.w	r3, r8, r5
 8000ef8:	eb49 0406 	adc.w	r4, r9, r6
 8000efc:	491b      	ldr	r1, [pc, #108]	; (8000f6c <Update+0x1cc>)
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	00d2      	lsls	r2, r2, #3
 8000f02:	440a      	add	r2, r1
 8000f04:	e9c2 3400 	strd	r3, r4, [r2]
		// Zapamiętanie ostatniej probki
		LastAcceleration[a] = Acceleration[a];
 8000f08:	4a15      	ldr	r2, [pc, #84]	; (8000f60 <Update+0x1c0>)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000f10:	4a15      	ldr	r2, [pc, #84]	; (8000f68 <Update+0x1c8>)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		LastVelocity[a] = Velocity[a];
 8000f18:	4a12      	ldr	r2, [pc, #72]	; (8000f64 <Update+0x1c4>)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	4413      	add	r3, r2
 8000f20:	cb18      	ldmia	r3, {r3, r4}
 8000f22:	4913      	ldr	r1, [pc, #76]	; (8000f70 <Update+0x1d0>)
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	00d2      	lsls	r2, r2, #3
 8000f28:	440a      	add	r2, r1
 8000f2a:	e9c2 3400 	strd	r3, r4, [r2]
	for (int a = 0; a < 6; a++){
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3301      	adds	r3, #1
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b05      	cmp	r3, #5
 8000f38:	f77f af67 	ble.w	8000e0a <Update+0x6a>
	}
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 8000f46:	bf00      	nop
 8000f48:	20000704 	.word	0x20000704
 8000f4c:	20000794 	.word	0x20000794
 8000f50:	20000164 	.word	0x20000164
 8000f54:	200007a4 	.word	0x200007a4
 8000f58:	2000074c 	.word	0x2000074c
 8000f5c:	20000788 	.word	0x20000788
 8000f60:	20000740 	.word	0x20000740
 8000f64:	20000758 	.word	0x20000758
 8000f68:	200006f8 	.word	0x200006f8
 8000f6c:	200006c8 	.word	0x200006c8
 8000f70:	20000710 	.word	0x20000710

08000f74 <Callibrate>:

void Callibrate(int count){
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b08d      	sub	sp, #52	; 0x34
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
	long int TmpCall[6];
    int Count = count;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int a = 0; a < 6; a++){
 8000f80:	2300      	movs	r3, #0
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f84:	e038      	b.n	8000ff8 <Callibrate+0x84>
        TmpCall[a] = LastAcceleration[a] = Velocity[a] = LastVelocity[a] = Distance[a] = 0;
 8000f86:	4a48      	ldr	r2, [pc, #288]	; (80010a8 <Callibrate+0x134>)
 8000f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	441a      	add	r2, r3
 8000f8e:	f04f 0300 	mov.w	r3, #0
 8000f92:	f04f 0400 	mov.w	r4, #0
 8000f96:	e9c2 3400 	strd	r3, r4, [r2]
 8000f9a:	4a43      	ldr	r2, [pc, #268]	; (80010a8 <Callibrate+0x134>)
 8000f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	4413      	add	r3, r2
 8000fa2:	cb18      	ldmia	r3, {r3, r4}
 8000fa4:	4941      	ldr	r1, [pc, #260]	; (80010ac <Callibrate+0x138>)
 8000fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fa8:	00d2      	lsls	r2, r2, #3
 8000faa:	440a      	add	r2, r1
 8000fac:	e9c2 3400 	strd	r3, r4, [r2]
 8000fb0:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <Callibrate+0x138>)
 8000fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fb4:	00db      	lsls	r3, r3, #3
 8000fb6:	4413      	add	r3, r2
 8000fb8:	cb18      	ldmia	r3, {r3, r4}
 8000fba:	493d      	ldr	r1, [pc, #244]	; (80010b0 <Callibrate+0x13c>)
 8000fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fbe:	00d2      	lsls	r2, r2, #3
 8000fc0:	440a      	add	r2, r1
 8000fc2:	e9c2 3400 	strd	r3, r4, [r2]
 8000fc6:	4a3a      	ldr	r2, [pc, #232]	; (80010b0 <Callibrate+0x13c>)
 8000fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	4413      	add	r3, r2
 8000fce:	cb18      	ldmia	r3, {r3, r4}
 8000fd0:	b219      	sxth	r1, r3
 8000fd2:	4a38      	ldr	r2, [pc, #224]	; (80010b4 <Callibrate+0x140>)
 8000fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fd6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8000fda:	4a36      	ldr	r2, [pc, #216]	; (80010b4 <Callibrate+0x140>)
 8000fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fde:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe6:	009b      	lsls	r3, r3, #2
 8000fe8:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000fec:	440b      	add	r3, r1
 8000fee:	f843 2c24 	str.w	r2, [r3, #-36]
    for (int a = 0; a < 6; a++){
 8000ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ffa:	2b05      	cmp	r3, #5
 8000ffc:	ddc3      	ble.n	8000f86 <Callibrate+0x12>
    }
    while (Count > 0) {
 8000ffe:	e02f      	b.n	8001060 <Callibrate+0xec>
    	// Pobranie danych
    	MPU6050_Get_Accel_RawData(&AccelData);	// Najpier trzeba akcelerometr
 8001000:	482d      	ldr	r0, [pc, #180]	; (80010b8 <Callibrate+0x144>)
 8001002:	f001 fbe5 	bl	80027d0 <MPU6050_Get_Accel_RawData>
    	MPU6050_Get_Gyro_RawData(&GyroData);		// Potem zyroskop
 8001006:	482d      	ldr	r0, [pc, #180]	; (80010bc <Callibrate+0x148>)
 8001008:	f001 fc48 	bl	800289c <MPU6050_Get_Gyro_RawData>
    	// Raw data
    	TmpCall[0] += AccelData.x;
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	4a2a      	ldr	r2, [pc, #168]	; (80010b8 <Callibrate+0x144>)
 8001010:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001014:	4413      	add	r3, r2
 8001016:	60fb      	str	r3, [r7, #12]
    	TmpCall[1] += AccelData.y;
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	4a27      	ldr	r2, [pc, #156]	; (80010b8 <Callibrate+0x144>)
 800101c:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001020:	4413      	add	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
    	TmpCall[2] += AccelData.z;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <Callibrate+0x144>)
 8001028:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800102c:	4413      	add	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
    	TmpCall[3] += GyroData.x;
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	4a22      	ldr	r2, [pc, #136]	; (80010bc <Callibrate+0x148>)
 8001034:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001038:	4413      	add	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
    	TmpCall[4] += GyroData.y;
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <Callibrate+0x148>)
 8001040:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8001044:	4413      	add	r3, r2
 8001046:	61fb      	str	r3, [r7, #28]
    	TmpCall[5] += GyroData.z;
 8001048:	6a3b      	ldr	r3, [r7, #32]
 800104a:	4a1c      	ldr	r2, [pc, #112]	; (80010bc <Callibrate+0x148>)
 800104c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001050:	4413      	add	r3, r2
 8001052:	623b      	str	r3, [r7, #32]
    	NRF24_DelayMicroSeconds(100);
 8001054:	2064      	movs	r0, #100	; 0x64
 8001056:	f000 f8e5 	bl	8001224 <NRF24_DelayMicroSeconds>
		Count--;
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	3b01      	subs	r3, #1
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (Count > 0) {
 8001060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001062:	2b00      	cmp	r3, #0
 8001064:	dccc      	bgt.n	8001000 <Callibrate+0x8c>
    }
    for (int a = 0; a < 6; a++){
 8001066:	2300      	movs	r3, #0
 8001068:	627b      	str	r3, [r7, #36]	; 0x24
 800106a:	e011      	b.n	8001090 <Callibrate+0x11c>
    	Callibration[a] = TmpCall[a]/count;
 800106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001074:	4413      	add	r3, r2
 8001076:	f853 2c24 	ldr.w	r2, [r3, #-36]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001080:	b219      	sxth	r1, r3
 8001082:	4a0f      	ldr	r2, [pc, #60]	; (80010c0 <Callibrate+0x14c>)
 8001084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001086:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int a = 0; a < 6; a++){
 800108a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108c:	3301      	adds	r3, #1
 800108e:	627b      	str	r3, [r7, #36]	; 0x24
 8001090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001092:	2b05      	cmp	r3, #5
 8001094:	ddea      	ble.n	800106c <Callibrate+0xf8>
    }
    Timer.Instance->CNT = 0;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <Callibrate+0x150>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800109e:	bf00      	nop
 80010a0:	3734      	adds	r7, #52	; 0x34
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd90      	pop	{r4, r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200006c8 	.word	0x200006c8
 80010ac:	20000710 	.word	0x20000710
 80010b0:	20000758 	.word	0x20000758
 80010b4:	200006f8 	.word	0x200006f8
 80010b8:	20000704 	.word	0x20000704
 80010bc:	20000794 	.word	0x20000794
 80010c0:	20000788 	.word	0x20000788
 80010c4:	20000164 	.word	0x20000164

080010c8 <GetAcceleration>:

void GetAcceleration(char out[], int start){
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
	for (int a = 0; a < 6; a++){
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	e01f      	b.n	8001118 <GetAcceleration+0x50>
		out[a * 2 + start] = Acceleration[a];
 80010d8:	4a13      	ldr	r2, [pc, #76]	; (8001128 <GetAcceleration+0x60>)
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	005a      	lsls	r2, r3, #1
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	461a      	mov	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4413      	add	r3, r2
 80010ee:	b2ca      	uxtb	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
		out[a * 2 + 1 + start] = Acceleration[a] >> 8;
 80010f2:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <GetAcceleration+0x60>)
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80010fa:	121b      	asrs	r3, r3, #8
 80010fc:	b219      	sxth	r1, r3
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	1c5a      	adds	r2, r3, #1
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	461a      	mov	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	b2ca      	uxtb	r2, r1
 8001110:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < 6; a++){
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	3301      	adds	r3, #1
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	2b05      	cmp	r3, #5
 800111c:	dddc      	ble.n	80010d8 <GetAcceleration+0x10>
	}
}
 800111e:	bf00      	nop
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	bc80      	pop	{r7}
 8001126:	4770      	bx	lr
 8001128:	20000740 	.word	0x20000740

0800112c <GetVelocity>:

void GetVelocity(char out[], int start){
 800112c:	b590      	push	{r4, r7, lr}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
	short vel;
	for (int a = 0; a < 6; a++){
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	e028      	b.n	800118e <GetVelocity+0x62>
		vel = (Velocity[a])/1000000;
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <GetVelocity+0x70>)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	4413      	add	r3, r2
 8001144:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001148:	4a15      	ldr	r2, [pc, #84]	; (80011a0 <GetVelocity+0x74>)
 800114a:	f04f 0300 	mov.w	r3, #0
 800114e:	f7ff fbfd 	bl	800094c <__aeabi_ldivmod>
 8001152:	4603      	mov	r3, r0
 8001154:	460c      	mov	r4, r1
 8001156:	817b      	strh	r3, [r7, #10]
		out[a * 2 + start] = vel;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	005a      	lsls	r2, r3, #1
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	4413      	add	r3, r2
 8001160:	461a      	mov	r2, r3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4413      	add	r3, r2
 8001166:	897a      	ldrh	r2, [r7, #10]
 8001168:	b2d2      	uxtb	r2, r2
 800116a:	701a      	strb	r2, [r3, #0]
		out[a * 2 + 1 + start] = vel >> 8;
 800116c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001170:	121b      	asrs	r3, r3, #8
 8001172:	b219      	sxth	r1, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	1c5a      	adds	r2, r3, #1
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	4413      	add	r3, r2
 800117e:	461a      	mov	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4413      	add	r3, r2
 8001184:	b2ca      	uxtb	r2, r1
 8001186:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < 6; a++){
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2b05      	cmp	r3, #5
 8001192:	ddd3      	ble.n	800113c <GetVelocity+0x10>
	}
}
 8001194:	bf00      	nop
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	bd90      	pop	{r4, r7, pc}
 800119c:	20000758 	.word	0x20000758
 80011a0:	000f4240 	.word	0x000f4240
 80011a4:	00000000 	.word	0x00000000

080011a8 <GetDistance>:

void GetDistance(char out[], int start){
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
	short vel;
	for (int a = 0; a < 6; a++){
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	e028      	b.n	800120a <GetDistance+0x62>
		vel = (Distance[a])/1000000000000;
 80011b8:	4a19      	ldr	r2, [pc, #100]	; (8001220 <GetDistance+0x78>)
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4413      	add	r3, r2
 80011c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c4:	a314      	add	r3, pc, #80	; (adr r3, 8001218 <GetDistance+0x70>)
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	f7ff fbbf 	bl	800094c <__aeabi_ldivmod>
 80011ce:	4603      	mov	r3, r0
 80011d0:	460c      	mov	r4, r1
 80011d2:	817b      	strh	r3, [r7, #10]
		out[a * 2 + start] = vel;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	005a      	lsls	r2, r3, #1
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	4413      	add	r3, r2
 80011dc:	461a      	mov	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	897a      	ldrh	r2, [r7, #10]
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	701a      	strb	r2, [r3, #0]
		out[a * 2 + 1 + start] = vel >> 8;
 80011e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80011ec:	121b      	asrs	r3, r3, #8
 80011ee:	b219      	sxth	r1, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	005b      	lsls	r3, r3, #1
 80011f4:	1c5a      	adds	r2, r3, #1
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	4413      	add	r3, r2
 80011fa:	461a      	mov	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4413      	add	r3, r2
 8001200:	b2ca      	uxtb	r2, r1
 8001202:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < 6; a++){
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	3301      	adds	r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	2b05      	cmp	r3, #5
 800120e:	ddd3      	ble.n	80011b8 <GetDistance+0x10>
	}
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	bd90      	pop	{r4, r7, pc}
 8001218:	d4a51000 	.word	0xd4a51000
 800121c:	000000e8 	.word	0x000000e8
 8001220:	200006c8 	.word	0x200006c8

08001224 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8001230:	4b0a      	ldr	r3, [pc, #40]	; (800125c <NRF24_DelayMicroSeconds+0x38>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0a      	ldr	r2, [pc, #40]	; (8001260 <NRF24_DelayMicroSeconds+0x3c>)
 8001236:	fba2 2303 	umull	r2, r3, r2, r3
 800123a:	0c9a      	lsrs	r2, r3, #18
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	fb02 f303 	mul.w	r3, r2, r3
 8001242:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001244:	bf00      	nop
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	1e5a      	subs	r2, r3, #1
 800124a:	60fa      	str	r2, [r7, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1fa      	bne.n	8001246 <NRF24_DelayMicroSeconds+0x22>
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	200000d4 	.word	0x200000d4
 8001260:	165e9f81 	.word	0x165e9f81

08001264 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d008      	beq.n	8001284 <NRF24_csn+0x20>
 8001272:	4b0a      	ldr	r3, [pc, #40]	; (800129c <NRF24_csn+0x38>)
 8001274:	6818      	ldr	r0, [r3, #0]
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <NRF24_csn+0x3c>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	2201      	movs	r2, #1
 800127c:	4619      	mov	r1, r3
 800127e:	f004 f903 	bl	8005488 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8001282:	e007      	b.n	8001294 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001284:	4b05      	ldr	r3, [pc, #20]	; (800129c <NRF24_csn+0x38>)
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <NRF24_csn+0x3c>)
 800128a:	881b      	ldrh	r3, [r3, #0]
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	f004 f8fa 	bl	8005488 <HAL_GPIO_WritePin>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200001ac 	.word	0x200001ac
 80012a0:	200001b0 	.word	0x200001b0

080012a4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d008      	beq.n	80012c4 <NRF24_ce+0x20>
 80012b2:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <NRF24_ce+0x38>)
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <NRF24_ce+0x3c>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	2201      	movs	r2, #1
 80012bc:	4619      	mov	r1, r3
 80012be:	f004 f8e3 	bl	8005488 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80012c2:	e007      	b.n	80012d4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <NRF24_ce+0x38>)
 80012c6:	6818      	ldr	r0, [r3, #0]
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <NRF24_ce+0x3c>)
 80012ca:	881b      	ldrh	r3, [r3, #0]
 80012cc:	2200      	movs	r2, #0
 80012ce:	4619      	mov	r1, r3
 80012d0:	f004 f8da 	bl	8005488 <HAL_GPIO_WritePin>
}
 80012d4:	bf00      	nop
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	200001ac 	.word	0x200001ac
 80012e0:	200001b2 	.word	0x200001b2

080012e4 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80012ee:	2000      	movs	r0, #0
 80012f0:	f7ff ffb8 	bl	8001264 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	f003 031f 	and.w	r3, r3, #31
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80012fe:	f107 010c 	add.w	r1, r7, #12
 8001302:	2364      	movs	r3, #100	; 0x64
 8001304:	2201      	movs	r2, #1
 8001306:	480a      	ldr	r0, [pc, #40]	; (8001330 <NRF24_read_register+0x4c>)
 8001308:	f005 ff5b 	bl	80071c2 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	1c59      	adds	r1, r3, #1
 8001312:	2364      	movs	r3, #100	; 0x64
 8001314:	2201      	movs	r2, #1
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <NRF24_read_register+0x4c>)
 8001318:	f006 f887 	bl	800742a <HAL_SPI_Receive>
	retData = spiBuf[1];
 800131c:	7b7b      	ldrb	r3, [r7, #13]
 800131e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8001320:	2001      	movs	r0, #1
 8001322:	f7ff ff9f 	bl	8001264 <NRF24_csn>
	return retData;
 8001326:	7bfb      	ldrb	r3, [r7, #15]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3710      	adds	r7, #16
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200001b4 	.word	0x200001b4

08001334 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b084      	sub	sp, #16
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
 8001340:	4613      	mov	r3, r2
 8001342:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001344:	2000      	movs	r0, #0
 8001346:	f7ff ff8d 	bl	8001264 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800134a:	79fb      	ldrb	r3, [r7, #7]
 800134c:	f003 031f 	and.w	r3, r3, #31
 8001350:	b2db      	uxtb	r3, r3
 8001352:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001354:	f107 010c 	add.w	r1, r7, #12
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	2201      	movs	r2, #1
 800135c:	4808      	ldr	r0, [pc, #32]	; (8001380 <NRF24_read_registerN+0x4c>)
 800135e:	f005 ff30 	bl	80071c2 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8001362:	79bb      	ldrb	r3, [r7, #6]
 8001364:	b29a      	uxth	r2, r3
 8001366:	2364      	movs	r3, #100	; 0x64
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	4805      	ldr	r0, [pc, #20]	; (8001380 <NRF24_read_registerN+0x4c>)
 800136c:	f006 f85d 	bl	800742a <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8001370:	2001      	movs	r0, #1
 8001372:	f7ff ff77 	bl	8001264 <NRF24_csn>
}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	200001b4 	.word	0x200001b4

08001384 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	460a      	mov	r2, r1
 800138e:	71fb      	strb	r3, [r7, #7]
 8001390:	4613      	mov	r3, r2
 8001392:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001394:	2000      	movs	r0, #0
 8001396:	f7ff ff65 	bl	8001264 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	f043 0320 	orr.w	r3, r3, #32
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80013a4:	79bb      	ldrb	r3, [r7, #6]
 80013a6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80013a8:	f107 010c 	add.w	r1, r7, #12
 80013ac:	2364      	movs	r3, #100	; 0x64
 80013ae:	2202      	movs	r2, #2
 80013b0:	4804      	ldr	r0, [pc, #16]	; (80013c4 <NRF24_write_register+0x40>)
 80013b2:	f005 ff06 	bl	80071c2 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff ff54 	bl	8001264 <NRF24_csn>
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200001b4 	.word	0x200001b4

080013c8 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	6039      	str	r1, [r7, #0]
 80013d2:	71fb      	strb	r3, [r7, #7]
 80013d4:	4613      	mov	r3, r2
 80013d6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80013d8:	2000      	movs	r0, #0
 80013da:	f7ff ff43 	bl	8001264 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80013e8:	f107 010c 	add.w	r1, r7, #12
 80013ec:	2364      	movs	r3, #100	; 0x64
 80013ee:	2201      	movs	r2, #1
 80013f0:	4808      	ldr	r0, [pc, #32]	; (8001414 <NRF24_write_registerN+0x4c>)
 80013f2:	f005 fee6 	bl	80071c2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80013f6:	79bb      	ldrb	r3, [r7, #6]
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	2364      	movs	r3, #100	; 0x64
 80013fc:	6839      	ldr	r1, [r7, #0]
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <NRF24_write_registerN+0x4c>)
 8001400:	f005 fedf 	bl	80071c2 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff ff2d 	bl	8001264 <NRF24_csn>
}
 800140a:	bf00      	nop
 800140c:	3710      	adds	r7, #16
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	200001b4 	.word	0x200001b4

08001418 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8001424:	2000      	movs	r0, #0
 8001426:	f7ff ff1d 	bl	8001264 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 800142a:	23a0      	movs	r3, #160	; 0xa0
 800142c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 800142e:	f107 010f 	add.w	r1, r7, #15
 8001432:	2364      	movs	r3, #100	; 0x64
 8001434:	2201      	movs	r2, #1
 8001436:	4808      	ldr	r0, [pc, #32]	; (8001458 <NRF24_write_payload+0x40>)
 8001438:	f005 fec3 	bl	80071c2 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 800143c:	78fb      	ldrb	r3, [r7, #3]
 800143e:	b29a      	uxth	r2, r3
 8001440:	2364      	movs	r3, #100	; 0x64
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	4804      	ldr	r0, [pc, #16]	; (8001458 <NRF24_write_payload+0x40>)
 8001446:	f005 febc 	bl	80071c2 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800144a:	2001      	movs	r0, #1
 800144c:	f7ff ff0a 	bl	8001264 <NRF24_csn>
}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	200001b4 	.word	0x200001b4

0800145c <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	460b      	mov	r3, r1
 8001466:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8001468:	f000 fa10 	bl	800188c <NRF24_getPayloadSize>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	78fb      	ldrb	r3, [r7, #3]
 8001472:	4293      	cmp	r3, r2
 8001474:	d303      	bcc.n	800147e <NRF24_read_payload+0x22>
 8001476:	f000 fa09 	bl	800188c <NRF24_getPayloadSize>
 800147a:	4603      	mov	r3, r0
 800147c:	e000      	b.n	8001480 <NRF24_read_payload+0x24>
 800147e:	78fb      	ldrb	r3, [r7, #3]
 8001480:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff feee 	bl	8001264 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8001488:	2361      	movs	r3, #97	; 0x61
 800148a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 800148c:	f107 010e 	add.w	r1, r7, #14
 8001490:	2364      	movs	r3, #100	; 0x64
 8001492:	2201      	movs	r2, #1
 8001494:	4808      	ldr	r0, [pc, #32]	; (80014b8 <NRF24_read_payload+0x5c>)
 8001496:	f005 fe94 	bl	80071c2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	b29a      	uxth	r2, r3
 800149e:	2364      	movs	r3, #100	; 0x64
 80014a0:	6879      	ldr	r1, [r7, #4]
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <NRF24_read_payload+0x5c>)
 80014a4:	f005 ffc1 	bl	800742a <HAL_SPI_Receive>
	NRF24_csn(1);
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff fedb 	bl	8001264 <NRF24_csn>
}
 80014ae:	bf00      	nop
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200001b4 	.word	0x200001b4

080014bc <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 80014c0:	21ff      	movs	r1, #255	; 0xff
 80014c2:	20e1      	movs	r0, #225	; 0xe1
 80014c4:	f7ff ff5e 	bl	8001384 <NRF24_write_register>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}

080014cc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80014d0:	21ff      	movs	r1, #255	; 0xff
 80014d2:	20e2      	movs	r0, #226	; 0xe2
 80014d4:	f7ff ff56 	bl	8001384 <NRF24_write_register>
}
 80014d8:	bf00      	nop
 80014da:	bd80      	pop	{r7, pc}

080014dc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80014e2:	2007      	movs	r0, #7
 80014e4:	f7ff fefe 	bl	80012e4 <NRF24_read_register>
 80014e8:	4603      	mov	r3, r0
 80014ea:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80014ec:	79fb      	ldrb	r3, [r7, #7]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3708      	adds	r7, #8
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
	...

080014f8 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80014f8:	b082      	sub	sp, #8
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b084      	sub	sp, #16
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	61fb      	str	r3, [r7, #28]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
 8001508:	4613      	mov	r3, r2
 800150a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 800150c:	4b66      	ldr	r3, [pc, #408]	; (80016a8 <NRF24_begin+0x1b0>)
 800150e:	4618      	mov	r0, r3
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	2258      	movs	r2, #88	; 0x58
 8001516:	4619      	mov	r1, r3
 8001518:	f007 fb90 	bl	8008c3c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 800151c:	4a63      	ldr	r2, [pc, #396]	; (80016ac <NRF24_begin+0x1b4>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8001522:	4a63      	ldr	r2, [pc, #396]	; (80016b0 <NRF24_begin+0x1b8>)
 8001524:	887b      	ldrh	r3, [r7, #2]
 8001526:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001528:	4a62      	ldr	r2, [pc, #392]	; (80016b4 <NRF24_begin+0x1bc>)
 800152a:	883b      	ldrh	r3, [r7, #0]
 800152c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff fe98 	bl	8001264 <NRF24_csn>
	NRF24_ce(0);
 8001534:	2000      	movs	r0, #0
 8001536:	f7ff feb5 	bl	80012a4 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 800153a:	2005      	movs	r0, #5
 800153c:	f003 f8de 	bl	80046fc <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8001540:	2108      	movs	r1, #8
 8001542:	2000      	movs	r0, #0
 8001544:	f7ff ff1e 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8001548:	213f      	movs	r1, #63	; 0x3f
 800154a:	2001      	movs	r0, #1
 800154c:	f7ff ff1a 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8001550:	2103      	movs	r1, #3
 8001552:	2002      	movs	r0, #2
 8001554:	f7ff ff16 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8001558:	2103      	movs	r1, #3
 800155a:	2003      	movs	r0, #3
 800155c:	f7ff ff12 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8001560:	2103      	movs	r1, #3
 8001562:	2004      	movs	r0, #4
 8001564:	f7ff ff0e 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8001568:	2102      	movs	r1, #2
 800156a:	2005      	movs	r0, #5
 800156c:	f7ff ff0a 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8001570:	210f      	movs	r1, #15
 8001572:	2006      	movs	r0, #6
 8001574:	f7ff ff06 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8001578:	210e      	movs	r1, #14
 800157a:	2007      	movs	r0, #7
 800157c:	f7ff ff02 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8001580:	2100      	movs	r1, #0
 8001582:	2008      	movs	r0, #8
 8001584:	f7ff fefe 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8001588:	2100      	movs	r1, #0
 800158a:	2009      	movs	r0, #9
 800158c:	f7ff fefa 	bl	8001384 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001590:	23e7      	movs	r3, #231	; 0xe7
 8001592:	733b      	strb	r3, [r7, #12]
 8001594:	23e7      	movs	r3, #231	; 0xe7
 8001596:	72fb      	strb	r3, [r7, #11]
 8001598:	23e7      	movs	r3, #231	; 0xe7
 800159a:	72bb      	strb	r3, [r7, #10]
 800159c:	23e7      	movs	r3, #231	; 0xe7
 800159e:	727b      	strb	r3, [r7, #9]
 80015a0:	23e7      	movs	r3, #231	; 0xe7
 80015a2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 80015a4:	f107 0308 	add.w	r3, r7, #8
 80015a8:	2205      	movs	r2, #5
 80015aa:	4619      	mov	r1, r3
 80015ac:	200a      	movs	r0, #10
 80015ae:	f7ff ff0b 	bl	80013c8 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 80015b2:	23c2      	movs	r3, #194	; 0xc2
 80015b4:	733b      	strb	r3, [r7, #12]
 80015b6:	23c2      	movs	r3, #194	; 0xc2
 80015b8:	72fb      	strb	r3, [r7, #11]
 80015ba:	23c2      	movs	r3, #194	; 0xc2
 80015bc:	72bb      	strb	r3, [r7, #10]
 80015be:	23c2      	movs	r3, #194	; 0xc2
 80015c0:	727b      	strb	r3, [r7, #9]
 80015c2:	23c2      	movs	r3, #194	; 0xc2
 80015c4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 80015c6:	f107 0308 	add.w	r3, r7, #8
 80015ca:	2205      	movs	r2, #5
 80015cc:	4619      	mov	r1, r3
 80015ce:	200b      	movs	r0, #11
 80015d0:	f7ff fefa 	bl	80013c8 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80015d4:	21c3      	movs	r1, #195	; 0xc3
 80015d6:	200c      	movs	r0, #12
 80015d8:	f7ff fed4 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80015dc:	21c4      	movs	r1, #196	; 0xc4
 80015de:	200d      	movs	r0, #13
 80015e0:	f7ff fed0 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80015e4:	21c5      	movs	r1, #197	; 0xc5
 80015e6:	200e      	movs	r0, #14
 80015e8:	f7ff fecc 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80015ec:	21c6      	movs	r1, #198	; 0xc6
 80015ee:	200f      	movs	r0, #15
 80015f0:	f7ff fec8 	bl	8001384 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80015f4:	23e7      	movs	r3, #231	; 0xe7
 80015f6:	733b      	strb	r3, [r7, #12]
 80015f8:	23e7      	movs	r3, #231	; 0xe7
 80015fa:	72fb      	strb	r3, [r7, #11]
 80015fc:	23e7      	movs	r3, #231	; 0xe7
 80015fe:	72bb      	strb	r3, [r7, #10]
 8001600:	23e7      	movs	r3, #231	; 0xe7
 8001602:	727b      	strb	r3, [r7, #9]
 8001604:	23e7      	movs	r3, #231	; 0xe7
 8001606:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	2205      	movs	r2, #5
 800160e:	4619      	mov	r1, r3
 8001610:	2010      	movs	r0, #16
 8001612:	f7ff fed9 	bl	80013c8 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001616:	2100      	movs	r1, #0
 8001618:	2011      	movs	r0, #17
 800161a:	f7ff feb3 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800161e:	2100      	movs	r1, #0
 8001620:	2012      	movs	r0, #18
 8001622:	f7ff feaf 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001626:	2100      	movs	r1, #0
 8001628:	2013      	movs	r0, #19
 800162a:	f7ff feab 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800162e:	2100      	movs	r1, #0
 8001630:	2014      	movs	r0, #20
 8001632:	f7ff fea7 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001636:	2100      	movs	r1, #0
 8001638:	2015      	movs	r0, #21
 800163a:	f7ff fea3 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800163e:	2100      	movs	r1, #0
 8001640:	2016      	movs	r0, #22
 8001642:	f7ff fe9f 	bl	8001384 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8001646:	f000 fb0b 	bl	8001c60 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 800164a:	2100      	movs	r1, #0
 800164c:	201c      	movs	r0, #28
 800164e:	f7ff fe99 	bl	8001384 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8001652:	2100      	movs	r1, #0
 8001654:	201d      	movs	r0, #29
 8001656:	f7ff fe95 	bl	8001384 <NRF24_write_register>
	printRadioSettings();
 800165a:	f000 fb1b 	bl	8001c94 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 800165e:	210f      	movs	r1, #15
 8001660:	200f      	movs	r0, #15
 8001662:	f000 f8cd 	bl	8001800 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8001666:	2003      	movs	r0, #3
 8001668:	f000 f9af 	bl	80019ca <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 800166c:	2001      	movs	r0, #1
 800166e:	f000 f9e5 	bl	8001a3c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8001672:	2002      	movs	r0, #2
 8001674:	f000 fa28 	bl	8001ac8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8001678:	f000 f97a 	bl	8001970 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 800167c:	2020      	movs	r0, #32
 800167e:	f000 f8ef 	bl	8001860 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8001682:	f000 fae4 	bl	8001c4e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8001686:	204c      	movs	r0, #76	; 0x4c
 8001688:	f000 f8d5 	bl	8001836 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 800168c:	f7ff ff16 	bl	80014bc <NRF24_flush_tx>
	NRF24_flush_rx();
 8001690:	f7ff ff1c 	bl	80014cc <NRF24_flush_rx>
	
	NRF24_powerDown();
 8001694:	f000 fa40 	bl	8001b18 <NRF24_powerDown>
	
}
 8001698:	bf00      	nop
 800169a:	3710      	adds	r7, #16
 800169c:	46bd      	mov	sp, r7
 800169e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80016a2:	b002      	add	sp, #8
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	200001b4 	.word	0x200001b4
 80016ac:	200001ac 	.word	0x200001ac
 80016b0:	200001b0 	.word	0x200001b0
 80016b4:	200001b2 	.word	0x200001b2

080016b8 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 80016bc:	2000      	movs	r0, #0
 80016be:	f7ff fdf1 	bl	80012a4 <NRF24_ce>
	NRF24_flush_tx();
 80016c2:	f7ff fefb 	bl	80014bc <NRF24_flush_tx>
	NRF24_flush_rx();
 80016c6:	f7ff ff01 	bl	80014cc <NRF24_flush_rx>
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b086      	sub	sp, #24
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	460b      	mov	r3, r1
 80016da:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80016dc:	f000 fab7 	bl	8001c4e <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80016e0:	78fb      	ldrb	r3, [r7, #3]
 80016e2:	4619      	mov	r1, r3
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fa56 	bl	8001b96 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80016ea:	f002 fffd 	bl	80046e8 <HAL_GetTick>
 80016ee:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80016f0:	230a      	movs	r3, #10
 80016f2:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80016f4:	f107 030d 	add.w	r3, r7, #13
 80016f8:	2201      	movs	r2, #1
 80016fa:	4619      	mov	r1, r3
 80016fc:	2008      	movs	r0, #8
 80016fe:	f7ff fe19 	bl	8001334 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8001702:	f7ff feeb 	bl	80014dc <NRF24_get_status>
 8001706:	4603      	mov	r3, r0
 8001708:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 800170a:	7bfb      	ldrb	r3, [r7, #15]
 800170c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001710:	2b00      	cmp	r3, #0
 8001712:	d107      	bne.n	8001724 <NRF24_write+0x54>
 8001714:	f002 ffe8 	bl	80046e8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	693a      	ldr	r2, [r7, #16]
 8001720:	429a      	cmp	r2, r3
 8001722:	d8e7      	bhi.n	80016f4 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001724:	f107 010b 	add.w	r1, r7, #11
 8001728:	f107 030c 	add.w	r3, r7, #12
 800172c:	4a0c      	ldr	r2, [pc, #48]	; (8001760 <NRF24_write+0x90>)
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fa5a 	bl	8001be8 <NRF24_whatHappened>
	retStatus = tx_ok;
 8001734:	7b3b      	ldrb	r3, [r7, #12]
 8001736:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <NRF24_write+0x90>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001740:	f000 f8ae 	bl	80018a0 <NRF24_getDynamicPayloadSize>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <NRF24_write+0x94>)
 800174a:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 800174c:	f000 f80c 	bl	8001768 <NRF24_available>
	NRF24_flush_tx();
 8001750:	f7ff feb4 	bl	80014bc <NRF24_flush_tx>
	return retStatus;
 8001754:	7bbb      	ldrb	r3, [r7, #14]
}
 8001756:	4618      	mov	r0, r3
 8001758:	3718      	adds	r7, #24
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	200001a4 	.word	0x200001a4
 8001764:	200001a5 	.word	0x200001a5

08001768 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 800176c:	2000      	movs	r0, #0
 800176e:	f000 f9e2 	bl	8001b36 <NRF24_availablePipe>
 8001772:	4603      	mov	r3, r0
}
 8001774:	4618      	mov	r0, r3
 8001776:	bd80      	pop	{r7, pc}

08001778 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	4619      	mov	r1, r3
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f7ff fe67 	bl	800145c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 800178e:	2017      	movs	r0, #23
 8001790:	f7ff fda8 	bl	80012e4 <NRF24_read_register>
 8001794:	4603      	mov	r3, r0
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 800179c:	f7ff fe96 	bl	80014cc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 80017a0:	f000 f87e 	bl	80018a0 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	bf14      	ite	ne
 80017aa:	2301      	movne	r3, #1
 80017ac:	2300      	moveq	r3, #0
 80017ae:	b2db      	uxtb	r3, r3
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}

080017b8 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80017c2:	463b      	mov	r3, r7
 80017c4:	2205      	movs	r2, #5
 80017c6:	4619      	mov	r1, r3
 80017c8:	200a      	movs	r0, #10
 80017ca:	f7ff fdfd 	bl	80013c8 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80017ce:	463b      	mov	r3, r7
 80017d0:	2205      	movs	r2, #5
 80017d2:	4619      	mov	r1, r3
 80017d4:	2010      	movs	r0, #16
 80017d6:	f7ff fdf7 	bl	80013c8 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 80017da:	2320      	movs	r3, #32
 80017dc:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80017de:	4b07      	ldr	r3, [pc, #28]	; (80017fc <NRF24_openWritingPipe+0x44>)
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	7bfa      	ldrb	r2, [r7, #15]
 80017e4:	4293      	cmp	r3, r2
 80017e6:	bf28      	it	cs
 80017e8:	4613      	movcs	r3, r2
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	4619      	mov	r1, r3
 80017ee:	2011      	movs	r0, #17
 80017f0:	f7ff fdc8 	bl	8001384 <NRF24_write_register>
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	200001a6 	.word	0x200001a6

08001800 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	460a      	mov	r2, r1
 800180a:	71fb      	strb	r3, [r7, #7]
 800180c:	4613      	mov	r3, r2
 800180e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	011b      	lsls	r3, r3, #4
 8001814:	b25a      	sxtb	r2, r3
 8001816:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800181a:	f003 030f 	and.w	r3, r3, #15
 800181e:	b25b      	sxtb	r3, r3
 8001820:	4313      	orrs	r3, r2
 8001822:	b25b      	sxtb	r3, r3
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4619      	mov	r1, r3
 8001828:	2004      	movs	r0, #4
 800182a:	f7ff fdab 	bl	8001384 <NRF24_write_register>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b084      	sub	sp, #16
 800183a:	af00      	add	r7, sp, #0
 800183c:	4603      	mov	r3, r0
 800183e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001840:	237f      	movs	r3, #127	; 0x7f
 8001842:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001844:	7bfa      	ldrb	r2, [r7, #15]
 8001846:	79fb      	ldrb	r3, [r7, #7]
 8001848:	4293      	cmp	r3, r2
 800184a:	bf28      	it	cs
 800184c:	4613      	movcs	r3, r2
 800184e:	b2db      	uxtb	r3, r3
 8001850:	4619      	mov	r1, r3
 8001852:	2005      	movs	r0, #5
 8001854:	f7ff fd96 	bl	8001384 <NRF24_write_register>
}
 8001858:	bf00      	nop
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800186a:	2320      	movs	r3, #32
 800186c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800186e:	7bfa      	ldrb	r2, [r7, #15]
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4293      	cmp	r3, r2
 8001874:	bf28      	it	cs
 8001876:	4613      	movcs	r3, r2
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b03      	ldr	r3, [pc, #12]	; (8001888 <NRF24_setPayloadSize+0x28>)
 800187c:	701a      	strb	r2, [r3, #0]
}
 800187e:	bf00      	nop
 8001880:	3714      	adds	r7, #20
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr
 8001888:	200001a6 	.word	0x200001a6

0800188c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	return payload_size;
 8001890:	4b02      	ldr	r3, [pc, #8]	; (800189c <NRF24_getPayloadSize+0x10>)
 8001892:	781b      	ldrb	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	200001a6 	.word	0x200001a6

080018a0 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80018a4:	2060      	movs	r0, #96	; 0x60
 80018a6:	f7ff fd1d 	bl	80012e4 <NRF24_read_register>
 80018aa:	4603      	mov	r3, r0
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80018b4:	201d      	movs	r0, #29
 80018b6:	f7ff fd15 	bl	80012e4 <NRF24_read_register>
 80018ba:	4603      	mov	r3, r0
 80018bc:	f043 0306 	orr.w	r3, r3, #6
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	4619      	mov	r1, r3
 80018c4:	201d      	movs	r0, #29
 80018c6:	f7ff fd5d 	bl	8001384 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80018ca:	201d      	movs	r0, #29
 80018cc:	f7ff fd0a 	bl	80012e4 <NRF24_read_register>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d10c      	bne.n	80018f0 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80018d6:	f000 f9c3 	bl	8001c60 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80018da:	201d      	movs	r0, #29
 80018dc:	f7ff fd02 	bl	80012e4 <NRF24_read_register>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f043 0306 	orr.w	r3, r3, #6
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	4619      	mov	r1, r3
 80018ea:	201d      	movs	r0, #29
 80018ec:	f7ff fd4a 	bl	8001384 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80018f0:	201c      	movs	r0, #28
 80018f2:	f7ff fcf7 	bl	80012e4 <NRF24_read_register>
 80018f6:	4603      	mov	r3, r0
 80018f8:	f043 0303 	orr.w	r3, r3, #3
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	4619      	mov	r1, r3
 8001900:	201c      	movs	r0, #28
 8001902:	f7ff fd3f 	bl	8001384 <NRF24_write_register>
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001910:	201d      	movs	r0, #29
 8001912:	f7ff fce7 	bl	80012e4 <NRF24_read_register>
 8001916:	4603      	mov	r3, r0
 8001918:	f043 0304 	orr.w	r3, r3, #4
 800191c:	b2db      	uxtb	r3, r3
 800191e:	4619      	mov	r1, r3
 8001920:	201d      	movs	r0, #29
 8001922:	f7ff fd2f 	bl	8001384 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001926:	201d      	movs	r0, #29
 8001928:	f7ff fcdc 	bl	80012e4 <NRF24_read_register>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d10c      	bne.n	800194c <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001932:	f000 f995 	bl	8001c60 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001936:	201d      	movs	r0, #29
 8001938:	f7ff fcd4 	bl	80012e4 <NRF24_read_register>
 800193c:	4603      	mov	r3, r0
 800193e:	f043 0304 	orr.w	r3, r3, #4
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4619      	mov	r1, r3
 8001946:	201d      	movs	r0, #29
 8001948:	f7ff fd1c 	bl	8001384 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800194c:	201c      	movs	r0, #28
 800194e:	f7ff fcc9 	bl	80012e4 <NRF24_read_register>
 8001952:	4603      	mov	r3, r0
 8001954:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001958:	b2db      	uxtb	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	201c      	movs	r0, #28
 800195e:	f7ff fd11 	bl	8001384 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8001962:	4b02      	ldr	r3, [pc, #8]	; (800196c <NRF24_enableDynamicPayloads+0x60>)
 8001964:	2201      	movs	r2, #1
 8001966:	701a      	strb	r2, [r3, #0]
	
}
 8001968:	bf00      	nop
 800196a:	bd80      	pop	{r7, pc}
 800196c:	200001a7 	.word	0x200001a7

08001970 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001974:	201d      	movs	r0, #29
 8001976:	f7ff fcb5 	bl	80012e4 <NRF24_read_register>
 800197a:	4603      	mov	r3, r0
 800197c:	f023 0304 	bic.w	r3, r3, #4
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4619      	mov	r1, r3
 8001984:	201d      	movs	r0, #29
 8001986:	f7ff fcfd 	bl	8001384 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800198a:	2100      	movs	r1, #0
 800198c:	201c      	movs	r0, #28
 800198e:	f7ff fcf9 	bl	8001384 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001992:	4b02      	ldr	r3, [pc, #8]	; (800199c <NRF24_disableDynamicPayloads+0x2c>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
}
 8001998:	bf00      	nop
 800199a:	bd80      	pop	{r7, pc}
 800199c:	200001a7 	.word	0x200001a7

080019a0 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	4603      	mov	r3, r0
 80019a8:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80019aa:	79fb      	ldrb	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d004      	beq.n	80019ba <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80019b0:	213f      	movs	r1, #63	; 0x3f
 80019b2:	2001      	movs	r0, #1
 80019b4:	f7ff fce6 	bl	8001384 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80019b8:	e003      	b.n	80019c2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80019ba:	2100      	movs	r1, #0
 80019bc:	2001      	movs	r0, #1
 80019be:	f7ff fce1 	bl	8001384 <NRF24_write_register>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b084      	sub	sp, #16
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	4603      	mov	r3, r0
 80019d2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80019d4:	2006      	movs	r0, #6
 80019d6:	f7ff fc85 	bl	80012e4 <NRF24_read_register>
 80019da:	4603      	mov	r3, r0
 80019dc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	f023 0306 	bic.w	r3, r3, #6
 80019e4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2b03      	cmp	r3, #3
 80019ea:	d104      	bne.n	80019f6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80019ec:	7bfb      	ldrb	r3, [r7, #15]
 80019ee:	f043 0306 	orr.w	r3, r3, #6
 80019f2:	73fb      	strb	r3, [r7, #15]
 80019f4:	e019      	b.n	8001a2a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d104      	bne.n	8001a06 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	f043 0304 	orr.w	r3, r3, #4
 8001a02:	73fb      	strb	r3, [r7, #15]
 8001a04:	e011      	b.n	8001a2a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d104      	bne.n	8001a16 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	73fb      	strb	r3, [r7, #15]
 8001a14:	e009      	b.n	8001a2a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d006      	beq.n	8001a2a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001a1c:	79fb      	ldrb	r3, [r7, #7]
 8001a1e:	2b04      	cmp	r3, #4
 8001a20:	d103      	bne.n	8001a2a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001a22:	7bfb      	ldrb	r3, [r7, #15]
 8001a24:	f043 0306 	orr.w	r3, r3, #6
 8001a28:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001a2a:	7bfb      	ldrb	r3, [r7, #15]
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	2006      	movs	r0, #6
 8001a30:	f7ff fca8 	bl	8001384 <NRF24_write_register>
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b084      	sub	sp, #16
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001a4a:	2006      	movs	r0, #6
 8001a4c:	f7ff fc4a 	bl	80012e4 <NRF24_read_register>
 8001a50:	4603      	mov	r3, r0
 8001a52:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001a54:	4b1b      	ldr	r3, [pc, #108]	; (8001ac4 <NRF24_setDataRate+0x88>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001a5a:	7bbb      	ldrb	r3, [r7, #14]
 8001a5c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001a60:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001a62:	79fb      	ldrb	r3, [r7, #7]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d107      	bne.n	8001a78 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001a68:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <NRF24_setDataRate+0x88>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001a6e:	7bbb      	ldrb	r3, [r7, #14]
 8001a70:	f043 0320 	orr.w	r3, r3, #32
 8001a74:	73bb      	strb	r3, [r7, #14]
 8001a76:	e00d      	b.n	8001a94 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d107      	bne.n	8001a8e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <NRF24_setDataRate+0x88>)
 8001a80:	2201      	movs	r2, #1
 8001a82:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001a84:	7bbb      	ldrb	r3, [r7, #14]
 8001a86:	f043 0308 	orr.w	r3, r3, #8
 8001a8a:	73bb      	strb	r3, [r7, #14]
 8001a8c:	e002      	b.n	8001a94 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001a8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ac4 <NRF24_setDataRate+0x88>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001a94:	7bbb      	ldrb	r3, [r7, #14]
 8001a96:	4619      	mov	r1, r3
 8001a98:	2006      	movs	r0, #6
 8001a9a:	f7ff fc73 	bl	8001384 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001a9e:	2006      	movs	r0, #6
 8001aa0:	f7ff fc20 	bl	80012e4 <NRF24_read_register>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	7bbb      	ldrb	r3, [r7, #14]
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d102      	bne.n	8001ab4 <NRF24_setDataRate+0x78>
  {
    result = true;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	e002      	b.n	8001aba <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <NRF24_setDataRate+0x88>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3710      	adds	r7, #16
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200001a8 	.word	0x200001a8

08001ac8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8001ad2:	2000      	movs	r0, #0
 8001ad4:	f7ff fc06 	bl	80012e4 <NRF24_read_register>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	f023 030c 	bic.w	r3, r3, #12
 8001ade:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00f      	beq.n	8001b06 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d104      	bne.n	8001af6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	f043 0308 	orr.w	r3, r3, #8
 8001af2:	73fb      	strb	r3, [r7, #15]
 8001af4:	e007      	b.n	8001b06 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001af6:	7bfb      	ldrb	r3, [r7, #15]
 8001af8:	f043 0308 	orr.w	r3, r3, #8
 8001afc:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 8001afe:	7bfb      	ldrb	r3, [r7, #15]
 8001b00:	f043 0304 	orr.w	r3, r3, #4
 8001b04:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
 8001b08:	4619      	mov	r1, r3
 8001b0a:	2000      	movs	r0, #0
 8001b0c:	f7ff fc3a 	bl	8001384 <NRF24_write_register>
}
 8001b10:	bf00      	nop
 8001b12:	3710      	adds	r7, #16
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}

08001b18 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff fbe1 	bl	80012e4 <NRF24_read_register>
 8001b22:	4603      	mov	r3, r0
 8001b24:	f023 0302 	bic.w	r3, r3, #2
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fc29 	bl	8001384 <NRF24_write_register>
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}

08001b36 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	b084      	sub	sp, #16
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001b3e:	f7ff fccd 	bl	80014dc <NRF24_get_status>
 8001b42:	4603      	mov	r3, r0
 8001b44:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001b46:	7bfb      	ldrb	r3, [r7, #15]
 8001b48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	bf14      	ite	ne
 8001b50:	2301      	movne	r3, #1
 8001b52:	2300      	moveq	r3, #0
 8001b54:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001b56:	7bbb      	ldrb	r3, [r7, #14]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d017      	beq.n	8001b8c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d007      	beq.n	8001b72 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	085b      	lsrs	r3, r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	f003 0307 	and.w	r3, r3, #7
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001b72:	2140      	movs	r1, #64	; 0x40
 8001b74:	2007      	movs	r0, #7
 8001b76:	f7ff fc05 	bl	8001384 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001b7a:	7bfb      	ldrb	r3, [r7, #15]
 8001b7c:	f003 0320 	and.w	r3, r3, #32
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001b84:	2120      	movs	r1, #32
 8001b86:	2007      	movs	r0, #7
 8001b88:	f7ff fbfc 	bl	8001384 <NRF24_write_register>
    }
  }
  return result;
 8001b8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001ba2:	2000      	movs	r0, #0
 8001ba4:	f7ff fb9e 	bl	80012e4 <NRF24_read_register>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	f043 0302 	orr.w	r3, r3, #2
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	f023 0301 	bic.w	r3, r3, #1
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	2000      	movs	r0, #0
 8001bba:	f7ff fbe3 	bl	8001384 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8001bbe:	2096      	movs	r0, #150	; 0x96
 8001bc0:	f7ff fb30 	bl	8001224 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fc25 	bl	8001418 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001bce:	2001      	movs	r0, #1
 8001bd0:	f7ff fb68 	bl	80012a4 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001bd4:	200f      	movs	r0, #15
 8001bd6:	f7ff fb25 	bl	8001224 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001bda:	2000      	movs	r0, #0
 8001bdc:	f7ff fb62 	bl	80012a4 <NRF24_ce>
}
 8001be0:	bf00      	nop
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b086      	sub	sp, #24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 8001bf4:	f7ff fc72 	bl	80014dc <NRF24_get_status>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001c02:	2170      	movs	r1, #112	; 0x70
 8001c04:	2007      	movs	r0, #7
 8001c06:	f7ff fbbd 	bl	8001384 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001c0a:	7dfb      	ldrb	r3, [r7, #23]
 8001c0c:	f003 0320 	and.w	r3, r3, #32
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bf14      	ite	ne
 8001c14:	2301      	movne	r3, #1
 8001c16:	2300      	moveq	r3, #0
 8001c18:	b2da      	uxtb	r2, r3
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	f003 0310 	and.w	r3, r3, #16
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	bf14      	ite	ne
 8001c28:	2301      	movne	r3, #1
 8001c2a:	2300      	moveq	r3, #0
 8001c2c:	b2da      	uxtb	r2, r3
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	bf14      	ite	ne
 8001c3c:	2301      	movne	r3, #1
 8001c3e:	2300      	moveq	r3, #0
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	701a      	strb	r2, [r3, #0]
}
 8001c46:	bf00      	nop
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001c52:	2170      	movs	r1, #112	; 0x70
 8001c54:	2007      	movs	r0, #7
 8001c56:	f7ff fb95 	bl	8001384 <NRF24_write_register>
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001c66:	2000      	movs	r0, #0
 8001c68:	f7ff fafc 	bl	8001264 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001c6c:	2350      	movs	r3, #80	; 0x50
 8001c6e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001c70:	2373      	movs	r3, #115	; 0x73
 8001c72:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001c74:	1d39      	adds	r1, r7, #4
 8001c76:	2364      	movs	r3, #100	; 0x64
 8001c78:	2202      	movs	r2, #2
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <NRF24_ACTIVATE_cmd+0x30>)
 8001c7c:	f005 faa1 	bl	80071c2 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001c80:	2001      	movs	r0, #1
 8001c82:	f7ff faef 	bl	8001264 <NRF24_csn>
}
 8001c86:	bf00      	nop
 8001c88:	3708      	adds	r7, #8
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200001b4 	.word	0x200001b4

08001c94 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001c94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c96:	b0a1      	sub	sp, #132	; 0x84
 8001c98:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	4ab6      	ldr	r2, [pc, #728]	; (8001f78 <printRadioSettings+0x2e4>)
 8001ca0:	461c      	mov	r4, r3
 8001ca2:	4615      	mov	r5, r2
 8001ca4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ca6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb0:	682b      	ldr	r3, [r5, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	8022      	strh	r2, [r4, #0]
 8001cb6:	3402      	adds	r4, #2
 8001cb8:	0c1b      	lsrs	r3, r3, #16
 8001cba:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001cbc:	f107 0308 	add.w	r3, r7, #8
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7fe fa45 	bl	8000150 <strlen>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	f107 0108 	add.w	r1, r7, #8
 8001cce:	230a      	movs	r3, #10
 8001cd0:	48aa      	ldr	r0, [pc, #680]	; (8001f7c <printRadioSettings+0x2e8>)
 8001cd2:	f006 fdcc 	bl	800886e <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001cd6:	2000      	movs	r0, #0
 8001cd8:	f7ff fb04 	bl	80012e4 <NRF24_read_register>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001ce2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ce6:	f003 0308 	and.w	r3, r3, #8
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d020      	beq.n	8001d30 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001cee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <printRadioSettings+0x7e>
 8001cfa:	f107 0308 	add.w	r3, r7, #8
 8001cfe:	4aa0      	ldr	r2, [pc, #640]	; (8001f80 <printRadioSettings+0x2ec>)
 8001d00:	461c      	mov	r4, r3
 8001d02:	4615      	mov	r5, r2
 8001d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d0c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001d10:	e017      	b.n	8001d42 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	4a9b      	ldr	r2, [pc, #620]	; (8001f84 <printRadioSettings+0x2f0>)
 8001d18:	461c      	mov	r4, r3
 8001d1a:	4615      	mov	r5, r2
 8001d1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d24:	c403      	stmia	r4!, {r0, r1}
 8001d26:	8022      	strh	r2, [r4, #0]
 8001d28:	3402      	adds	r4, #2
 8001d2a:	0c13      	lsrs	r3, r2, #16
 8001d2c:	7023      	strb	r3, [r4, #0]
 8001d2e:	e008      	b.n	8001d42 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001d30:	f107 0308 	add.w	r3, r7, #8
 8001d34:	4a94      	ldr	r2, [pc, #592]	; (8001f88 <printRadioSettings+0x2f4>)
 8001d36:	461c      	mov	r4, r3
 8001d38:	4615      	mov	r5, r2
 8001d3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d3e:	682b      	ldr	r3, [r5, #0]
 8001d40:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d42:	f107 0308 	add.w	r3, r7, #8
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7fe fa02 	bl	8000150 <strlen>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	f107 0108 	add.w	r1, r7, #8
 8001d54:	230a      	movs	r3, #10
 8001d56:	4889      	ldr	r0, [pc, #548]	; (8001f7c <printRadioSettings+0x2e8>)
 8001d58:	f006 fd89 	bl	800886e <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001d5c:	2001      	movs	r0, #1
 8001d5e:	f7ff fac1 	bl	80012e4 <NRF24_read_register>
 8001d62:	4603      	mov	r3, r0
 8001d64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001d68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d6c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bfcc      	ite	gt
 8001d74:	2301      	movgt	r3, #1
 8001d76:	2300      	movle	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001d7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d80:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	bfcc      	ite	gt
 8001d88:	2301      	movgt	r3, #1
 8001d8a:	2300      	movle	r3, #0
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001d90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d94:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	bfcc      	ite	gt
 8001d9c:	2301      	movgt	r3, #1
 8001d9e:	2300      	movle	r3, #0
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001da4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001da8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	bfcc      	ite	gt
 8001db0:	2301      	movgt	r3, #1
 8001db2:	2300      	movle	r3, #0
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001db8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dbc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	bfcc      	ite	gt
 8001dc4:	2301      	movgt	r3, #1
 8001dc6:	2300      	movle	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001dcc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dd0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	bfcc      	ite	gt
 8001dd8:	2301      	movgt	r3, #1
 8001dda:	2300      	movle	r3, #0
 8001ddc:	b2db      	uxtb	r3, r3
 8001dde:	f107 0008 	add.w	r0, r7, #8
 8001de2:	9303      	str	r3, [sp, #12]
 8001de4:	9402      	str	r4, [sp, #8]
 8001de6:	9101      	str	r1, [sp, #4]
 8001de8:	9200      	str	r2, [sp, #0]
 8001dea:	4633      	mov	r3, r6
 8001dec:	462a      	mov	r2, r5
 8001dee:	4967      	ldr	r1, [pc, #412]	; (8001f8c <printRadioSettings+0x2f8>)
 8001df0:	f006 ff38 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe f9a9 	bl	8000150 <strlen>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	f107 0108 	add.w	r1, r7, #8
 8001e06:	230a      	movs	r3, #10
 8001e08:	485c      	ldr	r0, [pc, #368]	; (8001f7c <printRadioSettings+0x2e8>)
 8001e0a:	f006 fd30 	bl	800886e <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001e0e:	2002      	movs	r0, #2
 8001e10:	f7ff fa68 	bl	80012e4 <NRF24_read_register>
 8001e14:	4603      	mov	r3, r0
 8001e16:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e1e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	bfcc      	ite	gt
 8001e26:	2301      	movgt	r3, #1
 8001e28:	2300      	movle	r3, #0
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e32:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	bfcc      	ite	gt
 8001e3a:	2301      	movgt	r3, #1
 8001e3c:	2300      	movle	r3, #0
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e46:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	bfcc      	ite	gt
 8001e4e:	2301      	movgt	r3, #1
 8001e50:	2300      	movle	r3, #0
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e56:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e5a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	bfcc      	ite	gt
 8001e62:	2301      	movgt	r3, #1
 8001e64:	2300      	movle	r3, #0
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e6a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e6e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	bfcc      	ite	gt
 8001e76:	2301      	movgt	r3, #1
 8001e78:	2300      	movle	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001e7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001e82:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	bfcc      	ite	gt
 8001e8a:	2301      	movgt	r3, #1
 8001e8c:	2300      	movle	r3, #0
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	f107 0008 	add.w	r0, r7, #8
 8001e94:	9303      	str	r3, [sp, #12]
 8001e96:	9402      	str	r4, [sp, #8]
 8001e98:	9101      	str	r1, [sp, #4]
 8001e9a:	9200      	str	r2, [sp, #0]
 8001e9c:	4633      	mov	r3, r6
 8001e9e:	462a      	mov	r2, r5
 8001ea0:	493b      	ldr	r1, [pc, #236]	; (8001f90 <printRadioSettings+0x2fc>)
 8001ea2:	f006 fedf 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ea6:	f107 0308 	add.w	r3, r7, #8
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7fe f950 	bl	8000150 <strlen>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	f107 0108 	add.w	r1, r7, #8
 8001eb8:	230a      	movs	r3, #10
 8001eba:	4830      	ldr	r0, [pc, #192]	; (8001f7c <printRadioSettings+0x2e8>)
 8001ebc:	f006 fcd7 	bl	800886e <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001ec0:	2003      	movs	r0, #3
 8001ec2:	f7ff fa0f 	bl	80012e4 <NRF24_read_register>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f003 0303 	and.w	r3, r3, #3
 8001ecc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001ed0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ed4:	3302      	adds	r3, #2
 8001ed6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001eda:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001ede:	f107 0308 	add.w	r3, r7, #8
 8001ee2:	492c      	ldr	r1, [pc, #176]	; (8001f94 <printRadioSettings+0x300>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f006 febd 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001eea:	f107 0308 	add.w	r3, r7, #8
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f7fe f92e 	bl	8000150 <strlen>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f107 0108 	add.w	r1, r7, #8
 8001efc:	230a      	movs	r3, #10
 8001efe:	481f      	ldr	r0, [pc, #124]	; (8001f7c <printRadioSettings+0x2e8>)
 8001f00:	f006 fcb5 	bl	800886e <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001f04:	2005      	movs	r0, #5
 8001f06:	f7ff f9ed 	bl	80012e4 <NRF24_read_register>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001f10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f18:	f107 0308 	add.w	r3, r7, #8
 8001f1c:	491e      	ldr	r1, [pc, #120]	; (8001f98 <printRadioSettings+0x304>)
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f006 fea0 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f24:	f107 0308 	add.w	r3, r7, #8
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7fe f911 	bl	8000150 <strlen>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	b29a      	uxth	r2, r3
 8001f32:	f107 0108 	add.w	r1, r7, #8
 8001f36:	230a      	movs	r3, #10
 8001f38:	4810      	ldr	r0, [pc, #64]	; (8001f7c <printRadioSettings+0x2e8>)
 8001f3a:	f006 fc98 	bl	800886e <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001f3e:	2006      	movs	r0, #6
 8001f40:	f7ff f9d0 	bl	80012e4 <NRF24_read_register>
 8001f44:	4603      	mov	r3, r0
 8001f46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001f4a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d024      	beq.n	8001fa0 <printRadioSettings+0x30c>
 8001f56:	f107 0308 	add.w	r3, r7, #8
 8001f5a:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <printRadioSettings+0x308>)
 8001f5c:	461c      	mov	r4, r3
 8001f5e:	4615      	mov	r5, r2
 8001f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f64:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001f68:	6020      	str	r0, [r4, #0]
 8001f6a:	3404      	adds	r4, #4
 8001f6c:	8021      	strh	r1, [r4, #0]
 8001f6e:	3402      	adds	r4, #2
 8001f70:	0c0b      	lsrs	r3, r1, #16
 8001f72:	7023      	strb	r3, [r4, #0]
 8001f74:	e023      	b.n	8001fbe <printRadioSettings+0x32a>
 8001f76:	bf00      	nop
 8001f78:	0800948c 	.word	0x0800948c
 8001f7c:	2000020c 	.word	0x2000020c
 8001f80:	080094c0 	.word	0x080094c0
 8001f84:	080094dc 	.word	0x080094dc
 8001f88:	080094f8 	.word	0x080094f8
 8001f8c:	0800950c 	.word	0x0800950c
 8001f90:	08009550 	.word	0x08009550
 8001f94:	0800959c 	.word	0x0800959c
 8001f98:	080095b8 	.word	0x080095b8
 8001f9c:	080095cc 	.word	0x080095cc
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001fa0:	f107 0308 	add.w	r3, r7, #8
 8001fa4:	4a29      	ldr	r2, [pc, #164]	; (800204c <printRadioSettings+0x3b8>)
 8001fa6:	461c      	mov	r4, r3
 8001fa8:	4615      	mov	r5, r2
 8001faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fae:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001fb2:	6020      	str	r0, [r4, #0]
 8001fb4:	3404      	adds	r4, #4
 8001fb6:	8021      	strh	r1, [r4, #0]
 8001fb8:	3402      	adds	r4, #2
 8001fba:	0c0b      	lsrs	r3, r1, #16
 8001fbc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f7fe f8c4 	bl	8000150 <strlen>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	f107 0108 	add.w	r1, r7, #8
 8001fd0:	230a      	movs	r3, #10
 8001fd2:	481f      	ldr	r0, [pc, #124]	; (8002050 <printRadioSettings+0x3bc>)
 8001fd4:	f006 fc4b 	bl	800886e <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001fd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fdc:	f003 0306 	and.w	r3, r3, #6
 8001fe0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001fe4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001fee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <printRadioSettings+0x376>
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	4a16      	ldr	r2, [pc, #88]	; (8002054 <printRadioSettings+0x3c0>)
 8001ffc:	461c      	mov	r4, r3
 8001ffe:	4615      	mov	r5, r2
 8002000:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002002:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002004:	682b      	ldr	r3, [r5, #0]
 8002006:	6023      	str	r3, [r4, #0]
 8002008:	e037      	b.n	800207a <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800200a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800200e:	2b01      	cmp	r3, #1
 8002010:	d109      	bne.n	8002026 <printRadioSettings+0x392>
 8002012:	f107 0308 	add.w	r3, r7, #8
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <printRadioSettings+0x3c4>)
 8002018:	461c      	mov	r4, r3
 800201a:	4615      	mov	r5, r2
 800201c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002020:	682b      	ldr	r3, [r5, #0]
 8002022:	6023      	str	r3, [r4, #0]
 8002024:	e029      	b.n	800207a <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8002026:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800202a:	2b02      	cmp	r3, #2
 800202c:	d118      	bne.n	8002060 <printRadioSettings+0x3cc>
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	4a0a      	ldr	r2, [pc, #40]	; (800205c <printRadioSettings+0x3c8>)
 8002034:	461c      	mov	r4, r3
 8002036:	4615      	mov	r5, r2
 8002038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800203a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800203c:	682b      	ldr	r3, [r5, #0]
 800203e:	461a      	mov	r2, r3
 8002040:	8022      	strh	r2, [r4, #0]
 8002042:	3402      	adds	r4, #2
 8002044:	0c1b      	lsrs	r3, r3, #16
 8002046:	7023      	strb	r3, [r4, #0]
 8002048:	e017      	b.n	800207a <printRadioSettings+0x3e6>
 800204a:	bf00      	nop
 800204c:	080095e4 	.word	0x080095e4
 8002050:	2000020c 	.word	0x2000020c
 8002054:	080095fc 	.word	0x080095fc
 8002058:	08009610 	.word	0x08009610
 800205c:	08009624 	.word	0x08009624
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8002060:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002064:	2b03      	cmp	r3, #3
 8002066:	d108      	bne.n	800207a <printRadioSettings+0x3e6>
 8002068:	f107 0308 	add.w	r3, r7, #8
 800206c:	4ad7      	ldr	r2, [pc, #860]	; (80023cc <printRadioSettings+0x738>)
 800206e:	461c      	mov	r4, r3
 8002070:	4615      	mov	r5, r2
 8002072:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002076:	682b      	ldr	r3, [r5, #0]
 8002078:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800207a:	f107 0308 	add.w	r3, r7, #8
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe f866 	bl	8000150 <strlen>
 8002084:	4603      	mov	r3, r0
 8002086:	b29a      	uxth	r2, r3
 8002088:	f107 0108 	add.w	r1, r7, #8
 800208c:	230a      	movs	r3, #10
 800208e:	48d0      	ldr	r0, [pc, #832]	; (80023d0 <printRadioSettings+0x73c>)
 8002090:	f006 fbed 	bl	800886e <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8002094:	463b      	mov	r3, r7
 8002096:	2205      	movs	r2, #5
 8002098:	4619      	mov	r1, r3
 800209a:	200a      	movs	r0, #10
 800209c:	f7ff f94a 	bl	8001334 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80020a0:	793b      	ldrb	r3, [r7, #4]
 80020a2:	461c      	mov	r4, r3
 80020a4:	78fb      	ldrb	r3, [r7, #3]
 80020a6:	461d      	mov	r5, r3
 80020a8:	78bb      	ldrb	r3, [r7, #2]
 80020aa:	787a      	ldrb	r2, [r7, #1]
 80020ac:	7839      	ldrb	r1, [r7, #0]
 80020ae:	f107 0008 	add.w	r0, r7, #8
 80020b2:	9102      	str	r1, [sp, #8]
 80020b4:	9201      	str	r2, [sp, #4]
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	462b      	mov	r3, r5
 80020ba:	4622      	mov	r2, r4
 80020bc:	49c5      	ldr	r1, [pc, #788]	; (80023d4 <printRadioSettings+0x740>)
 80020be:	f006 fdd1 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe f842 	bl	8000150 <strlen>
 80020cc:	4603      	mov	r3, r0
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	f107 0108 	add.w	r1, r7, #8
 80020d4:	230a      	movs	r3, #10
 80020d6:	48be      	ldr	r0, [pc, #760]	; (80023d0 <printRadioSettings+0x73c>)
 80020d8:	f006 fbc9 	bl	800886e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80020dc:	463b      	mov	r3, r7
 80020de:	2205      	movs	r2, #5
 80020e0:	4619      	mov	r1, r3
 80020e2:	200b      	movs	r0, #11
 80020e4:	f7ff f926 	bl	8001334 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80020e8:	793b      	ldrb	r3, [r7, #4]
 80020ea:	461c      	mov	r4, r3
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	461d      	mov	r5, r3
 80020f0:	78bb      	ldrb	r3, [r7, #2]
 80020f2:	787a      	ldrb	r2, [r7, #1]
 80020f4:	7839      	ldrb	r1, [r7, #0]
 80020f6:	f107 0008 	add.w	r0, r7, #8
 80020fa:	9102      	str	r1, [sp, #8]
 80020fc:	9201      	str	r2, [sp, #4]
 80020fe:	9300      	str	r3, [sp, #0]
 8002100:	462b      	mov	r3, r5
 8002102:	4622      	mov	r2, r4
 8002104:	49b4      	ldr	r1, [pc, #720]	; (80023d8 <printRadioSettings+0x744>)
 8002106:	f006 fdad 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800210a:	f107 0308 	add.w	r3, r7, #8
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f81e 	bl	8000150 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	b29a      	uxth	r2, r3
 8002118:	f107 0108 	add.w	r1, r7, #8
 800211c:	230a      	movs	r3, #10
 800211e:	48ac      	ldr	r0, [pc, #688]	; (80023d0 <printRadioSettings+0x73c>)
 8002120:	f006 fba5 	bl	800886e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8002124:	463b      	mov	r3, r7
 8002126:	2201      	movs	r2, #1
 8002128:	4619      	mov	r1, r3
 800212a:	200c      	movs	r0, #12
 800212c:	f7ff f902 	bl	8001334 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002130:	783b      	ldrb	r3, [r7, #0]
 8002132:	461a      	mov	r2, r3
 8002134:	f107 0308 	add.w	r3, r7, #8
 8002138:	49a8      	ldr	r1, [pc, #672]	; (80023dc <printRadioSettings+0x748>)
 800213a:	4618      	mov	r0, r3
 800213c:	f006 fd92 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002140:	f107 0308 	add.w	r3, r7, #8
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f803 	bl	8000150 <strlen>
 800214a:	4603      	mov	r3, r0
 800214c:	b29a      	uxth	r2, r3
 800214e:	f107 0108 	add.w	r1, r7, #8
 8002152:	230a      	movs	r3, #10
 8002154:	489e      	ldr	r0, [pc, #632]	; (80023d0 <printRadioSettings+0x73c>)
 8002156:	f006 fb8a 	bl	800886e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800215a:	463b      	mov	r3, r7
 800215c:	2201      	movs	r2, #1
 800215e:	4619      	mov	r1, r3
 8002160:	200d      	movs	r0, #13
 8002162:	f7ff f8e7 	bl	8001334 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8002166:	783b      	ldrb	r3, [r7, #0]
 8002168:	461a      	mov	r2, r3
 800216a:	f107 0308 	add.w	r3, r7, #8
 800216e:	499c      	ldr	r1, [pc, #624]	; (80023e0 <printRadioSettings+0x74c>)
 8002170:	4618      	mov	r0, r3
 8002172:	f006 fd77 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002176:	f107 0308 	add.w	r3, r7, #8
 800217a:	4618      	mov	r0, r3
 800217c:	f7fd ffe8 	bl	8000150 <strlen>
 8002180:	4603      	mov	r3, r0
 8002182:	b29a      	uxth	r2, r3
 8002184:	f107 0108 	add.w	r1, r7, #8
 8002188:	230a      	movs	r3, #10
 800218a:	4891      	ldr	r0, [pc, #580]	; (80023d0 <printRadioSettings+0x73c>)
 800218c:	f006 fb6f 	bl	800886e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8002190:	463b      	mov	r3, r7
 8002192:	2201      	movs	r2, #1
 8002194:	4619      	mov	r1, r3
 8002196:	200e      	movs	r0, #14
 8002198:	f7ff f8cc 	bl	8001334 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800219c:	783b      	ldrb	r3, [r7, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	f107 0308 	add.w	r3, r7, #8
 80021a4:	498f      	ldr	r1, [pc, #572]	; (80023e4 <printRadioSettings+0x750>)
 80021a6:	4618      	mov	r0, r3
 80021a8:	f006 fd5c 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80021ac:	f107 0308 	add.w	r3, r7, #8
 80021b0:	4618      	mov	r0, r3
 80021b2:	f7fd ffcd 	bl	8000150 <strlen>
 80021b6:	4603      	mov	r3, r0
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	f107 0108 	add.w	r1, r7, #8
 80021be:	230a      	movs	r3, #10
 80021c0:	4883      	ldr	r0, [pc, #524]	; (80023d0 <printRadioSettings+0x73c>)
 80021c2:	f006 fb54 	bl	800886e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80021c6:	463b      	mov	r3, r7
 80021c8:	2201      	movs	r2, #1
 80021ca:	4619      	mov	r1, r3
 80021cc:	200f      	movs	r0, #15
 80021ce:	f7ff f8b1 	bl	8001334 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80021d2:	783b      	ldrb	r3, [r7, #0]
 80021d4:	461a      	mov	r2, r3
 80021d6:	f107 0308 	add.w	r3, r7, #8
 80021da:	4983      	ldr	r1, [pc, #524]	; (80023e8 <printRadioSettings+0x754>)
 80021dc:	4618      	mov	r0, r3
 80021de:	f006 fd41 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80021e2:	f107 0308 	add.w	r3, r7, #8
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7fd ffb2 	bl	8000150 <strlen>
 80021ec:	4603      	mov	r3, r0
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	f107 0108 	add.w	r1, r7, #8
 80021f4:	230a      	movs	r3, #10
 80021f6:	4876      	ldr	r0, [pc, #472]	; (80023d0 <printRadioSettings+0x73c>)
 80021f8:	f006 fb39 	bl	800886e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80021fc:	463b      	mov	r3, r7
 80021fe:	2205      	movs	r2, #5
 8002200:	4619      	mov	r1, r3
 8002202:	2010      	movs	r0, #16
 8002204:	f7ff f896 	bl	8001334 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8002208:	793b      	ldrb	r3, [r7, #4]
 800220a:	461c      	mov	r4, r3
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	461d      	mov	r5, r3
 8002210:	78bb      	ldrb	r3, [r7, #2]
 8002212:	787a      	ldrb	r2, [r7, #1]
 8002214:	7839      	ldrb	r1, [r7, #0]
 8002216:	f107 0008 	add.w	r0, r7, #8
 800221a:	9102      	str	r1, [sp, #8]
 800221c:	9201      	str	r2, [sp, #4]
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	462b      	mov	r3, r5
 8002222:	4622      	mov	r2, r4
 8002224:	4971      	ldr	r1, [pc, #452]	; (80023ec <printRadioSettings+0x758>)
 8002226:	f006 fd1d 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	4618      	mov	r0, r3
 8002230:	f7fd ff8e 	bl	8000150 <strlen>
 8002234:	4603      	mov	r3, r0
 8002236:	b29a      	uxth	r2, r3
 8002238:	f107 0108 	add.w	r1, r7, #8
 800223c:	230a      	movs	r3, #10
 800223e:	4864      	ldr	r0, [pc, #400]	; (80023d0 <printRadioSettings+0x73c>)
 8002240:	f006 fb15 	bl	800886e <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8002244:	2011      	movs	r0, #17
 8002246:	f7ff f84d 	bl	80012e4 <NRF24_read_register>
 800224a:	4603      	mov	r3, r0
 800224c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002250:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002254:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002258:	f107 0308 	add.w	r3, r7, #8
 800225c:	4964      	ldr	r1, [pc, #400]	; (80023f0 <printRadioSettings+0x75c>)
 800225e:	4618      	mov	r0, r3
 8002260:	f006 fd00 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002264:	f107 0308 	add.w	r3, r7, #8
 8002268:	4618      	mov	r0, r3
 800226a:	f7fd ff71 	bl	8000150 <strlen>
 800226e:	4603      	mov	r3, r0
 8002270:	b29a      	uxth	r2, r3
 8002272:	f107 0108 	add.w	r1, r7, #8
 8002276:	230a      	movs	r3, #10
 8002278:	4855      	ldr	r0, [pc, #340]	; (80023d0 <printRadioSettings+0x73c>)
 800227a:	f006 faf8 	bl	800886e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 800227e:	2012      	movs	r0, #18
 8002280:	f7ff f830 	bl	80012e4 <NRF24_read_register>
 8002284:	4603      	mov	r3, r0
 8002286:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800228a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800228e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002292:	f107 0308 	add.w	r3, r7, #8
 8002296:	4957      	ldr	r1, [pc, #348]	; (80023f4 <printRadioSettings+0x760>)
 8002298:	4618      	mov	r0, r3
 800229a:	f006 fce3 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7fd ff54 	bl	8000150 <strlen>
 80022a8:	4603      	mov	r3, r0
 80022aa:	b29a      	uxth	r2, r3
 80022ac:	f107 0108 	add.w	r1, r7, #8
 80022b0:	230a      	movs	r3, #10
 80022b2:	4847      	ldr	r0, [pc, #284]	; (80023d0 <printRadioSettings+0x73c>)
 80022b4:	f006 fadb 	bl	800886e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 80022b8:	2013      	movs	r0, #19
 80022ba:	f7ff f813 	bl	80012e4 <NRF24_read_register>
 80022be:	4603      	mov	r3, r0
 80022c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80022c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80022c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80022cc:	f107 0308 	add.w	r3, r7, #8
 80022d0:	4949      	ldr	r1, [pc, #292]	; (80023f8 <printRadioSettings+0x764>)
 80022d2:	4618      	mov	r0, r3
 80022d4:	f006 fcc6 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80022d8:	f107 0308 	add.w	r3, r7, #8
 80022dc:	4618      	mov	r0, r3
 80022de:	f7fd ff37 	bl	8000150 <strlen>
 80022e2:	4603      	mov	r3, r0
 80022e4:	b29a      	uxth	r2, r3
 80022e6:	f107 0108 	add.w	r1, r7, #8
 80022ea:	230a      	movs	r3, #10
 80022ec:	4838      	ldr	r0, [pc, #224]	; (80023d0 <printRadioSettings+0x73c>)
 80022ee:	f006 fabe 	bl	800886e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80022f2:	2014      	movs	r0, #20
 80022f4:	f7fe fff6 	bl	80012e4 <NRF24_read_register>
 80022f8:	4603      	mov	r3, r0
 80022fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80022fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002302:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002306:	f107 0308 	add.w	r3, r7, #8
 800230a:	493c      	ldr	r1, [pc, #240]	; (80023fc <printRadioSettings+0x768>)
 800230c:	4618      	mov	r0, r3
 800230e:	f006 fca9 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002312:	f107 0308 	add.w	r3, r7, #8
 8002316:	4618      	mov	r0, r3
 8002318:	f7fd ff1a 	bl	8000150 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	b29a      	uxth	r2, r3
 8002320:	f107 0108 	add.w	r1, r7, #8
 8002324:	230a      	movs	r3, #10
 8002326:	482a      	ldr	r0, [pc, #168]	; (80023d0 <printRadioSettings+0x73c>)
 8002328:	f006 faa1 	bl	800886e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 800232c:	2015      	movs	r0, #21
 800232e:	f7fe ffd9 	bl	80012e4 <NRF24_read_register>
 8002332:	4603      	mov	r3, r0
 8002334:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002338:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800233c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002340:	f107 0308 	add.w	r3, r7, #8
 8002344:	492e      	ldr	r1, [pc, #184]	; (8002400 <printRadioSettings+0x76c>)
 8002346:	4618      	mov	r0, r3
 8002348:	f006 fc8c 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800234c:	f107 0308 	add.w	r3, r7, #8
 8002350:	4618      	mov	r0, r3
 8002352:	f7fd fefd 	bl	8000150 <strlen>
 8002356:	4603      	mov	r3, r0
 8002358:	b29a      	uxth	r2, r3
 800235a:	f107 0108 	add.w	r1, r7, #8
 800235e:	230a      	movs	r3, #10
 8002360:	481b      	ldr	r0, [pc, #108]	; (80023d0 <printRadioSettings+0x73c>)
 8002362:	f006 fa84 	bl	800886e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8002366:	2016      	movs	r0, #22
 8002368:	f7fe ffbc 	bl	80012e4 <NRF24_read_register>
 800236c:	4603      	mov	r3, r0
 800236e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002372:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800237a:	f107 0308 	add.w	r3, r7, #8
 800237e:	4921      	ldr	r1, [pc, #132]	; (8002404 <printRadioSettings+0x770>)
 8002380:	4618      	mov	r0, r3
 8002382:	f006 fc6f 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002386:	f107 0308 	add.w	r3, r7, #8
 800238a:	4618      	mov	r0, r3
 800238c:	f7fd fee0 	bl	8000150 <strlen>
 8002390:	4603      	mov	r3, r0
 8002392:	b29a      	uxth	r2, r3
 8002394:	f107 0108 	add.w	r1, r7, #8
 8002398:	230a      	movs	r3, #10
 800239a:	480d      	ldr	r0, [pc, #52]	; (80023d0 <printRadioSettings+0x73c>)
 800239c:	f006 fa67 	bl	800886e <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80023a0:	201c      	movs	r0, #28
 80023a2:	f7fe ff9f 	bl	80012e4 <NRF24_read_register>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80023ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80023b0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bfcc      	ite	gt
 80023b8:	2301      	movgt	r3, #1
 80023ba:	2300      	movle	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80023c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	e01e      	b.n	8002408 <printRadioSettings+0x774>
 80023ca:	bf00      	nop
 80023cc:	08009638 	.word	0x08009638
 80023d0:	2000020c 	.word	0x2000020c
 80023d4:	0800964c 	.word	0x0800964c
 80023d8:	0800967c 	.word	0x0800967c
 80023dc:	080096ac 	.word	0x080096ac
 80023e0:	080096d4 	.word	0x080096d4
 80023e4:	080096fc 	.word	0x080096fc
 80023e8:	08009724 	.word	0x08009724
 80023ec:	0800974c 	.word	0x0800974c
 80023f0:	08009778 	.word	0x08009778
 80023f4:	08009794 	.word	0x08009794
 80023f8:	080097b0 	.word	0x080097b0
 80023fc:	080097cc 	.word	0x080097cc
 8002400:	080097e8 	.word	0x080097e8
 8002404:	08009804 	.word	0x08009804
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002408:	2b00      	cmp	r3, #0
 800240a:	bfcc      	ite	gt
 800240c:	2301      	movgt	r3, #1
 800240e:	2300      	movle	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002414:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002418:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800241c:	2b00      	cmp	r3, #0
 800241e:	bfcc      	ite	gt
 8002420:	2301      	movgt	r3, #1
 8002422:	2300      	movle	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002428:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800242c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002430:	2b00      	cmp	r3, #0
 8002432:	bfcc      	ite	gt
 8002434:	2301      	movgt	r3, #1
 8002436:	2300      	movle	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800243c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002440:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002444:	2b00      	cmp	r3, #0
 8002446:	bfcc      	ite	gt
 8002448:	2301      	movgt	r3, #1
 800244a:	2300      	movle	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002450:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002454:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002458:	2b00      	cmp	r3, #0
 800245a:	bfcc      	ite	gt
 800245c:	2301      	movgt	r3, #1
 800245e:	2300      	movle	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	f107 0008 	add.w	r0, r7, #8
 8002466:	9303      	str	r3, [sp, #12]
 8002468:	9402      	str	r4, [sp, #8]
 800246a:	9101      	str	r1, [sp, #4]
 800246c:	9200      	str	r2, [sp, #0]
 800246e:	4633      	mov	r3, r6
 8002470:	462a      	mov	r2, r5
 8002472:	494a      	ldr	r1, [pc, #296]	; (800259c <printRadioSettings+0x908>)
 8002474:	f006 fbf6 	bl	8008c64 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002478:	f107 0308 	add.w	r3, r7, #8
 800247c:	4618      	mov	r0, r3
 800247e:	f7fd fe67 	bl	8000150 <strlen>
 8002482:	4603      	mov	r3, r0
 8002484:	b29a      	uxth	r2, r3
 8002486:	f107 0108 	add.w	r1, r7, #8
 800248a:	230a      	movs	r3, #10
 800248c:	4844      	ldr	r0, [pc, #272]	; (80025a0 <printRadioSettings+0x90c>)
 800248e:	f006 f9ee 	bl	800886e <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8002492:	201d      	movs	r0, #29
 8002494:	f7fe ff26 	bl	80012e4 <NRF24_read_register>
 8002498:	4603      	mov	r3, r0
 800249a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800249e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00c      	beq.n	80024c4 <printRadioSettings+0x830>
 80024aa:	f107 0308 	add.w	r3, r7, #8
 80024ae:	4a3d      	ldr	r2, [pc, #244]	; (80025a4 <printRadioSettings+0x910>)
 80024b0:	461c      	mov	r4, r3
 80024b2:	4615      	mov	r5, r2
 80024b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024bc:	6020      	str	r0, [r4, #0]
 80024be:	3404      	adds	r4, #4
 80024c0:	8021      	strh	r1, [r4, #0]
 80024c2:	e00e      	b.n	80024e2 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 80024c4:	f107 0308 	add.w	r3, r7, #8
 80024c8:	4a37      	ldr	r2, [pc, #220]	; (80025a8 <printRadioSettings+0x914>)
 80024ca:	461c      	mov	r4, r3
 80024cc:	4615      	mov	r5, r2
 80024ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024d2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80024d6:	6020      	str	r0, [r4, #0]
 80024d8:	3404      	adds	r4, #4
 80024da:	8021      	strh	r1, [r4, #0]
 80024dc:	3402      	adds	r4, #2
 80024de:	0c0b      	lsrs	r3, r1, #16
 80024e0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fd fe32 	bl	8000150 <strlen>
 80024ec:	4603      	mov	r3, r0
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	f107 0108 	add.w	r1, r7, #8
 80024f4:	230a      	movs	r3, #10
 80024f6:	482a      	ldr	r0, [pc, #168]	; (80025a0 <printRadioSettings+0x90c>)
 80024f8:	f006 f9b9 	bl	800886e <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80024fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002500:	f003 0302 	and.w	r3, r3, #2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00b      	beq.n	8002520 <printRadioSettings+0x88c>
 8002508:	f107 0308 	add.w	r3, r7, #8
 800250c:	4a27      	ldr	r2, [pc, #156]	; (80025ac <printRadioSettings+0x918>)
 800250e:	461c      	mov	r4, r3
 8002510:	4615      	mov	r5, r2
 8002512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002516:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800251a:	c403      	stmia	r4!, {r0, r1}
 800251c:	8022      	strh	r2, [r4, #0]
 800251e:	e00d      	b.n	800253c <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002520:	f107 0308 	add.w	r3, r7, #8
 8002524:	4a22      	ldr	r2, [pc, #136]	; (80025b0 <printRadioSettings+0x91c>)
 8002526:	461c      	mov	r4, r3
 8002528:	4615      	mov	r5, r2
 800252a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800252c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800252e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002532:	c403      	stmia	r4!, {r0, r1}
 8002534:	8022      	strh	r2, [r4, #0]
 8002536:	3402      	adds	r4, #2
 8002538:	0c13      	lsrs	r3, r2, #16
 800253a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800253c:	f107 0308 	add.w	r3, r7, #8
 8002540:	4618      	mov	r0, r3
 8002542:	f7fd fe05 	bl	8000150 <strlen>
 8002546:	4603      	mov	r3, r0
 8002548:	b29a      	uxth	r2, r3
 800254a:	f107 0108 	add.w	r1, r7, #8
 800254e:	230a      	movs	r3, #10
 8002550:	4813      	ldr	r0, [pc, #76]	; (80025a0 <printRadioSettings+0x90c>)
 8002552:	f006 f98c 	bl	800886e <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8002556:	f107 0308 	add.w	r3, r7, #8
 800255a:	4a16      	ldr	r2, [pc, #88]	; (80025b4 <printRadioSettings+0x920>)
 800255c:	461c      	mov	r4, r3
 800255e:	4615      	mov	r5, r2
 8002560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002568:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800256a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800256c:	682b      	ldr	r3, [r5, #0]
 800256e:	461a      	mov	r2, r3
 8002570:	8022      	strh	r2, [r4, #0]
 8002572:	3402      	adds	r4, #2
 8002574:	0c1b      	lsrs	r3, r3, #16
 8002576:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002578:	f107 0308 	add.w	r3, r7, #8
 800257c:	4618      	mov	r0, r3
 800257e:	f7fd fde7 	bl	8000150 <strlen>
 8002582:	4603      	mov	r3, r0
 8002584:	b29a      	uxth	r2, r3
 8002586:	f107 0108 	add.w	r1, r7, #8
 800258a:	230a      	movs	r3, #10
 800258c:	4804      	ldr	r0, [pc, #16]	; (80025a0 <printRadioSettings+0x90c>)
 800258e:	f006 f96e 	bl	800886e <HAL_UART_Transmit>
}
 8002592:	bf00      	nop
 8002594:	3774      	adds	r7, #116	; 0x74
 8002596:	46bd      	mov	sp, r7
 8002598:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800259a:	bf00      	nop
 800259c:	08009820 	.word	0x08009820
 80025a0:	2000020c 	.word	0x2000020c
 80025a4:	0800986c 	.word	0x0800986c
 80025a8:	08009884 	.word	0x08009884
 80025ac:	0800989c 	.word	0x0800989c
 80025b0:	080098b8 	.word	0x080098b8
 80025b4:	0800948c 	.word	0x0800948c

080025b8 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b082      	sub	sp, #8
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 80025c0:	2254      	movs	r2, #84	; 0x54
 80025c2:	6879      	ldr	r1, [r7, #4]
 80025c4:	4803      	ldr	r0, [pc, #12]	; (80025d4 <MPU6050_Init+0x1c>)
 80025c6:	f006 fb39 	bl	8008c3c <memcpy>
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000024c 	.word	0x2000024c

080025d8 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af02      	add	r7, sp, #8
 80025de:	4603      	mov	r3, r0
 80025e0:	6039      	str	r1, [r7, #0]
 80025e2:	71fb      	strb	r3, [r7, #7]
 80025e4:	4613      	mov	r3, r2
 80025e6:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 80025e8:	23d0      	movs	r3, #208	; 0xd0
 80025ea:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
 80025f2:	b299      	uxth	r1, r3
 80025f4:	f107 020c 	add.w	r2, r7, #12
 80025f8:	230a      	movs	r3, #10
 80025fa:	9300      	str	r3, [sp, #0]
 80025fc:	2301      	movs	r3, #1
 80025fe:	4809      	ldr	r0, [pc, #36]	; (8002624 <I2C_Read+0x4c>)
 8002600:	f003 f89a 	bl	8005738 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8002604:	7bfb      	ldrb	r3, [r7, #15]
 8002606:	b299      	uxth	r1, r3
 8002608:	79bb      	ldrb	r3, [r7, #6]
 800260a:	b29a      	uxth	r2, r3
 800260c:	2364      	movs	r3, #100	; 0x64
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	4803      	ldr	r0, [pc, #12]	; (8002624 <I2C_Read+0x4c>)
 8002616:	f003 f98d 	bl	8005934 <HAL_I2C_Master_Receive>
}
 800261a:	bf00      	nop
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000024c 	.word	0x2000024c

08002628 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af02      	add	r7, sp, #8
 800262e:	4603      	mov	r3, r0
 8002630:	460a      	mov	r2, r1
 8002632:	71fb      	strb	r3, [r7, #7]
 8002634:	4613      	mov	r3, r2
 8002636:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 800263c:	79bb      	ldrb	r3, [r7, #6]
 800263e:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8002640:	23d0      	movs	r3, #208	; 0xd0
 8002642:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	b299      	uxth	r1, r3
 8002648:	f107 020c 	add.w	r2, r7, #12
 800264c:	2364      	movs	r3, #100	; 0x64
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2302      	movs	r3, #2
 8002652:	4803      	ldr	r0, [pc, #12]	; (8002660 <I2C_Write8+0x38>)
 8002654:	f003 f870 	bl	8005738 <HAL_I2C_Master_Transmit>
}
 8002658:	bf00      	nop
 800265a:	3710      	adds	r7, #16
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2000024c 	.word	0x2000024c

08002664 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 800266c:	2300      	movs	r3, #0
 800266e:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8002670:	2180      	movs	r1, #128	; 0x80
 8002672:	206b      	movs	r0, #107	; 0x6b
 8002674:	f7ff ffd8 	bl	8002628 <I2C_Write8>
	HAL_Delay(100);
 8002678:	2064      	movs	r0, #100	; 0x64
 800267a:	f002 f83f 	bl	80046fc <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	791b      	ldrb	r3, [r3, #4]
 800268c:	019b      	lsls	r3, r3, #6
 800268e:	b25b      	sxtb	r3, r3
 8002690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002694:	b25a      	sxtb	r2, r3
 8002696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269a:	4313      	orrs	r3, r2
 800269c:	b25b      	sxtb	r3, r3
 800269e:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	4619      	mov	r1, r3
 80026a4:	206b      	movs	r0, #107	; 0x6b
 80026a6:	f7ff ffbf 	bl	8002628 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 80026aa:	2064      	movs	r0, #100	; 0x64
 80026ac:	f002 f826 	bl	80046fc <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 80026b0:	2300      	movs	r3, #0
 80026b2:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	78db      	ldrb	r3, [r3, #3]
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	4619      	mov	r1, r3
 80026c2:	201a      	movs	r0, #26
 80026c4:	f7ff ffb0 	bl	8002628 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	785b      	ldrb	r3, [r3, #1]
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	f003 0318 	and.w	r3, r3, #24
 80026d8:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 80026da:	7bfb      	ldrb	r3, [r7, #15]
 80026dc:	4619      	mov	r1, r3
 80026de:	201b      	movs	r0, #27
 80026e0:	f7ff ffa2 	bl	8002628 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 80026e4:	2300      	movs	r3, #0
 80026e6:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	789b      	ldrb	r3, [r3, #2]
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	f003 0318 	and.w	r3, r3, #24
 80026f4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 80026f6:	7bfb      	ldrb	r3, [r7, #15]
 80026f8:	4619      	mov	r1, r3
 80026fa:	201c      	movs	r0, #28
 80026fc:	f7ff ff94 	bl	8002628 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8002700:	2004      	movs	r0, #4
 8002702:	f000 f857 	bl	80027b4 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	789b      	ldrb	r3, [r3, #2]
 800270a:	2b03      	cmp	r3, #3
 800270c:	d81a      	bhi.n	8002744 <MPU6050_Config+0xe0>
 800270e:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <MPU6050_Config+0xb0>)
 8002710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002714:	08002725 	.word	0x08002725
 8002718:	0800272d 	.word	0x0800272d
 800271c:	08002735 	.word	0x08002735
 8002720:	0800273d 	.word	0x0800273d
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <MPU6050_Config+0x12c>)
 8002726:	4a1b      	ldr	r2, [pc, #108]	; (8002794 <MPU6050_Config+0x130>)
 8002728:	601a      	str	r2, [r3, #0]
			break;
 800272a:	e00c      	b.n	8002746 <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 800272c:	4b18      	ldr	r3, [pc, #96]	; (8002790 <MPU6050_Config+0x12c>)
 800272e:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <MPU6050_Config+0x134>)
 8002730:	601a      	str	r2, [r3, #0]
				break;
 8002732:	e008      	b.n	8002746 <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8002734:	4b16      	ldr	r3, [pc, #88]	; (8002790 <MPU6050_Config+0x12c>)
 8002736:	4a19      	ldr	r2, [pc, #100]	; (800279c <MPU6050_Config+0x138>)
 8002738:	601a      	str	r2, [r3, #0]
			break;
 800273a:	e004      	b.n	8002746 <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 800273c:	4b14      	ldr	r3, [pc, #80]	; (8002790 <MPU6050_Config+0x12c>)
 800273e:	4a18      	ldr	r2, [pc, #96]	; (80027a0 <MPU6050_Config+0x13c>)
 8002740:	601a      	str	r2, [r3, #0]
			break;
 8002742:	e000      	b.n	8002746 <MPU6050_Config+0xe2>
		
		default:
			break;
 8002744:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	785b      	ldrb	r3, [r3, #1]
 800274a:	2b03      	cmp	r3, #3
 800274c:	d81a      	bhi.n	8002784 <MPU6050_Config+0x120>
 800274e:	a201      	add	r2, pc, #4	; (adr r2, 8002754 <MPU6050_Config+0xf0>)
 8002750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002754:	08002765 	.word	0x08002765
 8002758:	0800276d 	.word	0x0800276d
 800275c:	08002775 	.word	0x08002775
 8002760:	0800277d 	.word	0x0800277d
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8002764:	4b0f      	ldr	r3, [pc, #60]	; (80027a4 <MPU6050_Config+0x140>)
 8002766:	4a10      	ldr	r2, [pc, #64]	; (80027a8 <MPU6050_Config+0x144>)
 8002768:	601a      	str	r2, [r3, #0]
			break;
 800276a:	e00c      	b.n	8002786 <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 800276c:	4b0d      	ldr	r3, [pc, #52]	; (80027a4 <MPU6050_Config+0x140>)
 800276e:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <MPU6050_Config+0x148>)
 8002770:	601a      	str	r2, [r3, #0]
				break;
 8002772:	e008      	b.n	8002786 <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8002774:	4b0b      	ldr	r3, [pc, #44]	; (80027a4 <MPU6050_Config+0x140>)
 8002776:	4a0e      	ldr	r2, [pc, #56]	; (80027b0 <MPU6050_Config+0x14c>)
 8002778:	601a      	str	r2, [r3, #0]
			break;
 800277a:	e004      	b.n	8002786 <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <MPU6050_Config+0x140>)
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <MPU6050_Config+0x130>)
 8002780:	601a      	str	r2, [r3, #0]
			break;
 8002782:	e000      	b.n	8002786 <MPU6050_Config+0x122>
		
		default:
			break;
 8002784:	bf00      	nop
	}
	
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	200002a0 	.word	0x200002a0
 8002794:	3d7a0000 	.word	0x3d7a0000
 8002798:	3dfa0000 	.word	0x3dfa0000
 800279c:	3e7a0000 	.word	0x3e7a0000
 80027a0:	3efa0000 	.word	0x3efa0000
 80027a4:	200002a4 	.word	0x200002a4
 80027a8:	3bfa0000 	.word	0x3bfa0000
 80027ac:	3c7a0000 	.word	0x3c7a0000
 80027b0:	3cfa0000 	.word	0x3cfa0000

080027b4 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	4619      	mov	r1, r3
 80027c2:	2019      	movs	r0, #25
 80027c4:	f7ff ff30 	bl	8002628 <I2C_Write8>
}
 80027c8:	bf00      	nop
 80027ca:	3708      	adds	r7, #8
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b088      	sub	sp, #32
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	//i2cBuf[1] = 0;

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 80027d8:	f107 031c 	add.w	r3, r7, #28
 80027dc:	3301      	adds	r3, #1
 80027de:	2201      	movs	r2, #1
 80027e0:	4619      	mov	r1, r3
 80027e2:	203a      	movs	r0, #58	; 0x3a
 80027e4:	f7ff fef8 	bl	80025d8 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 80027e8:	7f7b      	ldrb	r3, [r7, #29]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d04f      	beq.n	800288e <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	2206      	movs	r2, #6
 80027f4:	4619      	mov	r1, r3
 80027f6:	203b      	movs	r0, #59	; 0x3b
 80027f8:	f7ff feee 	bl	80025d8 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 80027fc:	7d3b      	ldrb	r3, [r7, #20]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	021b      	lsls	r3, r3, #8
 8002802:	b29a      	uxth	r2, r3
 8002804:	7d7b      	ldrb	r3, [r7, #21]
 8002806:	b29b      	uxth	r3, r3
 8002808:	4413      	add	r3, r2
 800280a:	b29b      	uxth	r3, r3
 800280c:	b21a      	sxth	r2, r3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8002812:	7dbb      	ldrb	r3, [r7, #22]
 8002814:	b29b      	uxth	r3, r3
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	b29a      	uxth	r2, r3
 800281a:	7dfb      	ldrb	r3, [r7, #23]
 800281c:	b29b      	uxth	r3, r3
 800281e:	4413      	add	r3, r2
 8002820:	b29b      	uxth	r3, r3
 8002822:	b21a      	sxth	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8002828:	7e3b      	ldrb	r3, [r7, #24]
 800282a:	b29b      	uxth	r3, r3
 800282c:	021b      	lsls	r3, r3, #8
 800282e:	b29a      	uxth	r2, r3
 8002830:	7e7b      	ldrb	r3, [r7, #25]
 8002832:	b29b      	uxth	r3, r3
 8002834:	4413      	add	r3, r2
 8002836:	b29b      	uxth	r3, r3
 8002838:	b21a      	sxth	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 800283e:	f107 030c 	add.w	r3, r7, #12
 8002842:	2206      	movs	r2, #6
 8002844:	4619      	mov	r1, r3
 8002846:	2043      	movs	r0, #67	; 0x43
 8002848:	f7ff fec6 	bl	80025d8 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 800284c:	7b3b      	ldrb	r3, [r7, #12]
 800284e:	b29b      	uxth	r3, r3
 8002850:	021b      	lsls	r3, r3, #8
 8002852:	b29a      	uxth	r2, r3
 8002854:	7b7b      	ldrb	r3, [r7, #13]
 8002856:	b29b      	uxth	r3, r3
 8002858:	4413      	add	r3, r2
 800285a:	b29b      	uxth	r3, r3
 800285c:	b21a      	sxth	r2, r3
 800285e:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <MPU6050_Get_Accel_RawData+0xc8>)
 8002860:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8002862:	7bbb      	ldrb	r3, [r7, #14]
 8002864:	b29b      	uxth	r3, r3
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	b29a      	uxth	r2, r3
 800286a:	7bfb      	ldrb	r3, [r7, #15]
 800286c:	b29b      	uxth	r3, r3
 800286e:	4413      	add	r3, r2
 8002870:	b29b      	uxth	r3, r3
 8002872:	b21a      	sxth	r2, r3
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <MPU6050_Get_Accel_RawData+0xc8>)
 8002876:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8002878:	7c3b      	ldrb	r3, [r7, #16]
 800287a:	b29b      	uxth	r3, r3
 800287c:	021b      	lsls	r3, r3, #8
 800287e:	b29a      	uxth	r2, r3
 8002880:	7c7b      	ldrb	r3, [r7, #17]
 8002882:	b29b      	uxth	r3, r3
 8002884:	4413      	add	r3, r2
 8002886:	b29b      	uxth	r3, r3
 8002888:	b21a      	sxth	r2, r3
 800288a:	4b03      	ldr	r3, [pc, #12]	; (8002898 <MPU6050_Get_Accel_RawData+0xc8>)
 800288c:	809a      	strh	r2, [r3, #4]
			GyroRW[0] = 9;
			GyroRW[1] = 9;
			GyroRW[2] = 9;
			*/
	}
}
 800288e:	bf00      	nop
 8002890:	3720      	adds	r7, #32
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	200002a8 	.word	0x200002a8

0800289c <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <MPU6050_Get_Gyro_RawData+0x30>)
 80028a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <MPU6050_Get_Gyro_RawData+0x30>)
 80028b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <MPU6050_Get_Gyro_RawData+0x30>)
 80028ba:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	809a      	strh	r2, [r3, #4]
	
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr
 80028cc:	200002a8 	.word	0x200002a8

080028d0 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b086      	sub	sp, #24
 80028d4:	af02      	add	r7, sp, #8
 80028d6:	4603      	mov	r3, r0
 80028d8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80028da:	79fb      	ldrb	r3, [r7, #7]
 80028dc:	f023 030f 	bic.w	r3, r3, #15
 80028e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80028e2:	79fb      	ldrb	r3, [r7, #7]
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80028e8:	7bfb      	ldrb	r3, [r7, #15]
 80028ea:	f043 030c 	orr.w	r3, r3, #12
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80028f2:	7bfb      	ldrb	r3, [r7, #15]
 80028f4:	f043 0308 	orr.w	r3, r3, #8
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80028fc:	7bbb      	ldrb	r3, [r7, #14]
 80028fe:	f043 030c 	orr.w	r3, r3, #12
 8002902:	b2db      	uxtb	r3, r3
 8002904:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8002906:	7bbb      	ldrb	r3, [r7, #14]
 8002908:	f043 0308 	orr.w	r3, r3, #8
 800290c:	b2db      	uxtb	r3, r3
 800290e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002910:	f107 0208 	add.w	r2, r7, #8
 8002914:	2364      	movs	r3, #100	; 0x64
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2304      	movs	r3, #4
 800291a:	214e      	movs	r1, #78	; 0x4e
 800291c:	4803      	ldr	r0, [pc, #12]	; (800292c <lcd_send_cmd+0x5c>)
 800291e:	f002 ff0b 	bl	8005738 <HAL_I2C_Master_Transmit>
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	200007e8 	.word	0x200007e8

08002930 <lcd_init>:
	data_t[3] = data_l|0x09;  //en=0, rs=0
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
}

void lcd_init (void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8002934:	2002      	movs	r0, #2
 8002936:	f7ff ffcb 	bl	80028d0 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800293a:	2028      	movs	r0, #40	; 0x28
 800293c:	f7ff ffc8 	bl	80028d0 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8002940:	200c      	movs	r0, #12
 8002942:	f7ff ffc5 	bl	80028d0 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8002946:	2080      	movs	r0, #128	; 0x80
 8002948:	f7ff ffc2 	bl	80028d0 <lcd_send_cmd>
}
 800294c:	bf00      	nop
 800294e:	bd80      	pop	{r7, pc}

08002950 <MotorSetValue>:
int Counter = 0;
int mode = MODE_ACCELERATION_BURST;


void MotorSetValue(int16_t Left, int16_t Right)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	460a      	mov	r2, r1
 800295a:	80fb      	strh	r3, [r7, #6]
 800295c:	4613      	mov	r3, r2
 800295e:	80bb      	strh	r3, [r7, #4]
	if (Right > 0) {
 8002960:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	dd0a      	ble.n	800297e <MotorSetValue+0x2e>
		SetPwm(Right, 3);
 8002968:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800296c:	2103      	movs	r1, #3
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f82e 	bl	80029d0 <SetPwm>
		SetPwm(0, 4);
 8002974:	2104      	movs	r1, #4
 8002976:	2000      	movs	r0, #0
 8002978:	f000 f82a 	bl	80029d0 <SetPwm>
 800297c:	e00a      	b.n	8002994 <MotorSetValue+0x44>
	} else {
		SetPwm(0, 3);
 800297e:	2103      	movs	r1, #3
 8002980:	2000      	movs	r0, #0
 8002982:	f000 f825 	bl	80029d0 <SetPwm>
		SetPwm(-1 * Right, 4);
 8002986:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800298a:	425b      	negs	r3, r3
 800298c:	2104      	movs	r1, #4
 800298e:	4618      	mov	r0, r3
 8002990:	f000 f81e 	bl	80029d0 <SetPwm>
	}
	if (Left > 0) {
 8002994:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002998:	2b00      	cmp	r3, #0
 800299a:	dd0a      	ble.n	80029b2 <MotorSetValue+0x62>
		SetPwm(Left, 2);
 800299c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029a0:	2102      	movs	r1, #2
 80029a2:	4618      	mov	r0, r3
 80029a4:	f000 f814 	bl	80029d0 <SetPwm>
		SetPwm(0, 1);
 80029a8:	2101      	movs	r1, #1
 80029aa:	2000      	movs	r0, #0
 80029ac:	f000 f810 	bl	80029d0 <SetPwm>
	} else {
		SetPwm(0, 2);
		SetPwm(-1 * Left, 1);
	}
}
 80029b0:	e00a      	b.n	80029c8 <MotorSetValue+0x78>
		SetPwm(0, 2);
 80029b2:	2102      	movs	r1, #2
 80029b4:	2000      	movs	r0, #0
 80029b6:	f000 f80b 	bl	80029d0 <SetPwm>
		SetPwm(-1 * Left, 1);
 80029ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80029be:	425b      	negs	r3, r3
 80029c0:	2101      	movs	r1, #1
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f804 	bl	80029d0 <SetPwm>
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <SetPwm>:

void SetPwm(uint16_t Value, uint16_t Channel) {
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	460a      	mov	r2, r1
 80029da:	80fb      	strh	r3, [r7, #6]
 80029dc:	4613      	mov	r3, r2
 80029de:	80bb      	strh	r3, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80029e0:	2360      	movs	r3, #96	; 0x60
 80029e2:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = Value;
 80029e4:	88fb      	ldrh	r3, [r7, #6]
 80029e6:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80029e8:	2300      	movs	r3, #0
 80029ea:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61fb      	str	r3, [r7, #28]

    switch(Channel) {
 80029f0:	88bb      	ldrh	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	2b03      	cmp	r3, #3
 80029f6:	d83b      	bhi.n	8002a70 <SetPwm+0xa0>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <SetPwm+0x30>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a11 	.word	0x08002a11
 8002a04:	08002a29 	.word	0x08002a29
 8002a08:	08002a41 	.word	0x08002a41
 8002a0c:	08002a59 	.word	0x08002a59
    case 1: {
    	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8002a10:	f107 030c 	add.w	r3, r7, #12
 8002a14:	2200      	movs	r2, #0
 8002a16:	4619      	mov	r1, r3
 8002a18:	4818      	ldr	r0, [pc, #96]	; (8002a7c <SetPwm+0xac>)
 8002a1a:	f005 fa3f 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4816      	ldr	r0, [pc, #88]	; (8002a7c <SetPwm+0xac>)
 8002a22:	f005 f901 	bl	8007c28 <HAL_TIM_PWM_Start>
		break;
 8002a26:	e024      	b.n	8002a72 <SetPwm+0xa2>
    }
    case 2: {
		HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 8002a28:	f107 030c 	add.w	r3, r7, #12
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	4619      	mov	r1, r3
 8002a30:	4812      	ldr	r0, [pc, #72]	; (8002a7c <SetPwm+0xac>)
 8002a32:	f005 fa33 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8002a36:	2104      	movs	r1, #4
 8002a38:	4810      	ldr	r0, [pc, #64]	; (8002a7c <SetPwm+0xac>)
 8002a3a:	f005 f8f5 	bl	8007c28 <HAL_TIM_PWM_Start>
		break;
 8002a3e:	e018      	b.n	8002a72 <SetPwm+0xa2>
	}
    case 3: {
		HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 8002a40:	f107 030c 	add.w	r3, r7, #12
 8002a44:	2208      	movs	r2, #8
 8002a46:	4619      	mov	r1, r3
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <SetPwm+0xac>)
 8002a4a:	f005 fa27 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8002a4e:	2108      	movs	r1, #8
 8002a50:	480a      	ldr	r0, [pc, #40]	; (8002a7c <SetPwm+0xac>)
 8002a52:	f005 f8e9 	bl	8007c28 <HAL_TIM_PWM_Start>
		break;
 8002a56:	e00c      	b.n	8002a72 <SetPwm+0xa2>
	}
    case 4: {
		HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4);
 8002a58:	f107 030c 	add.w	r3, r7, #12
 8002a5c:	220c      	movs	r2, #12
 8002a5e:	4619      	mov	r1, r3
 8002a60:	4806      	ldr	r0, [pc, #24]	; (8002a7c <SetPwm+0xac>)
 8002a62:	f005 fa1b 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002a66:	210c      	movs	r1, #12
 8002a68:	4804      	ldr	r0, [pc, #16]	; (8002a7c <SetPwm+0xac>)
 8002a6a:	f005 f8dd 	bl	8007c28 <HAL_TIM_PWM_Start>
		break;
 8002a6e:	e000      	b.n	8002a72 <SetPwm+0xa2>
	}
    default : {
    	// Blad XDD
    	break;
 8002a70:	bf00      	nop
    }
    }

}
 8002a72:	bf00      	nop
 8002a74:	3728      	adds	r7, #40	; 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	200007a8 	.word	0x200007a8

08002a80 <MapValue>:

double MapValue(double Val, double FromLow,double FromHigh,double ToLow,double ToHigh){
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002a8a:	e9c7 2300 	strd	r2, r3, [r7]
	return ToLow + ((ToHigh - ToLow) / (FromHigh - FromLow)) * (Val - FromLow);
 8002a8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a92:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002a96:	f7fd fb67 	bl	8000168 <__aeabi_dsub>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	460c      	mov	r4, r1
 8002a9e:	4625      	mov	r5, r4
 8002aa0:	461c      	mov	r4, r3
 8002aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002aa6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002aaa:	f7fd fb5d 	bl	8000168 <__aeabi_dsub>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4620      	mov	r0, r4
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	f7fd fe39 	bl	800072c <__aeabi_ddiv>
 8002aba:	4603      	mov	r3, r0
 8002abc:	460c      	mov	r4, r1
 8002abe:	4625      	mov	r5, r4
 8002ac0:	461c      	mov	r4, r3
 8002ac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ac6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002aca:	f7fd fb4d 	bl	8000168 <__aeabi_dsub>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4620      	mov	r0, r4
 8002ad4:	4629      	mov	r1, r5
 8002ad6:	f7fd fcff 	bl	80004d8 <__aeabi_dmul>
 8002ada:	4603      	mov	r3, r0
 8002adc:	460c      	mov	r4, r1
 8002ade:	4618      	mov	r0, r3
 8002ae0:	4621      	mov	r1, r4
 8002ae2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002ae6:	f7fd fb41 	bl	800016c <__adddf3>
 8002aea:	4603      	mov	r3, r0
 8002aec:	460c      	mov	r4, r1
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	4621      	mov	r1, r4
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bdb0      	pop	{r4, r5, r7, pc}

08002af8 <HAL_TIM_PeriodElapsedCallback>:
double MapValue2(double input, double input_start,double input_end,double output_start,double output_end) {
	double slope = 1.0 * (output_end - output_start) / (input_end - input_start);
	return output_start + slope * (input - input_start);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance){
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d102      	bne.n	8002b12 <HAL_TIM_PeriodElapsedCallback+0x1a>
		Flag = 1;
 8002b0c:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002b0e:	2201      	movs	r2, #1
 8002b10:	601a      	str	r2, [r3, #0]
	}
}
 8002b12:	bf00      	nop
 8002b14:	370c      	adds	r7, #12
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bc80      	pop	{r7}
 8002b1a:	4770      	bx	lr
 8002b1c:	2000083c 	.word	0x2000083c
 8002b20:	200002b0 	.word	0x200002b0

08002b24 <SendReturn>:
	if (a > 0) {
		CDC_Transmit_FS(in, a);
	}
}

void SendReturn(short val){
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
	Msg[0] = OK;
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <SendReturn+0x44>)
 8002b30:	22ff      	movs	r2, #255	; 0xff
 8002b32:	701a      	strb	r2, [r3, #0]
	Msg[1] = val;
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <SendReturn+0x44>)
 8002b3a:	705a      	strb	r2, [r3, #1]
	Msg[2] = val >> 8;
 8002b3c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b40:	121b      	asrs	r3, r3, #8
 8002b42:	b21b      	sxth	r3, r3
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <SendReturn+0x44>)
 8002b48:	709a      	strb	r2, [r3, #2]
	if (NRF24_write(Msg, 3))
 8002b4a:	2103      	movs	r1, #3
 8002b4c:	4806      	ldr	r0, [pc, #24]	; (8002b68 <SendReturn+0x44>)
 8002b4e:	f7fe fdbf 	bl	80016d0 <NRF24_write>
 8002b52:	4603      	mov	r3, r0
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d003      	beq.n	8002b60 <SendReturn+0x3c>
	  {
		  //HAL_Delay(1);
		  NRF24_read(RF_RxData, 16);
 8002b58:	2110      	movs	r1, #16
 8002b5a:	4804      	ldr	r0, [pc, #16]	; (8002b6c <SendReturn+0x48>)
 8002b5c:	f7fe fe0c 	bl	8001778 <NRF24_read>
	  }
}
 8002b60:	bf00      	nop
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	200000b0 	.word	0x200000b0
 8002b6c:	200008ac 	.word	0x200008ac

08002b70 <AdcRead>:

void AdcRead(int16_t *buf){
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start(&hadc1);
 8002b78:	481c      	ldr	r0, [pc, #112]	; (8002bec <AdcRead+0x7c>)
 8002b7a:	f001 feb9 	bl	80048f0 <HAL_ADC_Start>
	if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8002b7e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002b82:	481a      	ldr	r0, [pc, #104]	; (8002bec <AdcRead+0x7c>)
 8002b84:	f001 ff8e 	bl	8004aa4 <HAL_ADC_PollForConversion>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d106      	bne.n	8002b9c <AdcRead+0x2c>
		buf[0] = HAL_ADC_GetValue(&hadc1);
 8002b8e:	4817      	ldr	r0, [pc, #92]	; (8002bec <AdcRead+0x7c>)
 8002b90:	f002 f882 	bl	8004c98 <HAL_ADC_GetValue>
 8002b94:	4603      	mov	r3, r0
 8002b96:	b21a      	sxth	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8002b9c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002ba0:	4812      	ldr	r0, [pc, #72]	; (8002bec <AdcRead+0x7c>)
 8002ba2:	f001 ff7f 	bl	8004aa4 <HAL_ADC_PollForConversion>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d107      	bne.n	8002bbc <AdcRead+0x4c>
		buf[1] = HAL_ADC_GetValue(&hadc1);
 8002bac:	480f      	ldr	r0, [pc, #60]	; (8002bec <AdcRead+0x7c>)
 8002bae:	f002 f873 	bl	8004c98 <HAL_ADC_GetValue>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	3302      	adds	r3, #2
 8002bb8:	b212      	sxth	r2, r2
 8002bba:	801a      	strh	r2, [r3, #0]
	}
	if (HAL_ADC_PollForConversion(&hadc1, 1000) == HAL_OK) {
 8002bbc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002bc0:	480a      	ldr	r0, [pc, #40]	; (8002bec <AdcRead+0x7c>)
 8002bc2:	f001 ff6f 	bl	8004aa4 <HAL_ADC_PollForConversion>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d107      	bne.n	8002bdc <AdcRead+0x6c>
		buf[1] = HAL_ADC_GetValue(&hadc1);
 8002bcc:	4807      	ldr	r0, [pc, #28]	; (8002bec <AdcRead+0x7c>)
 8002bce:	f002 f863 	bl	8004c98 <HAL_ADC_GetValue>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	3302      	adds	r3, #2
 8002bd8:	b212      	sxth	r2, r2
 8002bda:	801a      	strh	r2, [r3, #0]
	}
	HAL_ADC_Stop(&hadc1);
 8002bdc:	4803      	ldr	r0, [pc, #12]	; (8002bec <AdcRead+0x7c>)
 8002bde:	f001 ff35 	bl	8004a4c <HAL_ADC_Stop>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	2000087c 	.word	0x2000087c

08002bf0 <UlToStr>:

void UlToStr(char *s, unsigned long bin, unsigned char n)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	71fb      	strb	r3, [r7, #7]
    s += n;
 8002bfe:	79fb      	ldrb	r3, [r7, #7]
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	60fb      	str	r3, [r7, #12]
    *s = '\0';
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]

    while (n--)
 8002c0c:	e017      	b.n	8002c3e <UlToStr+0x4e>
    {
        *--s = (bin % 10) + '0';
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	4b10      	ldr	r3, [pc, #64]	; (8002c54 <UlToStr+0x64>)
 8002c12:	fba3 2301 	umull	r2, r3, r3, r1
 8002c16:	08da      	lsrs	r2, r3, #3
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	1aca      	subs	r2, r1, r3
 8002c22:	b2d3      	uxtb	r3, r2
 8002c24:	68fa      	ldr	r2, [r7, #12]
 8002c26:	3a01      	subs	r2, #1
 8002c28:	60fa      	str	r2, [r7, #12]
 8002c2a:	3330      	adds	r3, #48	; 0x30
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	701a      	strb	r2, [r3, #0]
        bin /= 10;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <UlToStr+0x64>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	08db      	lsrs	r3, r3, #3
 8002c3c:	60bb      	str	r3, [r7, #8]
    while (n--)
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	1e5a      	subs	r2, r3, #1
 8002c42:	71fa      	strb	r2, [r7, #7]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1e2      	bne.n	8002c0e <UlToStr+0x1e>
    }
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	cccccccd 	.word	0xcccccccd

08002c58 <Update_SSD>:

void Update_SSD(){
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b08d      	sub	sp, #52	; 0x34
 8002c5c:	af06      	add	r7, sp, #24
	// Ikona naładowania
	int16_t Val[3];
	AdcRead(Val);
 8002c5e:	f107 0308 	add.w	r3, r7, #8
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7ff ff84 	bl	8002b70 <AdcRead>
	Val[0] = MapValue(Val[0], 0,4095 , 0, 1000);
 8002c68:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fd fbc9 	bl	8000404 <__aeabi_i2d>
 8002c72:	f04f 0300 	mov.w	r3, #0
 8002c76:	4c6e      	ldr	r4, [pc, #440]	; (8002e30 <Update_SSD+0x1d8>)
 8002c78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002c7c:	f04f 0300 	mov.w	r3, #0
 8002c80:	f04f 0400 	mov.w	r4, #0
 8002c84:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002c88:	a467      	add	r4, pc, #412	; (adr r4, 8002e28 <Update_SSD+0x1d0>)
 8002c8a:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002c8e:	e9cd 3400 	strd	r3, r4, [sp]
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	f7ff fef1 	bl	8002a80 <MapValue>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	460c      	mov	r4, r1
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	4621      	mov	r1, r4
 8002ca6:	f7fd fe29 	bl	80008fc <__aeabi_d2iz>
 8002caa:	4603      	mov	r3, r0
 8002cac:	b21b      	sxth	r3, r3
 8002cae:	813b      	strh	r3, [r7, #8]
	Val[1] = MapValue(Val[1], 0,4095 , 0, 1000);
 8002cb0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fba5 	bl	8000404 <__aeabi_i2d>
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	4c5c      	ldr	r4, [pc, #368]	; (8002e30 <Update_SSD+0x1d8>)
 8002cc0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002cc4:	f04f 0300 	mov.w	r3, #0
 8002cc8:	f04f 0400 	mov.w	r4, #0
 8002ccc:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8002cd0:	a455      	add	r4, pc, #340	; (adr r4, 8002e28 <Update_SSD+0x1d0>)
 8002cd2:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002cd6:	e9cd 3400 	strd	r3, r4, [sp]
 8002cda:	f04f 0200 	mov.w	r2, #0
 8002cde:	f04f 0300 	mov.w	r3, #0
 8002ce2:	f7ff fecd 	bl	8002a80 <MapValue>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	460c      	mov	r4, r1
 8002cea:	4618      	mov	r0, r3
 8002cec:	4621      	mov	r1, r4
 8002cee:	f7fd fe05 	bl	80008fc <__aeabi_d2iz>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	b21b      	sxth	r3, r3
 8002cf6:	817b      	strh	r3, [r7, #10]
	//Val[0] -= Val[1];
	char val[5];

	int flat = 0;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	617b      	str	r3, [r7, #20]
	for (int a = 0; a < 2; a++){
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	e080      	b.n	8002e04 <Update_SSD+0x1ac>
		UlToStr(val, Val[a], 5);
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	f107 0218 	add.w	r2, r7, #24
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002d10:	4619      	mov	r1, r3
 8002d12:	463b      	mov	r3, r7
 8002d14:	2205      	movs	r2, #5
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7ff ff6a 	bl	8002bf0 <UlToStr>
		SSD1306_GotoXY (0,a * 20);
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	461a      	mov	r2, r3
 8002d22:	0092      	lsls	r2, r2, #2
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	b29b      	uxth	r3, r3
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	2000      	movs	r0, #0
 8002d2e:	f001 f8b3 	bl	8003e98 <SSD1306_GotoXY>
		SSD1306_Puts(val, &Font_11x18, 1);
 8002d32:	463b      	mov	r3, r7
 8002d34:	2201      	movs	r2, #1
 8002d36:	493f      	ldr	r1, [pc, #252]	; (8002e34 <Update_SSD+0x1dc>)
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f001 f943 	bl	8003fc4 <SSD1306_Puts>
		if (Val[a] > 390) {
 8002d3e:	693b      	ldr	r3, [r7, #16]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	f107 0218 	add.w	r2, r7, #24
 8002d46:	4413      	add	r3, r2
 8002d48:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002d4c:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8002d50:	dd0a      	ble.n	8002d68 <Update_SSD+0x110>
			SSD1306_DrawIcon16x16(0+a*20,48, bat3_icon16x16);
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4a36      	ldr	r2, [pc, #216]	; (8002e38 <Update_SSD+0x1e0>)
 8002d5e:	2130      	movs	r1, #48	; 0x30
 8002d60:	4618      	mov	r0, r3
 8002d62:	f001 f835 	bl	8003dd0 <SSD1306_DrawIcon16x16>
 8002d66:	e04a      	b.n	8002dfe <Update_SSD+0x1a6>
		} else if (Val[a] > 360) {
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	f107 0218 	add.w	r2, r7, #24
 8002d70:	4413      	add	r3, r2
 8002d72:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002d76:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8002d7a:	dd0a      	ble.n	8002d92 <Update_SSD+0x13a>
			SSD1306_DrawIcon16x16(0+a*20,48, bat2_icon16x16);
 8002d7c:	693a      	ldr	r2, [r7, #16]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4a2d      	ldr	r2, [pc, #180]	; (8002e3c <Update_SSD+0x1e4>)
 8002d88:	2130      	movs	r1, #48	; 0x30
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f001 f820 	bl	8003dd0 <SSD1306_DrawIcon16x16>
 8002d90:	e035      	b.n	8002dfe <Update_SSD+0x1a6>
		} else if (Val[a] > 330) {
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	f107 0218 	add.w	r2, r7, #24
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002da0:	f5b3 7fa5 	cmp.w	r3, #330	; 0x14a
 8002da4:	dd0a      	ble.n	8002dbc <Update_SSD+0x164>
			SSD1306_DrawIcon16x16(0+a*20,48, bat1_icon16x16);
 8002da6:	693a      	ldr	r2, [r7, #16]
 8002da8:	4613      	mov	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4413      	add	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4a23      	ldr	r2, [pc, #140]	; (8002e40 <Update_SSD+0x1e8>)
 8002db2:	2130      	movs	r1, #48	; 0x30
 8002db4:	4618      	mov	r0, r3
 8002db6:	f001 f80b 	bl	8003dd0 <SSD1306_DrawIcon16x16>
 8002dba:	e020      	b.n	8002dfe <Update_SSD+0x1a6>
		} else if (Val[a] > 300) {
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	f107 0218 	add.w	r2, r7, #24
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002dca:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002dce:	dd0a      	ble.n	8002de6 <Update_SSD+0x18e>
			SSD1306_DrawIcon16x16(0+a*20,48, bat0_icon16x16);
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	4a1a      	ldr	r2, [pc, #104]	; (8002e44 <Update_SSD+0x1ec>)
 8002ddc:	2130      	movs	r1, #48	; 0x30
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 fff6 	bl	8003dd0 <SSD1306_DrawIcon16x16>
 8002de4:	e00b      	b.n	8002dfe <Update_SSD+0x1a6>
		}else {
			SSD1306_DrawIcon16x16(0+a*20,48, cancel_icon16x16);
 8002de6:	693a      	ldr	r2, [r7, #16]
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4a15      	ldr	r2, [pc, #84]	; (8002e48 <Update_SSD+0x1f0>)
 8002df2:	2130      	movs	r1, #48	; 0x30
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 ffeb 	bl	8003dd0 <SSD1306_DrawIcon16x16>
			flat = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	617b      	str	r3, [r7, #20]
	for (int a = 0; a < 2; a++){
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	3301      	adds	r3, #1
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	f77f af7b 	ble.w	8002d02 <Update_SSD+0xaa>
		}
	}
	SSD1306_UpdateScreen();
 8002e0c:	f000 ff3c 	bl	8003c88 <SSD1306_UpdateScreen>
	SSD1306_Fill(0);
 8002e10:	2000      	movs	r0, #0
 8002e12:	f000 ff67 	bl	8003ce4 <SSD1306_Fill>
	if (flat) while(1);
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d000      	beq.n	8002e1e <Update_SSD+0x1c6>
 8002e1c:	e7fe      	b.n	8002e1c <Update_SSD+0x1c4>
}
 8002e1e:	bf00      	nop
 8002e20:	371c      	adds	r7, #28
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd90      	pop	{r4, r7, pc}
 8002e26:	bf00      	nop
 8002e28:	00000000 	.word	0x00000000
 8002e2c:	40affe00 	.word	0x40affe00
 8002e30:	408f4000 	.word	0x408f4000
 8002e34:	20000000 	.word	0x20000000
 8002e38:	20000068 	.word	0x20000068
 8002e3c:	20000048 	.word	0x20000048
 8002e40:	20000028 	.word	0x20000028
 8002e44:	20000008 	.word	0x20000008
 8002e48:	20000088 	.word	0x20000088
 8002e4c:	00000000 	.word	0x00000000

08002e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e52:	b0a5      	sub	sp, #148	; 0x94
 8002e54:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002e56:	f001 fbef 	bl	8004638 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002e5a:	f000 fb89 	bl	8003570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002e5e:	f000 fde3 	bl	8003a28 <MX_GPIO_Init>
  MX_ADC1_Init();
 8002e62:	f000 fbe1 	bl	8003628 <MX_ADC1_Init>
  MX_I2C2_Init();
 8002e66:	f000 fc3d 	bl	80036e4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002e6a:	f000 fc69 	bl	8003740 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002e6e:	f000 fd37 	bl	80038e0 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002e72:	f000 fdaf 	bl	80039d4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8002e76:	f000 fc99 	bl	80037ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8002e7a:	f000 fce3 	bl	8003844 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Wyswietlacz
  __HAL_RCC_I2C2_FORCE_RESET();
 8002e7e:	4b9f      	ldr	r3, [pc, #636]	; (80030fc <main+0x2ac>)
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	4a9e      	ldr	r2, [pc, #632]	; (80030fc <main+0x2ac>)
 8002e84:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e88:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 8002e8a:	4b9c      	ldr	r3, [pc, #624]	; (80030fc <main+0x2ac>)
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	4a9b      	ldr	r2, [pc, #620]	; (80030fc <main+0x2ac>)
 8002e90:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002e94:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 8002e96:	f000 fc25 	bl	80036e4 <MX_I2C2_Init>
  __HAL_RCC_I2C2_FORCE_RESET();
 8002e9a:	4b98      	ldr	r3, [pc, #608]	; (80030fc <main+0x2ac>)
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	4a97      	ldr	r2, [pc, #604]	; (80030fc <main+0x2ac>)
 8002ea0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002ea4:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 8002ea6:	4b95      	ldr	r3, [pc, #596]	; (80030fc <main+0x2ac>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	4a94      	ldr	r2, [pc, #592]	; (80030fc <main+0x2ac>)
 8002eac:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002eb0:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 8002eb2:	f000 fc17 	bl	80036e4 <MX_I2C2_Init>
  lcd_init();
 8002eb6:	f7ff fd3b 	bl	8002930 <lcd_init>
  SSD1306_Init();
 8002eba:	f000 fe27 	bl	8003b0c <SSD1306_Init>
  Update_SSD();
 8002ebe:	f7ff fecb 	bl	8002c58 <Update_SSD>

  // Timer
  HAL_TIM_Base_Start_IT(&htim3);
 8002ec2:	488f      	ldr	r0, [pc, #572]	; (8003100 <main+0x2b0>)
 8002ec4:	f004 fe61 	bl	8007b8a <HAL_TIM_Base_Start_IT>

  // NRF
  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 8002ec8:	4c8e      	ldr	r4, [pc, #568]	; (8003104 <main+0x2b4>)
 8002eca:	4668      	mov	r0, sp
 8002ecc:	1d23      	adds	r3, r4, #4
 8002ece:	2254      	movs	r2, #84	; 0x54
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	f005 feb3 	bl	8008c3c <memcpy>
 8002ed6:	6823      	ldr	r3, [r4, #0]
 8002ed8:	2202      	movs	r2, #2
 8002eda:	2101      	movs	r1, #1
 8002edc:	488a      	ldr	r0, [pc, #552]	; (8003108 <main+0x2b8>)
 8002ede:	f7fe fb0b 	bl	80014f8 <NRF24_begin>
  NRF24_stopListening();
 8002ee2:	f7fe fbe9 	bl	80016b8 <NRF24_stopListening>
  NRF24_openWritingPipe(PipeAddres);
 8002ee6:	4b89      	ldr	r3, [pc, #548]	; (800310c <main+0x2bc>)
 8002ee8:	cb18      	ldmia	r3, {r3, r4}
 8002eea:	4618      	mov	r0, r3
 8002eec:	4621      	mov	r1, r4
 8002eee:	f7fe fc63 	bl	80017b8 <NRF24_openWritingPipe>
  NRF24_setAutoAck(true);
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	f7fe fd54 	bl	80019a0 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 8002ef8:	2034      	movs	r0, #52	; 0x34
 8002efa:	f7fe fc9c 	bl	8001836 <NRF24_setChannel>
  NRF24_setPayloadSize(13);
 8002efe:	200d      	movs	r0, #13
 8002f00:	f7fe fcae 	bl	8001860 <NRF24_setPayloadSize>
  NRF24_enableDynamicPayloads();
 8002f04:	f7fe fd02 	bl	800190c <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 8002f08:	f7fe fcd2 	bl	80018b0 <NRF24_enableAckPayload>

  // MPU

  Init(&hi2c2, &htim2);	// NIC NIE MOZE BYC PO TYM, URUCHAMIA SIE ZEGAR DO CALKOWANIA
 8002f0c:	4980      	ldr	r1, [pc, #512]	; (8003110 <main+0x2c0>)
 8002f0e:	4881      	ldr	r0, [pc, #516]	; (8003114 <main+0x2c4>)
 8002f10:	f7fd fed6 	bl	8000cc0 <Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //MotorSetValue(0, 255);
	  Update();
 8002f14:	f7fd ff44 	bl	8000da0 <Update>
	  switch (mode){
 8002f18:	4b7f      	ldr	r3, [pc, #508]	; (8003118 <main+0x2c8>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2ba1      	cmp	r3, #161	; 0xa1
 8002f1e:	d008      	beq.n	8002f32 <main+0xe2>
 8002f20:	2ba2      	cmp	r3, #162	; 0xa2
 8002f22:	d00b      	beq.n	8002f3c <main+0xec>
 8002f24:	2ba0      	cmp	r3, #160	; 0xa0
 8002f26:	d10e      	bne.n	8002f46 <main+0xf6>
	  case MODE_ACCELERATION_BURST: {
		  GetAcceleration(Msg, 1);
 8002f28:	2101      	movs	r1, #1
 8002f2a:	487c      	ldr	r0, [pc, #496]	; (800311c <main+0x2cc>)
 8002f2c:	f7fe f8cc 	bl	80010c8 <GetAcceleration>
		  break;
 8002f30:	e009      	b.n	8002f46 <main+0xf6>
	  }
	  case MODE_VELOCITY_BURST: {
		  GetVelocity(Msg, 1);
 8002f32:	2101      	movs	r1, #1
 8002f34:	4879      	ldr	r0, [pc, #484]	; (800311c <main+0x2cc>)
 8002f36:	f7fe f8f9 	bl	800112c <GetVelocity>
		  break;
 8002f3a:	e004      	b.n	8002f46 <main+0xf6>
	  }
	  case MODE_DISTANCE_BURST: {
		  GetDistance(Msg, 1);
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4877      	ldr	r0, [pc, #476]	; (800311c <main+0x2cc>)
 8002f40:	f7fe f932 	bl	80011a8 <GetDistance>
		  break;
 8002f44:	bf00      	nop
	  }
	  }

	  Msg[0] = FUNC_ACCEL_GYRO_DATA;
 8002f46:	4b75      	ldr	r3, [pc, #468]	; (800311c <main+0x2cc>)
 8002f48:	2280      	movs	r2, #128	; 0x80
 8002f4a:	701a      	strb	r2, [r3, #0]

	  if (NRF24_write(Msg, 13))
 8002f4c:	210d      	movs	r1, #13
 8002f4e:	4873      	ldr	r0, [pc, #460]	; (800311c <main+0x2cc>)
 8002f50:	f7fe fbbe 	bl	80016d0 <NRF24_write>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <main+0x112>
	  {
		  //HAL_Delay(1);
		  NRF24_read(RF_RxData, 16);
 8002f5a:	2110      	movs	r1, #16
 8002f5c:	4870      	ldr	r0, [pc, #448]	; (8003120 <main+0x2d0>)
 8002f5e:	f7fe fc0b 	bl	8001778 <NRF24_read>
	  }
	  //Counter ++;
	  HAL_Delay(1);
 8002f62:	2001      	movs	r0, #1
 8002f64:	f001 fbca 	bl	80046fc <HAL_Delay>
	  switch (RF_RxData[0]) {
 8002f68:	4b6d      	ldr	r3, [pc, #436]	; (8003120 <main+0x2d0>)
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	3b81      	subs	r3, #129	; 0x81
 8002f6e:	2b42      	cmp	r3, #66	; 0x42
 8002f70:	f200 82e5 	bhi.w	800353e <main+0x6ee>
 8002f74:	a201      	add	r2, pc, #4	; (adr r2, 8002f7c <main+0x12c>)
 8002f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f7a:	bf00      	nop
 8002f7c:	08003089 	.word	0x08003089
 8002f80:	0800353f 	.word	0x0800353f
 8002f84:	0800353f 	.word	0x0800353f
 8002f88:	0800353f 	.word	0x0800353f
 8002f8c:	0800353f 	.word	0x0800353f
 8002f90:	0800353f 	.word	0x0800353f
 8002f94:	0800353f 	.word	0x0800353f
 8002f98:	0800353f 	.word	0x0800353f
 8002f9c:	0800353f 	.word	0x0800353f
 8002fa0:	0800353f 	.word	0x0800353f
 8002fa4:	0800353f 	.word	0x0800353f
 8002fa8:	0800353f 	.word	0x0800353f
 8002fac:	0800353f 	.word	0x0800353f
 8002fb0:	0800353f 	.word	0x0800353f
 8002fb4:	0800353f 	.word	0x0800353f
 8002fb8:	0800353f 	.word	0x0800353f
 8002fbc:	0800353f 	.word	0x0800353f
 8002fc0:	0800353f 	.word	0x0800353f
 8002fc4:	0800353f 	.word	0x0800353f
 8002fc8:	0800353f 	.word	0x0800353f
 8002fcc:	0800353f 	.word	0x0800353f
 8002fd0:	0800353f 	.word	0x0800353f
 8002fd4:	0800353f 	.word	0x0800353f
 8002fd8:	0800353f 	.word	0x0800353f
 8002fdc:	0800353f 	.word	0x0800353f
 8002fe0:	0800353f 	.word	0x0800353f
 8002fe4:	0800353f 	.word	0x0800353f
 8002fe8:	0800353f 	.word	0x0800353f
 8002fec:	0800353f 	.word	0x0800353f
 8002ff0:	0800353f 	.word	0x0800353f
 8002ff4:	0800353f 	.word	0x0800353f
 8002ff8:	080030e5 	.word	0x080030e5
 8002ffc:	080030ed 	.word	0x080030ed
 8003000:	080030f5 	.word	0x080030f5
 8003004:	0800353f 	.word	0x0800353f
 8003008:	0800353f 	.word	0x0800353f
 800300c:	0800353f 	.word	0x0800353f
 8003010:	0800353f 	.word	0x0800353f
 8003014:	0800353f 	.word	0x0800353f
 8003018:	0800353f 	.word	0x0800353f
 800301c:	0800353f 	.word	0x0800353f
 8003020:	0800353f 	.word	0x0800353f
 8003024:	0800353f 	.word	0x0800353f
 8003028:	0800353f 	.word	0x0800353f
 800302c:	0800353f 	.word	0x0800353f
 8003030:	0800353f 	.word	0x0800353f
 8003034:	0800353f 	.word	0x0800353f
 8003038:	0800353f 	.word	0x0800353f
 800303c:	0800353f 	.word	0x0800353f
 8003040:	0800353f 	.word	0x0800353f
 8003044:	0800353f 	.word	0x0800353f
 8003048:	0800353f 	.word	0x0800353f
 800304c:	0800353f 	.word	0x0800353f
 8003050:	0800353f 	.word	0x0800353f
 8003054:	0800353f 	.word	0x0800353f
 8003058:	0800353f 	.word	0x0800353f
 800305c:	0800353f 	.word	0x0800353f
 8003060:	0800353f 	.word	0x0800353f
 8003064:	0800353f 	.word	0x0800353f
 8003068:	0800353f 	.word	0x0800353f
 800306c:	0800353f 	.word	0x0800353f
 8003070:	0800353f 	.word	0x0800353f
 8003074:	0800353f 	.word	0x0800353f
 8003078:	080030d3 	.word	0x080030d3
 800307c:	0800353f 	.word	0x0800353f
 8003080:	08003125 	.word	0x08003125
 8003084:	08003429 	.word	0x08003429
	  case FUNC_JOYSTICK_DATA: {
		  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		  int16_t Forward = (unsigned char)RF_RxData[1] | (((uint16_t)RF_RxData[2]) << 8);
 8003088:	4b25      	ldr	r3, [pc, #148]	; (8003120 <main+0x2d0>)
 800308a:	785b      	ldrb	r3, [r3, #1]
 800308c:	b21a      	sxth	r2, r3
 800308e:	4b24      	ldr	r3, [pc, #144]	; (8003120 <main+0x2d0>)
 8003090:	789b      	ldrb	r3, [r3, #2]
 8003092:	021b      	lsls	r3, r3, #8
 8003094:	b21b      	sxth	r3, r3
 8003096:	4313      	orrs	r3, r2
 8003098:	80fb      	strh	r3, [r7, #6]
		  int16_t Direction = (unsigned char)RF_RxData[3] | (((uint16_t)RF_RxData[4]) << 8);
 800309a:	4b21      	ldr	r3, [pc, #132]	; (8003120 <main+0x2d0>)
 800309c:	78db      	ldrb	r3, [r3, #3]
 800309e:	b21a      	sxth	r2, r3
 80030a0:	4b1f      	ldr	r3, [pc, #124]	; (8003120 <main+0x2d0>)
 80030a2:	791b      	ldrb	r3, [r3, #4]
 80030a4:	021b      	lsls	r3, r3, #8
 80030a6:	b21b      	sxth	r3, r3
 80030a8:	4313      	orrs	r3, r2
 80030aa:	80bb      	strh	r3, [r7, #4]
		  int16_t Left = Forward + Direction;
 80030ac:	88fa      	ldrh	r2, [r7, #6]
 80030ae:	88bb      	ldrh	r3, [r7, #4]
 80030b0:	4413      	add	r3, r2
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	807b      	strh	r3, [r7, #2]
		  int16_t Right = Forward - Direction;
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	88bb      	ldrh	r3, [r7, #4]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	b29b      	uxth	r3, r3
 80030be:	803b      	strh	r3, [r7, #0]

		  MotorSetValue(Left, Right);
 80030c0:	f9b7 2000 	ldrsh.w	r2, [r7]
 80030c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fc40 	bl	8002950 <MotorSetValue>
		  break;
 80030d0:	e235      	b.n	800353e <main+0x6ee>
	  }
	  case PROG_CALLIBRATE: {
		  Callibrate(RF_RxData[1]);
 80030d2:	4b13      	ldr	r3, [pc, #76]	; (8003120 <main+0x2d0>)
 80030d4:	785b      	ldrb	r3, [r3, #1]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd ff4c 	bl	8000f74 <Callibrate>
		  SendReturn(0);
 80030dc:	2000      	movs	r0, #0
 80030de:	f7ff fd21 	bl	8002b24 <SendReturn>
		  break;
 80030e2:	e22c      	b.n	800353e <main+0x6ee>
	  }
	  case MODE_ACCELERATION_BURST: {
		  mode = MODE_ACCELERATION_BURST;
 80030e4:	4b0c      	ldr	r3, [pc, #48]	; (8003118 <main+0x2c8>)
 80030e6:	22a0      	movs	r2, #160	; 0xa0
 80030e8:	601a      	str	r2, [r3, #0]
		  break;
 80030ea:	e228      	b.n	800353e <main+0x6ee>
	  }
	  case MODE_VELOCITY_BURST: {
		  mode = MODE_VELOCITY_BURST;
 80030ec:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <main+0x2c8>)
 80030ee:	22a1      	movs	r2, #161	; 0xa1
 80030f0:	601a      	str	r2, [r3, #0]
		  break;
 80030f2:	e224      	b.n	800353e <main+0x6ee>
	  }
	  case MODE_DISTANCE_BURST: {
		  mode = MODE_DISTANCE_BURST;
 80030f4:	4b08      	ldr	r3, [pc, #32]	; (8003118 <main+0x2c8>)
 80030f6:	22a2      	movs	r2, #162	; 0xa2
 80030f8:	601a      	str	r2, [r3, #0]
		  break;
 80030fa:	e220      	b.n	800353e <main+0x6ee>
 80030fc:	40021000 	.word	0x40021000
 8003100:	2000083c 	.word	0x2000083c
 8003104:	2000090c 	.word	0x2000090c
 8003108:	40010c00 	.word	0x40010c00
 800310c:	200000a8 	.word	0x200000a8
 8003110:	20000964 	.word	0x20000964
 8003114:	200007e8 	.word	0x200007e8
 8003118:	200000d0 	.word	0x200000d0
 800311c:	200000b0 	.word	0x200000b0
 8003120:	200008ac 	.word	0x200008ac
	  }
	  case PROG_MOVE_BREAK: {
		  // PROG - START - ACCEL - MAX - DIST - STOP
		  short SSpeed = (unsigned char)RF_RxData[1] | (((uint16_t)RF_RxData[2]) << 8);
 8003124:	4bbc      	ldr	r3, [pc, #752]	; (8003418 <main+0x5c8>)
 8003126:	785b      	ldrb	r3, [r3, #1]
 8003128:	b21a      	sxth	r2, r3
 800312a:	4bbb      	ldr	r3, [pc, #748]	; (8003418 <main+0x5c8>)
 800312c:	789b      	ldrb	r3, [r3, #2]
 800312e:	021b      	lsls	r3, r3, #8
 8003130:	b21b      	sxth	r3, r3
 8003132:	4313      	orrs	r3, r2
 8003134:	86fb      	strh	r3, [r7, #54]	; 0x36
		  short ASpeed = (unsigned char)RF_RxData[3] | (((uint16_t)RF_RxData[4]) << 8);
 8003136:	4bb8      	ldr	r3, [pc, #736]	; (8003418 <main+0x5c8>)
 8003138:	78db      	ldrb	r3, [r3, #3]
 800313a:	b21a      	sxth	r2, r3
 800313c:	4bb6      	ldr	r3, [pc, #728]	; (8003418 <main+0x5c8>)
 800313e:	791b      	ldrb	r3, [r3, #4]
 8003140:	021b      	lsls	r3, r3, #8
 8003142:	b21b      	sxth	r3, r3
 8003144:	4313      	orrs	r3, r2
 8003146:	853b      	strh	r3, [r7, #40]	; 0x28
		  short MSpeed = (unsigned char)RF_RxData[5] | (((uint16_t)RF_RxData[6]) << 8);
 8003148:	4bb3      	ldr	r3, [pc, #716]	; (8003418 <main+0x5c8>)
 800314a:	795b      	ldrb	r3, [r3, #5]
 800314c:	b21a      	sxth	r2, r3
 800314e:	4bb2      	ldr	r3, [pc, #712]	; (8003418 <main+0x5c8>)
 8003150:	799b      	ldrb	r3, [r3, #6]
 8003152:	021b      	lsls	r3, r3, #8
 8003154:	b21b      	sxth	r3, r3
 8003156:	4313      	orrs	r3, r2
 8003158:	84fb      	strh	r3, [r7, #38]	; 0x26
		  short Dist = (unsigned char)RF_RxData[7] | (((uint16_t)RF_RxData[8]) << 8);
 800315a:	4baf      	ldr	r3, [pc, #700]	; (8003418 <main+0x5c8>)
 800315c:	79db      	ldrb	r3, [r3, #7]
 800315e:	b21a      	sxth	r2, r3
 8003160:	4bad      	ldr	r3, [pc, #692]	; (8003418 <main+0x5c8>)
 8003162:	7a1b      	ldrb	r3, [r3, #8]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	b21b      	sxth	r3, r3
 8003168:	4313      	orrs	r3, r2
 800316a:	84bb      	strh	r3, [r7, #36]	; 0x24
		  short ReturnDist = 0;
 800316c:	2300      	movs	r3, #0
 800316e:	86bb      	strh	r3, [r7, #52]	; 0x34
		  short Stop = (unsigned char)RF_RxData[9] | (((uint16_t)RF_RxData[10]) << 8);
 8003170:	4ba9      	ldr	r3, [pc, #676]	; (8003418 <main+0x5c8>)
 8003172:	7a5b      	ldrb	r3, [r3, #9]
 8003174:	b21a      	sxth	r2, r3
 8003176:	4ba8      	ldr	r3, [pc, #672]	; (8003418 <main+0x5c8>)
 8003178:	7a9b      	ldrb	r3, [r3, #10]
 800317a:	021b      	lsls	r3, r3, #8
 800317c:	b21b      	sxth	r3, r3
 800317e:	4313      	orrs	r3, r2
 8003180:	847b      	strh	r3, [r7, #34]	; 0x22
		  double Rot;
		  double P = 0.02, I = 0.1;
 8003182:	a49d      	add	r4, pc, #628	; (adr r4, 80033f8 <main+0x5a8>)
 8003184:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003188:	e9c7 3406 	strd	r3, r4, [r7, #24]
 800318c:	a49c      	add	r4, pc, #624	; (adr r4, 8003400 <main+0x5b0>)
 800318e:	e9d4 3400 	ldrd	r3, r4, [r4]
 8003192:	e9c7 3404 	strd	r3, r4, [r7, #16]
		  Callibrate(255);
 8003196:	20ff      	movs	r0, #255	; 0xff
 8003198:	f7fd feec 	bl	8000f74 <Callibrate>
		  Update();
 800319c:	f7fd fe00 	bl	8000da0 <Update>
		  }
		  MotorSetValue(0, 0);
		  SendReturn(ReturnDist);
		  break;
	  }*/
	  if (Dist > 0){
 80031a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	f340 8114 	ble.w	80033d2 <main+0x582>
			  while(ReturnDist < Dist){
 80031aa:	e087      	b.n	80032bc <main+0x46c>
				  Rot = P * Acceleration[5] + I * Velocity[5]/1000000.0;
 80031ac:	4b9b      	ldr	r3, [pc, #620]	; (800341c <main+0x5cc>)
 80031ae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fd f926 	bl	8000404 <__aeabi_i2d>
 80031b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031bc:	f7fd f98c 	bl	80004d8 <__aeabi_dmul>
 80031c0:	4603      	mov	r3, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	461d      	mov	r5, r3
 80031c6:	4626      	mov	r6, r4
 80031c8:	4b95      	ldr	r3, [pc, #596]	; (8003420 <main+0x5d0>)
 80031ca:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80031ce:	e9d4 3400 	ldrd	r3, r4, [r4]
 80031d2:	4618      	mov	r0, r3
 80031d4:	4621      	mov	r1, r4
 80031d6:	f7fd f951 	bl	800047c <__aeabi_l2d>
 80031da:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80031de:	f7fd f97b 	bl	80004d8 <__aeabi_dmul>
 80031e2:	4603      	mov	r3, r0
 80031e4:	460c      	mov	r4, r1
 80031e6:	4618      	mov	r0, r3
 80031e8:	4621      	mov	r1, r4
 80031ea:	a387      	add	r3, pc, #540	; (adr r3, 8003408 <main+0x5b8>)
 80031ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f0:	f7fd fa9c 	bl	800072c <__aeabi_ddiv>
 80031f4:	4603      	mov	r3, r0
 80031f6:	460c      	mov	r4, r1
 80031f8:	461a      	mov	r2, r3
 80031fa:	4623      	mov	r3, r4
 80031fc:	4628      	mov	r0, r5
 80031fe:	4631      	mov	r1, r6
 8003200:	f7fc ffb4 	bl	800016c <__adddf3>
 8003204:	4603      	mov	r3, r0
 8003206:	460c      	mov	r4, r1
 8003208:	e9c7 3402 	strd	r3, r4, [r7, #8]
				  if (SSpeed < MSpeed) {
 800320c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8003210:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003214:	429a      	cmp	r2, r3
 8003216:	da04      	bge.n	8003222 <main+0x3d2>
					  SSpeed += ASpeed;
 8003218:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800321a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800321c:	4413      	add	r3, r2
 800321e:	b29b      	uxth	r3, r3
 8003220:	86fb      	strh	r3, [r7, #54]	; 0x36
				  }
				  MotorSetValue(-SSpeed -Rot, -SSpeed + Rot);
 8003222:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003226:	425b      	negs	r3, r3
 8003228:	4618      	mov	r0, r3
 800322a:	f7fd f8eb 	bl	8000404 <__aeabi_i2d>
 800322e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003232:	f7fc ff99 	bl	8000168 <__aeabi_dsub>
 8003236:	4603      	mov	r3, r0
 8003238:	460c      	mov	r4, r1
 800323a:	4618      	mov	r0, r3
 800323c:	4621      	mov	r1, r4
 800323e:	f7fd fb5d 	bl	80008fc <__aeabi_d2iz>
 8003242:	4603      	mov	r3, r0
 8003244:	b21c      	sxth	r4, r3
 8003246:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800324a:	425b      	negs	r3, r3
 800324c:	4618      	mov	r0, r3
 800324e:	f7fd f8d9 	bl	8000404 <__aeabi_i2d>
 8003252:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003256:	f7fc ff89 	bl	800016c <__adddf3>
 800325a:	4602      	mov	r2, r0
 800325c:	460b      	mov	r3, r1
 800325e:	4610      	mov	r0, r2
 8003260:	4619      	mov	r1, r3
 8003262:	f7fd fb4b 	bl	80008fc <__aeabi_d2iz>
 8003266:	4603      	mov	r3, r0
 8003268:	b21b      	sxth	r3, r3
 800326a:	4619      	mov	r1, r3
 800326c:	4620      	mov	r0, r4
 800326e:	f7ff fb6f 	bl	8002950 <MotorSetValue>
				  ReturnDist = Distance[0]/1000000000000;
 8003272:	4b6c      	ldr	r3, [pc, #432]	; (8003424 <main+0x5d4>)
 8003274:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003278:	a365      	add	r3, pc, #404	; (adr r3, 8003410 <main+0x5c0>)
 800327a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800327e:	f7fd fb65 	bl	800094c <__aeabi_ldivmod>
 8003282:	4603      	mov	r3, r0
 8003284:	460c      	mov	r4, r1
 8003286:	86bb      	strh	r3, [r7, #52]	; 0x34
				  Update();
 8003288:	f7fd fd8a 	bl	8000da0 <Update>
				  if ((Acceleration[0] > Stop) || (Acceleration[1] > Stop) || (Acceleration[2] > Stop)){
 800328c:	4b63      	ldr	r3, [pc, #396]	; (800341c <main+0x5cc>)
 800328e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003292:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003296:	429a      	cmp	r2, r3
 8003298:	f2c0 80a2 	blt.w	80033e0 <main+0x590>
 800329c:	4b5f      	ldr	r3, [pc, #380]	; (800341c <main+0x5cc>)
 800329e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80032a2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80032a6:	429a      	cmp	r2, r3
 80032a8:	f2c0 809a 	blt.w	80033e0 <main+0x590>
 80032ac:	4b5b      	ldr	r3, [pc, #364]	; (800341c <main+0x5cc>)
 80032ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80032b2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80032b6:	429a      	cmp	r2, r3
 80032b8:	f2c0 8092 	blt.w	80033e0 <main+0x590>
			  while(ReturnDist < Dist){
 80032bc:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80032c0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80032c4:	429a      	cmp	r2, r3
 80032c6:	f6ff af71 	blt.w	80031ac <main+0x35c>
 80032ca:	e089      	b.n	80033e0 <main+0x590>
					  break;	// Uderzenie
				  }
			  }
		  } else {
			  while(ReturnDist > Dist){
				  Rot = P * Acceleration[5] + I * Velocity[5]/1000000.0;
 80032cc:	4b53      	ldr	r3, [pc, #332]	; (800341c <main+0x5cc>)
 80032ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7fd f896 	bl	8000404 <__aeabi_i2d>
 80032d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80032dc:	f7fd f8fc 	bl	80004d8 <__aeabi_dmul>
 80032e0:	4603      	mov	r3, r0
 80032e2:	460c      	mov	r4, r1
 80032e4:	461d      	mov	r5, r3
 80032e6:	4626      	mov	r6, r4
 80032e8:	4b4d      	ldr	r3, [pc, #308]	; (8003420 <main+0x5d0>)
 80032ea:	f103 0428 	add.w	r4, r3, #40	; 0x28
 80032ee:	e9d4 3400 	ldrd	r3, r4, [r4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	4621      	mov	r1, r4
 80032f6:	f7fd f8c1 	bl	800047c <__aeabi_l2d>
 80032fa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032fe:	f7fd f8eb 	bl	80004d8 <__aeabi_dmul>
 8003302:	4603      	mov	r3, r0
 8003304:	460c      	mov	r4, r1
 8003306:	4618      	mov	r0, r3
 8003308:	4621      	mov	r1, r4
 800330a:	a33f      	add	r3, pc, #252	; (adr r3, 8003408 <main+0x5b8>)
 800330c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003310:	f7fd fa0c 	bl	800072c <__aeabi_ddiv>
 8003314:	4603      	mov	r3, r0
 8003316:	460c      	mov	r4, r1
 8003318:	461a      	mov	r2, r3
 800331a:	4623      	mov	r3, r4
 800331c:	4628      	mov	r0, r5
 800331e:	4631      	mov	r1, r6
 8003320:	f7fc ff24 	bl	800016c <__adddf3>
 8003324:	4603      	mov	r3, r0
 8003326:	460c      	mov	r4, r1
 8003328:	e9c7 3402 	strd	r3, r4, [r7, #8]
				  if (SSpeed < MSpeed) {
 800332c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8003330:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003334:	429a      	cmp	r2, r3
 8003336:	da04      	bge.n	8003342 <main+0x4f2>
					  SSpeed += ASpeed;
 8003338:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800333a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800333c:	4413      	add	r3, r2
 800333e:	b29b      	uxth	r3, r3
 8003340:	86fb      	strh	r3, [r7, #54]	; 0x36
				  }
				  MotorSetValue(SSpeed -Rot, SSpeed + Rot);
 8003342:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f85c 	bl	8000404 <__aeabi_i2d>
 800334c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003350:	f7fc ff0a 	bl	8000168 <__aeabi_dsub>
 8003354:	4603      	mov	r3, r0
 8003356:	460c      	mov	r4, r1
 8003358:	4618      	mov	r0, r3
 800335a:	4621      	mov	r1, r4
 800335c:	f7fd face 	bl	80008fc <__aeabi_d2iz>
 8003360:	4603      	mov	r3, r0
 8003362:	b21c      	sxth	r4, r3
 8003364:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f84b 	bl	8000404 <__aeabi_i2d>
 800336e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003372:	f7fc fefb 	bl	800016c <__adddf3>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4610      	mov	r0, r2
 800337c:	4619      	mov	r1, r3
 800337e:	f7fd fabd 	bl	80008fc <__aeabi_d2iz>
 8003382:	4603      	mov	r3, r0
 8003384:	b21b      	sxth	r3, r3
 8003386:	4619      	mov	r1, r3
 8003388:	4620      	mov	r0, r4
 800338a:	f7ff fae1 	bl	8002950 <MotorSetValue>
				  ReturnDist = Distance[0]/1000000000000;
 800338e:	4b25      	ldr	r3, [pc, #148]	; (8003424 <main+0x5d4>)
 8003390:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003394:	a31e      	add	r3, pc, #120	; (adr r3, 8003410 <main+0x5c0>)
 8003396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339a:	f7fd fad7 	bl	800094c <__aeabi_ldivmod>
 800339e:	4603      	mov	r3, r0
 80033a0:	460c      	mov	r4, r1
 80033a2:	86bb      	strh	r3, [r7, #52]	; 0x34
				  Update();
 80033a4:	f7fd fcfc 	bl	8000da0 <Update>
				  if ((Acceleration[0] > Stop) || (Acceleration[1] > Stop) || (Acceleration[2] > Stop)){
 80033a8:	4b1c      	ldr	r3, [pc, #112]	; (800341c <main+0x5cc>)
 80033aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033ae:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80033b2:	429a      	cmp	r2, r3
 80033b4:	db14      	blt.n	80033e0 <main+0x590>
 80033b6:	4b19      	ldr	r3, [pc, #100]	; (800341c <main+0x5cc>)
 80033b8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80033bc:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80033c0:	429a      	cmp	r2, r3
 80033c2:	db0d      	blt.n	80033e0 <main+0x590>
 80033c4:	4b15      	ldr	r3, [pc, #84]	; (800341c <main+0x5cc>)
 80033c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80033ca:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 80033ce:	429a      	cmp	r2, r3
 80033d0:	db06      	blt.n	80033e0 <main+0x590>
			  while(ReturnDist > Dist){
 80033d2:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	; 0x34
 80033d6:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80033da:	429a      	cmp	r2, r3
 80033dc:	f73f af76 	bgt.w	80032cc <main+0x47c>
					  break;	// Uderzenie
				  }
			  }
		  }
		  MotorSetValue(0, 0);
 80033e0:	2100      	movs	r1, #0
 80033e2:	2000      	movs	r0, #0
 80033e4:	f7ff fab4 	bl	8002950 <MotorSetValue>
		  SendReturn(ReturnDist);
 80033e8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fb99 	bl	8002b24 <SendReturn>
		  break;
 80033f2:	e0a4      	b.n	800353e <main+0x6ee>
 80033f4:	f3af 8000 	nop.w
 80033f8:	47ae147b 	.word	0x47ae147b
 80033fc:	3f947ae1 	.word	0x3f947ae1
 8003400:	9999999a 	.word	0x9999999a
 8003404:	3fb99999 	.word	0x3fb99999
 8003408:	00000000 	.word	0x00000000
 800340c:	412e8480 	.word	0x412e8480
 8003410:	d4a51000 	.word	0xd4a51000
 8003414:	000000e8 	.word	0x000000e8
 8003418:	200008ac 	.word	0x200008ac
 800341c:	20000740 	.word	0x20000740
 8003420:	20000758 	.word	0x20000758
 8003424:	200006c8 	.word	0x200006c8
	  }
	  case PROG_ROTATE: {
		  // PROG - START - ACCEL - MAX - ANGLE
		  short SSpeed = (unsigned char)RF_RxData[1] | (((uint16_t)RF_RxData[2]) << 8);
 8003428:	4b4c      	ldr	r3, [pc, #304]	; (800355c <main+0x70c>)
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	b21a      	sxth	r2, r3
 800342e:	4b4b      	ldr	r3, [pc, #300]	; (800355c <main+0x70c>)
 8003430:	789b      	ldrb	r3, [r3, #2]
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	b21b      	sxth	r3, r3
 8003436:	4313      	orrs	r3, r2
 8003438:	85fb      	strh	r3, [r7, #46]	; 0x2e
		  short ASpeed = (unsigned char)RF_RxData[3] | (((uint16_t)RF_RxData[4]) << 8);
 800343a:	4b48      	ldr	r3, [pc, #288]	; (800355c <main+0x70c>)
 800343c:	78db      	ldrb	r3, [r3, #3]
 800343e:	b21a      	sxth	r2, r3
 8003440:	4b46      	ldr	r3, [pc, #280]	; (800355c <main+0x70c>)
 8003442:	791b      	ldrb	r3, [r3, #4]
 8003444:	021b      	lsls	r3, r3, #8
 8003446:	b21b      	sxth	r3, r3
 8003448:	4313      	orrs	r3, r2
 800344a:	85bb      	strh	r3, [r7, #44]	; 0x2c
		  short MSpeed = (unsigned char)RF_RxData[5] | (((uint16_t)RF_RxData[6]) << 8);
 800344c:	4b43      	ldr	r3, [pc, #268]	; (800355c <main+0x70c>)
 800344e:	795b      	ldrb	r3, [r3, #5]
 8003450:	b21a      	sxth	r2, r3
 8003452:	4b42      	ldr	r3, [pc, #264]	; (800355c <main+0x70c>)
 8003454:	799b      	ldrb	r3, [r3, #6]
 8003456:	021b      	lsls	r3, r3, #8
 8003458:	b21b      	sxth	r3, r3
 800345a:	4313      	orrs	r3, r2
 800345c:	867b      	strh	r3, [r7, #50]	; 0x32
		  short Angle = (unsigned char)RF_RxData[7] | (((uint16_t)RF_RxData[8]) << 8);
 800345e:	4b3f      	ldr	r3, [pc, #252]	; (800355c <main+0x70c>)
 8003460:	79db      	ldrb	r3, [r3, #7]
 8003462:	b21a      	sxth	r2, r3
 8003464:	4b3d      	ldr	r3, [pc, #244]	; (800355c <main+0x70c>)
 8003466:	7a1b      	ldrb	r3, [r3, #8]
 8003468:	021b      	lsls	r3, r3, #8
 800346a:	b21b      	sxth	r3, r3
 800346c:	4313      	orrs	r3, r2
 800346e:	857b      	strh	r3, [r7, #42]	; 0x2a
		  short ReturnAngle = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	863b      	strh	r3, [r7, #48]	; 0x30
		  Callibrate(255);
 8003474:	20ff      	movs	r0, #255	; 0xff
 8003476:	f7fd fd7d 	bl	8000f74 <Callibrate>
		  Update();
 800347a:	f7fd fc91 	bl	8000da0 <Update>
		  if (Angle > 0){
 800347e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003482:	2b00      	cmp	r3, #0
 8003484:	dd4b      	ble.n	800351e <main+0x6ce>
			  while(ReturnAngle < Angle){
 8003486:	e021      	b.n	80034cc <main+0x67c>
				  if (SSpeed <= MSpeed) {
 8003488:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800348c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8003490:	429a      	cmp	r2, r3
 8003492:	dc0e      	bgt.n	80034b2 <main+0x662>
					  MotorSetValue(MSpeed, -MSpeed);
 8003494:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003496:	425b      	negs	r3, r3
 8003498:	b29b      	uxth	r3, r3
 800349a:	b21a      	sxth	r2, r3
 800349c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7ff fa54 	bl	8002950 <MotorSetValue>
					  MSpeed -= ASpeed;
 80034a8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80034aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	b29b      	uxth	r3, r3
 80034b0:	867b      	strh	r3, [r7, #50]	; 0x32
				  }
				  ReturnAngle = Velocity[5]/1000000;
 80034b2:	4b2b      	ldr	r3, [pc, #172]	; (8003560 <main+0x710>)
 80034b4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80034b8:	4a2a      	ldr	r2, [pc, #168]	; (8003564 <main+0x714>)
 80034ba:	f04f 0300 	mov.w	r3, #0
 80034be:	f7fd fa45 	bl	800094c <__aeabi_ldivmod>
 80034c2:	4603      	mov	r3, r0
 80034c4:	460c      	mov	r4, r1
 80034c6:	863b      	strh	r3, [r7, #48]	; 0x30
				  Update();
 80034c8:	f7fd fc6a 	bl	8000da0 <Update>
			  while(ReturnAngle < Angle){
 80034cc:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80034d0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80034d4:	429a      	cmp	r2, r3
 80034d6:	dbd7      	blt.n	8003488 <main+0x638>
 80034d8:	e027      	b.n	800352a <main+0x6da>
			  }
		  } else {
			  while(ReturnAngle > Angle){
				  if (SSpeed <= MSpeed) {
 80034da:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80034de:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80034e2:	429a      	cmp	r2, r3
 80034e4:	dc0e      	bgt.n	8003504 <main+0x6b4>
					  MotorSetValue(-MSpeed, MSpeed);
 80034e6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80034e8:	425b      	negs	r3, r3
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	b21b      	sxth	r3, r3
 80034ee:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80034f2:	4611      	mov	r1, r2
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fa2b 	bl	8002950 <MotorSetValue>
					  MSpeed -= ASpeed;
 80034fa:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80034fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	b29b      	uxth	r3, r3
 8003502:	867b      	strh	r3, [r7, #50]	; 0x32
				  }
				  ReturnAngle = Velocity[5]/1000000;
 8003504:	4b16      	ldr	r3, [pc, #88]	; (8003560 <main+0x710>)
 8003506:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800350a:	4a16      	ldr	r2, [pc, #88]	; (8003564 <main+0x714>)
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	f7fd fa1c 	bl	800094c <__aeabi_ldivmod>
 8003514:	4603      	mov	r3, r0
 8003516:	460c      	mov	r4, r1
 8003518:	863b      	strh	r3, [r7, #48]	; 0x30
				  Update();
 800351a:	f7fd fc41 	bl	8000da0 <Update>
			  while(ReturnAngle > Angle){
 800351e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8003522:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8003526:	429a      	cmp	r2, r3
 8003528:	dcd7      	bgt.n	80034da <main+0x68a>
			  }
		  }
		  MotorSetValue(0, 0);
 800352a:	2100      	movs	r1, #0
 800352c:	2000      	movs	r0, #0
 800352e:	f7ff fa0f 	bl	8002950 <MotorSetValue>
		  SendReturn(ReturnAngle);
 8003532:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff faf4 	bl	8002b24 <SendReturn>
		  break;
 800353c:	bf00      	nop
	  }
	  }

	  if (Flag == 1) {
 800353e:	4b0a      	ldr	r3, [pc, #40]	; (8003568 <main+0x718>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	f47f ace6 	bne.w	8002f14 <main+0xc4>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003548:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800354c:	4807      	ldr	r0, [pc, #28]	; (800356c <main+0x71c>)
 800354e:	f001 ffb3 	bl	80054b8 <HAL_GPIO_TogglePin>
		  //char c[3] = {'<', '-'};
		  //SendInt(Counter);
		  //Serial_Send(c, 2);
		  //Counter = 0;
		  Flag = 0;
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <main+0x718>)
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
	  Update();
 8003558:	e4dc      	b.n	8002f14 <main+0xc4>
 800355a:	bf00      	nop
 800355c:	200008ac 	.word	0x200008ac
 8003560:	20000758 	.word	0x20000758
 8003564:	000f4240 	.word	0x000f4240
 8003568:	200002b0 	.word	0x200002b0
 800356c:	40011000 	.word	0x40011000

08003570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b094      	sub	sp, #80	; 0x50
 8003574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800357a:	2228      	movs	r2, #40	; 0x28
 800357c:	2100      	movs	r1, #0
 800357e:	4618      	mov	r0, r3
 8003580:	f005 fb67 	bl	8008c52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003584:	f107 0314 	add.w	r3, r7, #20
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	60da      	str	r2, [r3, #12]
 8003592:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	2200      	movs	r2, #0
 8003598:	601a      	str	r2, [r3, #0]
 800359a:	605a      	str	r2, [r3, #4]
 800359c:	609a      	str	r2, [r3, #8]
 800359e:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80035a0:	2301      	movs	r3, #1
 80035a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80035a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80035aa:	2300      	movs	r3, #0
 80035ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035ae:	2301      	movs	r3, #1
 80035b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035b2:	2302      	movs	r3, #2
 80035b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80035b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80035bc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80035c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035c6:	4618      	mov	r0, r3
 80035c8:	f003 f80c 	bl	80065e4 <HAL_RCC_OscConfig>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80035d2:	f000 fa95 	bl	8003b00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035d6:	230f      	movs	r3, #15
 80035d8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035da:	2302      	movs	r3, #2
 80035dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035e6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035e8:	2300      	movs	r3, #0
 80035ea:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80035ec:	f107 0314 	add.w	r3, r7, #20
 80035f0:	2102      	movs	r1, #2
 80035f2:	4618      	mov	r0, r3
 80035f4:	f003 fa76 	bl	8006ae4 <HAL_RCC_ClockConfig>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80035fe:	f000 fa7f 	bl	8003b00 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003602:	2302      	movs	r3, #2
 8003604:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800360a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800360c:	1d3b      	adds	r3, r7, #4
 800360e:	4618      	mov	r0, r3
 8003610:	f003 fc04 	bl	8006e1c <HAL_RCCEx_PeriphCLKConfig>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800361a:	f000 fa71 	bl	8003b00 <Error_Handler>
  }
}
 800361e:	bf00      	nop
 8003620:	3750      	adds	r7, #80	; 0x50
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800362e:	1d3b      	adds	r3, r7, #4
 8003630:	2200      	movs	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	605a      	str	r2, [r3, #4]
 8003636:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003638:	4b28      	ldr	r3, [pc, #160]	; (80036dc <MX_ADC1_Init+0xb4>)
 800363a:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <MX_ADC1_Init+0xb8>)
 800363c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800363e:	4b27      	ldr	r3, [pc, #156]	; (80036dc <MX_ADC1_Init+0xb4>)
 8003640:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003644:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003646:	4b25      	ldr	r3, [pc, #148]	; (80036dc <MX_ADC1_Init+0xb4>)
 8003648:	2201      	movs	r2, #1
 800364a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800364c:	4b23      	ldr	r3, [pc, #140]	; (80036dc <MX_ADC1_Init+0xb4>)
 800364e:	2200      	movs	r2, #0
 8003650:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003652:	4b22      	ldr	r3, [pc, #136]	; (80036dc <MX_ADC1_Init+0xb4>)
 8003654:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003658:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800365a:	4b20      	ldr	r3, [pc, #128]	; (80036dc <MX_ADC1_Init+0xb4>)
 800365c:	2200      	movs	r2, #0
 800365e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 8003660:	4b1e      	ldr	r3, [pc, #120]	; (80036dc <MX_ADC1_Init+0xb4>)
 8003662:	2203      	movs	r2, #3
 8003664:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003666:	481d      	ldr	r0, [pc, #116]	; (80036dc <MX_ADC1_Init+0xb4>)
 8003668:	f001 f86a 	bl	8004740 <HAL_ADC_Init>
 800366c:	4603      	mov	r3, r0
 800366e:	2b00      	cmp	r3, #0
 8003670:	d001      	beq.n	8003676 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8003672:	f000 fa45 	bl	8003b00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003676:	2303      	movs	r3, #3
 8003678:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800367a:	2301      	movs	r3, #1
 800367c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800367e:	2307      	movs	r3, #7
 8003680:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003682:	1d3b      	adds	r3, r7, #4
 8003684:	4619      	mov	r1, r3
 8003686:	4815      	ldr	r0, [pc, #84]	; (80036dc <MX_ADC1_Init+0xb4>)
 8003688:	f001 fb12 	bl	8004cb0 <HAL_ADC_ConfigChannel>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8003692:	f000 fa35 	bl	8003b00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003696:	2304      	movs	r3, #4
 8003698:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800369a:	2302      	movs	r3, #2
 800369c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	4619      	mov	r1, r3
 80036a2:	480e      	ldr	r0, [pc, #56]	; (80036dc <MX_ADC1_Init+0xb4>)
 80036a4:	f001 fb04 	bl	8004cb0 <HAL_ADC_ConfigChannel>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d001      	beq.n	80036b2 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 80036ae:	f000 fa27 	bl	8003b00 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80036b2:	2302      	movs	r3, #2
 80036b4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80036b6:	2303      	movs	r3, #3
 80036b8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80036be:	1d3b      	adds	r3, r7, #4
 80036c0:	4619      	mov	r1, r3
 80036c2:	4806      	ldr	r0, [pc, #24]	; (80036dc <MX_ADC1_Init+0xb4>)
 80036c4:	f001 faf4 	bl	8004cb0 <HAL_ADC_ConfigChannel>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80036ce:	f000 fa17 	bl	8003b00 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	2000087c 	.word	0x2000087c
 80036e0:	40012400 	.word	0x40012400

080036e4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80036e8:	4b12      	ldr	r3, [pc, #72]	; (8003734 <MX_I2C2_Init+0x50>)
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <MX_I2C2_Init+0x54>)
 80036ec:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 80036ee:	4b11      	ldr	r3, [pc, #68]	; (8003734 <MX_I2C2_Init+0x50>)
 80036f0:	4a12      	ldr	r2, [pc, #72]	; (800373c <MX_I2C2_Init+0x58>)
 80036f2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80036f4:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <MX_I2C2_Init+0x50>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80036fa:	4b0e      	ldr	r3, [pc, #56]	; (8003734 <MX_I2C2_Init+0x50>)
 80036fc:	2200      	movs	r2, #0
 80036fe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <MX_I2C2_Init+0x50>)
 8003702:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003706:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003708:	4b0a      	ldr	r3, [pc, #40]	; (8003734 <MX_I2C2_Init+0x50>)
 800370a:	2200      	movs	r2, #0
 800370c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800370e:	4b09      	ldr	r3, [pc, #36]	; (8003734 <MX_I2C2_Init+0x50>)
 8003710:	2200      	movs	r2, #0
 8003712:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <MX_I2C2_Init+0x50>)
 8003716:	2200      	movs	r2, #0
 8003718:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800371a:	4b06      	ldr	r3, [pc, #24]	; (8003734 <MX_I2C2_Init+0x50>)
 800371c:	2200      	movs	r2, #0
 800371e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8003720:	4804      	ldr	r0, [pc, #16]	; (8003734 <MX_I2C2_Init+0x50>)
 8003722:	f001 fee1 	bl	80054e8 <HAL_I2C_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800372c:	f000 f9e8 	bl	8003b00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8003730:	bf00      	nop
 8003732:	bd80      	pop	{r7, pc}
 8003734:	200007e8 	.word	0x200007e8
 8003738:	40005800 	.word	0x40005800
 800373c:	00061a80 	.word	0x00061a80

08003740 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003744:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <MX_SPI1_Init+0x64>)
 8003746:	4a18      	ldr	r2, [pc, #96]	; (80037a8 <MX_SPI1_Init+0x68>)
 8003748:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800374a:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <MX_SPI1_Init+0x64>)
 800374c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003750:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003752:	4b14      	ldr	r3, [pc, #80]	; (80037a4 <MX_SPI1_Init+0x64>)
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <MX_SPI1_Init+0x64>)
 800375a:	2200      	movs	r2, #0
 800375c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800375e:	4b11      	ldr	r3, [pc, #68]	; (80037a4 <MX_SPI1_Init+0x64>)
 8003760:	2200      	movs	r2, #0
 8003762:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003764:	4b0f      	ldr	r3, [pc, #60]	; (80037a4 <MX_SPI1_Init+0x64>)
 8003766:	2200      	movs	r2, #0
 8003768:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800376a:	4b0e      	ldr	r3, [pc, #56]	; (80037a4 <MX_SPI1_Init+0x64>)
 800376c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003770:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8003772:	4b0c      	ldr	r3, [pc, #48]	; (80037a4 <MX_SPI1_Init+0x64>)
 8003774:	2218      	movs	r2, #24
 8003776:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003778:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <MX_SPI1_Init+0x64>)
 800377a:	2200      	movs	r2, #0
 800377c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800377e:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <MX_SPI1_Init+0x64>)
 8003780:	2200      	movs	r2, #0
 8003782:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003784:	4b07      	ldr	r3, [pc, #28]	; (80037a4 <MX_SPI1_Init+0x64>)
 8003786:	2200      	movs	r2, #0
 8003788:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800378a:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <MX_SPI1_Init+0x64>)
 800378c:	220a      	movs	r2, #10
 800378e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003790:	4804      	ldr	r0, [pc, #16]	; (80037a4 <MX_SPI1_Init+0x64>)
 8003792:	f003 fcb5 	bl	8007100 <HAL_SPI_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800379c:	f000 f9b0 	bl	8003b00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037a0:	bf00      	nop
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	2000090c 	.word	0x2000090c
 80037a8:	40013000 	.word	0x40013000

080037ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037b2:	f107 0308 	add.w	r3, r7, #8
 80037b6:	2200      	movs	r2, #0
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	605a      	str	r2, [r3, #4]
 80037bc:	609a      	str	r2, [r3, #8]
 80037be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037c0:	463b      	mov	r3, r7
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
 80037c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037c8:	4b1d      	ldr	r3, [pc, #116]	; (8003840 <MX_TIM2_Init+0x94>)
 80037ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 80037d0:	4b1b      	ldr	r3, [pc, #108]	; (8003840 <MX_TIM2_Init+0x94>)
 80037d2:	2247      	movs	r2, #71	; 0x47
 80037d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d6:	4b1a      	ldr	r3, [pc, #104]	; (8003840 <MX_TIM2_Init+0x94>)
 80037d8:	2200      	movs	r2, #0
 80037da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535-1;
 80037dc:	4b18      	ldr	r3, [pc, #96]	; (8003840 <MX_TIM2_Init+0x94>)
 80037de:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80037e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037e4:	4b16      	ldr	r3, [pc, #88]	; (8003840 <MX_TIM2_Init+0x94>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037ea:	4b15      	ldr	r3, [pc, #84]	; (8003840 <MX_TIM2_Init+0x94>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037f0:	4813      	ldr	r0, [pc, #76]	; (8003840 <MX_TIM2_Init+0x94>)
 80037f2:	f004 f99f 	bl	8007b34 <HAL_TIM_Base_Init>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80037fc:	f000 f980 	bl	8003b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003804:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003806:	f107 0308 	add.w	r3, r7, #8
 800380a:	4619      	mov	r1, r3
 800380c:	480c      	ldr	r0, [pc, #48]	; (8003840 <MX_TIM2_Init+0x94>)
 800380e:	f004 fc0b 	bl	8008028 <HAL_TIM_ConfigClockSource>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003818:	f000 f972 	bl	8003b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800381c:	2320      	movs	r3, #32
 800381e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003820:	2300      	movs	r3, #0
 8003822:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003824:	463b      	mov	r3, r7
 8003826:	4619      	mov	r1, r3
 8003828:	4805      	ldr	r0, [pc, #20]	; (8003840 <MX_TIM2_Init+0x94>)
 800382a:	f004 ff7d 	bl	8008728 <HAL_TIMEx_MasterConfigSynchronization>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003834:	f000 f964 	bl	8003b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003838:	bf00      	nop
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	20000964 	.word	0x20000964

08003844 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800384a:	f107 0308 	add.w	r3, r7, #8
 800384e:	2200      	movs	r2, #0
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	609a      	str	r2, [r3, #8]
 8003856:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003858:	463b      	mov	r3, r7
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003860:	4b1d      	ldr	r3, [pc, #116]	; (80038d8 <MX_TIM3_Init+0x94>)
 8003862:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <MX_TIM3_Init+0x98>)
 8003864:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8003866:	4b1c      	ldr	r3, [pc, #112]	; (80038d8 <MX_TIM3_Init+0x94>)
 8003868:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800386c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386e:	4b1a      	ldr	r3, [pc, #104]	; (80038d8 <MX_TIM3_Init+0x94>)
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8003874:	4b18      	ldr	r3, [pc, #96]	; (80038d8 <MX_TIM3_Init+0x94>)
 8003876:	f242 720f 	movw	r2, #9999	; 0x270f
 800387a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800387c:	4b16      	ldr	r3, [pc, #88]	; (80038d8 <MX_TIM3_Init+0x94>)
 800387e:	2200      	movs	r2, #0
 8003880:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <MX_TIM3_Init+0x94>)
 8003884:	2200      	movs	r2, #0
 8003886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003888:	4813      	ldr	r0, [pc, #76]	; (80038d8 <MX_TIM3_Init+0x94>)
 800388a:	f004 f953 	bl	8007b34 <HAL_TIM_Base_Init>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8003894:	f000 f934 	bl	8003b00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800389c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800389e:	f107 0308 	add.w	r3, r7, #8
 80038a2:	4619      	mov	r1, r3
 80038a4:	480c      	ldr	r0, [pc, #48]	; (80038d8 <MX_TIM3_Init+0x94>)
 80038a6:	f004 fbbf 	bl	8008028 <HAL_TIM_ConfigClockSource>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80038b0:	f000 f926 	bl	8003b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80038b4:	2320      	movs	r3, #32
 80038b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038b8:	2300      	movs	r3, #0
 80038ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038bc:	463b      	mov	r3, r7
 80038be:	4619      	mov	r1, r3
 80038c0:	4805      	ldr	r0, [pc, #20]	; (80038d8 <MX_TIM3_Init+0x94>)
 80038c2:	f004 ff31 	bl	8008728 <HAL_TIMEx_MasterConfigSynchronization>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d001      	beq.n	80038d0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80038cc:	f000 f918 	bl	8003b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038d0:	bf00      	nop
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	2000083c 	.word	0x2000083c
 80038dc:	40000400 	.word	0x40000400

080038e0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08a      	sub	sp, #40	; 0x28
 80038e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038e6:	f107 0320 	add.w	r3, r7, #32
 80038ea:	2200      	movs	r2, #0
 80038ec:	601a      	str	r2, [r3, #0]
 80038ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038f0:	1d3b      	adds	r3, r7, #4
 80038f2:	2200      	movs	r2, #0
 80038f4:	601a      	str	r2, [r3, #0]
 80038f6:	605a      	str	r2, [r3, #4]
 80038f8:	609a      	str	r2, [r3, #8]
 80038fa:	60da      	str	r2, [r3, #12]
 80038fc:	611a      	str	r2, [r3, #16]
 80038fe:	615a      	str	r2, [r3, #20]
 8003900:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003902:	4b32      	ldr	r3, [pc, #200]	; (80039cc <MX_TIM4_Init+0xec>)
 8003904:	4a32      	ldr	r2, [pc, #200]	; (80039d0 <MX_TIM4_Init+0xf0>)
 8003906:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = MOTOR_PRESCALLER;
 8003908:	4b30      	ldr	r3, [pc, #192]	; (80039cc <MX_TIM4_Init+0xec>)
 800390a:	2247      	movs	r2, #71	; 0x47
 800390c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800390e:	4b2f      	ldr	r3, [pc, #188]	; (80039cc <MX_TIM4_Init+0xec>)
 8003910:	2200      	movs	r2, #0
 8003912:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_COUNTER;
 8003914:	4b2d      	ldr	r3, [pc, #180]	; (80039cc <MX_TIM4_Init+0xec>)
 8003916:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800391a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800391c:	4b2b      	ldr	r3, [pc, #172]	; (80039cc <MX_TIM4_Init+0xec>)
 800391e:	2200      	movs	r2, #0
 8003920:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003922:	4b2a      	ldr	r3, [pc, #168]	; (80039cc <MX_TIM4_Init+0xec>)
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003928:	4828      	ldr	r0, [pc, #160]	; (80039cc <MX_TIM4_Init+0xec>)
 800392a:	f004 f951 	bl	8007bd0 <HAL_TIM_PWM_Init>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8003934:	f000 f8e4 	bl	8003b00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003938:	2300      	movs	r3, #0
 800393a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800393c:	2300      	movs	r3, #0
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003940:	f107 0320 	add.w	r3, r7, #32
 8003944:	4619      	mov	r1, r3
 8003946:	4821      	ldr	r0, [pc, #132]	; (80039cc <MX_TIM4_Init+0xec>)
 8003948:	f004 feee 	bl	8008728 <HAL_TIMEx_MasterConfigSynchronization>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8003952:	f000 f8d5 	bl	8003b00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003956:	2360      	movs	r3, #96	; 0x60
 8003958:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003962:	2300      	movs	r3, #0
 8003964:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003966:	1d3b      	adds	r3, r7, #4
 8003968:	2200      	movs	r2, #0
 800396a:	4619      	mov	r1, r3
 800396c:	4817      	ldr	r0, [pc, #92]	; (80039cc <MX_TIM4_Init+0xec>)
 800396e:	f004 fa95 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8003978:	f000 f8c2 	bl	8003b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800397c:	1d3b      	adds	r3, r7, #4
 800397e:	2204      	movs	r2, #4
 8003980:	4619      	mov	r1, r3
 8003982:	4812      	ldr	r0, [pc, #72]	; (80039cc <MX_TIM4_Init+0xec>)
 8003984:	f004 fa8a 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800398e:	f000 f8b7 	bl	8003b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003992:	1d3b      	adds	r3, r7, #4
 8003994:	2208      	movs	r2, #8
 8003996:	4619      	mov	r1, r3
 8003998:	480c      	ldr	r0, [pc, #48]	; (80039cc <MX_TIM4_Init+0xec>)
 800399a:	f004 fa7f 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80039a4:	f000 f8ac 	bl	8003b00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80039a8:	1d3b      	adds	r3, r7, #4
 80039aa:	220c      	movs	r2, #12
 80039ac:	4619      	mov	r1, r3
 80039ae:	4807      	ldr	r0, [pc, #28]	; (80039cc <MX_TIM4_Init+0xec>)
 80039b0:	f004 fa74 	bl	8007e9c <HAL_TIM_PWM_ConfigChannel>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80039ba:	f000 f8a1 	bl	8003b00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80039be:	4803      	ldr	r0, [pc, #12]	; (80039cc <MX_TIM4_Init+0xec>)
 80039c0:	f000 fd00 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 80039c4:	bf00      	nop
 80039c6:	3728      	adds	r7, #40	; 0x28
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	200007a8 	.word	0x200007a8
 80039d0:	40000800 	.word	0x40000800

080039d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80039d8:	4b11      	ldr	r3, [pc, #68]	; (8003a20 <MX_USART1_UART_Init+0x4c>)
 80039da:	4a12      	ldr	r2, [pc, #72]	; (8003a24 <MX_USART1_UART_Init+0x50>)
 80039dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80039de:	4b10      	ldr	r3, [pc, #64]	; (8003a20 <MX_USART1_UART_Init+0x4c>)
 80039e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80039e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80039e6:	4b0e      	ldr	r3, [pc, #56]	; (8003a20 <MX_USART1_UART_Init+0x4c>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80039ec:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <MX_USART1_UART_Init+0x4c>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80039f2:	4b0b      	ldr	r3, [pc, #44]	; (8003a20 <MX_USART1_UART_Init+0x4c>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80039f8:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <MX_USART1_UART_Init+0x4c>)
 80039fa:	220c      	movs	r2, #12
 80039fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039fe:	4b08      	ldr	r3, [pc, #32]	; (8003a20 <MX_USART1_UART_Init+0x4c>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a04:	4b06      	ldr	r3, [pc, #24]	; (8003a20 <MX_USART1_UART_Init+0x4c>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003a0a:	4805      	ldr	r0, [pc, #20]	; (8003a20 <MX_USART1_UART_Init+0x4c>)
 8003a0c:	f004 fee2 	bl	80087d4 <HAL_UART_Init>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d001      	beq.n	8003a1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003a16:	f000 f873 	bl	8003b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003a1a:	bf00      	nop
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	200008cc 	.word	0x200008cc
 8003a24:	40013800 	.word	0x40013800

08003a28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2e:	f107 0310 	add.w	r3, r7, #16
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	609a      	str	r2, [r3, #8]
 8003a3a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a3c:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	4a2c      	ldr	r2, [pc, #176]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a42:	f043 0310 	orr.w	r3, r3, #16
 8003a46:	6193      	str	r3, [r2, #24]
 8003a48:	4b2a      	ldr	r3, [pc, #168]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	f003 0310 	and.w	r3, r3, #16
 8003a50:	60fb      	str	r3, [r7, #12]
 8003a52:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a54:	4b27      	ldr	r3, [pc, #156]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a56:	699b      	ldr	r3, [r3, #24]
 8003a58:	4a26      	ldr	r2, [pc, #152]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a5a:	f043 0320 	orr.w	r3, r3, #32
 8003a5e:	6193      	str	r3, [r2, #24]
 8003a60:	4b24      	ldr	r3, [pc, #144]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	f003 0320 	and.w	r3, r3, #32
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a6c:	4b21      	ldr	r3, [pc, #132]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	4a20      	ldr	r2, [pc, #128]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a72:	f043 0304 	orr.w	r3, r3, #4
 8003a76:	6193      	str	r3, [r2, #24]
 8003a78:	4b1e      	ldr	r3, [pc, #120]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a7a:	699b      	ldr	r3, [r3, #24]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	607b      	str	r3, [r7, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a84:	4b1b      	ldr	r3, [pc, #108]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	4a1a      	ldr	r2, [pc, #104]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a8a:	f043 0308 	orr.w	r3, r3, #8
 8003a8e:	6193      	str	r3, [r2, #24]
 8003a90:	4b18      	ldr	r3, [pc, #96]	; (8003af4 <MX_GPIO_Init+0xcc>)
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	f003 0308 	and.w	r3, r3, #8
 8003a98:	603b      	str	r3, [r7, #0]
 8003a9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003aa2:	4815      	ldr	r0, [pc, #84]	; (8003af8 <MX_GPIO_Init+0xd0>)
 8003aa4:	f001 fcf0 	bl	8005488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2103      	movs	r1, #3
 8003aac:	4813      	ldr	r0, [pc, #76]	; (8003afc <MX_GPIO_Init+0xd4>)
 8003aae:	f001 fceb 	bl	8005488 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003ab2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab8:	2301      	movs	r3, #1
 8003aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003ac4:	f107 0310 	add.w	r3, r7, #16
 8003ac8:	4619      	mov	r1, r3
 8003aca:	480b      	ldr	r0, [pc, #44]	; (8003af8 <MX_GPIO_Init+0xd0>)
 8003acc:	f001 fb82 	bl	80051d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003adc:	2302      	movs	r3, #2
 8003ade:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae0:	f107 0310 	add.w	r3, r7, #16
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4805      	ldr	r0, [pc, #20]	; (8003afc <MX_GPIO_Init+0xd4>)
 8003ae8:	f001 fb74 	bl	80051d4 <HAL_GPIO_Init>

}
 8003aec:	bf00      	nop
 8003aee:	3720      	adds	r7, #32
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	40011000 	.word	0x40011000
 8003afc:	40010c00 	.word	0x40010c00

08003b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b04:	bf00      	nop
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr

08003b0c <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003b12:	f000 fa7d 	bl	8004010 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c2, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003b16:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	2178      	movs	r1, #120	; 0x78
 8003b1e:	4858      	ldr	r0, [pc, #352]	; (8003c80 <SSD1306_Init+0x174>)
 8003b20:	f002 f936 	bl	8005d90 <HAL_I2C_IsDeviceReady>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	e0a4      	b.n	8003c78 <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8003b2e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003b32:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003b34:	e002      	b.n	8003b3c <SSD1306_Init+0x30>
		p--;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d1f9      	bne.n	8003b36 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003b42:	22ae      	movs	r2, #174	; 0xae
 8003b44:	2100      	movs	r1, #0
 8003b46:	2078      	movs	r0, #120	; 0x78
 8003b48:	f000 fad0 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	2100      	movs	r1, #0
 8003b50:	2078      	movs	r0, #120	; 0x78
 8003b52:	f000 facb 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003b56:	2210      	movs	r2, #16
 8003b58:	2100      	movs	r1, #0
 8003b5a:	2078      	movs	r0, #120	; 0x78
 8003b5c:	f000 fac6 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003b60:	22b0      	movs	r2, #176	; 0xb0
 8003b62:	2100      	movs	r1, #0
 8003b64:	2078      	movs	r0, #120	; 0x78
 8003b66:	f000 fac1 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8003b6a:	22c8      	movs	r2, #200	; 0xc8
 8003b6c:	2100      	movs	r1, #0
 8003b6e:	2078      	movs	r0, #120	; 0x78
 8003b70:	f000 fabc 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8003b74:	2200      	movs	r2, #0
 8003b76:	2100      	movs	r1, #0
 8003b78:	2078      	movs	r0, #120	; 0x78
 8003b7a:	f000 fab7 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8003b7e:	2210      	movs	r2, #16
 8003b80:	2100      	movs	r1, #0
 8003b82:	2078      	movs	r0, #120	; 0x78
 8003b84:	f000 fab2 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003b88:	2240      	movs	r2, #64	; 0x40
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	2078      	movs	r0, #120	; 0x78
 8003b8e:	f000 faad 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003b92:	2281      	movs	r2, #129	; 0x81
 8003b94:	2100      	movs	r1, #0
 8003b96:	2078      	movs	r0, #120	; 0x78
 8003b98:	f000 faa8 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003b9c:	22ff      	movs	r2, #255	; 0xff
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	2078      	movs	r0, #120	; 0x78
 8003ba2:	f000 faa3 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003ba6:	22a1      	movs	r2, #161	; 0xa1
 8003ba8:	2100      	movs	r1, #0
 8003baa:	2078      	movs	r0, #120	; 0x78
 8003bac:	f000 fa9e 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003bb0:	22a6      	movs	r2, #166	; 0xa6
 8003bb2:	2100      	movs	r1, #0
 8003bb4:	2078      	movs	r0, #120	; 0x78
 8003bb6:	f000 fa99 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8003bba:	22a8      	movs	r2, #168	; 0xa8
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	2078      	movs	r0, #120	; 0x78
 8003bc0:	f000 fa94 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003bc4:	223f      	movs	r2, #63	; 0x3f
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	2078      	movs	r0, #120	; 0x78
 8003bca:	f000 fa8f 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003bce:	22a4      	movs	r2, #164	; 0xa4
 8003bd0:	2100      	movs	r1, #0
 8003bd2:	2078      	movs	r0, #120	; 0x78
 8003bd4:	f000 fa8a 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003bd8:	22d3      	movs	r2, #211	; 0xd3
 8003bda:	2100      	movs	r1, #0
 8003bdc:	2078      	movs	r0, #120	; 0x78
 8003bde:	f000 fa85 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003be2:	2200      	movs	r2, #0
 8003be4:	2100      	movs	r1, #0
 8003be6:	2078      	movs	r0, #120	; 0x78
 8003be8:	f000 fa80 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8003bec:	22d5      	movs	r2, #213	; 0xd5
 8003bee:	2100      	movs	r1, #0
 8003bf0:	2078      	movs	r0, #120	; 0x78
 8003bf2:	f000 fa7b 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003bf6:	22f0      	movs	r2, #240	; 0xf0
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	2078      	movs	r0, #120	; 0x78
 8003bfc:	f000 fa76 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003c00:	22d9      	movs	r2, #217	; 0xd9
 8003c02:	2100      	movs	r1, #0
 8003c04:	2078      	movs	r0, #120	; 0x78
 8003c06:	f000 fa71 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8003c0a:	2222      	movs	r2, #34	; 0x22
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	2078      	movs	r0, #120	; 0x78
 8003c10:	f000 fa6c 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003c14:	22da      	movs	r2, #218	; 0xda
 8003c16:	2100      	movs	r1, #0
 8003c18:	2078      	movs	r0, #120	; 0x78
 8003c1a:	f000 fa67 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8003c1e:	2212      	movs	r2, #18
 8003c20:	2100      	movs	r1, #0
 8003c22:	2078      	movs	r0, #120	; 0x78
 8003c24:	f000 fa62 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003c28:	22db      	movs	r2, #219	; 0xdb
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	2078      	movs	r0, #120	; 0x78
 8003c2e:	f000 fa5d 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003c32:	2220      	movs	r2, #32
 8003c34:	2100      	movs	r1, #0
 8003c36:	2078      	movs	r0, #120	; 0x78
 8003c38:	f000 fa58 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003c3c:	228d      	movs	r2, #141	; 0x8d
 8003c3e:	2100      	movs	r1, #0
 8003c40:	2078      	movs	r0, #120	; 0x78
 8003c42:	f000 fa53 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003c46:	2214      	movs	r2, #20
 8003c48:	2100      	movs	r1, #0
 8003c4a:	2078      	movs	r0, #120	; 0x78
 8003c4c:	f000 fa4e 	bl	80040ec <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003c50:	22af      	movs	r2, #175	; 0xaf
 8003c52:	2100      	movs	r1, #0
 8003c54:	2078      	movs	r0, #120	; 0x78
 8003c56:	f000 fa49 	bl	80040ec <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8003c5a:	2000      	movs	r0, #0
 8003c5c:	f000 f842 	bl	8003ce4 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003c60:	f000 f812 	bl	8003c88 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003c64:	4b07      	ldr	r3, [pc, #28]	; (8003c84 <SSD1306_Init+0x178>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8003c6a:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <SSD1306_Init+0x178>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <SSD1306_Init+0x178>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8003c76:	2301      	movs	r3, #1
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	200007e8 	.word	0x200007e8
 8003c84:	200006b4 	.word	0x200006b4

08003c88 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8003c8e:	2300      	movs	r3, #0
 8003c90:	71fb      	strb	r3, [r7, #7]
 8003c92:	e01d      	b.n	8003cd0 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	3b50      	subs	r3, #80	; 0x50
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	2078      	movs	r0, #120	; 0x78
 8003ca0:	f000 fa24 	bl	80040ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	2078      	movs	r0, #120	; 0x78
 8003caa:	f000 fa1f 	bl	80040ec <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8003cae:	2210      	movs	r2, #16
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	2078      	movs	r0, #120	; 0x78
 8003cb4:	f000 fa1a 	bl	80040ec <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	01db      	lsls	r3, r3, #7
 8003cbc:	4a08      	ldr	r2, [pc, #32]	; (8003ce0 <SSD1306_UpdateScreen+0x58>)
 8003cbe:	441a      	add	r2, r3
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	2140      	movs	r1, #64	; 0x40
 8003cc4:	2078      	movs	r0, #120	; 0x78
 8003cc6:	f000 f9b7 	bl	8004038 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	71fb      	strb	r3, [r7, #7]
 8003cd0:	79fb      	ldrb	r3, [r7, #7]
 8003cd2:	2b07      	cmp	r3, #7
 8003cd4:	d9de      	bls.n	8003c94 <SSD1306_UpdateScreen+0xc>
	}
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	200002b4 	.word	0x200002b4

08003ce4 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	4603      	mov	r3, r0
 8003cec:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003cee:	79fb      	ldrb	r3, [r7, #7]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d101      	bne.n	8003cf8 <SSD1306_Fill+0x14>
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	e000      	b.n	8003cfa <SSD1306_Fill+0x16>
 8003cf8:	23ff      	movs	r3, #255	; 0xff
 8003cfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4803      	ldr	r0, [pc, #12]	; (8003d10 <SSD1306_Fill+0x2c>)
 8003d02:	f004 ffa6 	bl	8008c52 <memset>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	200002b4 	.word	0x200002b4

08003d14 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	80fb      	strh	r3, [r7, #6]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	80bb      	strh	r3, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	70fb      	strb	r3, [r7, #3]
	if (
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	2b7f      	cmp	r3, #127	; 0x7f
 8003d2a:	d848      	bhi.n	8003dbe <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003d2c:	88bb      	ldrh	r3, [r7, #4]
 8003d2e:	2b3f      	cmp	r3, #63	; 0x3f
 8003d30:	d845      	bhi.n	8003dbe <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003d32:	4b25      	ldr	r3, [pc, #148]	; (8003dc8 <SSD1306_DrawPixel+0xb4>)
 8003d34:	791b      	ldrb	r3, [r3, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d006      	beq.n	8003d48 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003d3a:	78fb      	ldrb	r3, [r7, #3]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	bf0c      	ite	eq
 8003d40:	2301      	moveq	r3, #1
 8003d42:	2300      	movne	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003d48:	78fb      	ldrb	r3, [r7, #3]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d11a      	bne.n	8003d84 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003d4e:	88fa      	ldrh	r2, [r7, #6]
 8003d50:	88bb      	ldrh	r3, [r7, #4]
 8003d52:	08db      	lsrs	r3, r3, #3
 8003d54:	b298      	uxth	r0, r3
 8003d56:	4603      	mov	r3, r0
 8003d58:	01db      	lsls	r3, r3, #7
 8003d5a:	4413      	add	r3, r2
 8003d5c:	4a1b      	ldr	r2, [pc, #108]	; (8003dcc <SSD1306_DrawPixel+0xb8>)
 8003d5e:	5cd3      	ldrb	r3, [r2, r3]
 8003d60:	b25a      	sxtb	r2, r3
 8003d62:	88bb      	ldrh	r3, [r7, #4]
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	2101      	movs	r1, #1
 8003d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6e:	b25b      	sxtb	r3, r3
 8003d70:	4313      	orrs	r3, r2
 8003d72:	b259      	sxtb	r1, r3
 8003d74:	88fa      	ldrh	r2, [r7, #6]
 8003d76:	4603      	mov	r3, r0
 8003d78:	01db      	lsls	r3, r3, #7
 8003d7a:	4413      	add	r3, r2
 8003d7c:	b2c9      	uxtb	r1, r1
 8003d7e:	4a13      	ldr	r2, [pc, #76]	; (8003dcc <SSD1306_DrawPixel+0xb8>)
 8003d80:	54d1      	strb	r1, [r2, r3]
 8003d82:	e01d      	b.n	8003dc0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003d84:	88fa      	ldrh	r2, [r7, #6]
 8003d86:	88bb      	ldrh	r3, [r7, #4]
 8003d88:	08db      	lsrs	r3, r3, #3
 8003d8a:	b298      	uxth	r0, r3
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	01db      	lsls	r3, r3, #7
 8003d90:	4413      	add	r3, r2
 8003d92:	4a0e      	ldr	r2, [pc, #56]	; (8003dcc <SSD1306_DrawPixel+0xb8>)
 8003d94:	5cd3      	ldrb	r3, [r2, r3]
 8003d96:	b25a      	sxtb	r2, r3
 8003d98:	88bb      	ldrh	r3, [r7, #4]
 8003d9a:	f003 0307 	and.w	r3, r3, #7
 8003d9e:	2101      	movs	r1, #1
 8003da0:	fa01 f303 	lsl.w	r3, r1, r3
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	43db      	mvns	r3, r3
 8003da8:	b25b      	sxtb	r3, r3
 8003daa:	4013      	ands	r3, r2
 8003dac:	b259      	sxtb	r1, r3
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	4603      	mov	r3, r0
 8003db2:	01db      	lsls	r3, r3, #7
 8003db4:	4413      	add	r3, r2
 8003db6:	b2c9      	uxtb	r1, r1
 8003db8:	4a04      	ldr	r2, [pc, #16]	; (8003dcc <SSD1306_DrawPixel+0xb8>)
 8003dba:	54d1      	strb	r1, [r2, r3]
 8003dbc:	e000      	b.n	8003dc0 <SSD1306_DrawPixel+0xac>
		return;
 8003dbe:	bf00      	nop
	}
}
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	200006b4 	.word	0x200006b4
 8003dcc:	200002b4 	.word	0x200002b4

08003dd0 <SSD1306_DrawIcon16x16>:

void SSD1306_DrawIcon16x16(int x, int y, char* Icon) {
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b088      	sub	sp, #32
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
	for (int a = 0; a  < 16; a++){
 8003ddc:	2300      	movs	r3, #0
 8003dde:	61fb      	str	r3, [r7, #28]
 8003de0:	e052      	b.n	8003e88 <SSD1306_DrawIcon16x16+0xb8>
		for (int b = 0; b < 8; b++){
 8003de2:	2300      	movs	r3, #0
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e021      	b.n	8003e2c <SSD1306_DrawIcon16x16+0x5c>
			SSD1306_DrawPixel(8-b+x,a+y, (Icon[a*2] >> b) & 1);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	b29a      	uxth	r2, r3
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3308      	adds	r3, #8
 8003df6:	b298      	uxth	r0, r3
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	b299      	uxth	r1, r3
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	005b      	lsls	r3, r3, #1
 8003e08:	461a      	mov	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	461a      	mov	r2, r3
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	fa42 f303 	asr.w	r3, r2, r3
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	f7ff ff77 	bl	8003d14 <SSD1306_DrawPixel>
		for (int b = 0; b < 8; b++){
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	3301      	adds	r3, #1
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	2b07      	cmp	r3, #7
 8003e30:	ddda      	ble.n	8003de8 <SSD1306_DrawIcon16x16+0x18>
		}
		for (int b = 0; b < 8; b++){
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	e021      	b.n	8003e7c <SSD1306_DrawIcon16x16+0xac>
			SSD1306_DrawPixel(8-b+8+x,a+y, (Icon[a*2+1] >> b) & 1);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	3310      	adds	r3, #16
 8003e46:	b298      	uxth	r0, r3
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	b299      	uxth	r1, r3
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	3301      	adds	r3, #1
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	461a      	mov	r2, r3
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	fa42 f303 	asr.w	r3, r2, r3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	461a      	mov	r2, r3
 8003e72:	f7ff ff4f 	bl	8003d14 <SSD1306_DrawPixel>
		for (int b = 0; b < 8; b++){
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b07      	cmp	r3, #7
 8003e80:	ddda      	ble.n	8003e38 <SSD1306_DrawIcon16x16+0x68>
	for (int a = 0; a  < 16; a++){
 8003e82:	69fb      	ldr	r3, [r7, #28]
 8003e84:	3301      	adds	r3, #1
 8003e86:	61fb      	str	r3, [r7, #28]
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	2b0f      	cmp	r3, #15
 8003e8c:	dda9      	ble.n	8003de2 <SSD1306_DrawIcon16x16+0x12>
		}
	}
}
 8003e8e:	bf00      	nop
 8003e90:	3720      	adds	r7, #32
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
	...

08003e98 <SSD1306_GotoXY>:
		}
		row++;
	}
}

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	460a      	mov	r2, r1
 8003ea2:	80fb      	strh	r3, [r7, #6]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003ea8:	4a05      	ldr	r2, [pc, #20]	; (8003ec0 <SSD1306_GotoXY+0x28>)
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003eae:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <SSD1306_GotoXY+0x28>)
 8003eb0:	88bb      	ldrh	r3, [r7, #4]
 8003eb2:	8053      	strh	r3, [r2, #2]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bc80      	pop	{r7}
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	200006b4 	.word	0x200006b4

08003ec4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	4603      	mov	r3, r0
 8003ecc:	6039      	str	r1, [r7, #0]
 8003ece:	71fb      	strb	r3, [r7, #7]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003ed4:	4b3a      	ldr	r3, [pc, #232]	; (8003fc0 <SSD1306_Putc+0xfc>)
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	461a      	mov	r2, r3
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	4413      	add	r3, r2
	if (
 8003ee0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ee2:	dc07      	bgt.n	8003ef4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8003ee4:	4b36      	ldr	r3, [pc, #216]	; (8003fc0 <SSD1306_Putc+0xfc>)
 8003ee6:	885b      	ldrh	r3, [r3, #2]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003ef0:	2b3f      	cmp	r3, #63	; 0x3f
 8003ef2:	dd01      	ble.n	8003ef8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	e05e      	b.n	8003fb6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003ef8:	2300      	movs	r3, #0
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	e04b      	b.n	8003f96 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	79fb      	ldrb	r3, [r7, #7]
 8003f04:	3b20      	subs	r3, #32
 8003f06:	6839      	ldr	r1, [r7, #0]
 8003f08:	7849      	ldrb	r1, [r1, #1]
 8003f0a:	fb01 f303 	mul.w	r3, r1, r3
 8003f0e:	4619      	mov	r1, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	440b      	add	r3, r1
 8003f14:	005b      	lsls	r3, r3, #1
 8003f16:	4413      	add	r3, r2
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	613b      	str	r3, [r7, #16]
 8003f20:	e030      	b.n	8003f84 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d010      	beq.n	8003f54 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8003f32:	4b23      	ldr	r3, [pc, #140]	; (8003fc0 <SSD1306_Putc+0xfc>)
 8003f34:	881a      	ldrh	r2, [r3, #0]
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	b29b      	uxth	r3, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	b298      	uxth	r0, r3
 8003f3e:	4b20      	ldr	r3, [pc, #128]	; (8003fc0 <SSD1306_Putc+0xfc>)
 8003f40:	885a      	ldrh	r2, [r3, #2]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	4413      	add	r3, r2
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	79ba      	ldrb	r2, [r7, #6]
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	f7ff fee1 	bl	8003d14 <SSD1306_DrawPixel>
 8003f52:	e014      	b.n	8003f7e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8003f54:	4b1a      	ldr	r3, [pc, #104]	; (8003fc0 <SSD1306_Putc+0xfc>)
 8003f56:	881a      	ldrh	r2, [r3, #0]
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	4413      	add	r3, r2
 8003f5e:	b298      	uxth	r0, r3
 8003f60:	4b17      	ldr	r3, [pc, #92]	; (8003fc0 <SSD1306_Putc+0xfc>)
 8003f62:	885a      	ldrh	r2, [r3, #2]
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	4413      	add	r3, r2
 8003f6a:	b299      	uxth	r1, r3
 8003f6c:	79bb      	ldrb	r3, [r7, #6]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	bf0c      	ite	eq
 8003f72:	2301      	moveq	r3, #1
 8003f74:	2300      	movne	r3, #0
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f7ff fecb 	bl	8003d14 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3301      	adds	r3, #1
 8003f82:	613b      	str	r3, [r7, #16]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d3c8      	bcc.n	8003f22 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	3301      	adds	r3, #1
 8003f94:	617b      	str	r3, [r7, #20]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	785b      	ldrb	r3, [r3, #1]
 8003f9a:	461a      	mov	r2, r3
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d3ad      	bcc.n	8003efe <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8003fa2:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <SSD1306_Putc+0xfc>)
 8003fa4:	881a      	ldrh	r2, [r3, #0]
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	4b03      	ldr	r3, [pc, #12]	; (8003fc0 <SSD1306_Putc+0xfc>)
 8003fb2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8003fb4:	79fb      	ldrb	r3, [r7, #7]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3718      	adds	r7, #24
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	200006b4 	.word	0x200006b4

08003fc4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003fd2:	e012      	b.n	8003ffa <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	79fa      	ldrb	r2, [r7, #7]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff ff71 	bl	8003ec4 <SSD1306_Putc>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d002      	beq.n	8003ff4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	e008      	b.n	8004006 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d1e8      	bne.n	8003fd4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	781b      	ldrb	r3, [r3, #0]
}
 8004006:	4618      	mov	r0, r3
 8004008:	3710      	adds	r7, #16
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
	...

08004010 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <ssd1306_I2C_Init+0x24>)
 8004018:	607b      	str	r3, [r7, #4]
	while(p>0)
 800401a:	e002      	b.n	8004022 <ssd1306_I2C_Init+0x12>
		p--;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	3b01      	subs	r3, #1
 8004020:	607b      	str	r3, [r7, #4]
	while(p>0)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f9      	bne.n	800401c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c2);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	0003d090 	.word	0x0003d090

08004038 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8004038:	b5b0      	push	{r4, r5, r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af02      	add	r7, sp, #8
 800403e:	603a      	str	r2, [r7, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	4603      	mov	r3, r0
 8004044:	71fb      	strb	r3, [r7, #7]
 8004046:	460b      	mov	r3, r1
 8004048:	71bb      	strb	r3, [r7, #6]
 800404a:	4613      	mov	r3, r2
 800404c:	80bb      	strh	r3, [r7, #4]
 800404e:	466b      	mov	r3, sp
 8004050:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8004052:	88bb      	ldrh	r3, [r7, #4]
 8004054:	1c58      	adds	r0, r3, #1
 8004056:	1e43      	subs	r3, r0, #1
 8004058:	613b      	str	r3, [r7, #16]
 800405a:	4603      	mov	r3, r0
 800405c:	4619      	mov	r1, r3
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	f04f 0400 	mov.w	r4, #0
 800406a:	00d4      	lsls	r4, r2, #3
 800406c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004070:	00cb      	lsls	r3, r1, #3
 8004072:	4603      	mov	r3, r0
 8004074:	4619      	mov	r1, r3
 8004076:	f04f 0200 	mov.w	r2, #0
 800407a:	f04f 0300 	mov.w	r3, #0
 800407e:	f04f 0400 	mov.w	r4, #0
 8004082:	00d4      	lsls	r4, r2, #3
 8004084:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004088:	00cb      	lsls	r3, r1, #3
 800408a:	4603      	mov	r3, r0
 800408c:	3307      	adds	r3, #7
 800408e:	08db      	lsrs	r3, r3, #3
 8004090:	00db      	lsls	r3, r3, #3
 8004092:	ebad 0d03 	sub.w	sp, sp, r3
 8004096:	ab02      	add	r3, sp, #8
 8004098:	3300      	adds	r3, #0
 800409a:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	79ba      	ldrb	r2, [r7, #6]
 80040a0:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 80040a2:	2301      	movs	r3, #1
 80040a4:	75fb      	strb	r3, [r7, #23]
 80040a6:	e00a      	b.n	80040be <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	683a      	ldr	r2, [r7, #0]
 80040ae:	441a      	add	r2, r3
 80040b0:	7dfb      	ldrb	r3, [r7, #23]
 80040b2:	7811      	ldrb	r1, [r2, #0]
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 80040b8:	7dfb      	ldrb	r3, [r7, #23]
 80040ba:	3301      	adds	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
 80040be:	7dfb      	ldrb	r3, [r7, #23]
 80040c0:	b29b      	uxth	r3, r3
 80040c2:	88ba      	ldrh	r2, [r7, #4]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	d2ef      	bcs.n	80040a8 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, count, 10);
 80040c8:	79fb      	ldrb	r3, [r7, #7]
 80040ca:	b299      	uxth	r1, r3
 80040cc:	68fa      	ldr	r2, [r7, #12]
 80040ce:	88b8      	ldrh	r0, [r7, #4]
 80040d0:	230a      	movs	r3, #10
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4603      	mov	r3, r0
 80040d6:	4804      	ldr	r0, [pc, #16]	; (80040e8 <ssd1306_I2C_WriteMulti+0xb0>)
 80040d8:	f001 fb2e 	bl	8005738 <HAL_I2C_Master_Transmit>
 80040dc:	46ad      	mov	sp, r5
}
 80040de:	bf00      	nop
 80040e0:	3718      	adds	r7, #24
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bdb0      	pop	{r4, r5, r7, pc}
 80040e6:	bf00      	nop
 80040e8:	200007e8 	.word	0x200007e8

080040ec <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b086      	sub	sp, #24
 80040f0:	af02      	add	r7, sp, #8
 80040f2:	4603      	mov	r3, r0
 80040f4:	71fb      	strb	r3, [r7, #7]
 80040f6:	460b      	mov	r3, r1
 80040f8:	71bb      	strb	r3, [r7, #6]
 80040fa:	4613      	mov	r3, r2
 80040fc:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80040fe:	79bb      	ldrb	r3, [r7, #6]
 8004100:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8004102:	797b      	ldrb	r3, [r7, #5]
 8004104:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c2, address, dt, 2, 10);
 8004106:	79fb      	ldrb	r3, [r7, #7]
 8004108:	b299      	uxth	r1, r3
 800410a:	f107 020c 	add.w	r2, r7, #12
 800410e:	230a      	movs	r3, #10
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2302      	movs	r3, #2
 8004114:	4803      	ldr	r0, [pc, #12]	; (8004124 <ssd1306_I2C_Write+0x38>)
 8004116:	f001 fb0f 	bl	8005738 <HAL_I2C_Master_Transmit>
}
 800411a:	bf00      	nop
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	200007e8 	.word	0x200007e8

08004128 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004128:	b480      	push	{r7}
 800412a:	b085      	sub	sp, #20
 800412c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800412e:	4b15      	ldr	r3, [pc, #84]	; (8004184 <HAL_MspInit+0x5c>)
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	4a14      	ldr	r2, [pc, #80]	; (8004184 <HAL_MspInit+0x5c>)
 8004134:	f043 0301 	orr.w	r3, r3, #1
 8004138:	6193      	str	r3, [r2, #24]
 800413a:	4b12      	ldr	r3, [pc, #72]	; (8004184 <HAL_MspInit+0x5c>)
 800413c:	699b      	ldr	r3, [r3, #24]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
 8004144:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_MspInit+0x5c>)
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	4a0e      	ldr	r2, [pc, #56]	; (8004184 <HAL_MspInit+0x5c>)
 800414c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004150:	61d3      	str	r3, [r2, #28]
 8004152:	4b0c      	ldr	r3, [pc, #48]	; (8004184 <HAL_MspInit+0x5c>)
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800415a:	607b      	str	r3, [r7, #4]
 800415c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800415e:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <HAL_MspInit+0x60>)
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004172:	60fb      	str	r3, [r7, #12]
 8004174:	4a04      	ldr	r2, [pc, #16]	; (8004188 <HAL_MspInit+0x60>)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800417a:	bf00      	nop
 800417c:	3714      	adds	r7, #20
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr
 8004184:	40021000 	.word	0x40021000
 8004188:	40010000 	.word	0x40010000

0800418c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004194:	f107 0310 	add.w	r3, r7, #16
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	605a      	str	r2, [r3, #4]
 800419e:	609a      	str	r2, [r3, #8]
 80041a0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <HAL_ADC_MspInit+0x6c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d121      	bne.n	80041f0 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80041ac:	4b13      	ldr	r3, [pc, #76]	; (80041fc <HAL_ADC_MspInit+0x70>)
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	4a12      	ldr	r2, [pc, #72]	; (80041fc <HAL_ADC_MspInit+0x70>)
 80041b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041b6:	6193      	str	r3, [r2, #24]
 80041b8:	4b10      	ldr	r3, [pc, #64]	; (80041fc <HAL_ADC_MspInit+0x70>)
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041c0:	60fb      	str	r3, [r7, #12]
 80041c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041c4:	4b0d      	ldr	r3, [pc, #52]	; (80041fc <HAL_ADC_MspInit+0x70>)
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	4a0c      	ldr	r2, [pc, #48]	; (80041fc <HAL_ADC_MspInit+0x70>)
 80041ca:	f043 0304 	orr.w	r3, r3, #4
 80041ce:	6193      	str	r3, [r2, #24]
 80041d0:	4b0a      	ldr	r3, [pc, #40]	; (80041fc <HAL_ADC_MspInit+0x70>)
 80041d2:	699b      	ldr	r3, [r3, #24]
 80041d4:	f003 0304 	and.w	r3, r3, #4
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = VBUS_3V3_Pin|BAT_3V7_Pin|BAT_7V6_Pin;
 80041dc:	231c      	movs	r3, #28
 80041de:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80041e0:	2303      	movs	r3, #3
 80041e2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041e4:	f107 0310 	add.w	r3, r7, #16
 80041e8:	4619      	mov	r1, r3
 80041ea:	4805      	ldr	r0, [pc, #20]	; (8004200 <HAL_ADC_MspInit+0x74>)
 80041ec:	f000 fff2 	bl	80051d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80041f0:	bf00      	nop
 80041f2:	3720      	adds	r7, #32
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	40012400 	.word	0x40012400
 80041fc:	40021000 	.word	0x40021000
 8004200:	40010800 	.word	0x40010800

08004204 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420c:	f107 0310 	add.w	r3, r7, #16
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a16      	ldr	r2, [pc, #88]	; (8004278 <HAL_I2C_MspInit+0x74>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d124      	bne.n	800426e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004224:	4b15      	ldr	r3, [pc, #84]	; (800427c <HAL_I2C_MspInit+0x78>)
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	4a14      	ldr	r2, [pc, #80]	; (800427c <HAL_I2C_MspInit+0x78>)
 800422a:	f043 0308 	orr.w	r3, r3, #8
 800422e:	6193      	str	r3, [r2, #24]
 8004230:	4b12      	ldr	r3, [pc, #72]	; (800427c <HAL_I2C_MspInit+0x78>)
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 0308 	and.w	r3, r3, #8
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800423c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004240:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004242:	2312      	movs	r3, #18
 8004244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004246:	2303      	movs	r3, #3
 8004248:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800424a:	f107 0310 	add.w	r3, r7, #16
 800424e:	4619      	mov	r1, r3
 8004250:	480b      	ldr	r0, [pc, #44]	; (8004280 <HAL_I2C_MspInit+0x7c>)
 8004252:	f000 ffbf 	bl	80051d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004256:	4b09      	ldr	r3, [pc, #36]	; (800427c <HAL_I2C_MspInit+0x78>)
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	4a08      	ldr	r2, [pc, #32]	; (800427c <HAL_I2C_MspInit+0x78>)
 800425c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004260:	61d3      	str	r3, [r2, #28]
 8004262:	4b06      	ldr	r3, [pc, #24]	; (800427c <HAL_I2C_MspInit+0x78>)
 8004264:	69db      	ldr	r3, [r3, #28]
 8004266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800426e:	bf00      	nop
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop
 8004278:	40005800 	.word	0x40005800
 800427c:	40021000 	.word	0x40021000
 8004280:	40010c00 	.word	0x40010c00

08004284 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800428c:	f107 0310 	add.w	r3, r7, #16
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	609a      	str	r2, [r3, #8]
 8004298:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1b      	ldr	r2, [pc, #108]	; (800430c <HAL_SPI_MspInit+0x88>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d12f      	bne.n	8004304 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80042a4:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <HAL_SPI_MspInit+0x8c>)
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	4a19      	ldr	r2, [pc, #100]	; (8004310 <HAL_SPI_MspInit+0x8c>)
 80042aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042ae:	6193      	str	r3, [r2, #24]
 80042b0:	4b17      	ldr	r3, [pc, #92]	; (8004310 <HAL_SPI_MspInit+0x8c>)
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042bc:	4b14      	ldr	r3, [pc, #80]	; (8004310 <HAL_SPI_MspInit+0x8c>)
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	4a13      	ldr	r2, [pc, #76]	; (8004310 <HAL_SPI_MspInit+0x8c>)
 80042c2:	f043 0304 	orr.w	r3, r3, #4
 80042c6:	6193      	str	r3, [r2, #24]
 80042c8:	4b11      	ldr	r3, [pc, #68]	; (8004310 <HAL_SPI_MspInit+0x8c>)
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80042d4:	23a0      	movs	r3, #160	; 0xa0
 80042d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042d8:	2302      	movs	r3, #2
 80042da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80042dc:	2303      	movs	r3, #3
 80042de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042e0:	f107 0310 	add.w	r3, r7, #16
 80042e4:	4619      	mov	r1, r3
 80042e6:	480b      	ldr	r0, [pc, #44]	; (8004314 <HAL_SPI_MspInit+0x90>)
 80042e8:	f000 ff74 	bl	80051d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80042ec:	2340      	movs	r3, #64	; 0x40
 80042ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80042f0:	2300      	movs	r3, #0
 80042f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042f8:	f107 0310 	add.w	r3, r7, #16
 80042fc:	4619      	mov	r1, r3
 80042fe:	4805      	ldr	r0, [pc, #20]	; (8004314 <HAL_SPI_MspInit+0x90>)
 8004300:	f000 ff68 	bl	80051d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8004304:	bf00      	nop
 8004306:	3720      	adds	r7, #32
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	40013000 	.word	0x40013000
 8004310:	40021000 	.word	0x40021000
 8004314:	40010800 	.word	0x40010800

08004318 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004328:	d10c      	bne.n	8004344 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800432a:	4b15      	ldr	r3, [pc, #84]	; (8004380 <HAL_TIM_Base_MspInit+0x68>)
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	4a14      	ldr	r2, [pc, #80]	; (8004380 <HAL_TIM_Base_MspInit+0x68>)
 8004330:	f043 0301 	orr.w	r3, r3, #1
 8004334:	61d3      	str	r3, [r2, #28]
 8004336:	4b12      	ldr	r3, [pc, #72]	; (8004380 <HAL_TIM_Base_MspInit+0x68>)
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	60fb      	str	r3, [r7, #12]
 8004340:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004342:	e018      	b.n	8004376 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a0e      	ldr	r2, [pc, #56]	; (8004384 <HAL_TIM_Base_MspInit+0x6c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d113      	bne.n	8004376 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800434e:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <HAL_TIM_Base_MspInit+0x68>)
 8004350:	69db      	ldr	r3, [r3, #28]
 8004352:	4a0b      	ldr	r2, [pc, #44]	; (8004380 <HAL_TIM_Base_MspInit+0x68>)
 8004354:	f043 0302 	orr.w	r3, r3, #2
 8004358:	61d3      	str	r3, [r2, #28]
 800435a:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_TIM_Base_MspInit+0x68>)
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f003 0302 	and.w	r3, r3, #2
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8004366:	2200      	movs	r2, #0
 8004368:	2100      	movs	r1, #0
 800436a:	201d      	movs	r0, #29
 800436c:	f000 fefb 	bl	8005166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004370:	201d      	movs	r0, #29
 8004372:	f000 ff14 	bl	800519e <HAL_NVIC_EnableIRQ>
}
 8004376:	bf00      	nop
 8004378:	3710      	adds	r7, #16
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
 800437e:	bf00      	nop
 8004380:	40021000 	.word	0x40021000
 8004384:	40000400 	.word	0x40000400

08004388 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a09      	ldr	r2, [pc, #36]	; (80043bc <HAL_TIM_PWM_MspInit+0x34>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10b      	bne.n	80043b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_TIM_PWM_MspInit+0x38>)
 800439c:	69db      	ldr	r3, [r3, #28]
 800439e:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <HAL_TIM_PWM_MspInit+0x38>)
 80043a0:	f043 0304 	orr.w	r3, r3, #4
 80043a4:	61d3      	str	r3, [r2, #28]
 80043a6:	4b06      	ldr	r3, [pc, #24]	; (80043c0 <HAL_TIM_PWM_MspInit+0x38>)
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80043b2:	bf00      	nop
 80043b4:	3714      	adds	r7, #20
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bc80      	pop	{r7}
 80043ba:	4770      	bx	lr
 80043bc:	40000800 	.word	0x40000800
 80043c0:	40021000 	.word	0x40021000

080043c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043cc:	f107 0310 	add.w	r3, r7, #16
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a10      	ldr	r2, [pc, #64]	; (8004420 <HAL_TIM_MspPostInit+0x5c>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d118      	bne.n	8004416 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043e4:	4b0f      	ldr	r3, [pc, #60]	; (8004424 <HAL_TIM_MspPostInit+0x60>)
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	4a0e      	ldr	r2, [pc, #56]	; (8004424 <HAL_TIM_MspPostInit+0x60>)
 80043ea:	f043 0308 	orr.w	r3, r3, #8
 80043ee:	6193      	str	r3, [r2, #24]
 80043f0:	4b0c      	ldr	r3, [pc, #48]	; (8004424 <HAL_TIM_MspPostInit+0x60>)
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	f003 0308 	and.w	r3, r3, #8
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = MOTOR_1A_Pin|MOTOR_1B_Pin|MOTOR_2A_Pin|MOTOR_2B_Pin;
 80043fc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8004400:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004402:	2302      	movs	r3, #2
 8004404:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004406:	2302      	movs	r3, #2
 8004408:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800440a:	f107 0310 	add.w	r3, r7, #16
 800440e:	4619      	mov	r1, r3
 8004410:	4805      	ldr	r0, [pc, #20]	; (8004428 <HAL_TIM_MspPostInit+0x64>)
 8004412:	f000 fedf 	bl	80051d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8004416:	bf00      	nop
 8004418:	3720      	adds	r7, #32
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40000800 	.word	0x40000800
 8004424:	40021000 	.word	0x40021000
 8004428:	40010c00 	.word	0x40010c00

0800442c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b088      	sub	sp, #32
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004434:	f107 0310 	add.w	r3, r7, #16
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a1c      	ldr	r2, [pc, #112]	; (80044b8 <HAL_UART_MspInit+0x8c>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d131      	bne.n	80044b0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800444c:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <HAL_UART_MspInit+0x90>)
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	4a1a      	ldr	r2, [pc, #104]	; (80044bc <HAL_UART_MspInit+0x90>)
 8004452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004456:	6193      	str	r3, [r2, #24]
 8004458:	4b18      	ldr	r3, [pc, #96]	; (80044bc <HAL_UART_MspInit+0x90>)
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004464:	4b15      	ldr	r3, [pc, #84]	; (80044bc <HAL_UART_MspInit+0x90>)
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	4a14      	ldr	r2, [pc, #80]	; (80044bc <HAL_UART_MspInit+0x90>)
 800446a:	f043 0304 	orr.w	r3, r3, #4
 800446e:	6193      	str	r3, [r2, #24]
 8004470:	4b12      	ldr	r3, [pc, #72]	; (80044bc <HAL_UART_MspInit+0x90>)
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800447c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004480:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004482:	2302      	movs	r3, #2
 8004484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004486:	2303      	movs	r3, #3
 8004488:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800448a:	f107 0310 	add.w	r3, r7, #16
 800448e:	4619      	mov	r1, r3
 8004490:	480b      	ldr	r0, [pc, #44]	; (80044c0 <HAL_UART_MspInit+0x94>)
 8004492:	f000 fe9f 	bl	80051d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800449a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044a0:	2300      	movs	r3, #0
 80044a2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a4:	f107 0310 	add.w	r3, r7, #16
 80044a8:	4619      	mov	r1, r3
 80044aa:	4805      	ldr	r0, [pc, #20]	; (80044c0 <HAL_UART_MspInit+0x94>)
 80044ac:	f000 fe92 	bl	80051d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80044b0:	bf00      	nop
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40013800 	.word	0x40013800
 80044bc:	40021000 	.word	0x40021000
 80044c0:	40010800 	.word	0x40010800

080044c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80044c8:	bf00      	nop
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bc80      	pop	{r7}
 80044ce:	4770      	bx	lr

080044d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044d4:	e7fe      	b.n	80044d4 <HardFault_Handler+0x4>

080044d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80044d6:	b480      	push	{r7}
 80044d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044da:	e7fe      	b.n	80044da <MemManage_Handler+0x4>

080044dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80044dc:	b480      	push	{r7}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044e0:	e7fe      	b.n	80044e0 <BusFault_Handler+0x4>

080044e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80044e2:	b480      	push	{r7}
 80044e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044e6:	e7fe      	b.n	80044e6 <UsageFault_Handler+0x4>

080044e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044ec:	bf00      	nop
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80044f8:	bf00      	nop
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr

08004500 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	bc80      	pop	{r7}
 800450a:	4770      	bx	lr

0800450c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004510:	f000 f8d8 	bl	80046c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004514:	bf00      	nop
 8004516:	bd80      	pop	{r7, pc}

08004518 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800451c:	4802      	ldr	r0, [pc, #8]	; (8004528 <TIM3_IRQHandler+0x10>)
 800451e:	f003 fbb5 	bl	8007c8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	2000083c 	.word	0x2000083c

0800452c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004534:	4b11      	ldr	r3, [pc, #68]	; (800457c <_sbrk+0x50>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d102      	bne.n	8004542 <_sbrk+0x16>
		heap_end = &end;
 800453c:	4b0f      	ldr	r3, [pc, #60]	; (800457c <_sbrk+0x50>)
 800453e:	4a10      	ldr	r2, [pc, #64]	; (8004580 <_sbrk+0x54>)
 8004540:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004542:	4b0e      	ldr	r3, [pc, #56]	; (800457c <_sbrk+0x50>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <_sbrk+0x50>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4413      	add	r3, r2
 8004550:	466a      	mov	r2, sp
 8004552:	4293      	cmp	r3, r2
 8004554:	d907      	bls.n	8004566 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004556:	f004 fb47 	bl	8008be8 <__errno>
 800455a:	4602      	mov	r2, r0
 800455c:	230c      	movs	r3, #12
 800455e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8004560:	f04f 33ff 	mov.w	r3, #4294967295
 8004564:	e006      	b.n	8004574 <_sbrk+0x48>
	}

	heap_end += incr;
 8004566:	4b05      	ldr	r3, [pc, #20]	; (800457c <_sbrk+0x50>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4413      	add	r3, r2
 800456e:	4a03      	ldr	r2, [pc, #12]	; (800457c <_sbrk+0x50>)
 8004570:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004572:	68fb      	ldr	r3, [r7, #12]
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	200006bc 	.word	0x200006bc
 8004580:	200009b0 	.word	0x200009b0

08004584 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8004588:	4b15      	ldr	r3, [pc, #84]	; (80045e0 <SystemInit+0x5c>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a14      	ldr	r2, [pc, #80]	; (80045e0 <SystemInit+0x5c>)
 800458e:	f043 0301 	orr.w	r3, r3, #1
 8004592:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004594:	4b12      	ldr	r3, [pc, #72]	; (80045e0 <SystemInit+0x5c>)
 8004596:	685a      	ldr	r2, [r3, #4]
 8004598:	4911      	ldr	r1, [pc, #68]	; (80045e0 <SystemInit+0x5c>)
 800459a:	4b12      	ldr	r3, [pc, #72]	; (80045e4 <SystemInit+0x60>)
 800459c:	4013      	ands	r3, r2
 800459e:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80045a0:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <SystemInit+0x5c>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a0e      	ldr	r2, [pc, #56]	; (80045e0 <SystemInit+0x5c>)
 80045a6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80045aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ae:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80045b0:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <SystemInit+0x5c>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a0a      	ldr	r2, [pc, #40]	; (80045e0 <SystemInit+0x5c>)
 80045b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ba:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80045bc:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <SystemInit+0x5c>)
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	4a07      	ldr	r2, [pc, #28]	; (80045e0 <SystemInit+0x5c>)
 80045c2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80045c6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <SystemInit+0x5c>)
 80045ca:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80045ce:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80045d0:	4b05      	ldr	r3, [pc, #20]	; (80045e8 <SystemInit+0x64>)
 80045d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045d6:	609a      	str	r2, [r3, #8]
#endif 
}
 80045d8:	bf00      	nop
 80045da:	46bd      	mov	sp, r7
 80045dc:	bc80      	pop	{r7}
 80045de:	4770      	bx	lr
 80045e0:	40021000 	.word	0x40021000
 80045e4:	f8ff0000 	.word	0xf8ff0000
 80045e8:	e000ed00 	.word	0xe000ed00

080045ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80045ec:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80045ee:	e003      	b.n	80045f8 <LoopCopyDataInit>

080045f0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80045f2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80045f4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80045f6:	3104      	adds	r1, #4

080045f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80045f8:	480a      	ldr	r0, [pc, #40]	; (8004624 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80045fa:	4b0b      	ldr	r3, [pc, #44]	; (8004628 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80045fc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80045fe:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8004600:	d3f6      	bcc.n	80045f0 <CopyDataInit>
  ldr r2, =_sbss
 8004602:	4a0a      	ldr	r2, [pc, #40]	; (800462c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8004604:	e002      	b.n	800460c <LoopFillZerobss>

08004606 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8004606:	2300      	movs	r3, #0
  str r3, [r2], #4
 8004608:	f842 3b04 	str.w	r3, [r2], #4

0800460c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800460c:	4b08      	ldr	r3, [pc, #32]	; (8004630 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800460e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8004610:	d3f9      	bcc.n	8004606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004612:	f7ff ffb7 	bl	8004584 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004616:	f004 faed 	bl	8008bf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800461a:	f7fe fc19 	bl	8002e50 <main>
  bx lr
 800461e:	4770      	bx	lr
  ldr r3, =_sidata
 8004620:	0800a7b0 	.word	0x0800a7b0
  ldr r0, =_sdata
 8004624:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8004628:	20000144 	.word	0x20000144
  ldr r2, =_sbss
 800462c:	20000148 	.word	0x20000148
  ldr r3, = _ebss
 8004630:	200009ac 	.word	0x200009ac

08004634 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004634:	e7fe      	b.n	8004634 <ADC1_2_IRQHandler>
	...

08004638 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800463c:	4b08      	ldr	r3, [pc, #32]	; (8004660 <HAL_Init+0x28>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a07      	ldr	r2, [pc, #28]	; (8004660 <HAL_Init+0x28>)
 8004642:	f043 0310 	orr.w	r3, r3, #16
 8004646:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004648:	2003      	movs	r0, #3
 800464a:	f000 fd81 	bl	8005150 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800464e:	2000      	movs	r0, #0
 8004650:	f000 f808 	bl	8004664 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004654:	f7ff fd68 	bl	8004128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40022000 	.word	0x40022000

08004664 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800466c:	4b12      	ldr	r3, [pc, #72]	; (80046b8 <HAL_InitTick+0x54>)
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	4b12      	ldr	r3, [pc, #72]	; (80046bc <HAL_InitTick+0x58>)
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	4619      	mov	r1, r3
 8004676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800467a:	fbb3 f3f1 	udiv	r3, r3, r1
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	4618      	mov	r0, r3
 8004684:	f000 fd99 	bl	80051ba <HAL_SYSTICK_Config>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e00e      	b.n	80046b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b0f      	cmp	r3, #15
 8004696:	d80a      	bhi.n	80046ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004698:	2200      	movs	r2, #0
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	f04f 30ff 	mov.w	r0, #4294967295
 80046a0:	f000 fd61 	bl	8005166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80046a4:	4a06      	ldr	r2, [pc, #24]	; (80046c0 <HAL_InitTick+0x5c>)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80046aa:	2300      	movs	r3, #0
 80046ac:	e000      	b.n	80046b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3708      	adds	r7, #8
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	200000d4 	.word	0x200000d4
 80046bc:	200000dc 	.word	0x200000dc
 80046c0:	200000d8 	.word	0x200000d8

080046c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80046c4:	b480      	push	{r7}
 80046c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80046c8:	4b05      	ldr	r3, [pc, #20]	; (80046e0 <HAL_IncTick+0x1c>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	4b05      	ldr	r3, [pc, #20]	; (80046e4 <HAL_IncTick+0x20>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4413      	add	r3, r2
 80046d4:	4a03      	ldr	r2, [pc, #12]	; (80046e4 <HAL_IncTick+0x20>)
 80046d6:	6013      	str	r3, [r2, #0]
}
 80046d8:	bf00      	nop
 80046da:	46bd      	mov	sp, r7
 80046dc:	bc80      	pop	{r7}
 80046de:	4770      	bx	lr
 80046e0:	200000dc 	.word	0x200000dc
 80046e4:	200009a4 	.word	0x200009a4

080046e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return uwTick;
 80046ec:	4b02      	ldr	r3, [pc, #8]	; (80046f8 <HAL_GetTick+0x10>)
 80046ee:	681b      	ldr	r3, [r3, #0]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bc80      	pop	{r7}
 80046f6:	4770      	bx	lr
 80046f8:	200009a4 	.word	0x200009a4

080046fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004704:	f7ff fff0 	bl	80046e8 <HAL_GetTick>
 8004708:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d005      	beq.n	8004722 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004716:	4b09      	ldr	r3, [pc, #36]	; (800473c <HAL_Delay+0x40>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004722:	bf00      	nop
 8004724:	f7ff ffe0 	bl	80046e8 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	429a      	cmp	r2, r3
 8004732:	d8f7      	bhi.n	8004724 <HAL_Delay+0x28>
  {
  }
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	200000dc 	.word	0x200000dc

08004740 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b086      	sub	sp, #24
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004748:	2300      	movs	r3, #0
 800474a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e0be      	b.n	80048e0 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	d109      	bne.n	8004784 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7ff fd04 	bl	800418c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 fbdd 	bl	8004f44 <ADC_ConversionStop_Disable>
 800478a:	4603      	mov	r3, r0
 800478c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	f003 0310 	and.w	r3, r3, #16
 8004796:	2b00      	cmp	r3, #0
 8004798:	f040 8099 	bne.w	80048ce <HAL_ADC_Init+0x18e>
 800479c:	7dfb      	ldrb	r3, [r7, #23]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f040 8095 	bne.w	80048ce <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80047ac:	f023 0302 	bic.w	r3, r3, #2
 80047b0:	f043 0202 	orr.w	r2, r3, #2
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80047c0:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	7b1b      	ldrb	r3, [r3, #12]
 80047c6:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80047c8:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047d8:	d003      	beq.n	80047e2 <HAL_ADC_Init+0xa2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d102      	bne.n	80047e8 <HAL_ADC_Init+0xa8>
 80047e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047e6:	e000      	b.n	80047ea <HAL_ADC_Init+0xaa>
 80047e8:	2300      	movs	r3, #0
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	7d1b      	ldrb	r3, [r3, #20]
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d119      	bne.n	800482c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	7b1b      	ldrb	r3, [r3, #12]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d109      	bne.n	8004814 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	3b01      	subs	r3, #1
 8004806:	035a      	lsls	r2, r3, #13
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	4313      	orrs	r3, r2
 800480c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004810:	613b      	str	r3, [r7, #16]
 8004812:	e00b      	b.n	800482c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004818:	f043 0220 	orr.w	r2, r3, #32
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	f043 0201 	orr.w	r2, r3, #1
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	693a      	ldr	r2, [r7, #16]
 800483c:	430a      	orrs	r2, r1
 800483e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	4b28      	ldr	r3, [pc, #160]	; (80048e8 <HAL_ADC_Init+0x1a8>)
 8004848:	4013      	ands	r3, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6812      	ldr	r2, [r2, #0]
 800484e:	68b9      	ldr	r1, [r7, #8]
 8004850:	430b      	orrs	r3, r1
 8004852:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485c:	d003      	beq.n	8004866 <HAL_ADC_Init+0x126>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d104      	bne.n	8004870 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	3b01      	subs	r3, #1
 800486c:	051b      	lsls	r3, r3, #20
 800486e:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004876:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	430a      	orrs	r2, r1
 8004882:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689a      	ldr	r2, [r3, #8]
 800488a:	4b18      	ldr	r3, [pc, #96]	; (80048ec <HAL_ADC_Init+0x1ac>)
 800488c:	4013      	ands	r3, r2
 800488e:	68ba      	ldr	r2, [r7, #8]
 8004890:	429a      	cmp	r2, r3
 8004892:	d10b      	bne.n	80048ac <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489e:	f023 0303 	bic.w	r3, r3, #3
 80048a2:	f043 0201 	orr.w	r2, r3, #1
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80048aa:	e018      	b.n	80048de <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b0:	f023 0312 	bic.w	r3, r3, #18
 80048b4:	f043 0210 	orr.w	r2, r3, #16
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c0:	f043 0201 	orr.w	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80048cc:	e007      	b.n	80048de <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	f043 0210 	orr.w	r2, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80048de:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	ffe1f7fd 	.word	0xffe1f7fd
 80048ec:	ff1f0efe 	.word	0xff1f0efe

080048f0 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048f8:	2300      	movs	r3, #0
 80048fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004902:	2b01      	cmp	r3, #1
 8004904:	d101      	bne.n	800490a <HAL_ADC_Start+0x1a>
 8004906:	2302      	movs	r3, #2
 8004908:	e098      	b.n	8004a3c <HAL_ADC_Start+0x14c>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 fac4 	bl	8004ea0 <ADC_Enable>
 8004918:	4603      	mov	r3, r0
 800491a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800491c:	7bfb      	ldrb	r3, [r7, #15]
 800491e:	2b00      	cmp	r3, #0
 8004920:	f040 8087 	bne.w	8004a32 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a41      	ldr	r2, [pc, #260]	; (8004a44 <HAL_ADC_Start+0x154>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d105      	bne.n	800494e <HAL_ADC_Start+0x5e>
 8004942:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <HAL_ADC_Start+0x158>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d115      	bne.n	800497a <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004952:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004964:	2b00      	cmp	r3, #0
 8004966:	d026      	beq.n	80049b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004970:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004978:	e01d      	b.n	80049b6 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <HAL_ADC_Start+0x158>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d004      	beq.n	800499a <HAL_ADC_Start+0xaa>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2b      	ldr	r2, [pc, #172]	; (8004a44 <HAL_ADC_Start+0x154>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d10d      	bne.n	80049b6 <HAL_ADC_Start+0xc6>
 800499a:	4b2b      	ldr	r3, [pc, #172]	; (8004a48 <HAL_ADC_Start+0x158>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d006      	beq.n	80049d0 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c6:	f023 0206 	bic.w	r2, r3, #6
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80049ce:	e002      	b.n	80049d6 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f06f 0202 	mvn.w	r2, #2
 80049e6:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80049f2:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80049f6:	d113      	bne.n	8004a20 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80049fc:	4a11      	ldr	r2, [pc, #68]	; (8004a44 <HAL_ADC_Start+0x154>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d105      	bne.n	8004a0e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8004a02:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <HAL_ADC_Start+0x158>)
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d108      	bne.n	8004a20 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8004a1c:	609a      	str	r2, [r3, #8]
 8004a1e:	e00c      	b.n	8004a3a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004a2e:	609a      	str	r2, [r3, #8]
 8004a30:	e003      	b.n	8004a3a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40012800 	.word	0x40012800
 8004a48:	40012400 	.word	0x40012400

08004a4c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_ADC_Stop+0x1a>
 8004a62:	2302      	movs	r3, #2
 8004a64:	e01a      	b.n	8004a9c <HAL_ADC_Stop+0x50>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2201      	movs	r2, #1
 8004a6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 fa68 	bl	8004f44 <ADC_ConversionStop_Disable>
 8004a74:	4603      	mov	r3, r0
 8004a76:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a82:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004a86:	f023 0301 	bic.w	r3, r3, #1
 8004a8a:	f043 0201 	orr.w	r2, r3, #1
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b087      	sub	sp, #28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8004aba:	f7ff fe15 	bl	80046e8 <HAL_GetTick>
 8004abe:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad2:	f043 0220 	orr.w	r2, r3, #32
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e0c8      	b.n	8004c78 <HAL_ADC_PollForConversion+0x1d4>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d12a      	bne.n	8004b4a <HAL_ADC_PollForConversion+0xa6>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d123      	bne.n	8004b4a <HAL_ADC_PollForConversion+0xa6>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004b02:	e01a      	b.n	8004b3a <HAL_ADC_PollForConversion+0x96>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b0a:	d016      	beq.n	8004b3a <HAL_ADC_PollForConversion+0x96>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d007      	beq.n	8004b22 <HAL_ADC_PollForConversion+0x7e>
 8004b12:	f7ff fde9 	bl	80046e8 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d20b      	bcs.n	8004b3a <HAL_ADC_PollForConversion+0x96>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	f043 0204 	orr.w	r2, r3, #4
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e09e      	b.n	8004c78 <HAL_ADC_PollForConversion+0x1d4>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0dd      	beq.n	8004b04 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8004b48:	e06c      	b.n	8004c24 <HAL_ADC_PollForConversion+0x180>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8004b4a:	4b4d      	ldr	r3, [pc, #308]	; (8004c80 <HAL_ADC_PollForConversion+0x1dc>)
 8004b4c:	681c      	ldr	r4, [r3, #0]
 8004b4e:	2002      	movs	r0, #2
 8004b50:	f002 fa1a 	bl	8006f88 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b54:	4603      	mov	r3, r0
 8004b56:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	6919      	ldr	r1, [r3, #16]
 8004b60:	4b48      	ldr	r3, [pc, #288]	; (8004c84 <HAL_ADC_PollForConversion+0x1e0>)
 8004b62:	400b      	ands	r3, r1
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d118      	bne.n	8004b9a <HAL_ADC_PollForConversion+0xf6>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	68d9      	ldr	r1, [r3, #12]
 8004b6e:	4b46      	ldr	r3, [pc, #280]	; (8004c88 <HAL_ADC_PollForConversion+0x1e4>)
 8004b70:	400b      	ands	r3, r1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d111      	bne.n	8004b9a <HAL_ADC_PollForConversion+0xf6>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6919      	ldr	r1, [r3, #16]
 8004b7c:	4b43      	ldr	r3, [pc, #268]	; (8004c8c <HAL_ADC_PollForConversion+0x1e8>)
 8004b7e:	400b      	ands	r3, r1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d108      	bne.n	8004b96 <HAL_ADC_PollForConversion+0xf2>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68d9      	ldr	r1, [r3, #12]
 8004b8a:	4b41      	ldr	r3, [pc, #260]	; (8004c90 <HAL_ADC_PollForConversion+0x1ec>)
 8004b8c:	400b      	ands	r3, r1
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d101      	bne.n	8004b96 <HAL_ADC_PollForConversion+0xf2>
 8004b92:	2314      	movs	r3, #20
 8004b94:	e020      	b.n	8004bd8 <HAL_ADC_PollForConversion+0x134>
 8004b96:	2329      	movs	r3, #41	; 0x29
 8004b98:	e01e      	b.n	8004bd8 <HAL_ADC_PollForConversion+0x134>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	6919      	ldr	r1, [r3, #16]
 8004ba0:	4b3a      	ldr	r3, [pc, #232]	; (8004c8c <HAL_ADC_PollForConversion+0x1e8>)
 8004ba2:	400b      	ands	r3, r1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d106      	bne.n	8004bb6 <HAL_ADC_PollForConversion+0x112>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68d9      	ldr	r1, [r3, #12]
 8004bae:	4b38      	ldr	r3, [pc, #224]	; (8004c90 <HAL_ADC_PollForConversion+0x1ec>)
 8004bb0:	400b      	ands	r3, r1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00d      	beq.n	8004bd2 <HAL_ADC_PollForConversion+0x12e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6919      	ldr	r1, [r3, #16]
 8004bbc:	4b35      	ldr	r3, [pc, #212]	; (8004c94 <HAL_ADC_PollForConversion+0x1f0>)
 8004bbe:	400b      	ands	r3, r1
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d108      	bne.n	8004bd6 <HAL_ADC_PollForConversion+0x132>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68d9      	ldr	r1, [r3, #12]
 8004bca:	4b32      	ldr	r3, [pc, #200]	; (8004c94 <HAL_ADC_PollForConversion+0x1f0>)
 8004bcc:	400b      	ands	r3, r1
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d101      	bne.n	8004bd6 <HAL_ADC_PollForConversion+0x132>
 8004bd2:	2354      	movs	r3, #84	; 0x54
 8004bd4:	e000      	b.n	8004bd8 <HAL_ADC_PollForConversion+0x134>
 8004bd6:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8004bd8:	fb02 f303 	mul.w	r3, r2, r3
 8004bdc:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004bde:	e01d      	b.n	8004c1c <HAL_ADC_PollForConversion+0x178>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be6:	d016      	beq.n	8004c16 <HAL_ADC_PollForConversion+0x172>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d007      	beq.n	8004bfe <HAL_ADC_PollForConversion+0x15a>
 8004bee:	f7ff fd7b 	bl	80046e8 <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d20b      	bcs.n	8004c16 <HAL_ADC_PollForConversion+0x172>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c02:	f043 0204 	orr.w	r2, r3, #4
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	629a      	str	r2, [r3, #40]	; 0x28
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          
          return HAL_TIMEOUT;
 8004c12:	2303      	movs	r3, #3
 8004c14:	e030      	b.n	8004c78 <HAL_ADC_PollForConversion+0x1d4>
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d8dd      	bhi.n	8004be0 <HAL_ADC_PollForConversion+0x13c>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0212 	mvn.w	r2, #18
 8004c2c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004c44:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8004c48:	d115      	bne.n	8004c76 <HAL_ADC_PollForConversion+0x1d2>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d111      	bne.n	8004c76 <HAL_ADC_PollForConversion+0x1d2>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d105      	bne.n	8004c76 <HAL_ADC_PollForConversion+0x1d2>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c6e:	f043 0201 	orr.w	r2, r3, #1
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	371c      	adds	r7, #28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd90      	pop	{r4, r7, pc}
 8004c80:	200000d4 	.word	0x200000d4
 8004c84:	24924924 	.word	0x24924924
 8004c88:	00924924 	.word	0x00924924
 8004c8c:	12492492 	.word	0x12492492
 8004c90:	00492492 	.word	0x00492492
 8004c94:	00249249 	.word	0x00249249

08004c98 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x20>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e0dc      	b.n	8004e8a <HAL_ADC_ConfigChannel+0x1da>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b06      	cmp	r3, #6
 8004cde:	d81c      	bhi.n	8004d1a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	3b05      	subs	r3, #5
 8004cf2:	221f      	movs	r2, #31
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	4019      	ands	r1, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	3b05      	subs	r3, #5
 8004d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	635a      	str	r2, [r3, #52]	; 0x34
 8004d18:	e03c      	b.n	8004d94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d81c      	bhi.n	8004d5c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	3b23      	subs	r3, #35	; 0x23
 8004d34:	221f      	movs	r2, #31
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	4019      	ands	r1, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3b23      	subs	r3, #35	; 0x23
 8004d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	631a      	str	r2, [r3, #48]	; 0x30
 8004d5a:	e01b      	b.n	8004d94 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685a      	ldr	r2, [r3, #4]
 8004d66:	4613      	mov	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3b41      	subs	r3, #65	; 0x41
 8004d6e:	221f      	movs	r2, #31
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	4019      	ands	r1, r3
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	4613      	mov	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	4413      	add	r3, r2
 8004d86:	3b41      	subs	r3, #65	; 0x41
 8004d88:	fa00 f203 	lsl.w	r2, r0, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	430a      	orrs	r2, r1
 8004d92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b09      	cmp	r3, #9
 8004d9a:	d91c      	bls.n	8004dd6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68d9      	ldr	r1, [r3, #12]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	4613      	mov	r3, r2
 8004da8:	005b      	lsls	r3, r3, #1
 8004daa:	4413      	add	r3, r2
 8004dac:	3b1e      	subs	r3, #30
 8004dae:	2207      	movs	r2, #7
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	43db      	mvns	r3, r3
 8004db6:	4019      	ands	r1, r3
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	6898      	ldr	r0, [r3, #8]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	4413      	add	r3, r2
 8004dc6:	3b1e      	subs	r3, #30
 8004dc8:	fa00 f203 	lsl.w	r2, r0, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	60da      	str	r2, [r3, #12]
 8004dd4:	e019      	b.n	8004e0a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6919      	ldr	r1, [r3, #16]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	4613      	mov	r3, r2
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	4413      	add	r3, r2
 8004de6:	2207      	movs	r2, #7
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43db      	mvns	r3, r3
 8004dee:	4019      	ands	r1, r3
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	6898      	ldr	r0, [r3, #8]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	4413      	add	r3, r2
 8004dfe:	fa00 f203 	lsl.w	r2, r0, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	430a      	orrs	r2, r1
 8004e08:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b10      	cmp	r3, #16
 8004e10:	d003      	beq.n	8004e1a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004e16:	2b11      	cmp	r3, #17
 8004e18:	d132      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1d      	ldr	r2, [pc, #116]	; (8004e94 <HAL_ADC_ConfigChannel+0x1e4>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d125      	bne.n	8004e70 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d126      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689a      	ldr	r2, [r3, #8]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8004e40:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b10      	cmp	r3, #16
 8004e48:	d11a      	bne.n	8004e80 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004e4a:	4b13      	ldr	r3, [pc, #76]	; (8004e98 <HAL_ADC_ConfigChannel+0x1e8>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a13      	ldr	r2, [pc, #76]	; (8004e9c <HAL_ADC_ConfigChannel+0x1ec>)
 8004e50:	fba2 2303 	umull	r2, r3, r2, r3
 8004e54:	0c9a      	lsrs	r2, r3, #18
 8004e56:	4613      	mov	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e60:	e002      	b.n	8004e68 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f9      	bne.n	8004e62 <HAL_ADC_ConfigChannel+0x1b2>
 8004e6e:	e007      	b.n	8004e80 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e74:	f043 0220 	orr.w	r2, r3, #32
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr
 8004e94:	40012400 	.word	0x40012400
 8004e98:	200000d4 	.word	0x200000d4
 8004e9c:	431bde83 	.word	0x431bde83

08004ea0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689b      	ldr	r3, [r3, #8]
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d039      	beq.n	8004f32 <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689a      	ldr	r2, [r3, #8]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f042 0201 	orr.w	r2, r2, #1
 8004ecc:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004ece:	4b1b      	ldr	r3, [pc, #108]	; (8004f3c <ADC_Enable+0x9c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <ADC_Enable+0xa0>)
 8004ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed8:	0c9b      	lsrs	r3, r3, #18
 8004eda:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004edc:	e002      	b.n	8004ee4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d1f9      	bne.n	8004ede <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004eea:	f7ff fbfd 	bl	80046e8 <HAL_GetTick>
 8004eee:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004ef0:	e018      	b.n	8004f24 <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004ef2:	f7ff fbf9 	bl	80046e8 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	2b02      	cmp	r3, #2
 8004efe:	d911      	bls.n	8004f24 <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f04:	f043 0210 	orr.w	r2, r3, #16
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f10:	f043 0201 	orr.w	r2, r3, #1
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e007      	b.n	8004f34 <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b01      	cmp	r3, #1
 8004f30:	d1df      	bne.n	8004ef2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	200000d4 	.word	0x200000d4
 8004f40:	431bde83 	.word	0x431bde83

08004f44 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0301 	and.w	r3, r3, #1
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d127      	bne.n	8004fae <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004f6e:	f7ff fbbb 	bl	80046e8 <HAL_GetTick>
 8004f72:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004f74:	e014      	b.n	8004fa0 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004f76:	f7ff fbb7 	bl	80046e8 <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d90d      	bls.n	8004fa0 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f88:	f043 0210 	orr.w	r2, r3, #16
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f94:	f043 0201 	orr.w	r2, r3, #1
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e007      	b.n	8004fb0 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d0e3      	beq.n	8004f76 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004fc8:	4b0c      	ldr	r3, [pc, #48]	; (8004ffc <__NVIC_SetPriorityGrouping+0x44>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004fe0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004fe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004fe8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004fea:	4a04      	ldr	r2, [pc, #16]	; (8004ffc <__NVIC_SetPriorityGrouping+0x44>)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	60d3      	str	r3, [r2, #12]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	bc80      	pop	{r7}
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	e000ed00 	.word	0xe000ed00

08005000 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005000:	b480      	push	{r7}
 8005002:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005004:	4b04      	ldr	r3, [pc, #16]	; (8005018 <__NVIC_GetPriorityGrouping+0x18>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	0a1b      	lsrs	r3, r3, #8
 800500a:	f003 0307 	and.w	r3, r3, #7
}
 800500e:	4618      	mov	r0, r3
 8005010:	46bd      	mov	sp, r7
 8005012:	bc80      	pop	{r7}
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800501c:	b480      	push	{r7}
 800501e:	b083      	sub	sp, #12
 8005020:	af00      	add	r7, sp, #0
 8005022:	4603      	mov	r3, r0
 8005024:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502a:	2b00      	cmp	r3, #0
 800502c:	db0b      	blt.n	8005046 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	f003 021f 	and.w	r2, r3, #31
 8005034:	4906      	ldr	r1, [pc, #24]	; (8005050 <__NVIC_EnableIRQ+0x34>)
 8005036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800503a:	095b      	lsrs	r3, r3, #5
 800503c:	2001      	movs	r0, #1
 800503e:	fa00 f202 	lsl.w	r2, r0, r2
 8005042:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005046:	bf00      	nop
 8005048:	370c      	adds	r7, #12
 800504a:	46bd      	mov	sp, r7
 800504c:	bc80      	pop	{r7}
 800504e:	4770      	bx	lr
 8005050:	e000e100 	.word	0xe000e100

08005054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	4603      	mov	r3, r0
 800505c:	6039      	str	r1, [r7, #0]
 800505e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005064:	2b00      	cmp	r3, #0
 8005066:	db0a      	blt.n	800507e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	b2da      	uxtb	r2, r3
 800506c:	490c      	ldr	r1, [pc, #48]	; (80050a0 <__NVIC_SetPriority+0x4c>)
 800506e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005072:	0112      	lsls	r2, r2, #4
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	440b      	add	r3, r1
 8005078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800507c:	e00a      	b.n	8005094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	b2da      	uxtb	r2, r3
 8005082:	4908      	ldr	r1, [pc, #32]	; (80050a4 <__NVIC_SetPriority+0x50>)
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	f003 030f 	and.w	r3, r3, #15
 800508a:	3b04      	subs	r3, #4
 800508c:	0112      	lsls	r2, r2, #4
 800508e:	b2d2      	uxtb	r2, r2
 8005090:	440b      	add	r3, r1
 8005092:	761a      	strb	r2, [r3, #24]
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	e000e100 	.word	0xe000e100
 80050a4:	e000ed00 	.word	0xe000ed00

080050a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b089      	sub	sp, #36	; 0x24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	60f8      	str	r0, [r7, #12]
 80050b0:	60b9      	str	r1, [r7, #8]
 80050b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	f1c3 0307 	rsb	r3, r3, #7
 80050c2:	2b04      	cmp	r3, #4
 80050c4:	bf28      	it	cs
 80050c6:	2304      	movcs	r3, #4
 80050c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	3304      	adds	r3, #4
 80050ce:	2b06      	cmp	r3, #6
 80050d0:	d902      	bls.n	80050d8 <NVIC_EncodePriority+0x30>
 80050d2:	69fb      	ldr	r3, [r7, #28]
 80050d4:	3b03      	subs	r3, #3
 80050d6:	e000      	b.n	80050da <NVIC_EncodePriority+0x32>
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80050dc:	f04f 32ff 	mov.w	r2, #4294967295
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	fa02 f303 	lsl.w	r3, r2, r3
 80050e6:	43da      	mvns	r2, r3
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	401a      	ands	r2, r3
 80050ec:	697b      	ldr	r3, [r7, #20]
 80050ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80050f0:	f04f 31ff 	mov.w	r1, #4294967295
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	fa01 f303 	lsl.w	r3, r1, r3
 80050fa:	43d9      	mvns	r1, r3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005100:	4313      	orrs	r3, r2
         );
}
 8005102:	4618      	mov	r0, r3
 8005104:	3724      	adds	r7, #36	; 0x24
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr

0800510c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b082      	sub	sp, #8
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3b01      	subs	r3, #1
 8005118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800511c:	d301      	bcc.n	8005122 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800511e:	2301      	movs	r3, #1
 8005120:	e00f      	b.n	8005142 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005122:	4a0a      	ldr	r2, [pc, #40]	; (800514c <SysTick_Config+0x40>)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3b01      	subs	r3, #1
 8005128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800512a:	210f      	movs	r1, #15
 800512c:	f04f 30ff 	mov.w	r0, #4294967295
 8005130:	f7ff ff90 	bl	8005054 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005134:	4b05      	ldr	r3, [pc, #20]	; (800514c <SysTick_Config+0x40>)
 8005136:	2200      	movs	r2, #0
 8005138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800513a:	4b04      	ldr	r3, [pc, #16]	; (800514c <SysTick_Config+0x40>)
 800513c:	2207      	movs	r2, #7
 800513e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	e000e010 	.word	0xe000e010

08005150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b082      	sub	sp, #8
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff ff2d 	bl	8004fb8 <__NVIC_SetPriorityGrouping>
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005166:	b580      	push	{r7, lr}
 8005168:	b086      	sub	sp, #24
 800516a:	af00      	add	r7, sp, #0
 800516c:	4603      	mov	r3, r0
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005174:	2300      	movs	r3, #0
 8005176:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005178:	f7ff ff42 	bl	8005000 <__NVIC_GetPriorityGrouping>
 800517c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800517e:	687a      	ldr	r2, [r7, #4]
 8005180:	68b9      	ldr	r1, [r7, #8]
 8005182:	6978      	ldr	r0, [r7, #20]
 8005184:	f7ff ff90 	bl	80050a8 <NVIC_EncodePriority>
 8005188:	4602      	mov	r2, r0
 800518a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800518e:	4611      	mov	r1, r2
 8005190:	4618      	mov	r0, r3
 8005192:	f7ff ff5f 	bl	8005054 <__NVIC_SetPriority>
}
 8005196:	bf00      	nop
 8005198:	3718      	adds	r7, #24
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}

0800519e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800519e:	b580      	push	{r7, lr}
 80051a0:	b082      	sub	sp, #8
 80051a2:	af00      	add	r7, sp, #0
 80051a4:	4603      	mov	r3, r0
 80051a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80051a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ac:	4618      	mov	r0, r3
 80051ae:	f7ff ff35 	bl	800501c <__NVIC_EnableIRQ>
}
 80051b2:	bf00      	nop
 80051b4:	3708      	adds	r7, #8
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b082      	sub	sp, #8
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7ff ffa2 	bl	800510c <SysTick_Config>
 80051c8:	4603      	mov	r3, r0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3708      	adds	r7, #8
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b08b      	sub	sp, #44	; 0x2c
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80051de:	2300      	movs	r3, #0
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80051e2:	2300      	movs	r3, #0
 80051e4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80051e6:	e127      	b.n	8005438 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80051e8:	2201      	movs	r2, #1
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	fa02 f303 	lsl.w	r3, r2, r3
 80051f0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69fa      	ldr	r2, [r7, #28]
 80051f8:	4013      	ands	r3, r2
 80051fa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	429a      	cmp	r2, r3
 8005202:	f040 8116 	bne.w	8005432 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	2b12      	cmp	r3, #18
 800520c:	d034      	beq.n	8005278 <HAL_GPIO_Init+0xa4>
 800520e:	2b12      	cmp	r3, #18
 8005210:	d80d      	bhi.n	800522e <HAL_GPIO_Init+0x5a>
 8005212:	2b02      	cmp	r3, #2
 8005214:	d02b      	beq.n	800526e <HAL_GPIO_Init+0x9a>
 8005216:	2b02      	cmp	r3, #2
 8005218:	d804      	bhi.n	8005224 <HAL_GPIO_Init+0x50>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d031      	beq.n	8005282 <HAL_GPIO_Init+0xae>
 800521e:	2b01      	cmp	r3, #1
 8005220:	d01c      	beq.n	800525c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8005222:	e048      	b.n	80052b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005224:	2b03      	cmp	r3, #3
 8005226:	d043      	beq.n	80052b0 <HAL_GPIO_Init+0xdc>
 8005228:	2b11      	cmp	r3, #17
 800522a:	d01b      	beq.n	8005264 <HAL_GPIO_Init+0x90>
          break;
 800522c:	e043      	b.n	80052b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800522e:	4a89      	ldr	r2, [pc, #548]	; (8005454 <HAL_GPIO_Init+0x280>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d026      	beq.n	8005282 <HAL_GPIO_Init+0xae>
 8005234:	4a87      	ldr	r2, [pc, #540]	; (8005454 <HAL_GPIO_Init+0x280>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d806      	bhi.n	8005248 <HAL_GPIO_Init+0x74>
 800523a:	4a87      	ldr	r2, [pc, #540]	; (8005458 <HAL_GPIO_Init+0x284>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d020      	beq.n	8005282 <HAL_GPIO_Init+0xae>
 8005240:	4a86      	ldr	r2, [pc, #536]	; (800545c <HAL_GPIO_Init+0x288>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d01d      	beq.n	8005282 <HAL_GPIO_Init+0xae>
          break;
 8005246:	e036      	b.n	80052b6 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8005248:	4a85      	ldr	r2, [pc, #532]	; (8005460 <HAL_GPIO_Init+0x28c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d019      	beq.n	8005282 <HAL_GPIO_Init+0xae>
 800524e:	4a85      	ldr	r2, [pc, #532]	; (8005464 <HAL_GPIO_Init+0x290>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d016      	beq.n	8005282 <HAL_GPIO_Init+0xae>
 8005254:	4a84      	ldr	r2, [pc, #528]	; (8005468 <HAL_GPIO_Init+0x294>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d013      	beq.n	8005282 <HAL_GPIO_Init+0xae>
          break;
 800525a:	e02c      	b.n	80052b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	623b      	str	r3, [r7, #32]
          break;
 8005262:	e028      	b.n	80052b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	3304      	adds	r3, #4
 800526a:	623b      	str	r3, [r7, #32]
          break;
 800526c:	e023      	b.n	80052b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	68db      	ldr	r3, [r3, #12]
 8005272:	3308      	adds	r3, #8
 8005274:	623b      	str	r3, [r7, #32]
          break;
 8005276:	e01e      	b.n	80052b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	330c      	adds	r3, #12
 800527e:	623b      	str	r3, [r7, #32]
          break;
 8005280:	e019      	b.n	80052b6 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d102      	bne.n	8005290 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800528a:	2304      	movs	r3, #4
 800528c:	623b      	str	r3, [r7, #32]
          break;
 800528e:	e012      	b.n	80052b6 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	2b01      	cmp	r3, #1
 8005296:	d105      	bne.n	80052a4 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005298:	2308      	movs	r3, #8
 800529a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	69fa      	ldr	r2, [r7, #28]
 80052a0:	611a      	str	r2, [r3, #16]
          break;
 80052a2:	e008      	b.n	80052b6 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80052a4:	2308      	movs	r3, #8
 80052a6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	615a      	str	r2, [r3, #20]
          break;
 80052ae:	e002      	b.n	80052b6 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80052b0:	2300      	movs	r3, #0
 80052b2:	623b      	str	r3, [r7, #32]
          break;
 80052b4:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2bff      	cmp	r3, #255	; 0xff
 80052ba:	d801      	bhi.n	80052c0 <HAL_GPIO_Init+0xec>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	e001      	b.n	80052c4 <HAL_GPIO_Init+0xf0>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	3304      	adds	r3, #4
 80052c4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80052c6:	69bb      	ldr	r3, [r7, #24]
 80052c8:	2bff      	cmp	r3, #255	; 0xff
 80052ca:	d802      	bhi.n	80052d2 <HAL_GPIO_Init+0xfe>
 80052cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ce:	009b      	lsls	r3, r3, #2
 80052d0:	e002      	b.n	80052d8 <HAL_GPIO_Init+0x104>
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	3b08      	subs	r3, #8
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	210f      	movs	r1, #15
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	fa01 f303 	lsl.w	r3, r1, r3
 80052e6:	43db      	mvns	r3, r3
 80052e8:	401a      	ands	r2, r3
 80052ea:	6a39      	ldr	r1, [r7, #32]
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	fa01 f303 	lsl.w	r3, r1, r3
 80052f2:	431a      	orrs	r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 8096 	beq.w	8005432 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005306:	4b59      	ldr	r3, [pc, #356]	; (800546c <HAL_GPIO_Init+0x298>)
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	4a58      	ldr	r2, [pc, #352]	; (800546c <HAL_GPIO_Init+0x298>)
 800530c:	f043 0301 	orr.w	r3, r3, #1
 8005310:	6193      	str	r3, [r2, #24]
 8005312:	4b56      	ldr	r3, [pc, #344]	; (800546c <HAL_GPIO_Init+0x298>)
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	60bb      	str	r3, [r7, #8]
 800531c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800531e:	4a54      	ldr	r2, [pc, #336]	; (8005470 <HAL_GPIO_Init+0x29c>)
 8005320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005322:	089b      	lsrs	r3, r3, #2
 8005324:	3302      	adds	r3, #2
 8005326:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800532a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800532c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	220f      	movs	r2, #15
 8005336:	fa02 f303 	lsl.w	r3, r2, r3
 800533a:	43db      	mvns	r3, r3
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	4013      	ands	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a4b      	ldr	r2, [pc, #300]	; (8005474 <HAL_GPIO_Init+0x2a0>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d013      	beq.n	8005372 <HAL_GPIO_Init+0x19e>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a4a      	ldr	r2, [pc, #296]	; (8005478 <HAL_GPIO_Init+0x2a4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d00d      	beq.n	800536e <HAL_GPIO_Init+0x19a>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a49      	ldr	r2, [pc, #292]	; (800547c <HAL_GPIO_Init+0x2a8>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d007      	beq.n	800536a <HAL_GPIO_Init+0x196>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a48      	ldr	r2, [pc, #288]	; (8005480 <HAL_GPIO_Init+0x2ac>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d101      	bne.n	8005366 <HAL_GPIO_Init+0x192>
 8005362:	2303      	movs	r3, #3
 8005364:	e006      	b.n	8005374 <HAL_GPIO_Init+0x1a0>
 8005366:	2304      	movs	r3, #4
 8005368:	e004      	b.n	8005374 <HAL_GPIO_Init+0x1a0>
 800536a:	2302      	movs	r3, #2
 800536c:	e002      	b.n	8005374 <HAL_GPIO_Init+0x1a0>
 800536e:	2301      	movs	r3, #1
 8005370:	e000      	b.n	8005374 <HAL_GPIO_Init+0x1a0>
 8005372:	2300      	movs	r3, #0
 8005374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005376:	f002 0203 	and.w	r2, r2, #3
 800537a:	0092      	lsls	r2, r2, #2
 800537c:	4093      	lsls	r3, r2
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4313      	orrs	r3, r2
 8005382:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005384:	493a      	ldr	r1, [pc, #232]	; (8005470 <HAL_GPIO_Init+0x29c>)
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	089b      	lsrs	r3, r3, #2
 800538a:	3302      	adds	r3, #2
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d006      	beq.n	80053ac <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800539e:	4b39      	ldr	r3, [pc, #228]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	4938      	ldr	r1, [pc, #224]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	600b      	str	r3, [r1, #0]
 80053aa:	e006      	b.n	80053ba <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80053ac:	4b35      	ldr	r3, [pc, #212]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	43db      	mvns	r3, r3
 80053b4:	4933      	ldr	r1, [pc, #204]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 80053b6:	4013      	ands	r3, r2
 80053b8:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d006      	beq.n	80053d4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80053c6:	4b2f      	ldr	r3, [pc, #188]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 80053c8:	685a      	ldr	r2, [r3, #4]
 80053ca:	492e      	ldr	r1, [pc, #184]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	604b      	str	r3, [r1, #4]
 80053d2:	e006      	b.n	80053e2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80053d4:	4b2b      	ldr	r3, [pc, #172]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	43db      	mvns	r3, r3
 80053dc:	4929      	ldr	r1, [pc, #164]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 80053de:	4013      	ands	r3, r2
 80053e0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d006      	beq.n	80053fc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80053ee:	4b25      	ldr	r3, [pc, #148]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 80053f0:	689a      	ldr	r2, [r3, #8]
 80053f2:	4924      	ldr	r1, [pc, #144]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
 80053fa:	e006      	b.n	800540a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80053fc:	4b21      	ldr	r3, [pc, #132]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 80053fe:	689a      	ldr	r2, [r3, #8]
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	43db      	mvns	r3, r3
 8005404:	491f      	ldr	r1, [pc, #124]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 8005406:	4013      	ands	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d006      	beq.n	8005424 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005416:	4b1b      	ldr	r3, [pc, #108]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 8005418:	68da      	ldr	r2, [r3, #12]
 800541a:	491a      	ldr	r1, [pc, #104]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	4313      	orrs	r3, r2
 8005420:	60cb      	str	r3, [r1, #12]
 8005422:	e006      	b.n	8005432 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005424:	4b17      	ldr	r3, [pc, #92]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 8005426:	68da      	ldr	r2, [r3, #12]
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	43db      	mvns	r3, r3
 800542c:	4915      	ldr	r1, [pc, #84]	; (8005484 <HAL_GPIO_Init+0x2b0>)
 800542e:	4013      	ands	r3, r2
 8005430:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8005432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005434:	3301      	adds	r3, #1
 8005436:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	fa22 f303 	lsr.w	r3, r2, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	f47f aed0 	bne.w	80051e8 <HAL_GPIO_Init+0x14>
  }
}
 8005448:	bf00      	nop
 800544a:	372c      	adds	r7, #44	; 0x2c
 800544c:	46bd      	mov	sp, r7
 800544e:	bc80      	pop	{r7}
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	10210000 	.word	0x10210000
 8005458:	10110000 	.word	0x10110000
 800545c:	10120000 	.word	0x10120000
 8005460:	10310000 	.word	0x10310000
 8005464:	10320000 	.word	0x10320000
 8005468:	10220000 	.word	0x10220000
 800546c:	40021000 	.word	0x40021000
 8005470:	40010000 	.word	0x40010000
 8005474:	40010800 	.word	0x40010800
 8005478:	40010c00 	.word	0x40010c00
 800547c:	40011000 	.word	0x40011000
 8005480:	40011400 	.word	0x40011400
 8005484:	40010400 	.word	0x40010400

08005488 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	460b      	mov	r3, r1
 8005492:	807b      	strh	r3, [r7, #2]
 8005494:	4613      	mov	r3, r2
 8005496:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005498:	787b      	ldrb	r3, [r7, #1]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800549e:	887a      	ldrh	r2, [r7, #2]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80054a4:	e003      	b.n	80054ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80054a6:	887b      	ldrh	r3, [r7, #2]
 80054a8:	041a      	lsls	r2, r3, #16
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	611a      	str	r2, [r3, #16]
}
 80054ae:	bf00      	nop
 80054b0:	370c      	adds	r7, #12
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	887b      	ldrh	r3, [r7, #2]
 80054ca:	4013      	ands	r3, r2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d003      	beq.n	80054d8 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80054d0:	887a      	ldrh	r2, [r7, #2]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80054d6:	e002      	b.n	80054de <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054d8:	887a      	ldrh	r2, [r7, #2]
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	611a      	str	r2, [r3, #16]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bc80      	pop	{r7}
 80054e6:	4770      	bx	lr

080054e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e10f      	b.n	800571a <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b00      	cmp	r3, #0
 8005504:	d106      	bne.n	8005514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fe fe78 	bl	8004204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2224      	movs	r2, #36	; 0x24
 8005518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800552c:	f001 fc30 	bl	8006d90 <HAL_RCC_GetPCLK1Freq>
 8005530:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	4a7b      	ldr	r2, [pc, #492]	; (8005724 <HAL_I2C_Init+0x23c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d807      	bhi.n	800554c <HAL_I2C_Init+0x64>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a7a      	ldr	r2, [pc, #488]	; (8005728 <HAL_I2C_Init+0x240>)
 8005540:	4293      	cmp	r3, r2
 8005542:	bf94      	ite	ls
 8005544:	2301      	movls	r3, #1
 8005546:	2300      	movhi	r3, #0
 8005548:	b2db      	uxtb	r3, r3
 800554a:	e006      	b.n	800555a <HAL_I2C_Init+0x72>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	4a77      	ldr	r2, [pc, #476]	; (800572c <HAL_I2C_Init+0x244>)
 8005550:	4293      	cmp	r3, r2
 8005552:	bf94      	ite	ls
 8005554:	2301      	movls	r3, #1
 8005556:	2300      	movhi	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0db      	b.n	800571a <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a72      	ldr	r2, [pc, #456]	; (8005730 <HAL_I2C_Init+0x248>)
 8005566:	fba2 2303 	umull	r2, r3, r2, r3
 800556a:	0c9b      	lsrs	r3, r3, #18
 800556c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	430a      	orrs	r2, r1
 8005580:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4a64      	ldr	r2, [pc, #400]	; (8005724 <HAL_I2C_Init+0x23c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d802      	bhi.n	800559c <HAL_I2C_Init+0xb4>
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	3301      	adds	r3, #1
 800559a:	e009      	b.n	80055b0 <HAL_I2C_Init+0xc8>
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055a2:	fb02 f303 	mul.w	r3, r2, r3
 80055a6:	4a63      	ldr	r2, [pc, #396]	; (8005734 <HAL_I2C_Init+0x24c>)
 80055a8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ac:	099b      	lsrs	r3, r3, #6
 80055ae:	3301      	adds	r3, #1
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6812      	ldr	r2, [r2, #0]
 80055b4:	430b      	orrs	r3, r1
 80055b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	69db      	ldr	r3, [r3, #28]
 80055be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	4956      	ldr	r1, [pc, #344]	; (8005724 <HAL_I2C_Init+0x23c>)
 80055cc:	428b      	cmp	r3, r1
 80055ce:	d80d      	bhi.n	80055ec <HAL_I2C_Init+0x104>
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	1e59      	subs	r1, r3, #1
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	fbb1 f3f3 	udiv	r3, r1, r3
 80055de:	3301      	adds	r3, #1
 80055e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055e4:	2b04      	cmp	r3, #4
 80055e6:	bf38      	it	cc
 80055e8:	2304      	movcc	r3, #4
 80055ea:	e04f      	b.n	800568c <HAL_I2C_Init+0x1a4>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d111      	bne.n	8005618 <HAL_I2C_Init+0x130>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	1e58      	subs	r0, r3, #1
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6859      	ldr	r1, [r3, #4]
 80055fc:	460b      	mov	r3, r1
 80055fe:	005b      	lsls	r3, r3, #1
 8005600:	440b      	add	r3, r1
 8005602:	fbb0 f3f3 	udiv	r3, r0, r3
 8005606:	3301      	adds	r3, #1
 8005608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800560c:	2b00      	cmp	r3, #0
 800560e:	bf0c      	ite	eq
 8005610:	2301      	moveq	r3, #1
 8005612:	2300      	movne	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	e012      	b.n	800563e <HAL_I2C_Init+0x156>
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	1e58      	subs	r0, r3, #1
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6859      	ldr	r1, [r3, #4]
 8005620:	460b      	mov	r3, r1
 8005622:	009b      	lsls	r3, r3, #2
 8005624:	440b      	add	r3, r1
 8005626:	0099      	lsls	r1, r3, #2
 8005628:	440b      	add	r3, r1
 800562a:	fbb0 f3f3 	udiv	r3, r0, r3
 800562e:	3301      	adds	r3, #1
 8005630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005634:	2b00      	cmp	r3, #0
 8005636:	bf0c      	ite	eq
 8005638:	2301      	moveq	r3, #1
 800563a:	2300      	movne	r3, #0
 800563c:	b2db      	uxtb	r3, r3
 800563e:	2b00      	cmp	r3, #0
 8005640:	d001      	beq.n	8005646 <HAL_I2C_Init+0x15e>
 8005642:	2301      	movs	r3, #1
 8005644:	e022      	b.n	800568c <HAL_I2C_Init+0x1a4>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10e      	bne.n	800566c <HAL_I2C_Init+0x184>
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1e58      	subs	r0, r3, #1
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6859      	ldr	r1, [r3, #4]
 8005656:	460b      	mov	r3, r1
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	440b      	add	r3, r1
 800565c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005660:	3301      	adds	r3, #1
 8005662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566a:	e00f      	b.n	800568c <HAL_I2C_Init+0x1a4>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	1e58      	subs	r0, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6859      	ldr	r1, [r3, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	0099      	lsls	r1, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005682:	3301      	adds	r3, #1
 8005684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	6809      	ldr	r1, [r1, #0]
 8005690:	4313      	orrs	r3, r2
 8005692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	69da      	ldr	r2, [r3, #28]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	431a      	orrs	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80056ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6911      	ldr	r1, [r2, #16]
 80056c2:	687a      	ldr	r2, [r7, #4]
 80056c4:	68d2      	ldr	r2, [r2, #12]
 80056c6:	4311      	orrs	r1, r2
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6812      	ldr	r2, [r2, #0]
 80056cc:	430b      	orrs	r3, r1
 80056ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	699b      	ldr	r3, [r3, #24]
 80056e2:	431a      	orrs	r2, r3
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f042 0201 	orr.w	r2, r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2220      	movs	r2, #32
 8005706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	000186a0 	.word	0x000186a0
 8005728:	001e847f 	.word	0x001e847f
 800572c:	003d08ff 	.word	0x003d08ff
 8005730:	431bde83 	.word	0x431bde83
 8005734:	10624dd3 	.word	0x10624dd3

08005738 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af02      	add	r7, sp, #8
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	607a      	str	r2, [r7, #4]
 8005742:	461a      	mov	r2, r3
 8005744:	460b      	mov	r3, r1
 8005746:	817b      	strh	r3, [r7, #10]
 8005748:	4613      	mov	r3, r2
 800574a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800574c:	f7fe ffcc 	bl	80046e8 <HAL_GetTick>
 8005750:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005758:	b2db      	uxtb	r3, r3
 800575a:	2b20      	cmp	r3, #32
 800575c:	f040 80e0 	bne.w	8005920 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	9300      	str	r3, [sp, #0]
 8005764:	2319      	movs	r3, #25
 8005766:	2201      	movs	r2, #1
 8005768:	4970      	ldr	r1, [pc, #448]	; (800592c <HAL_I2C_Master_Transmit+0x1f4>)
 800576a:	68f8      	ldr	r0, [r7, #12]
 800576c:	f000 fd5e 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005776:	2302      	movs	r3, #2
 8005778:	e0d3      	b.n	8005922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005780:	2b01      	cmp	r3, #1
 8005782:	d101      	bne.n	8005788 <HAL_I2C_Master_Transmit+0x50>
 8005784:	2302      	movs	r3, #2
 8005786:	e0cc      	b.n	8005922 <HAL_I2C_Master_Transmit+0x1ea>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 0301 	and.w	r3, r3, #1
 800579a:	2b01      	cmp	r3, #1
 800579c:	d007      	beq.n	80057ae <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f042 0201 	orr.w	r2, r2, #1
 80057ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2221      	movs	r2, #33	; 0x21
 80057c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2210      	movs	r2, #16
 80057ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2200      	movs	r2, #0
 80057d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	893a      	ldrh	r2, [r7, #8]
 80057de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	4a50      	ldr	r2, [pc, #320]	; (8005930 <HAL_I2C_Master_Transmit+0x1f8>)
 80057ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80057f0:	8979      	ldrh	r1, [r7, #10]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	6a3a      	ldr	r2, [r7, #32]
 80057f6:	68f8      	ldr	r0, [r7, #12]
 80057f8:	f000 fbec 	bl	8005fd4 <I2C_MasterRequestWrite>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005802:	2301      	movs	r3, #1
 8005804:	e08d      	b.n	8005922 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005806:	2300      	movs	r3, #0
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	613b      	str	r3, [r7, #16]
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	699b      	ldr	r3, [r3, #24]
 8005818:	613b      	str	r3, [r7, #16]
 800581a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800581c:	e066      	b.n	80058ec <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800581e:	697a      	ldr	r2, [r7, #20]
 8005820:	6a39      	ldr	r1, [r7, #32]
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	f000 fdd8 	bl	80063d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00d      	beq.n	800584a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	2b04      	cmp	r3, #4
 8005834:	d107      	bne.n	8005846 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005844:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005846:	2301      	movs	r3, #1
 8005848:	e06b      	b.n	8005922 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584e:	781a      	ldrb	r2, [r3, #0]
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800585a:	1c5a      	adds	r2, r3, #1
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005864:	b29b      	uxth	r3, r3
 8005866:	3b01      	subs	r3, #1
 8005868:	b29a      	uxth	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005872:	3b01      	subs	r3, #1
 8005874:	b29a      	uxth	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	695b      	ldr	r3, [r3, #20]
 8005880:	f003 0304 	and.w	r3, r3, #4
 8005884:	2b04      	cmp	r3, #4
 8005886:	d11b      	bne.n	80058c0 <HAL_I2C_Master_Transmit+0x188>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800588c:	2b00      	cmp	r3, #0
 800588e:	d017      	beq.n	80058c0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	781a      	ldrb	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a0:	1c5a      	adds	r2, r3, #1
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	3b01      	subs	r3, #1
 80058ae:	b29a      	uxth	r2, r3
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058c0:	697a      	ldr	r2, [r7, #20]
 80058c2:	6a39      	ldr	r1, [r7, #32]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fdc8 	bl	800645a <I2C_WaitOnBTFFlagUntilTimeout>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00d      	beq.n	80058ec <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d4:	2b04      	cmp	r3, #4
 80058d6:	d107      	bne.n	80058e8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058e6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e01a      	b.n	8005922 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d194      	bne.n	800581e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005902:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2220      	movs	r2, #32
 8005908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2200      	movs	r2, #0
 8005918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800591c:	2300      	movs	r3, #0
 800591e:	e000      	b.n	8005922 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005920:	2302      	movs	r3, #2
  }
}
 8005922:	4618      	mov	r0, r3
 8005924:	3718      	adds	r7, #24
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	00100002 	.word	0x00100002
 8005930:	ffff0000 	.word	0xffff0000

08005934 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b08c      	sub	sp, #48	; 0x30
 8005938:	af02      	add	r7, sp, #8
 800593a:	60f8      	str	r0, [r7, #12]
 800593c:	607a      	str	r2, [r7, #4]
 800593e:	461a      	mov	r2, r3
 8005940:	460b      	mov	r3, r1
 8005942:	817b      	strh	r3, [r7, #10]
 8005944:	4613      	mov	r3, r2
 8005946:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005948:	f7fe fece 	bl	80046e8 <HAL_GetTick>
 800594c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b20      	cmp	r3, #32
 8005958:	f040 8213 	bne.w	8005d82 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2319      	movs	r3, #25
 8005962:	2201      	movs	r2, #1
 8005964:	497e      	ldr	r1, [pc, #504]	; (8005b60 <HAL_I2C_Master_Receive+0x22c>)
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f000 fc60 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d001      	beq.n	8005976 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005972:	2302      	movs	r3, #2
 8005974:	e206      	b.n	8005d84 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800597c:	2b01      	cmp	r3, #1
 800597e:	d101      	bne.n	8005984 <HAL_I2C_Master_Receive+0x50>
 8005980:	2302      	movs	r3, #2
 8005982:	e1ff      	b.n	8005d84 <HAL_I2C_Master_Receive+0x450>
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b01      	cmp	r3, #1
 8005998:	d007      	beq.n	80059aa <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0201 	orr.w	r2, r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059b8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2222      	movs	r2, #34	; 0x22
 80059be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2210      	movs	r2, #16
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	893a      	ldrh	r2, [r7, #8]
 80059da:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	4a5e      	ldr	r2, [pc, #376]	; (8005b64 <HAL_I2C_Master_Receive+0x230>)
 80059ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059ec:	8979      	ldrh	r1, [r7, #10]
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f2:	68f8      	ldr	r0, [r7, #12]
 80059f4:	f000 fb64 	bl	80060c0 <I2C_MasterRequestRead>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d001      	beq.n	8005a02 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e1c0      	b.n	8005d84 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d113      	bne.n	8005a32 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	623b      	str	r3, [r7, #32]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	623b      	str	r3, [r7, #32]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	623b      	str	r3, [r7, #32]
 8005a1e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e194      	b.n	8005d5c <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d11d      	bne.n	8005a76 <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a48:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005a4a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	61fb      	str	r3, [r7, #28]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	61fb      	str	r3, [r7, #28]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a72:	b662      	cpsie	i
 8005a74:	e172      	b.n	8005d5c <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d11d      	bne.n	8005aba <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a8c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005a8e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a90:	2300      	movs	r3, #0
 8005a92:	61bb      	str	r3, [r7, #24]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	61bb      	str	r3, [r7, #24]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	61bb      	str	r3, [r7, #24]
 8005aa4:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681a      	ldr	r2, [r3, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005ab6:	b662      	cpsie	i
 8005ab8:	e150      	b.n	8005d5c <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aca:	2300      	movs	r3, #0
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	695b      	ldr	r3, [r3, #20]
 8005ad4:	617b      	str	r3, [r7, #20]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	699b      	ldr	r3, [r3, #24]
 8005adc:	617b      	str	r3, [r7, #20]
 8005ade:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005ae0:	e13c      	b.n	8005d5c <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	f200 80f5 	bhi.w	8005cd6 <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d123      	bne.n	8005b3c <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005af8:	68f8      	ldr	r0, [r7, #12]
 8005afa:	f000 fcef 	bl	80064dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d001      	beq.n	8005b08 <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e13d      	b.n	8005d84 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	691a      	ldr	r2, [r3, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b24:	3b01      	subs	r3, #1
 8005b26:	b29a      	uxth	r2, r3
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	3b01      	subs	r3, #1
 8005b34:	b29a      	uxth	r2, r3
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005b3a:	e10f      	b.n	8005d5c <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d150      	bne.n	8005be6 <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	9300      	str	r3, [sp, #0]
 8005b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4906      	ldr	r1, [pc, #24]	; (8005b68 <HAL_I2C_Master_Receive+0x234>)
 8005b4e:	68f8      	ldr	r0, [r7, #12]
 8005b50:	f000 fb6c 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 8005b54:	4603      	mov	r3, r0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d008      	beq.n	8005b6c <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e112      	b.n	8005d84 <HAL_I2C_Master_Receive+0x450>
 8005b5e:	bf00      	nop
 8005b60:	00100002 	.word	0x00100002
 8005b64:	ffff0000 	.word	0xffff0000
 8005b68:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8005b6c:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b7c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	691a      	ldr	r2, [r3, #16]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b88:	b2d2      	uxtb	r2, r2
 8005b8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	1c5a      	adds	r2, r3, #1
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b9a:	3b01      	subs	r3, #1
 8005b9c:	b29a      	uxth	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005bb0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	691a      	ldr	r2, [r3, #16]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bbc:	b2d2      	uxtb	r2, r2
 8005bbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	3b01      	subs	r3, #1
 8005bde:	b29a      	uxth	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005be4:	e0ba      	b.n	8005d5c <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	2200      	movs	r2, #0
 8005bee:	4967      	ldr	r1, [pc, #412]	; (8005d8c <HAL_I2C_Master_Receive+0x458>)
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fb1b 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e0c1      	b.n	8005d84 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c0e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8005c10:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	b2d2      	uxtb	r2, r2
 8005c1e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c24:	1c5a      	adds	r2, r3, #1
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	3b01      	subs	r3, #1
 8005c3e:	b29a      	uxth	r2, r3
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c46:	9300      	str	r3, [sp, #0]
 8005c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	494f      	ldr	r1, [pc, #316]	; (8005d8c <HAL_I2C_Master_Receive+0x458>)
 8005c4e:	68f8      	ldr	r0, [r7, #12]
 8005c50:	f000 faec 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d001      	beq.n	8005c5e <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e092      	b.n	8005d84 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c6c:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	691a      	ldr	r2, [r3, #16]
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c80:	1c5a      	adds	r2, r3, #1
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	3b01      	subs	r3, #1
 8005c9a:	b29a      	uxth	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8005ca0:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	691a      	ldr	r2, [r3, #16]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cac:	b2d2      	uxtb	r2, r2
 8005cae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cca:	b29b      	uxth	r3, r3
 8005ccc:	3b01      	subs	r3, #1
 8005cce:	b29a      	uxth	r2, r3
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cd4:	e042      	b.n	8005d5c <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cda:	68f8      	ldr	r0, [r7, #12]
 8005cdc:	f000 fbfe 	bl	80064dc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d001      	beq.n	8005cea <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e04c      	b.n	8005d84 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	691a      	ldr	r2, [r3, #16]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf4:	b2d2      	uxtb	r2, r2
 8005cf6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d06:	3b01      	subs	r3, #1
 8005d08:	b29a      	uxth	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	3b01      	subs	r3, #1
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	695b      	ldr	r3, [r3, #20]
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b04      	cmp	r3, #4
 8005d28:	d118      	bne.n	8005d5c <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691a      	ldr	r2, [r3, #16]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d34:	b2d2      	uxtb	r2, r2
 8005d36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	1c5a      	adds	r2, r3, #1
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d46:	3b01      	subs	r3, #1
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d52:	b29b      	uxth	r3, r3
 8005d54:	3b01      	subs	r3, #1
 8005d56:	b29a      	uxth	r2, r3
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	f47f aebe 	bne.w	8005ae2 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2220      	movs	r2, #32
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e000      	b.n	8005d84 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3728      	adds	r7, #40	; 0x28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	00010004 	.word	0x00010004

08005d90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b08a      	sub	sp, #40	; 0x28
 8005d94:	af02      	add	r7, sp, #8
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	607a      	str	r2, [r7, #4]
 8005d9a:	603b      	str	r3, [r7, #0]
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005da0:	f7fe fca2 	bl	80046e8 <HAL_GetTick>
 8005da4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8005da6:	2301      	movs	r3, #1
 8005da8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	f040 8105 	bne.w	8005fc2 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	9300      	str	r3, [sp, #0]
 8005dbc:	2319      	movs	r3, #25
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	4982      	ldr	r1, [pc, #520]	; (8005fcc <HAL_I2C_IsDeviceReady+0x23c>)
 8005dc2:	68f8      	ldr	r0, [r7, #12]
 8005dc4:	f000 fa32 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d001      	beq.n	8005dd2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e0f8      	b.n	8005fc4 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_I2C_IsDeviceReady+0x50>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e0f1      	b.n	8005fc4 <HAL_I2C_IsDeviceReady+0x234>
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d007      	beq.n	8005e06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f042 0201 	orr.w	r2, r2, #1
 8005e04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2224      	movs	r2, #36	; 0x24
 8005e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	4a6a      	ldr	r2, [pc, #424]	; (8005fd0 <HAL_I2C_IsDeviceReady+0x240>)
 8005e28:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005e38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005e46:	68f8      	ldr	r0, [r7, #12]
 8005e48:	f000 f9f0 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e0b6      	b.n	8005fc4 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e56:	897b      	ldrh	r3, [r7, #10]
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005e64:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005e66:	f7fe fc3f 	bl	80046e8 <HAL_GetTick>
 8005e6a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	bf0c      	ite	eq
 8005e7a:	2301      	moveq	r3, #1
 8005e7c:	2300      	movne	r3, #0
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	695b      	ldr	r3, [r3, #20]
 8005e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e90:	bf0c      	ite	eq
 8005e92:	2301      	moveq	r3, #1
 8005e94:	2300      	movne	r3, #0
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e9a:	e025      	b.n	8005ee8 <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e9c:	f7fe fc24 	bl	80046e8 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	683a      	ldr	r2, [r7, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d302      	bcc.n	8005eb2 <HAL_I2C_IsDeviceReady+0x122>
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	22a0      	movs	r2, #160	; 0xa0
 8005eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	695b      	ldr	r3, [r3, #20]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b02      	cmp	r3, #2
 8005ec6:	bf0c      	ite	eq
 8005ec8:	2301      	moveq	r3, #1
 8005eca:	2300      	movne	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ede:	bf0c      	ite	eq
 8005ee0:	2301      	moveq	r3, #1
 8005ee2:	2300      	movne	r3, #0
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2ba0      	cmp	r3, #160	; 0xa0
 8005ef2:	d005      	beq.n	8005f00 <HAL_I2C_IsDeviceReady+0x170>
 8005ef4:	7dfb      	ldrb	r3, [r7, #23]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <HAL_I2C_IsDeviceReady+0x170>
 8005efa:	7dbb      	ldrb	r3, [r7, #22]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0cd      	beq.n	8005e9c <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d129      	bne.n	8005f6a <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f24:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f26:	2300      	movs	r3, #0
 8005f28:	613b      	str	r3, [r7, #16]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	613b      	str	r3, [r7, #16]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	9300      	str	r3, [sp, #0]
 8005f40:	2319      	movs	r3, #25
 8005f42:	2201      	movs	r2, #1
 8005f44:	4921      	ldr	r1, [pc, #132]	; (8005fcc <HAL_I2C_IsDeviceReady+0x23c>)
 8005f46:	68f8      	ldr	r0, [r7, #12]
 8005f48:	f000 f970 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d001      	beq.n	8005f56 <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8005f52:	2301      	movs	r3, #1
 8005f54:	e036      	b.n	8005fc4 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e02c      	b.n	8005fc4 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f78:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005f82:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f84:	69fb      	ldr	r3, [r7, #28]
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	2319      	movs	r3, #25
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	490f      	ldr	r1, [pc, #60]	; (8005fcc <HAL_I2C_IsDeviceReady+0x23c>)
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f000 f94c 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d001      	beq.n	8005f9e <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e012      	b.n	8005fc4 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005fa4:	69ba      	ldr	r2, [r7, #24]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	f4ff af3e 	bcc.w	8005e2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8005fc2:	2302      	movs	r3, #2
  }
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	00100002 	.word	0x00100002
 8005fd0:	ffff0000 	.word	0xffff0000

08005fd4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b088      	sub	sp, #32
 8005fd8:	af02      	add	r7, sp, #8
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	607a      	str	r2, [r7, #4]
 8005fde:	603b      	str	r3, [r7, #0]
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d006      	beq.n	8005ffe <I2C_MasterRequestWrite+0x2a>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d003      	beq.n	8005ffe <I2C_MasterRequestWrite+0x2a>
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ffc:	d108      	bne.n	8006010 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	681a      	ldr	r2, [r3, #0]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800600c:	601a      	str	r2, [r3, #0]
 800600e:	e00b      	b.n	8006028 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006014:	2b12      	cmp	r3, #18
 8006016:	d107      	bne.n	8006028 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006026:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	9300      	str	r3, [sp, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006034:	68f8      	ldr	r0, [r7, #12]
 8006036:	f000 f8f9 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 800603a:	4603      	mov	r3, r0
 800603c:	2b00      	cmp	r3, #0
 800603e:	d001      	beq.n	8006044 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e035      	b.n	80060b0 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	691b      	ldr	r3, [r3, #16]
 8006048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800604c:	d108      	bne.n	8006060 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800604e:	897b      	ldrh	r3, [r7, #10]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	461a      	mov	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800605c:	611a      	str	r2, [r3, #16]
 800605e:	e01b      	b.n	8006098 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006060:	897b      	ldrh	r3, [r7, #10]
 8006062:	11db      	asrs	r3, r3, #7
 8006064:	b2db      	uxtb	r3, r3
 8006066:	f003 0306 	and.w	r3, r3, #6
 800606a:	b2db      	uxtb	r3, r3
 800606c:	f063 030f 	orn	r3, r3, #15
 8006070:	b2da      	uxtb	r2, r3
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	490e      	ldr	r1, [pc, #56]	; (80060b8 <I2C_MasterRequestWrite+0xe4>)
 800607e:	68f8      	ldr	r0, [r7, #12]
 8006080:	f000 f92b 	bl	80062da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d001      	beq.n	800608e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e010      	b.n	80060b0 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800608e:	897b      	ldrh	r3, [r7, #10]
 8006090:	b2da      	uxtb	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	4907      	ldr	r1, [pc, #28]	; (80060bc <I2C_MasterRequestWrite+0xe8>)
 800609e:	68f8      	ldr	r0, [r7, #12]
 80060a0:	f000 f91b 	bl	80062da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d001      	beq.n	80060ae <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e000      	b.n	80060b0 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 80060ae:	2300      	movs	r3, #0
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3718      	adds	r7, #24
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	00010008 	.word	0x00010008
 80060bc:	00010002 	.word	0x00010002

080060c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	607a      	str	r2, [r7, #4]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	460b      	mov	r3, r1
 80060ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80060e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d006      	beq.n	80060fa <I2C_MasterRequestRead+0x3a>
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d003      	beq.n	80060fa <I2C_MasterRequestRead+0x3a>
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060f8:	d108      	bne.n	800610c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	681a      	ldr	r2, [r3, #0]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	e00b      	b.n	8006124 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006110:	2b11      	cmp	r3, #17
 8006112:	d107      	bne.n	8006124 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006122:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	9300      	str	r3, [sp, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2200      	movs	r2, #0
 800612c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006130:	68f8      	ldr	r0, [r7, #12]
 8006132:	f000 f87b 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d001      	beq.n	8006140 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e06d      	b.n	800621c <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006148:	d108      	bne.n	800615c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800614a:	897b      	ldrh	r3, [r7, #10]
 800614c:	b2db      	uxtb	r3, r3
 800614e:	f043 0301 	orr.w	r3, r3, #1
 8006152:	b2da      	uxtb	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	611a      	str	r2, [r3, #16]
 800615a:	e053      	b.n	8006204 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800615c:	897b      	ldrh	r3, [r7, #10]
 800615e:	11db      	asrs	r3, r3, #7
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 0306 	and.w	r3, r3, #6
 8006166:	b2db      	uxtb	r3, r3
 8006168:	f063 030f 	orn	r3, r3, #15
 800616c:	b2da      	uxtb	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	492a      	ldr	r1, [pc, #168]	; (8006224 <I2C_MasterRequestRead+0x164>)
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f8ad 	bl	80062da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e048      	b.n	800621c <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800618a:	897b      	ldrh	r3, [r7, #10]
 800618c:	b2da      	uxtb	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	4923      	ldr	r1, [pc, #140]	; (8006228 <I2C_MasterRequestRead+0x168>)
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f89d 	bl	80062da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e038      	b.n	800621c <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80061aa:	2300      	movs	r3, #0
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	9300      	str	r3, [sp, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2200      	movs	r2, #0
 80061d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061dc:	68f8      	ldr	r0, [r7, #12]
 80061de:	f000 f825 	bl	800622c <I2C_WaitOnFlagUntilTimeout>
 80061e2:	4603      	mov	r3, r0
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d001      	beq.n	80061ec <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80061e8:	2301      	movs	r3, #1
 80061ea:	e017      	b.n	800621c <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80061ec:	897b      	ldrh	r3, [r7, #10]
 80061ee:	11db      	asrs	r3, r3, #7
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	f003 0306 	and.w	r3, r3, #6
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	f063 030e 	orn	r3, r3, #14
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	4907      	ldr	r1, [pc, #28]	; (8006228 <I2C_MasterRequestRead+0x168>)
 800620a:	68f8      	ldr	r0, [r7, #12]
 800620c:	f000 f865 	bl	80062da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e000      	b.n	800621c <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3718      	adds	r7, #24
 8006220:	46bd      	mov	sp, r7
 8006222:	bd80      	pop	{r7, pc}
 8006224:	00010008 	.word	0x00010008
 8006228:	00010002 	.word	0x00010002

0800622c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	603b      	str	r3, [r7, #0]
 8006238:	4613      	mov	r3, r2
 800623a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800623c:	e025      	b.n	800628a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006244:	d021      	beq.n	800628a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006246:	f7fe fa4f 	bl	80046e8 <HAL_GetTick>
 800624a:	4602      	mov	r2, r0
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	1ad3      	subs	r3, r2, r3
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	429a      	cmp	r2, r3
 8006254:	d302      	bcc.n	800625c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d116      	bne.n	800628a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2220      	movs	r2, #32
 8006266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	f043 0220 	orr.w	r2, r3, #32
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e023      	b.n	80062d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	0c1b      	lsrs	r3, r3, #16
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d10d      	bne.n	80062b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	43da      	mvns	r2, r3
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	4013      	ands	r3, r2
 80062a0:	b29b      	uxth	r3, r3
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	bf0c      	ite	eq
 80062a6:	2301      	moveq	r3, #1
 80062a8:	2300      	movne	r3, #0
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	461a      	mov	r2, r3
 80062ae:	e00c      	b.n	80062ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	43da      	mvns	r2, r3
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4013      	ands	r3, r2
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	bf0c      	ite	eq
 80062c2:	2301      	moveq	r3, #1
 80062c4:	2300      	movne	r3, #0
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	461a      	mov	r2, r3
 80062ca:	79fb      	ldrb	r3, [r7, #7]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d0b6      	beq.n	800623e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3710      	adds	r7, #16
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80062da:	b580      	push	{r7, lr}
 80062dc:	b084      	sub	sp, #16
 80062de:	af00      	add	r7, sp, #0
 80062e0:	60f8      	str	r0, [r7, #12]
 80062e2:	60b9      	str	r1, [r7, #8]
 80062e4:	607a      	str	r2, [r7, #4]
 80062e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062e8:	e051      	b.n	800638e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	695b      	ldr	r3, [r3, #20]
 80062f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f8:	d123      	bne.n	8006342 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006308:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006312:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2220      	movs	r2, #32
 800631e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	2200      	movs	r2, #0
 8006326:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	f043 0204 	orr.w	r2, r3, #4
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	2200      	movs	r2, #0
 800633a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e046      	b.n	80063d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006348:	d021      	beq.n	800638e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800634a:	f7fe f9cd 	bl	80046e8 <HAL_GetTick>
 800634e:	4602      	mov	r2, r0
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	1ad3      	subs	r3, r2, r3
 8006354:	687a      	ldr	r2, [r7, #4]
 8006356:	429a      	cmp	r2, r3
 8006358:	d302      	bcc.n	8006360 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d116      	bne.n	800638e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800637a:	f043 0220 	orr.w	r2, r3, #32
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	2200      	movs	r2, #0
 8006386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e020      	b.n	80063d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	0c1b      	lsrs	r3, r3, #16
 8006392:	b2db      	uxtb	r3, r3
 8006394:	2b01      	cmp	r3, #1
 8006396:	d10c      	bne.n	80063b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	43da      	mvns	r2, r3
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4013      	ands	r3, r2
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	bf14      	ite	ne
 80063aa:	2301      	movne	r3, #1
 80063ac:	2300      	moveq	r3, #0
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	e00b      	b.n	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	43da      	mvns	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	4013      	ands	r3, r2
 80063be:	b29b      	uxth	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	bf14      	ite	ne
 80063c4:	2301      	movne	r3, #1
 80063c6:	2300      	moveq	r3, #0
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d18d      	bne.n	80062ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80063ce:	2300      	movs	r3, #0
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063e4:	e02d      	b.n	8006442 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063e6:	68f8      	ldr	r0, [r7, #12]
 80063e8:	f000 f8ce 	bl	8006588 <I2C_IsAcknowledgeFailed>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d001      	beq.n	80063f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	e02d      	b.n	8006452 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063fc:	d021      	beq.n	8006442 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063fe:	f7fe f973 	bl	80046e8 <HAL_GetTick>
 8006402:	4602      	mov	r2, r0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	1ad3      	subs	r3, r2, r3
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	429a      	cmp	r2, r3
 800640c:	d302      	bcc.n	8006414 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800640e:	68bb      	ldr	r3, [r7, #8]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d116      	bne.n	8006442 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2200      	movs	r2, #0
 8006418:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2220      	movs	r2, #32
 800641e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800642e:	f043 0220 	orr.w	r2, r3, #32
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	e007      	b.n	8006452 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800644c:	2b80      	cmp	r3, #128	; 0x80
 800644e:	d1ca      	bne.n	80063e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	60f8      	str	r0, [r7, #12]
 8006462:	60b9      	str	r1, [r7, #8]
 8006464:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006466:	e02d      	b.n	80064c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006468:	68f8      	ldr	r0, [r7, #12]
 800646a:	f000 f88d 	bl	8006588 <I2C_IsAcknowledgeFailed>
 800646e:	4603      	mov	r3, r0
 8006470:	2b00      	cmp	r3, #0
 8006472:	d001      	beq.n	8006478 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006474:	2301      	movs	r3, #1
 8006476:	e02d      	b.n	80064d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800647e:	d021      	beq.n	80064c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006480:	f7fe f932 	bl	80046e8 <HAL_GetTick>
 8006484:	4602      	mov	r2, r0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	1ad3      	subs	r3, r2, r3
 800648a:	68ba      	ldr	r2, [r7, #8]
 800648c:	429a      	cmp	r2, r3
 800648e:	d302      	bcc.n	8006496 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d116      	bne.n	80064c4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2200      	movs	r2, #0
 800649a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b0:	f043 0220 	orr.w	r2, r3, #32
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	e007      	b.n	80064d4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	695b      	ldr	r3, [r3, #20]
 80064ca:	f003 0304 	and.w	r3, r3, #4
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d1ca      	bne.n	8006468 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80064d2:	2300      	movs	r3, #0
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b084      	sub	sp, #16
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80064e8:	e042      	b.n	8006570 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	f003 0310 	and.w	r3, r3, #16
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d119      	bne.n	800652c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f06f 0210 	mvn.w	r2, #16
 8006500:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2220      	movs	r2, #32
 800650c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e029      	b.n	8006580 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652c:	f7fe f8dc 	bl	80046e8 <HAL_GetTick>
 8006530:	4602      	mov	r2, r0
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	1ad3      	subs	r3, r2, r3
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	429a      	cmp	r2, r3
 800653a:	d302      	bcc.n	8006542 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d116      	bne.n	8006570 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2200      	movs	r2, #0
 8006546:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2220      	movs	r2, #32
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655c:	f043 0220 	orr.w	r2, r3, #32
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800656c:	2301      	movs	r3, #1
 800656e:	e007      	b.n	8006580 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657a:	2b40      	cmp	r3, #64	; 0x40
 800657c:	d1b5      	bne.n	80064ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	695b      	ldr	r3, [r3, #20]
 8006596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800659e:	d11b      	bne.n	80065d8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80065a8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	f043 0204 	orr.w	r2, r3, #4
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e000      	b.n	80065da <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	bc80      	pop	{r7}
 80065e2:	4770      	bx	lr

080065e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e26c      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	f000 8087 	beq.w	8006712 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006604:	4b92      	ldr	r3, [pc, #584]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	f003 030c 	and.w	r3, r3, #12
 800660c:	2b04      	cmp	r3, #4
 800660e:	d00c      	beq.n	800662a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006610:	4b8f      	ldr	r3, [pc, #572]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006612:	685b      	ldr	r3, [r3, #4]
 8006614:	f003 030c 	and.w	r3, r3, #12
 8006618:	2b08      	cmp	r3, #8
 800661a:	d112      	bne.n	8006642 <HAL_RCC_OscConfig+0x5e>
 800661c:	4b8c      	ldr	r3, [pc, #560]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006628:	d10b      	bne.n	8006642 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800662a:	4b89      	ldr	r3, [pc, #548]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006632:	2b00      	cmp	r3, #0
 8006634:	d06c      	beq.n	8006710 <HAL_RCC_OscConfig+0x12c>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d168      	bne.n	8006710 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	e246      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800664a:	d106      	bne.n	800665a <HAL_RCC_OscConfig+0x76>
 800664c:	4b80      	ldr	r3, [pc, #512]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a7f      	ldr	r2, [pc, #508]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006652:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006656:	6013      	str	r3, [r2, #0]
 8006658:	e02e      	b.n	80066b8 <HAL_RCC_OscConfig+0xd4>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d10c      	bne.n	800667c <HAL_RCC_OscConfig+0x98>
 8006662:	4b7b      	ldr	r3, [pc, #492]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a7a      	ldr	r2, [pc, #488]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006668:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	4b78      	ldr	r3, [pc, #480]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a77      	ldr	r2, [pc, #476]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006674:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	e01d      	b.n	80066b8 <HAL_RCC_OscConfig+0xd4>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006684:	d10c      	bne.n	80066a0 <HAL_RCC_OscConfig+0xbc>
 8006686:	4b72      	ldr	r3, [pc, #456]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a71      	ldr	r2, [pc, #452]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 800668c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006690:	6013      	str	r3, [r2, #0]
 8006692:	4b6f      	ldr	r3, [pc, #444]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a6e      	ldr	r2, [pc, #440]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006698:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800669c:	6013      	str	r3, [r2, #0]
 800669e:	e00b      	b.n	80066b8 <HAL_RCC_OscConfig+0xd4>
 80066a0:	4b6b      	ldr	r3, [pc, #428]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a6a      	ldr	r2, [pc, #424]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 80066a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066aa:	6013      	str	r3, [r2, #0]
 80066ac:	4b68      	ldr	r3, [pc, #416]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a67      	ldr	r2, [pc, #412]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 80066b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685b      	ldr	r3, [r3, #4]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d013      	beq.n	80066e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c0:	f7fe f812 	bl	80046e8 <HAL_GetTick>
 80066c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066c6:	e008      	b.n	80066da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066c8:	f7fe f80e 	bl	80046e8 <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b64      	cmp	r3, #100	; 0x64
 80066d4:	d901      	bls.n	80066da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e1fa      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066da:	4b5d      	ldr	r3, [pc, #372]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d0f0      	beq.n	80066c8 <HAL_RCC_OscConfig+0xe4>
 80066e6:	e014      	b.n	8006712 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066e8:	f7fd fffe 	bl	80046e8 <HAL_GetTick>
 80066ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ee:	e008      	b.n	8006702 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066f0:	f7fd fffa 	bl	80046e8 <HAL_GetTick>
 80066f4:	4602      	mov	r2, r0
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	1ad3      	subs	r3, r2, r3
 80066fa:	2b64      	cmp	r3, #100	; 0x64
 80066fc:	d901      	bls.n	8006702 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80066fe:	2303      	movs	r3, #3
 8006700:	e1e6      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006702:	4b53      	ldr	r3, [pc, #332]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1f0      	bne.n	80066f0 <HAL_RCC_OscConfig+0x10c>
 800670e:	e000      	b.n	8006712 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006710:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d063      	beq.n	80067e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800671e:	4b4c      	ldr	r3, [pc, #304]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f003 030c 	and.w	r3, r3, #12
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00b      	beq.n	8006742 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800672a:	4b49      	ldr	r3, [pc, #292]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	f003 030c 	and.w	r3, r3, #12
 8006732:	2b08      	cmp	r3, #8
 8006734:	d11c      	bne.n	8006770 <HAL_RCC_OscConfig+0x18c>
 8006736:	4b46      	ldr	r3, [pc, #280]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d116      	bne.n	8006770 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006742:	4b43      	ldr	r3, [pc, #268]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f003 0302 	and.w	r3, r3, #2
 800674a:	2b00      	cmp	r3, #0
 800674c:	d005      	beq.n	800675a <HAL_RCC_OscConfig+0x176>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	2b01      	cmp	r3, #1
 8006754:	d001      	beq.n	800675a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	e1ba      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800675a:	4b3d      	ldr	r3, [pc, #244]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	00db      	lsls	r3, r3, #3
 8006768:	4939      	ldr	r1, [pc, #228]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 800676a:	4313      	orrs	r3, r2
 800676c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800676e:	e03a      	b.n	80067e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d020      	beq.n	80067ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006778:	4b36      	ldr	r3, [pc, #216]	; (8006854 <HAL_RCC_OscConfig+0x270>)
 800677a:	2201      	movs	r2, #1
 800677c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800677e:	f7fd ffb3 	bl	80046e8 <HAL_GetTick>
 8006782:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006784:	e008      	b.n	8006798 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006786:	f7fd ffaf 	bl	80046e8 <HAL_GetTick>
 800678a:	4602      	mov	r2, r0
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	1ad3      	subs	r3, r2, r3
 8006790:	2b02      	cmp	r3, #2
 8006792:	d901      	bls.n	8006798 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8006794:	2303      	movs	r3, #3
 8006796:	e19b      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006798:	4b2d      	ldr	r3, [pc, #180]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0302 	and.w	r3, r3, #2
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d0f0      	beq.n	8006786 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067a4:	4b2a      	ldr	r3, [pc, #168]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	695b      	ldr	r3, [r3, #20]
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	4927      	ldr	r1, [pc, #156]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 80067b4:	4313      	orrs	r3, r2
 80067b6:	600b      	str	r3, [r1, #0]
 80067b8:	e015      	b.n	80067e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ba:	4b26      	ldr	r3, [pc, #152]	; (8006854 <HAL_RCC_OscConfig+0x270>)
 80067bc:	2200      	movs	r2, #0
 80067be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067c0:	f7fd ff92 	bl	80046e8 <HAL_GetTick>
 80067c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067c6:	e008      	b.n	80067da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067c8:	f7fd ff8e 	bl	80046e8 <HAL_GetTick>
 80067cc:	4602      	mov	r2, r0
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	1ad3      	subs	r3, r2, r3
 80067d2:	2b02      	cmp	r3, #2
 80067d4:	d901      	bls.n	80067da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80067d6:	2303      	movs	r3, #3
 80067d8:	e17a      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067da:	4b1d      	ldr	r3, [pc, #116]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1f0      	bne.n	80067c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0308 	and.w	r3, r3, #8
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d03a      	beq.n	8006868 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	699b      	ldr	r3, [r3, #24]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d019      	beq.n	800682e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067fa:	4b17      	ldr	r3, [pc, #92]	; (8006858 <HAL_RCC_OscConfig+0x274>)
 80067fc:	2201      	movs	r2, #1
 80067fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006800:	f7fd ff72 	bl	80046e8 <HAL_GetTick>
 8006804:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006806:	e008      	b.n	800681a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006808:	f7fd ff6e 	bl	80046e8 <HAL_GetTick>
 800680c:	4602      	mov	r2, r0
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	1ad3      	subs	r3, r2, r3
 8006812:	2b02      	cmp	r3, #2
 8006814:	d901      	bls.n	800681a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8006816:	2303      	movs	r3, #3
 8006818:	e15a      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800681a:	4b0d      	ldr	r3, [pc, #52]	; (8006850 <HAL_RCC_OscConfig+0x26c>)
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	f003 0302 	and.w	r3, r3, #2
 8006822:	2b00      	cmp	r3, #0
 8006824:	d0f0      	beq.n	8006808 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8006826:	2001      	movs	r0, #1
 8006828:	f000 fada 	bl	8006de0 <RCC_Delay>
 800682c:	e01c      	b.n	8006868 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800682e:	4b0a      	ldr	r3, [pc, #40]	; (8006858 <HAL_RCC_OscConfig+0x274>)
 8006830:	2200      	movs	r2, #0
 8006832:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006834:	f7fd ff58 	bl	80046e8 <HAL_GetTick>
 8006838:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800683a:	e00f      	b.n	800685c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800683c:	f7fd ff54 	bl	80046e8 <HAL_GetTick>
 8006840:	4602      	mov	r2, r0
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	1ad3      	subs	r3, r2, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d908      	bls.n	800685c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800684a:	2303      	movs	r3, #3
 800684c:	e140      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
 800684e:	bf00      	nop
 8006850:	40021000 	.word	0x40021000
 8006854:	42420000 	.word	0x42420000
 8006858:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800685c:	4b9e      	ldr	r3, [pc, #632]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 800685e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006860:	f003 0302 	and.w	r3, r3, #2
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e9      	bne.n	800683c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80a6 	beq.w	80069c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006876:	2300      	movs	r3, #0
 8006878:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800687a:	4b97      	ldr	r3, [pc, #604]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10d      	bne.n	80068a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006886:	4b94      	ldr	r3, [pc, #592]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006888:	69db      	ldr	r3, [r3, #28]
 800688a:	4a93      	ldr	r2, [pc, #588]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 800688c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006890:	61d3      	str	r3, [r2, #28]
 8006892:	4b91      	ldr	r3, [pc, #580]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006894:	69db      	ldr	r3, [r3, #28]
 8006896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800689a:	60bb      	str	r3, [r7, #8]
 800689c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800689e:	2301      	movs	r3, #1
 80068a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068a2:	4b8e      	ldr	r3, [pc, #568]	; (8006adc <HAL_RCC_OscConfig+0x4f8>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d118      	bne.n	80068e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068ae:	4b8b      	ldr	r3, [pc, #556]	; (8006adc <HAL_RCC_OscConfig+0x4f8>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	4a8a      	ldr	r2, [pc, #552]	; (8006adc <HAL_RCC_OscConfig+0x4f8>)
 80068b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068ba:	f7fd ff15 	bl	80046e8 <HAL_GetTick>
 80068be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068c0:	e008      	b.n	80068d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068c2:	f7fd ff11 	bl	80046e8 <HAL_GetTick>
 80068c6:	4602      	mov	r2, r0
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	2b64      	cmp	r3, #100	; 0x64
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e0fd      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068d4:	4b81      	ldr	r3, [pc, #516]	; (8006adc <HAL_RCC_OscConfig+0x4f8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d0f0      	beq.n	80068c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d106      	bne.n	80068f6 <HAL_RCC_OscConfig+0x312>
 80068e8:	4b7b      	ldr	r3, [pc, #492]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	4a7a      	ldr	r2, [pc, #488]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 80068ee:	f043 0301 	orr.w	r3, r3, #1
 80068f2:	6213      	str	r3, [r2, #32]
 80068f4:	e02d      	b.n	8006952 <HAL_RCC_OscConfig+0x36e>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10c      	bne.n	8006918 <HAL_RCC_OscConfig+0x334>
 80068fe:	4b76      	ldr	r3, [pc, #472]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	4a75      	ldr	r2, [pc, #468]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	6213      	str	r3, [r2, #32]
 800690a:	4b73      	ldr	r3, [pc, #460]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 800690c:	6a1b      	ldr	r3, [r3, #32]
 800690e:	4a72      	ldr	r2, [pc, #456]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006910:	f023 0304 	bic.w	r3, r3, #4
 8006914:	6213      	str	r3, [r2, #32]
 8006916:	e01c      	b.n	8006952 <HAL_RCC_OscConfig+0x36e>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	2b05      	cmp	r3, #5
 800691e:	d10c      	bne.n	800693a <HAL_RCC_OscConfig+0x356>
 8006920:	4b6d      	ldr	r3, [pc, #436]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	4a6c      	ldr	r2, [pc, #432]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006926:	f043 0304 	orr.w	r3, r3, #4
 800692a:	6213      	str	r3, [r2, #32]
 800692c:	4b6a      	ldr	r3, [pc, #424]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 800692e:	6a1b      	ldr	r3, [r3, #32]
 8006930:	4a69      	ldr	r2, [pc, #420]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006932:	f043 0301 	orr.w	r3, r3, #1
 8006936:	6213      	str	r3, [r2, #32]
 8006938:	e00b      	b.n	8006952 <HAL_RCC_OscConfig+0x36e>
 800693a:	4b67      	ldr	r3, [pc, #412]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	4a66      	ldr	r2, [pc, #408]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006940:	f023 0301 	bic.w	r3, r3, #1
 8006944:	6213      	str	r3, [r2, #32]
 8006946:	4b64      	ldr	r3, [pc, #400]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	4a63      	ldr	r2, [pc, #396]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 800694c:	f023 0304 	bic.w	r3, r3, #4
 8006950:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d015      	beq.n	8006986 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800695a:	f7fd fec5 	bl	80046e8 <HAL_GetTick>
 800695e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006960:	e00a      	b.n	8006978 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006962:	f7fd fec1 	bl	80046e8 <HAL_GetTick>
 8006966:	4602      	mov	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006970:	4293      	cmp	r3, r2
 8006972:	d901      	bls.n	8006978 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e0ab      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006978:	4b57      	ldr	r3, [pc, #348]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	d0ee      	beq.n	8006962 <HAL_RCC_OscConfig+0x37e>
 8006984:	e014      	b.n	80069b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006986:	f7fd feaf 	bl	80046e8 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800698c:	e00a      	b.n	80069a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800698e:	f7fd feab 	bl	80046e8 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	f241 3288 	movw	r2, #5000	; 0x1388
 800699c:	4293      	cmp	r3, r2
 800699e:	d901      	bls.n	80069a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80069a0:	2303      	movs	r3, #3
 80069a2:	e095      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069a4:	4b4c      	ldr	r3, [pc, #304]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1ee      	bne.n	800698e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	2b01      	cmp	r3, #1
 80069b4:	d105      	bne.n	80069c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069b6:	4b48      	ldr	r3, [pc, #288]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 80069b8:	69db      	ldr	r3, [r3, #28]
 80069ba:	4a47      	ldr	r2, [pc, #284]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 80069bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69db      	ldr	r3, [r3, #28]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	f000 8081 	beq.w	8006ace <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80069cc:	4b42      	ldr	r3, [pc, #264]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	f003 030c 	and.w	r3, r3, #12
 80069d4:	2b08      	cmp	r3, #8
 80069d6:	d061      	beq.n	8006a9c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d146      	bne.n	8006a6e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e0:	4b3f      	ldr	r3, [pc, #252]	; (8006ae0 <HAL_RCC_OscConfig+0x4fc>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069e6:	f7fd fe7f 	bl	80046e8 <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80069ec:	e008      	b.n	8006a00 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069ee:	f7fd fe7b 	bl	80046e8 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e067      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a00:	4b35      	ldr	r3, [pc, #212]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1f0      	bne.n	80069ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6a1b      	ldr	r3, [r3, #32]
 8006a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a14:	d108      	bne.n	8006a28 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8006a16:	4b30      	ldr	r3, [pc, #192]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	492d      	ldr	r1, [pc, #180]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006a24:	4313      	orrs	r3, r2
 8006a26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a28:	4b2b      	ldr	r3, [pc, #172]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6a19      	ldr	r1, [r3, #32]
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a38:	430b      	orrs	r3, r1
 8006a3a:	4927      	ldr	r1, [pc, #156]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a40:	4b27      	ldr	r3, [pc, #156]	; (8006ae0 <HAL_RCC_OscConfig+0x4fc>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a46:	f7fd fe4f 	bl	80046e8 <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a4e:	f7fd fe4b 	bl	80046e8 <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e037      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006a60:	4b1d      	ldr	r3, [pc, #116]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d0f0      	beq.n	8006a4e <HAL_RCC_OscConfig+0x46a>
 8006a6c:	e02f      	b.n	8006ace <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ae0 <HAL_RCC_OscConfig+0x4fc>)
 8006a70:	2200      	movs	r2, #0
 8006a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a74:	f7fd fe38 	bl	80046e8 <HAL_GetTick>
 8006a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a7a:	e008      	b.n	8006a8e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a7c:	f7fd fe34 	bl	80046e8 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d901      	bls.n	8006a8e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e020      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006a8e:	4b12      	ldr	r3, [pc, #72]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1f0      	bne.n	8006a7c <HAL_RCC_OscConfig+0x498>
 8006a9a:	e018      	b.n	8006ace <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	69db      	ldr	r3, [r3, #28]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	e013      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8006aa8:	4b0b      	ldr	r3, [pc, #44]	; (8006ad8 <HAL_RCC_OscConfig+0x4f4>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d106      	bne.n	8006aca <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ac6:	429a      	cmp	r2, r3
 8006ac8:	d001      	beq.n	8006ace <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	e000      	b.n	8006ad0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	40021000 	.word	0x40021000
 8006adc:	40007000 	.word	0x40007000
 8006ae0:	42420060 	.word	0x42420060

08006ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b084      	sub	sp, #16
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
 8006aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d101      	bne.n	8006af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e0d0      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006af8:	4b6a      	ldr	r3, [pc, #424]	; (8006ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	683a      	ldr	r2, [r7, #0]
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d910      	bls.n	8006b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b06:	4b67      	ldr	r3, [pc, #412]	; (8006ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f023 0207 	bic.w	r2, r3, #7
 8006b0e:	4965      	ldr	r1, [pc, #404]	; (8006ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b16:	4b63      	ldr	r3, [pc, #396]	; (8006ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 0307 	and.w	r3, r3, #7
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	429a      	cmp	r2, r3
 8006b22:	d001      	beq.n	8006b28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006b24:	2301      	movs	r3, #1
 8006b26:	e0b8      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f003 0302 	and.w	r3, r3, #2
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d020      	beq.n	8006b76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b40:	4b59      	ldr	r3, [pc, #356]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	4a58      	ldr	r2, [pc, #352]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006b4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f003 0308 	and.w	r3, r3, #8
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d005      	beq.n	8006b64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b58:	4b53      	ldr	r3, [pc, #332]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	4a52      	ldr	r2, [pc, #328]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8006b62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b64:	4b50      	ldr	r3, [pc, #320]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	494d      	ldr	r1, [pc, #308]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d040      	beq.n	8006c04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d107      	bne.n	8006b9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b8a:	4b47      	ldr	r3, [pc, #284]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d115      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b96:	2301      	movs	r3, #1
 8006b98:	e07f      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d107      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ba2:	4b41      	ldr	r3, [pc, #260]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d109      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e073      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bb2:	4b3d      	ldr	r3, [pc, #244]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d101      	bne.n	8006bc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e06b      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bc2:	4b39      	ldr	r3, [pc, #228]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	f023 0203 	bic.w	r2, r3, #3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	4936      	ldr	r1, [pc, #216]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bd4:	f7fd fd88 	bl	80046e8 <HAL_GetTick>
 8006bd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bda:	e00a      	b.n	8006bf2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bdc:	f7fd fd84 	bl	80046e8 <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d901      	bls.n	8006bf2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	e053      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bf2:	4b2d      	ldr	r3, [pc, #180]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f003 020c 	and.w	r2, r3, #12
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d1eb      	bne.n	8006bdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c04:	4b27      	ldr	r3, [pc, #156]	; (8006ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0307 	and.w	r3, r3, #7
 8006c0c:	683a      	ldr	r2, [r7, #0]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d210      	bcs.n	8006c34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c12:	4b24      	ldr	r3, [pc, #144]	; (8006ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f023 0207 	bic.w	r2, r3, #7
 8006c1a:	4922      	ldr	r1, [pc, #136]	; (8006ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c22:	4b20      	ldr	r3, [pc, #128]	; (8006ca4 <HAL_RCC_ClockConfig+0x1c0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	683a      	ldr	r2, [r7, #0]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d001      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006c30:	2301      	movs	r3, #1
 8006c32:	e032      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0304 	and.w	r3, r3, #4
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d008      	beq.n	8006c52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c40:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	4916      	ldr	r1, [pc, #88]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006c5e:	4b12      	ldr	r3, [pc, #72]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	00db      	lsls	r3, r3, #3
 8006c6c:	490e      	ldr	r1, [pc, #56]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c72:	f000 f821 	bl	8006cb8 <HAL_RCC_GetSysClockFreq>
 8006c76:	4601      	mov	r1, r0
 8006c78:	4b0b      	ldr	r3, [pc, #44]	; (8006ca8 <HAL_RCC_ClockConfig+0x1c4>)
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	091b      	lsrs	r3, r3, #4
 8006c7e:	f003 030f 	and.w	r3, r3, #15
 8006c82:	4a0a      	ldr	r2, [pc, #40]	; (8006cac <HAL_RCC_ClockConfig+0x1c8>)
 8006c84:	5cd3      	ldrb	r3, [r2, r3]
 8006c86:	fa21 f303 	lsr.w	r3, r1, r3
 8006c8a:	4a09      	ldr	r2, [pc, #36]	; (8006cb0 <HAL_RCC_ClockConfig+0x1cc>)
 8006c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c8e:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <HAL_RCC_ClockConfig+0x1d0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fd fce6 	bl	8004664 <HAL_InitTick>

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40022000 	.word	0x40022000
 8006ca8:	40021000 	.word	0x40021000
 8006cac:	0800a754 	.word	0x0800a754
 8006cb0:	200000d4 	.word	0x200000d4
 8006cb4:	200000d8 	.word	0x200000d8

08006cb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cb8:	b490      	push	{r4, r7}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006cbe:	4b2a      	ldr	r3, [pc, #168]	; (8006d68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8006cc0:	1d3c      	adds	r4, r7, #4
 8006cc2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cc4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006cc8:	4b28      	ldr	r3, [pc, #160]	; (8006d6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8006cca:	881b      	ldrh	r3, [r3, #0]
 8006ccc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61fb      	str	r3, [r7, #28]
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	61bb      	str	r3, [r7, #24]
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cda:	2300      	movs	r3, #0
 8006cdc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006ce2:	4b23      	ldr	r3, [pc, #140]	; (8006d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006ce4:	685b      	ldr	r3, [r3, #4]
 8006ce6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	f003 030c 	and.w	r3, r3, #12
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d002      	beq.n	8006cf8 <HAL_RCC_GetSysClockFreq+0x40>
 8006cf2:	2b08      	cmp	r3, #8
 8006cf4:	d003      	beq.n	8006cfe <HAL_RCC_GetSysClockFreq+0x46>
 8006cf6:	e02d      	b.n	8006d54 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006cf8:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006cfa:	623b      	str	r3, [r7, #32]
      break;
 8006cfc:	e02d      	b.n	8006d5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	0c9b      	lsrs	r3, r3, #18
 8006d02:	f003 030f 	and.w	r3, r3, #15
 8006d06:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006d0a:	4413      	add	r3, r2
 8006d0c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006d10:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d013      	beq.n	8006d44 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006d1c:	4b14      	ldr	r3, [pc, #80]	; (8006d70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	0c5b      	lsrs	r3, r3, #17
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8006d30:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	4a0f      	ldr	r2, [pc, #60]	; (8006d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d36:	fb02 f203 	mul.w	r2, r2, r3
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d40:	627b      	str	r3, [r7, #36]	; 0x24
 8006d42:	e004      	b.n	8006d4e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	4a0c      	ldr	r2, [pc, #48]	; (8006d78 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006d48:	fb02 f303 	mul.w	r3, r2, r3
 8006d4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8006d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d50:	623b      	str	r3, [r7, #32]
      break;
 8006d52:	e002      	b.n	8006d5a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006d54:	4b07      	ldr	r3, [pc, #28]	; (8006d74 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006d56:	623b      	str	r3, [r7, #32]
      break;
 8006d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006d5a:	6a3b      	ldr	r3, [r7, #32]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3728      	adds	r7, #40	; 0x28
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc90      	pop	{r4, r7}
 8006d64:	4770      	bx	lr
 8006d66:	bf00      	nop
 8006d68:	080099d0 	.word	0x080099d0
 8006d6c:	080099e0 	.word	0x080099e0
 8006d70:	40021000 	.word	0x40021000
 8006d74:	007a1200 	.word	0x007a1200
 8006d78:	003d0900 	.word	0x003d0900

08006d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006d80:	4b02      	ldr	r3, [pc, #8]	; (8006d8c <HAL_RCC_GetHCLKFreq+0x10>)
 8006d82:	681b      	ldr	r3, [r3, #0]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bc80      	pop	{r7}
 8006d8a:	4770      	bx	lr
 8006d8c:	200000d4 	.word	0x200000d4

08006d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006d94:	f7ff fff2 	bl	8006d7c <HAL_RCC_GetHCLKFreq>
 8006d98:	4601      	mov	r1, r0
 8006d9a:	4b05      	ldr	r3, [pc, #20]	; (8006db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	0a1b      	lsrs	r3, r3, #8
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	4a03      	ldr	r2, [pc, #12]	; (8006db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006da6:	5cd3      	ldrb	r3, [r2, r3]
 8006da8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	40021000 	.word	0x40021000
 8006db4:	0800a764 	.word	0x0800a764

08006db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006dbc:	f7ff ffde 	bl	8006d7c <HAL_RCC_GetHCLKFreq>
 8006dc0:	4601      	mov	r1, r0
 8006dc2:	4b05      	ldr	r3, [pc, #20]	; (8006dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	0adb      	lsrs	r3, r3, #11
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	4a03      	ldr	r2, [pc, #12]	; (8006ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006dce:	5cd3      	ldrb	r3, [r2, r3]
 8006dd0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	bd80      	pop	{r7, pc}
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	0800a764 	.word	0x0800a764

08006de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006de8:	4b0a      	ldr	r3, [pc, #40]	; (8006e14 <RCC_Delay+0x34>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a0a      	ldr	r2, [pc, #40]	; (8006e18 <RCC_Delay+0x38>)
 8006dee:	fba2 2303 	umull	r2, r3, r2, r3
 8006df2:	0a5b      	lsrs	r3, r3, #9
 8006df4:	687a      	ldr	r2, [r7, #4]
 8006df6:	fb02 f303 	mul.w	r3, r2, r3
 8006dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006dfc:	bf00      	nop
  }
  while (Delay --);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1e5a      	subs	r2, r3, #1
 8006e02:	60fa      	str	r2, [r7, #12]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1f9      	bne.n	8006dfc <RCC_Delay+0x1c>
}
 8006e08:	bf00      	nop
 8006e0a:	3714      	adds	r7, #20
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bc80      	pop	{r7}
 8006e10:	4770      	bx	lr
 8006e12:	bf00      	nop
 8006e14:	200000d4 	.word	0x200000d4
 8006e18:	10624dd3 	.word	0x10624dd3

08006e1c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006e24:	2300      	movs	r3, #0
 8006e26:	613b      	str	r3, [r7, #16]
 8006e28:	2300      	movs	r3, #0
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d07d      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e3c:	4b4f      	ldr	r3, [pc, #316]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e3e:	69db      	ldr	r3, [r3, #28]
 8006e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d10d      	bne.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e48:	4b4c      	ldr	r3, [pc, #304]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e4a:	69db      	ldr	r3, [r3, #28]
 8006e4c:	4a4b      	ldr	r2, [pc, #300]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e52:	61d3      	str	r3, [r2, #28]
 8006e54:	4b49      	ldr	r3, [pc, #292]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006e56:	69db      	ldr	r3, [r3, #28]
 8006e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e5c:	60bb      	str	r3, [r7, #8]
 8006e5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e64:	4b46      	ldr	r3, [pc, #280]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d118      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e70:	4b43      	ldr	r3, [pc, #268]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a42      	ldr	r2, [pc, #264]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e7c:	f7fd fc34 	bl	80046e8 <HAL_GetTick>
 8006e80:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e82:	e008      	b.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e84:	f7fd fc30 	bl	80046e8 <HAL_GetTick>
 8006e88:	4602      	mov	r2, r0
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	1ad3      	subs	r3, r2, r3
 8006e8e:	2b64      	cmp	r3, #100	; 0x64
 8006e90:	d901      	bls.n	8006e96 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006e92:	2303      	movs	r3, #3
 8006e94:	e06d      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e96:	4b3a      	ldr	r3, [pc, #232]	; (8006f80 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d0f0      	beq.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006ea2:	4b36      	ldr	r3, [pc, #216]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ea4:	6a1b      	ldr	r3, [r3, #32]
 8006ea6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eaa:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d02e      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	685b      	ldr	r3, [r3, #4]
 8006eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d027      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006ec0:	4b2e      	ldr	r3, [pc, #184]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ec2:	6a1b      	ldr	r3, [r3, #32]
 8006ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ec8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006eca:	4b2e      	ldr	r3, [pc, #184]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ecc:	2201      	movs	r2, #1
 8006ece:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006ed0:	4b2c      	ldr	r3, [pc, #176]	; (8006f84 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006ed6:	4a29      	ldr	r2, [pc, #164]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 0301 	and.w	r3, r3, #1
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d014      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ee6:	f7fd fbff 	bl	80046e8 <HAL_GetTick>
 8006eea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eec:	e00a      	b.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eee:	f7fd fbfb 	bl	80046e8 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d901      	bls.n	8006f04 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006f00:	2303      	movs	r3, #3
 8006f02:	e036      	b.n	8006f72 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006f04:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	f003 0302 	and.w	r3, r3, #2
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d0ee      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006f10:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	4917      	ldr	r1, [pc, #92]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d105      	bne.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f28:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f2a:	69db      	ldr	r3, [r3, #28]
 8006f2c:	4a13      	ldr	r2, [pc, #76]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f32:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f003 0302 	and.w	r3, r3, #2
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d008      	beq.n	8006f52 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006f40:	4b0e      	ldr	r3, [pc, #56]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	490b      	ldr	r1, [pc, #44]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 0310 	and.w	r3, r3, #16
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d008      	beq.n	8006f70 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f5e:	4b07      	ldr	r3, [pc, #28]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	4904      	ldr	r1, [pc, #16]	; (8006f7c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006f6c:	4313      	orrs	r3, r2
 8006f6e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	40021000 	.word	0x40021000
 8006f80:	40007000 	.word	0x40007000
 8006f84:	42420440 	.word	0x42420440

08006f88 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006f88:	b590      	push	{r4, r7, lr}
 8006f8a:	b08d      	sub	sp, #52	; 0x34
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8006f90:	4b55      	ldr	r3, [pc, #340]	; (80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8006f92:	f107 040c 	add.w	r4, r7, #12
 8006f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8006f9c:	4b53      	ldr	r3, [pc, #332]	; (80070ec <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8006f9e:	881b      	ldrh	r3, [r3, #0]
 8006fa0:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006faa:	2300      	movs	r3, #0
 8006fac:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d07f      	beq.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006fbc:	2b10      	cmp	r3, #16
 8006fbe:	d002      	beq.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e>
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d048      	beq.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0xce>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8006fc4:	e08b      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      temp_reg = RCC->CFGR;
 8006fc6:	4b4a      	ldr	r3, [pc, #296]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8006fcc:	4b48      	ldr	r3, [pc, #288]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d07f      	beq.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	0c9b      	lsrs	r3, r3, #18
 8006fdc:	f003 030f 	and.w	r3, r3, #15
 8006fe0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006fe4:	4413      	add	r3, r2
 8006fe6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8006fea:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d018      	beq.n	8007028 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ff6:	4b3e      	ldr	r3, [pc, #248]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	0c5b      	lsrs	r3, r3, #17
 8006ffc:	f003 0301 	and.w	r3, r3, #1
 8007000:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007004:	4413      	add	r3, r2
 8007006:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d00d      	beq.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8007016:	4a37      	ldr	r2, [pc, #220]	; (80070f4 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>)
 8007018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800701a:	fbb2 f2f3 	udiv	r2, r2, r3
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	fb02 f303 	mul.w	r3, r2, r3
 8007024:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007026:	e004      	b.n	8007032 <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8007028:	6a3b      	ldr	r3, [r7, #32]
 800702a:	4a33      	ldr	r2, [pc, #204]	; (80070f8 <HAL_RCCEx_GetPeriphCLKFreq+0x170>)
 800702c:	fb02 f303 	mul.w	r3, r2, r3
 8007030:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8007032:	4b2f      	ldr	r3, [pc, #188]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800703a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800703e:	d102      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
          frequency = pllclk;
 8007040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007042:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007044:	e048      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
          frequency = (pllclk * 2) / 3;
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	005b      	lsls	r3, r3, #1
 800704a:	4a2c      	ldr	r2, [pc, #176]	; (80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 800704c:	fba2 2303 	umull	r2, r3, r2, r3
 8007050:	085b      	lsrs	r3, r3, #1
 8007052:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007054:	e040      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x150>
      temp_reg = RCC->BDCR;
 8007056:	4b26      	ldr	r3, [pc, #152]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800705c:	69fb      	ldr	r3, [r7, #28]
 800705e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007062:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007066:	d108      	bne.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
 8007068:	69fb      	ldr	r3, [r7, #28]
 800706a:	f003 0302 	and.w	r3, r3, #2
 800706e:	2b00      	cmp	r3, #0
 8007070:	d003      	beq.n	800707a <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
        frequency = LSE_VALUE;
 8007072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007076:	62bb      	str	r3, [r7, #40]	; 0x28
 8007078:	e01f      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007080:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007084:	d109      	bne.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
 8007086:	4b1a      	ldr	r3, [pc, #104]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8007088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708a:	f003 0302 	and.w	r3, r3, #2
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x112>
        frequency = LSI_VALUE;
 8007092:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28
 8007098:	e00f      	b.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0x132>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800709a:	69fb      	ldr	r3, [r7, #28]
 800709c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070a4:	d11a      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80070a6:	4b12      	ldr	r3, [pc, #72]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d014      	beq.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
        frequency = HSE_VALUE / 128U;
 80070b2:	f24f 4324 	movw	r3, #62500	; 0xf424
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070b8:	e010      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
 80070ba:	e00f      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0x154>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80070bc:	f7ff fe7c 	bl	8006db8 <HAL_RCC_GetPCLK2Freq>
 80070c0:	4602      	mov	r2, r0
 80070c2:	4b0b      	ldr	r3, [pc, #44]	; (80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	0b9b      	lsrs	r3, r3, #14
 80070c8:	f003 0303 	and.w	r3, r3, #3
 80070cc:	3301      	adds	r3, #1
 80070ce:	005b      	lsls	r3, r3, #1
 80070d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070d6:	e002      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80070d8:	bf00      	nop
 80070da:	e000      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0x156>
      break;
 80070dc:	bf00      	nop
    }
  }
  return (frequency);
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3734      	adds	r7, #52	; 0x34
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd90      	pop	{r4, r7, pc}
 80070e8:	080099e4 	.word	0x080099e4
 80070ec:	080099f4 	.word	0x080099f4
 80070f0:	40021000 	.word	0x40021000
 80070f4:	007a1200 	.word	0x007a1200
 80070f8:	003d0900 	.word	0x003d0900
 80070fc:	aaaaaaab 	.word	0xaaaaaaab

08007100 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b082      	sub	sp, #8
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d101      	bne.n	8007112 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800710e:	2301      	movs	r3, #1
 8007110:	e053      	b.n	80071ba <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b00      	cmp	r3, #0
 8007122:	d106      	bne.n	8007132 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7fd f8a9 	bl	8004284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007148:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	685a      	ldr	r2, [r3, #4]
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	431a      	orrs	r2, r3
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	431a      	orrs	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	691b      	ldr	r3, [r3, #16]
 800715e:	431a      	orrs	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	695b      	ldr	r3, [r3, #20]
 8007164:	431a      	orrs	r2, r3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	69db      	ldr	r3, [r3, #28]
 8007174:	431a      	orrs	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	ea42 0103 	orr.w	r1, r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	699b      	ldr	r3, [r3, #24]
 800718e:	0c1a      	lsrs	r2, r3, #16
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f002 0204 	and.w	r2, r2, #4
 8007198:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80071a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}

080071c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071c2:	b580      	push	{r7, lr}
 80071c4:	b088      	sub	sp, #32
 80071c6:	af00      	add	r7, sp, #0
 80071c8:	60f8      	str	r0, [r7, #12]
 80071ca:	60b9      	str	r1, [r7, #8]
 80071cc:	603b      	str	r3, [r7, #0]
 80071ce:	4613      	mov	r3, r2
 80071d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80071d2:	2300      	movs	r3, #0
 80071d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d101      	bne.n	80071e4 <HAL_SPI_Transmit+0x22>
 80071e0:	2302      	movs	r3, #2
 80071e2:	e11e      	b.n	8007422 <HAL_SPI_Transmit+0x260>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2201      	movs	r2, #1
 80071e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071ec:	f7fd fa7c 	bl	80046e8 <HAL_GetTick>
 80071f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d002      	beq.n	8007208 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8007202:	2302      	movs	r3, #2
 8007204:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007206:	e103      	b.n	8007410 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d002      	beq.n	8007214 <HAL_SPI_Transmit+0x52>
 800720e:	88fb      	ldrh	r3, [r7, #6]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d102      	bne.n	800721a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	77fb      	strb	r3, [r7, #31]
    goto error;
 8007218:	e0fa      	b.n	8007410 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2203      	movs	r2, #3
 800721e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	88fa      	ldrh	r2, [r7, #6]
 8007232:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	2200      	movs	r2, #0
 800723e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	689b      	ldr	r3, [r3, #8]
 800725c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007260:	d107      	bne.n	8007272 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007270:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727c:	2b40      	cmp	r3, #64	; 0x40
 800727e:	d007      	beq.n	8007290 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800728e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007298:	d14b      	bne.n	8007332 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d002      	beq.n	80072a8 <HAL_SPI_Transmit+0xe6>
 80072a2:	8afb      	ldrh	r3, [r7, #22]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d13e      	bne.n	8007326 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ac:	881a      	ldrh	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072b8:	1c9a      	adds	r2, r3, #2
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	3b01      	subs	r3, #1
 80072c6:	b29a      	uxth	r2, r3
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80072cc:	e02b      	b.n	8007326 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f003 0302 	and.w	r3, r3, #2
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d112      	bne.n	8007302 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e0:	881a      	ldrh	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ec:	1c9a      	adds	r2, r3, #2
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072f6:	b29b      	uxth	r3, r3
 80072f8:	3b01      	subs	r3, #1
 80072fa:	b29a      	uxth	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	86da      	strh	r2, [r3, #54]	; 0x36
 8007300:	e011      	b.n	8007326 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007302:	f7fd f9f1 	bl	80046e8 <HAL_GetTick>
 8007306:	4602      	mov	r2, r0
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	683a      	ldr	r2, [r7, #0]
 800730e:	429a      	cmp	r2, r3
 8007310:	d803      	bhi.n	800731a <HAL_SPI_Transmit+0x158>
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007318:	d102      	bne.n	8007320 <HAL_SPI_Transmit+0x15e>
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d102      	bne.n	8007326 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8007320:	2303      	movs	r3, #3
 8007322:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007324:	e074      	b.n	8007410 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800732a:	b29b      	uxth	r3, r3
 800732c:	2b00      	cmp	r3, #0
 800732e:	d1ce      	bne.n	80072ce <HAL_SPI_Transmit+0x10c>
 8007330:	e04c      	b.n	80073cc <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d002      	beq.n	8007340 <HAL_SPI_Transmit+0x17e>
 800733a:	8afb      	ldrh	r3, [r7, #22]
 800733c:	2b01      	cmp	r3, #1
 800733e:	d140      	bne.n	80073c2 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	330c      	adds	r3, #12
 800734a:	7812      	ldrb	r2, [r2, #0]
 800734c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007352:	1c5a      	adds	r2, r3, #1
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800735c:	b29b      	uxth	r3, r3
 800735e:	3b01      	subs	r3, #1
 8007360:	b29a      	uxth	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007366:	e02c      	b.n	80073c2 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 0302 	and.w	r3, r3, #2
 8007372:	2b02      	cmp	r3, #2
 8007374:	d113      	bne.n	800739e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	330c      	adds	r3, #12
 8007380:	7812      	ldrb	r2, [r2, #0]
 8007382:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007388:	1c5a      	adds	r2, r3, #1
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007392:	b29b      	uxth	r3, r3
 8007394:	3b01      	subs	r3, #1
 8007396:	b29a      	uxth	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	86da      	strh	r2, [r3, #54]	; 0x36
 800739c:	e011      	b.n	80073c2 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800739e:	f7fd f9a3 	bl	80046e8 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	683a      	ldr	r2, [r7, #0]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d803      	bhi.n	80073b6 <HAL_SPI_Transmit+0x1f4>
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073b4:	d102      	bne.n	80073bc <HAL_SPI_Transmit+0x1fa>
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d102      	bne.n	80073c2 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80073bc:	2303      	movs	r3, #3
 80073be:	77fb      	strb	r3, [r7, #31]
          goto error;
 80073c0:	e026      	b.n	8007410 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073c6:	b29b      	uxth	r3, r3
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1cd      	bne.n	8007368 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073cc:	69ba      	ldr	r2, [r7, #24]
 80073ce:	6839      	ldr	r1, [r7, #0]
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 fb91 	bl	8007af8 <SPI_EndRxTxTransaction>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2220      	movs	r2, #32
 80073e0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d10a      	bne.n	8007400 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80073ea:	2300      	movs	r3, #0
 80073ec:	613b      	str	r3, [r7, #16]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68db      	ldr	r3, [r3, #12]
 80073f4:	613b      	str	r3, [r7, #16]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	613b      	str	r3, [r7, #16]
 80073fe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8007408:	2301      	movs	r3, #1
 800740a:	77fb      	strb	r3, [r7, #31]
 800740c:	e000      	b.n	8007410 <HAL_SPI_Transmit+0x24e>
  }

error:
 800740e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2201      	movs	r2, #1
 8007414:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	2200      	movs	r2, #0
 800741c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007420:	7ffb      	ldrb	r3, [r7, #31]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3720      	adds	r7, #32
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b088      	sub	sp, #32
 800742e:	af02      	add	r7, sp, #8
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	603b      	str	r3, [r7, #0]
 8007436:	4613      	mov	r3, r2
 8007438:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800743a:	2300      	movs	r3, #0
 800743c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	685b      	ldr	r3, [r3, #4]
 8007442:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007446:	d112      	bne.n	800746e <HAL_SPI_Receive+0x44>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	689b      	ldr	r3, [r3, #8]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10e      	bne.n	800746e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	2204      	movs	r2, #4
 8007454:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007458:	88fa      	ldrh	r2, [r7, #6]
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	9300      	str	r3, [sp, #0]
 800745e:	4613      	mov	r3, r2
 8007460:	68ba      	ldr	r2, [r7, #8]
 8007462:	68b9      	ldr	r1, [r7, #8]
 8007464:	68f8      	ldr	r0, [r7, #12]
 8007466:	f000 f8e9 	bl	800763c <HAL_SPI_TransmitReceive>
 800746a:	4603      	mov	r3, r0
 800746c:	e0e2      	b.n	8007634 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007474:	2b01      	cmp	r3, #1
 8007476:	d101      	bne.n	800747c <HAL_SPI_Receive+0x52>
 8007478:	2302      	movs	r3, #2
 800747a:	e0db      	b.n	8007634 <HAL_SPI_Receive+0x20a>
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007484:	f7fd f930 	bl	80046e8 <HAL_GetTick>
 8007488:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007490:	b2db      	uxtb	r3, r3
 8007492:	2b01      	cmp	r3, #1
 8007494:	d002      	beq.n	800749c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007496:	2302      	movs	r3, #2
 8007498:	75fb      	strb	r3, [r7, #23]
    goto error;
 800749a:	e0c2      	b.n	8007622 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_SPI_Receive+0x7e>
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80074ac:	e0b9      	b.n	8007622 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2204      	movs	r2, #4
 80074b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2200      	movs	r2, #0
 80074ba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	88fa      	ldrh	r2, [r7, #6]
 80074c6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2200      	movs	r2, #0
 80074d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2200      	movs	r2, #0
 80074d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	2200      	movs	r2, #0
 80074e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	2200      	movs	r2, #0
 80074ea:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074f4:	d107      	bne.n	8007506 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	681a      	ldr	r2, [r3, #0]
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007504:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007510:	2b40      	cmp	r3, #64	; 0x40
 8007512:	d007      	beq.n	8007524 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007522:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d162      	bne.n	80075f2 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800752c:	e02e      	b.n	800758c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b01      	cmp	r3, #1
 800753a:	d115      	bne.n	8007568 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f103 020c 	add.w	r2, r3, #12
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007548:	7812      	ldrb	r2, [r2, #0]
 800754a:	b2d2      	uxtb	r2, r2
 800754c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007552:	1c5a      	adds	r2, r3, #1
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800755c:	b29b      	uxth	r3, r3
 800755e:	3b01      	subs	r3, #1
 8007560:	b29a      	uxth	r2, r3
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007566:	e011      	b.n	800758c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007568:	f7fd f8be 	bl	80046e8 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	683a      	ldr	r2, [r7, #0]
 8007574:	429a      	cmp	r2, r3
 8007576:	d803      	bhi.n	8007580 <HAL_SPI_Receive+0x156>
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757e:	d102      	bne.n	8007586 <HAL_SPI_Receive+0x15c>
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d102      	bne.n	800758c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	75fb      	strb	r3, [r7, #23]
          goto error;
 800758a:	e04a      	b.n	8007622 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007590:	b29b      	uxth	r3, r3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1cb      	bne.n	800752e <HAL_SPI_Receive+0x104>
 8007596:	e031      	b.n	80075fc <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689b      	ldr	r3, [r3, #8]
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d113      	bne.n	80075ce <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b0:	b292      	uxth	r2, r2
 80075b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b8:	1c9a      	adds	r2, r3, #2
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	3b01      	subs	r3, #1
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80075cc:	e011      	b.n	80075f2 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075ce:	f7fd f88b 	bl	80046e8 <HAL_GetTick>
 80075d2:	4602      	mov	r2, r0
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	1ad3      	subs	r3, r2, r3
 80075d8:	683a      	ldr	r2, [r7, #0]
 80075da:	429a      	cmp	r2, r3
 80075dc:	d803      	bhi.n	80075e6 <HAL_SPI_Receive+0x1bc>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e4:	d102      	bne.n	80075ec <HAL_SPI_Receive+0x1c2>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d102      	bne.n	80075f2 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80075f0:	e017      	b.n	8007622 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075f6:	b29b      	uxth	r3, r3
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d1cd      	bne.n	8007598 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80075fc:	693a      	ldr	r2, [r7, #16]
 80075fe:	6839      	ldr	r1, [r7, #0]
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 fa27 	bl	8007a54 <SPI_EndRxTransaction>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d002      	beq.n	8007612 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2220      	movs	r2, #32
 8007610:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007616:	2b00      	cmp	r3, #0
 8007618:	d002      	beq.n	8007620 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	75fb      	strb	r3, [r7, #23]
 800761e:	e000      	b.n	8007622 <HAL_SPI_Receive+0x1f8>
  }

error :
 8007620:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2201      	movs	r2, #1
 8007626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007632:	7dfb      	ldrb	r3, [r7, #23]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3718      	adds	r7, #24
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b08c      	sub	sp, #48	; 0x30
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
 8007648:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800764a:	2301      	movs	r3, #1
 800764c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800765a:	2b01      	cmp	r3, #1
 800765c:	d101      	bne.n	8007662 <HAL_SPI_TransmitReceive+0x26>
 800765e:	2302      	movs	r3, #2
 8007660:	e18a      	b.n	8007978 <HAL_SPI_TransmitReceive+0x33c>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800766a:	f7fd f83d 	bl	80046e8 <HAL_GetTick>
 800766e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007676:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8007680:	887b      	ldrh	r3, [r7, #2]
 8007682:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007684:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007688:	2b01      	cmp	r3, #1
 800768a:	d00f      	beq.n	80076ac <HAL_SPI_TransmitReceive+0x70>
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007692:	d107      	bne.n	80076a4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d103      	bne.n	80076a4 <HAL_SPI_TransmitReceive+0x68>
 800769c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80076a0:	2b04      	cmp	r3, #4
 80076a2:	d003      	beq.n	80076ac <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80076a4:	2302      	movs	r3, #2
 80076a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076aa:	e15b      	b.n	8007964 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <HAL_SPI_TransmitReceive+0x82>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d002      	beq.n	80076be <HAL_SPI_TransmitReceive+0x82>
 80076b8:	887b      	ldrh	r3, [r7, #2]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d103      	bne.n	80076c6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80076c4:	e14e      	b.n	8007964 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80076cc:	b2db      	uxtb	r3, r3
 80076ce:	2b04      	cmp	r3, #4
 80076d0:	d003      	beq.n	80076da <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2205      	movs	r2, #5
 80076d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	687a      	ldr	r2, [r7, #4]
 80076e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	887a      	ldrh	r2, [r7, #2]
 80076ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	887a      	ldrh	r2, [r7, #2]
 80076f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	68ba      	ldr	r2, [r7, #8]
 80076f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	887a      	ldrh	r2, [r7, #2]
 80076fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	887a      	ldrh	r2, [r7, #2]
 8007702:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800771a:	2b40      	cmp	r3, #64	; 0x40
 800771c:	d007      	beq.n	800772e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800772c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007736:	d178      	bne.n	800782a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	685b      	ldr	r3, [r3, #4]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d002      	beq.n	8007746 <HAL_SPI_TransmitReceive+0x10a>
 8007740:	8b7b      	ldrh	r3, [r7, #26]
 8007742:	2b01      	cmp	r3, #1
 8007744:	d166      	bne.n	8007814 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800774a:	881a      	ldrh	r2, [r3, #0]
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007756:	1c9a      	adds	r2, r3, #2
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007760:	b29b      	uxth	r3, r3
 8007762:	3b01      	subs	r3, #1
 8007764:	b29a      	uxth	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800776a:	e053      	b.n	8007814 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689b      	ldr	r3, [r3, #8]
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b02      	cmp	r3, #2
 8007778:	d11b      	bne.n	80077b2 <HAL_SPI_TransmitReceive+0x176>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800777e:	b29b      	uxth	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d016      	beq.n	80077b2 <HAL_SPI_TransmitReceive+0x176>
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	2b01      	cmp	r3, #1
 8007788:	d113      	bne.n	80077b2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778e:	881a      	ldrh	r2, [r3, #0]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800779a:	1c9a      	adds	r2, r3, #2
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	3b01      	subs	r3, #1
 80077a8:	b29a      	uxth	r2, r3
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80077ae:	2300      	movs	r3, #0
 80077b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f003 0301 	and.w	r3, r3, #1
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d119      	bne.n	80077f4 <HAL_SPI_TransmitReceive+0x1b8>
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077c4:	b29b      	uxth	r3, r3
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d014      	beq.n	80077f4 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077d4:	b292      	uxth	r2, r2
 80077d6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	1c9a      	adds	r2, r3, #2
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80077e6:	b29b      	uxth	r3, r3
 80077e8:	3b01      	subs	r3, #1
 80077ea:	b29a      	uxth	r2, r3
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80077f0:	2301      	movs	r3, #1
 80077f2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80077f4:	f7fc ff78 	bl	80046e8 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007800:	429a      	cmp	r2, r3
 8007802:	d807      	bhi.n	8007814 <HAL_SPI_TransmitReceive+0x1d8>
 8007804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800780a:	d003      	beq.n	8007814 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800780c:	2303      	movs	r3, #3
 800780e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007812:	e0a7      	b.n	8007964 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007818:	b29b      	uxth	r3, r3
 800781a:	2b00      	cmp	r3, #0
 800781c:	d1a6      	bne.n	800776c <HAL_SPI_TransmitReceive+0x130>
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007822:	b29b      	uxth	r3, r3
 8007824:	2b00      	cmp	r3, #0
 8007826:	d1a1      	bne.n	800776c <HAL_SPI_TransmitReceive+0x130>
 8007828:	e07c      	b.n	8007924 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <HAL_SPI_TransmitReceive+0x1fc>
 8007832:	8b7b      	ldrh	r3, [r7, #26]
 8007834:	2b01      	cmp	r3, #1
 8007836:	d16b      	bne.n	8007910 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	330c      	adds	r3, #12
 8007842:	7812      	ldrb	r2, [r2, #0]
 8007844:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007854:	b29b      	uxth	r3, r3
 8007856:	3b01      	subs	r3, #1
 8007858:	b29a      	uxth	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800785e:	e057      	b.n	8007910 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 0302 	and.w	r3, r3, #2
 800786a:	2b02      	cmp	r3, #2
 800786c:	d11c      	bne.n	80078a8 <HAL_SPI_TransmitReceive+0x26c>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d017      	beq.n	80078a8 <HAL_SPI_TransmitReceive+0x26c>
 8007878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787a:	2b01      	cmp	r3, #1
 800787c:	d114      	bne.n	80078a8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	330c      	adds	r3, #12
 8007888:	7812      	ldrb	r2, [r2, #0]
 800788a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007890:	1c5a      	adds	r2, r3, #1
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800789a:	b29b      	uxth	r3, r3
 800789c:	3b01      	subs	r3, #1
 800789e:	b29a      	uxth	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078a4:	2300      	movs	r3, #0
 80078a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689b      	ldr	r3, [r3, #8]
 80078ae:	f003 0301 	and.w	r3, r3, #1
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d119      	bne.n	80078ea <HAL_SPI_TransmitReceive+0x2ae>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d014      	beq.n	80078ea <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68da      	ldr	r2, [r3, #12]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ca:	b2d2      	uxtb	r2, r2
 80078cc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80078dc:	b29b      	uxth	r3, r3
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078e6:	2301      	movs	r3, #1
 80078e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80078ea:	f7fc fefd 	bl	80046e8 <HAL_GetTick>
 80078ee:	4602      	mov	r2, r0
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	1ad3      	subs	r3, r2, r3
 80078f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d803      	bhi.n	8007902 <HAL_SPI_TransmitReceive+0x2c6>
 80078fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007900:	d102      	bne.n	8007908 <HAL_SPI_TransmitReceive+0x2cc>
 8007902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007904:	2b00      	cmp	r3, #0
 8007906:	d103      	bne.n	8007910 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800790e:	e029      	b.n	8007964 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1a2      	bne.n	8007860 <HAL_SPI_TransmitReceive+0x224>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d19d      	bne.n	8007860 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007926:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 f8e5 	bl	8007af8 <SPI_EndRxTxTransaction>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d006      	beq.n	8007942 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	2220      	movs	r2, #32
 800793e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007940:	e010      	b.n	8007964 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800794a:	2300      	movs	r3, #0
 800794c:	617b      	str	r3, [r7, #20]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	617b      	str	r3, [r7, #20]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	617b      	str	r3, [r7, #20]
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	e000      	b.n	8007964 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007962:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007974:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007978:	4618      	mov	r0, r3
 800797a:	3730      	adds	r7, #48	; 0x30
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	603b      	str	r3, [r7, #0]
 800798c:	4613      	mov	r3, r2
 800798e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007990:	e04c      	b.n	8007a2c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007998:	d048      	beq.n	8007a2c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800799a:	f7fc fea5 	bl	80046e8 <HAL_GetTick>
 800799e:	4602      	mov	r2, r0
 80079a0:	69bb      	ldr	r3, [r7, #24]
 80079a2:	1ad3      	subs	r3, r2, r3
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	429a      	cmp	r2, r3
 80079a8:	d902      	bls.n	80079b0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d13d      	bne.n	8007a2c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	685a      	ldr	r2, [r3, #4]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80079be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80079c8:	d111      	bne.n	80079ee <SPI_WaitFlagStateUntilTimeout+0x6e>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079d2:	d004      	beq.n	80079de <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079dc:	d107      	bne.n	80079ee <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079f6:	d10f      	bne.n	8007a18 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	681a      	ldr	r2, [r3, #0]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a06:	601a      	str	r2, [r3, #0]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681a      	ldr	r2, [r3, #0]
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a16:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	e00f      	b.n	8007a4c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	689a      	ldr	r2, [r3, #8]
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	4013      	ands	r3, r2
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	429a      	cmp	r2, r3
 8007a3a:	bf0c      	ite	eq
 8007a3c:	2301      	moveq	r3, #1
 8007a3e:	2300      	movne	r3, #0
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	461a      	mov	r2, r3
 8007a44:	79fb      	ldrb	r3, [r7, #7]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d1a3      	bne.n	8007992 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af02      	add	r7, sp, #8
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a68:	d111      	bne.n	8007a8e <SPI_EndRxTransaction+0x3a>
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	689b      	ldr	r3, [r3, #8]
 8007a6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a72:	d004      	beq.n	8007a7e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	689b      	ldr	r3, [r3, #8]
 8007a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a7c:	d107      	bne.n	8007a8e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a8c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007a96:	d117      	bne.n	8007ac8 <SPI_EndRxTransaction+0x74>
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	689b      	ldr	r3, [r3, #8]
 8007a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aa0:	d112      	bne.n	8007ac8 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	9300      	str	r3, [sp, #0]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	2101      	movs	r1, #1
 8007aac:	68f8      	ldr	r0, [r7, #12]
 8007aae:	f7ff ff67 	bl	8007980 <SPI_WaitFlagStateUntilTimeout>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d01a      	beq.n	8007aee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007abc:	f043 0220 	orr.w	r2, r3, #32
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e013      	b.n	8007af0 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	9300      	str	r3, [sp, #0]
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	2180      	movs	r1, #128	; 0x80
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f7ff ff54 	bl	8007980 <SPI_WaitFlagStateUntilTimeout>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d007      	beq.n	8007aee <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ae2:	f043 0220 	orr.w	r2, r3, #32
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e000      	b.n	8007af0 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3710      	adds	r7, #16
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b086      	sub	sp, #24
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2180      	movs	r1, #128	; 0x80
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7ff ff36 	bl	8007980 <SPI_WaitFlagStateUntilTimeout>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1e:	f043 0220 	orr.w	r2, r3, #32
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e000      	b.n	8007b2c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3710      	adds	r7, #16
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}

08007b34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d101      	bne.n	8007b46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e01d      	b.n	8007b82 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d106      	bne.n	8007b60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2200      	movs	r2, #0
 8007b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f7fc fbdc 	bl	8004318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2202      	movs	r2, #2
 8007b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681a      	ldr	r2, [r3, #0]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	3304      	adds	r3, #4
 8007b70:	4619      	mov	r1, r3
 8007b72:	4610      	mov	r0, r2
 8007b74:	f000 fb34 	bl	80081e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3708      	adds	r7, #8
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b085      	sub	sp, #20
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68da      	ldr	r2, [r3, #12]
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f042 0201 	orr.w	r2, r2, #1
 8007ba0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	f003 0307 	and.w	r3, r3, #7
 8007bac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b06      	cmp	r3, #6
 8007bb2:	d007      	beq.n	8007bc4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f042 0201 	orr.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3714      	adds	r7, #20
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bc80      	pop	{r7}
 8007bce:	4770      	bx	lr

08007bd0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e01d      	b.n	8007c1e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d106      	bne.n	8007bfc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7fc fbc6 	bl	8004388 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	3304      	adds	r3, #4
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	4610      	mov	r0, r2
 8007c10:	f000 fae6 	bl	80081e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2201      	movs	r2, #1
 8007c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c1c:	2300      	movs	r3, #0
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
	...

08007c28 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	2201      	movs	r2, #1
 8007c38:	6839      	ldr	r1, [r7, #0]
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fd50 	bl	80086e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a10      	ldr	r2, [pc, #64]	; (8007c88 <HAL_TIM_PWM_Start+0x60>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d107      	bne.n	8007c5a <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	689b      	ldr	r3, [r3, #8]
 8007c60:	f003 0307 	and.w	r3, r3, #7
 8007c64:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2b06      	cmp	r3, #6
 8007c6a:	d007      	beq.n	8007c7c <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0201 	orr.w	r2, r2, #1
 8007c7a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	40012c00 	.word	0x40012c00

08007c8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	691b      	ldr	r3, [r3, #16]
 8007c9a:	f003 0302 	and.w	r3, r3, #2
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d122      	bne.n	8007ce8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f003 0302 	and.w	r3, r3, #2
 8007cac:	2b02      	cmp	r3, #2
 8007cae:	d11b      	bne.n	8007ce8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f06f 0202 	mvn.w	r2, #2
 8007cb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f003 0303 	and.w	r3, r3, #3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d003      	beq.n	8007cd6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa6a 	bl	80081a8 <HAL_TIM_IC_CaptureCallback>
 8007cd4:	e005      	b.n	8007ce2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa5d 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 fa6c 	bl	80081ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d122      	bne.n	8007d3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f003 0304 	and.w	r3, r3, #4
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	d11b      	bne.n	8007d3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f06f 0204 	mvn.w	r2, #4
 8007d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fa40 	bl	80081a8 <HAL_TIM_IC_CaptureCallback>
 8007d28:	e005      	b.n	8007d36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fa33 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fa42 	bl	80081ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f003 0308 	and.w	r3, r3, #8
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d122      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f003 0308 	and.w	r3, r3, #8
 8007d54:	2b08      	cmp	r3, #8
 8007d56:	d11b      	bne.n	8007d90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f06f 0208 	mvn.w	r2, #8
 8007d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2204      	movs	r2, #4
 8007d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	f003 0303 	and.w	r3, r3, #3
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 fa16 	bl	80081a8 <HAL_TIM_IC_CaptureCallback>
 8007d7c:	e005      	b.n	8007d8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fa09 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 fa18 	bl	80081ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	f003 0310 	and.w	r3, r3, #16
 8007d9a:	2b10      	cmp	r3, #16
 8007d9c:	d122      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f003 0310 	and.w	r3, r3, #16
 8007da8:	2b10      	cmp	r3, #16
 8007daa:	d11b      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f06f 0210 	mvn.w	r2, #16
 8007db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2208      	movs	r2, #8
 8007dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f9ec 	bl	80081a8 <HAL_TIM_IC_CaptureCallback>
 8007dd0:	e005      	b.n	8007dde <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f9df 	bl	8008196 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f9ee 	bl	80081ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0301 	and.w	r3, r3, #1
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	d10e      	bne.n	8007e10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0301 	and.w	r3, r3, #1
 8007dfc:	2b01      	cmp	r3, #1
 8007dfe:	d107      	bne.n	8007e10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0201 	mvn.w	r2, #1
 8007e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7fa fe74 	bl	8002af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	691b      	ldr	r3, [r3, #16]
 8007e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e1a:	2b80      	cmp	r3, #128	; 0x80
 8007e1c:	d10e      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e28:	2b80      	cmp	r3, #128	; 0x80
 8007e2a:	d107      	bne.n	8007e3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fcc3 	bl	80087c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	691b      	ldr	r3, [r3, #16]
 8007e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e46:	2b40      	cmp	r3, #64	; 0x40
 8007e48:	d10e      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e54:	2b40      	cmp	r3, #64	; 0x40
 8007e56:	d107      	bne.n	8007e68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f9b2 	bl	80081cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	f003 0320 	and.w	r3, r3, #32
 8007e72:	2b20      	cmp	r3, #32
 8007e74:	d10e      	bne.n	8007e94 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 0320 	and.w	r3, r3, #32
 8007e80:	2b20      	cmp	r3, #32
 8007e82:	d107      	bne.n	8007e94 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f06f 0220 	mvn.w	r2, #32
 8007e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fc8e 	bl	80087b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e94:	bf00      	nop
 8007e96:	3708      	adds	r7, #8
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	60f8      	str	r0, [r7, #12]
 8007ea4:	60b9      	str	r1, [r7, #8]
 8007ea6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d101      	bne.n	8007eb6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007eb2:	2302      	movs	r3, #2
 8007eb4:	e0b4      	b.n	8008020 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2201      	movs	r2, #1
 8007eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2202      	movs	r2, #2
 8007ec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2b0c      	cmp	r3, #12
 8007eca:	f200 809f 	bhi.w	800800c <HAL_TIM_PWM_ConfigChannel+0x170>
 8007ece:	a201      	add	r2, pc, #4	; (adr r2, 8007ed4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed4:	08007f09 	.word	0x08007f09
 8007ed8:	0800800d 	.word	0x0800800d
 8007edc:	0800800d 	.word	0x0800800d
 8007ee0:	0800800d 	.word	0x0800800d
 8007ee4:	08007f49 	.word	0x08007f49
 8007ee8:	0800800d 	.word	0x0800800d
 8007eec:	0800800d 	.word	0x0800800d
 8007ef0:	0800800d 	.word	0x0800800d
 8007ef4:	08007f8b 	.word	0x08007f8b
 8007ef8:	0800800d 	.word	0x0800800d
 8007efc:	0800800d 	.word	0x0800800d
 8007f00:	0800800d 	.word	0x0800800d
 8007f04:	08007fcb 	.word	0x08007fcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68b9      	ldr	r1, [r7, #8]
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 f9c8 	bl	80082a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	699a      	ldr	r2, [r3, #24]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f042 0208 	orr.w	r2, r2, #8
 8007f22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	699a      	ldr	r2, [r3, #24]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0204 	bic.w	r2, r2, #4
 8007f32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6999      	ldr	r1, [r3, #24]
 8007f3a:	68bb      	ldr	r3, [r7, #8]
 8007f3c:	691a      	ldr	r2, [r3, #16]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	619a      	str	r2, [r3, #24]
      break;
 8007f46:	e062      	b.n	800800e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68b9      	ldr	r1, [r7, #8]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fa0e 	bl	8008370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	699a      	ldr	r2, [r3, #24]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	699a      	ldr	r2, [r3, #24]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6999      	ldr	r1, [r3, #24]
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	691b      	ldr	r3, [r3, #16]
 8007f7e:	021a      	lsls	r2, r3, #8
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	619a      	str	r2, [r3, #24]
      break;
 8007f88:	e041      	b.n	800800e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	68b9      	ldr	r1, [r7, #8]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f000 fa57 	bl	8008444 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	69da      	ldr	r2, [r3, #28]
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	f042 0208 	orr.w	r2, r2, #8
 8007fa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	69da      	ldr	r2, [r3, #28]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f022 0204 	bic.w	r2, r2, #4
 8007fb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	69d9      	ldr	r1, [r3, #28]
 8007fbc:	68bb      	ldr	r3, [r7, #8]
 8007fbe:	691a      	ldr	r2, [r3, #16]
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	61da      	str	r2, [r3, #28]
      break;
 8007fc8:	e021      	b.n	800800e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68b9      	ldr	r1, [r7, #8]
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f000 faa1 	bl	8008518 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	69da      	ldr	r2, [r3, #28]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fe4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69da      	ldr	r2, [r3, #28]
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	69d9      	ldr	r1, [r3, #28]
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	021a      	lsls	r2, r3, #8
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	430a      	orrs	r2, r1
 8008008:	61da      	str	r2, [r3, #28]
      break;
 800800a:	e000      	b.n	800800e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800800c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2201      	movs	r2, #1
 8008012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800801e:	2300      	movs	r3, #0
}
 8008020:	4618      	mov	r0, r3
 8008022:	3710      	adds	r7, #16
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}

08008028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b084      	sub	sp, #16
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008038:	2b01      	cmp	r3, #1
 800803a:	d101      	bne.n	8008040 <HAL_TIM_ConfigClockSource+0x18>
 800803c:	2302      	movs	r3, #2
 800803e:	e0a6      	b.n	800818e <HAL_TIM_ConfigClockSource+0x166>
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2202      	movs	r2, #2
 800804c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	689b      	ldr	r3, [r3, #8]
 8008056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800805e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008066:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	d067      	beq.n	8008148 <HAL_TIM_ConfigClockSource+0x120>
 8008078:	2b40      	cmp	r3, #64	; 0x40
 800807a:	d80b      	bhi.n	8008094 <HAL_TIM_ConfigClockSource+0x6c>
 800807c:	2b10      	cmp	r3, #16
 800807e:	d073      	beq.n	8008168 <HAL_TIM_ConfigClockSource+0x140>
 8008080:	2b10      	cmp	r3, #16
 8008082:	d802      	bhi.n	800808a <HAL_TIM_ConfigClockSource+0x62>
 8008084:	2b00      	cmp	r3, #0
 8008086:	d06f      	beq.n	8008168 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8008088:	e078      	b.n	800817c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800808a:	2b20      	cmp	r3, #32
 800808c:	d06c      	beq.n	8008168 <HAL_TIM_ConfigClockSource+0x140>
 800808e:	2b30      	cmp	r3, #48	; 0x30
 8008090:	d06a      	beq.n	8008168 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8008092:	e073      	b.n	800817c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8008094:	2b70      	cmp	r3, #112	; 0x70
 8008096:	d00d      	beq.n	80080b4 <HAL_TIM_ConfigClockSource+0x8c>
 8008098:	2b70      	cmp	r3, #112	; 0x70
 800809a:	d804      	bhi.n	80080a6 <HAL_TIM_ConfigClockSource+0x7e>
 800809c:	2b50      	cmp	r3, #80	; 0x50
 800809e:	d033      	beq.n	8008108 <HAL_TIM_ConfigClockSource+0xe0>
 80080a0:	2b60      	cmp	r3, #96	; 0x60
 80080a2:	d041      	beq.n	8008128 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80080a4:	e06a      	b.n	800817c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80080a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080aa:	d066      	beq.n	800817a <HAL_TIM_ConfigClockSource+0x152>
 80080ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080b0:	d017      	beq.n	80080e2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80080b2:	e063      	b.n	800817c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	6818      	ldr	r0, [r3, #0]
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	6899      	ldr	r1, [r3, #8]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f000 faed 	bl	80086a2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80080d6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	609a      	str	r2, [r3, #8]
      break;
 80080e0:	e04c      	b.n	800817c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6818      	ldr	r0, [r3, #0]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	6899      	ldr	r1, [r3, #8]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	f000 fad6 	bl	80086a2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	689a      	ldr	r2, [r3, #8]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008104:	609a      	str	r2, [r3, #8]
      break;
 8008106:	e039      	b.n	800817c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6818      	ldr	r0, [r3, #0]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	6859      	ldr	r1, [r3, #4]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	68db      	ldr	r3, [r3, #12]
 8008114:	461a      	mov	r2, r3
 8008116:	f000 fa4d 	bl	80085b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	2150      	movs	r1, #80	; 0x50
 8008120:	4618      	mov	r0, r3
 8008122:	f000 faa4 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 8008126:	e029      	b.n	800817c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6818      	ldr	r0, [r3, #0]
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	6859      	ldr	r1, [r3, #4]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	461a      	mov	r2, r3
 8008136:	f000 fa6b 	bl	8008610 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	2160      	movs	r1, #96	; 0x60
 8008140:	4618      	mov	r0, r3
 8008142:	f000 fa94 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 8008146:	e019      	b.n	800817c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6818      	ldr	r0, [r3, #0]
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	6859      	ldr	r1, [r3, #4]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	68db      	ldr	r3, [r3, #12]
 8008154:	461a      	mov	r2, r3
 8008156:	f000 fa2d 	bl	80085b4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	2140      	movs	r1, #64	; 0x40
 8008160:	4618      	mov	r0, r3
 8008162:	f000 fa84 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 8008166:	e009      	b.n	800817c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4619      	mov	r1, r3
 8008172:	4610      	mov	r0, r2
 8008174:	f000 fa7b 	bl	800866e <TIM_ITRx_SetConfig>
      break;
 8008178:	e000      	b.n	800817c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800817a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800818c:	2300      	movs	r3, #0
}
 800818e:	4618      	mov	r0, r3
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}

08008196 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008196:	b480      	push	{r7}
 8008198:	b083      	sub	sp, #12
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bc80      	pop	{r7}
 80081a6:	4770      	bx	lr

080081a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081b0:	bf00      	nop
 80081b2:	370c      	adds	r7, #12
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bc80      	pop	{r7}
 80081b8:	4770      	bx	lr

080081ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081c2:	bf00      	nop
 80081c4:	370c      	adds	r7, #12
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bc80      	pop	{r7}
 80081ca:	4770      	bx	lr

080081cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	bc80      	pop	{r7}
 80081dc:	4770      	bx	lr
	...

080081e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b085      	sub	sp, #20
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a29      	ldr	r2, [pc, #164]	; (8008298 <TIM_Base_SetConfig+0xb8>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d00b      	beq.n	8008210 <TIM_Base_SetConfig+0x30>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081fe:	d007      	beq.n	8008210 <TIM_Base_SetConfig+0x30>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a26      	ldr	r2, [pc, #152]	; (800829c <TIM_Base_SetConfig+0xbc>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d003      	beq.n	8008210 <TIM_Base_SetConfig+0x30>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a25      	ldr	r2, [pc, #148]	; (80082a0 <TIM_Base_SetConfig+0xc0>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d108      	bne.n	8008222 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a1c      	ldr	r2, [pc, #112]	; (8008298 <TIM_Base_SetConfig+0xb8>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d00b      	beq.n	8008242 <TIM_Base_SetConfig+0x62>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008230:	d007      	beq.n	8008242 <TIM_Base_SetConfig+0x62>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a19      	ldr	r2, [pc, #100]	; (800829c <TIM_Base_SetConfig+0xbc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d003      	beq.n	8008242 <TIM_Base_SetConfig+0x62>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a18      	ldr	r2, [pc, #96]	; (80082a0 <TIM_Base_SetConfig+0xc0>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d108      	bne.n	8008254 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008248:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	68db      	ldr	r3, [r3, #12]
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	4313      	orrs	r3, r2
 8008252:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	4313      	orrs	r3, r2
 8008260:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68fa      	ldr	r2, [r7, #12]
 8008266:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	689a      	ldr	r2, [r3, #8]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	681a      	ldr	r2, [r3, #0]
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	4a07      	ldr	r2, [pc, #28]	; (8008298 <TIM_Base_SetConfig+0xb8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d103      	bne.n	8008288 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	691a      	ldr	r2, [r3, #16]
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	615a      	str	r2, [r3, #20]
}
 800828e:	bf00      	nop
 8008290:	3714      	adds	r7, #20
 8008292:	46bd      	mov	sp, r7
 8008294:	bc80      	pop	{r7}
 8008296:	4770      	bx	lr
 8008298:	40012c00 	.word	0x40012c00
 800829c:	40000400 	.word	0x40000400
 80082a0:	40000800 	.word	0x40000800

080082a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b087      	sub	sp, #28
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6a1b      	ldr	r3, [r3, #32]
 80082b2:	f023 0201 	bic.w	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a1b      	ldr	r3, [r3, #32]
 80082be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	699b      	ldr	r3, [r3, #24]
 80082ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f023 0303 	bic.w	r3, r3, #3
 80082da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f023 0302 	bic.w	r3, r3, #2
 80082ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	697a      	ldr	r2, [r7, #20]
 80082f4:	4313      	orrs	r3, r2
 80082f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	4a1c      	ldr	r2, [pc, #112]	; (800836c <TIM_OC1_SetConfig+0xc8>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d10c      	bne.n	800831a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	f023 0308 	bic.w	r3, r3, #8
 8008306:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	68db      	ldr	r3, [r3, #12]
 800830c:	697a      	ldr	r2, [r7, #20]
 800830e:	4313      	orrs	r3, r2
 8008310:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f023 0304 	bic.w	r3, r3, #4
 8008318:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a13      	ldr	r2, [pc, #76]	; (800836c <TIM_OC1_SetConfig+0xc8>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d111      	bne.n	8008346 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008328:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008330:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	695b      	ldr	r3, [r3, #20]
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	4313      	orrs	r3, r2
 800833a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	4313      	orrs	r3, r2
 8008344:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	693a      	ldr	r2, [r7, #16]
 800834a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	68fa      	ldr	r2, [r7, #12]
 8008350:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685a      	ldr	r2, [r3, #4]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	697a      	ldr	r2, [r7, #20]
 800835e:	621a      	str	r2, [r3, #32]
}
 8008360:	bf00      	nop
 8008362:	371c      	adds	r7, #28
 8008364:	46bd      	mov	sp, r7
 8008366:	bc80      	pop	{r7}
 8008368:	4770      	bx	lr
 800836a:	bf00      	nop
 800836c:	40012c00 	.word	0x40012c00

08008370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	f023 0210 	bic.w	r2, r3, #16
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6a1b      	ldr	r3, [r3, #32]
 800838a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800839e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f023 0320 	bic.w	r3, r3, #32
 80083ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a1d      	ldr	r2, [pc, #116]	; (8008440 <TIM_OC2_SetConfig+0xd0>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d10d      	bne.n	80083ec <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	68db      	ldr	r3, [r3, #12]
 80083dc:	011b      	lsls	r3, r3, #4
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4a14      	ldr	r2, [pc, #80]	; (8008440 <TIM_OC2_SetConfig+0xd0>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d113      	bne.n	800841c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008402:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	695b      	ldr	r3, [r3, #20]
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4313      	orrs	r3, r2
 800840e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	693a      	ldr	r2, [r7, #16]
 8008418:	4313      	orrs	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68fa      	ldr	r2, [r7, #12]
 8008426:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	685a      	ldr	r2, [r3, #4]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	621a      	str	r2, [r3, #32]
}
 8008436:	bf00      	nop
 8008438:	371c      	adds	r7, #28
 800843a:	46bd      	mov	sp, r7
 800843c:	bc80      	pop	{r7}
 800843e:	4770      	bx	lr
 8008440:	40012c00 	.word	0x40012c00

08008444 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008444:	b480      	push	{r7}
 8008446:	b087      	sub	sp, #28
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a1b      	ldr	r3, [r3, #32]
 8008452:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6a1b      	ldr	r3, [r3, #32]
 800845e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69db      	ldr	r3, [r3, #28]
 800846a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f023 0303 	bic.w	r3, r3, #3
 800847a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	4313      	orrs	r3, r2
 8008484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800848c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	021b      	lsls	r3, r3, #8
 8008494:	697a      	ldr	r2, [r7, #20]
 8008496:	4313      	orrs	r3, r2
 8008498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a1d      	ldr	r2, [pc, #116]	; (8008514 <TIM_OC3_SetConfig+0xd0>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d10d      	bne.n	80084be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
 80084ae:	021b      	lsls	r3, r3, #8
 80084b0:	697a      	ldr	r2, [r7, #20]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a14      	ldr	r2, [pc, #80]	; (8008514 <TIM_OC3_SetConfig+0xd0>)
 80084c2:	4293      	cmp	r3, r2
 80084c4:	d113      	bne.n	80084ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	695b      	ldr	r3, [r3, #20]
 80084da:	011b      	lsls	r3, r3, #4
 80084dc:	693a      	ldr	r2, [r7, #16]
 80084de:	4313      	orrs	r3, r2
 80084e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	699b      	ldr	r3, [r3, #24]
 80084e6:	011b      	lsls	r3, r3, #4
 80084e8:	693a      	ldr	r2, [r7, #16]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	693a      	ldr	r2, [r7, #16]
 80084f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	685a      	ldr	r2, [r3, #4]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	621a      	str	r2, [r3, #32]
}
 8008508:	bf00      	nop
 800850a:	371c      	adds	r7, #28
 800850c:	46bd      	mov	sp, r7
 800850e:	bc80      	pop	{r7}
 8008510:	4770      	bx	lr
 8008512:	bf00      	nop
 8008514:	40012c00 	.word	0x40012c00

08008518 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008518:	b480      	push	{r7}
 800851a:	b087      	sub	sp, #28
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	69db      	ldr	r3, [r3, #28]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008546:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800854e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	021b      	lsls	r3, r3, #8
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	4313      	orrs	r3, r2
 800855a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008562:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008564:	683b      	ldr	r3, [r7, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	031b      	lsls	r3, r3, #12
 800856a:	693a      	ldr	r2, [r7, #16]
 800856c:	4313      	orrs	r3, r2
 800856e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	4a0f      	ldr	r2, [pc, #60]	; (80085b0 <TIM_OC4_SetConfig+0x98>)
 8008574:	4293      	cmp	r3, r2
 8008576:	d109      	bne.n	800858c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800857e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	695b      	ldr	r3, [r3, #20]
 8008584:	019b      	lsls	r3, r3, #6
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	4313      	orrs	r3, r2
 800858a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	697a      	ldr	r2, [r7, #20]
 8008590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68fa      	ldr	r2, [r7, #12]
 8008596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	693a      	ldr	r2, [r7, #16]
 80085a4:	621a      	str	r2, [r3, #32]
}
 80085a6:	bf00      	nop
 80085a8:	371c      	adds	r7, #28
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bc80      	pop	{r7}
 80085ae:	4770      	bx	lr
 80085b0:	40012c00 	.word	0x40012c00

080085b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	f023 0201 	bic.w	r2, r3, #1
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	011b      	lsls	r3, r3, #4
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f023 030a 	bic.w	r3, r3, #10
 80085f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	621a      	str	r2, [r3, #32]
}
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	bc80      	pop	{r7}
 800860e:	4770      	bx	lr

08008610 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008610:	b480      	push	{r7}
 8008612:	b087      	sub	sp, #28
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6a1b      	ldr	r3, [r3, #32]
 8008620:	f023 0210 	bic.w	r2, r3, #16
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	699b      	ldr	r3, [r3, #24]
 800862c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6a1b      	ldr	r3, [r3, #32]
 8008632:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008634:	697b      	ldr	r3, [r7, #20]
 8008636:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800863a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	031b      	lsls	r3, r3, #12
 8008640:	697a      	ldr	r2, [r7, #20]
 8008642:	4313      	orrs	r3, r2
 8008644:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800864c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800864e:	68bb      	ldr	r3, [r7, #8]
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	693a      	ldr	r2, [r7, #16]
 8008654:	4313      	orrs	r3, r2
 8008656:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	697a      	ldr	r2, [r7, #20]
 800865c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	621a      	str	r2, [r3, #32]
}
 8008664:	bf00      	nop
 8008666:	371c      	adds	r7, #28
 8008668:	46bd      	mov	sp, r7
 800866a:	bc80      	pop	{r7}
 800866c:	4770      	bx	lr

0800866e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800866e:	b480      	push	{r7}
 8008670:	b085      	sub	sp, #20
 8008672:	af00      	add	r7, sp, #0
 8008674:	6078      	str	r0, [r7, #4]
 8008676:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008684:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008686:	683a      	ldr	r2, [r7, #0]
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	4313      	orrs	r3, r2
 800868c:	f043 0307 	orr.w	r3, r3, #7
 8008690:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	68fa      	ldr	r2, [r7, #12]
 8008696:	609a      	str	r2, [r3, #8]
}
 8008698:	bf00      	nop
 800869a:	3714      	adds	r7, #20
 800869c:	46bd      	mov	sp, r7
 800869e:	bc80      	pop	{r7}
 80086a0:	4770      	bx	lr

080086a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086a2:	b480      	push	{r7}
 80086a4:	b087      	sub	sp, #28
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	60b9      	str	r1, [r7, #8]
 80086ac:	607a      	str	r2, [r7, #4]
 80086ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	689b      	ldr	r3, [r3, #8]
 80086b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	021a      	lsls	r2, r3, #8
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	431a      	orrs	r2, r3
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	4313      	orrs	r3, r2
 80086ca:	697a      	ldr	r2, [r7, #20]
 80086cc:	4313      	orrs	r3, r2
 80086ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	609a      	str	r2, [r3, #8]
}
 80086d6:	bf00      	nop
 80086d8:	371c      	adds	r7, #28
 80086da:	46bd      	mov	sp, r7
 80086dc:	bc80      	pop	{r7}
 80086de:	4770      	bx	lr

080086e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b087      	sub	sp, #28
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	60f8      	str	r0, [r7, #12]
 80086e8:	60b9      	str	r1, [r7, #8]
 80086ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	f003 031f 	and.w	r3, r3, #31
 80086f2:	2201      	movs	r2, #1
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a1a      	ldr	r2, [r3, #32]
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	43db      	mvns	r3, r3
 8008702:	401a      	ands	r2, r3
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	6a1a      	ldr	r2, [r3, #32]
 800870c:	68bb      	ldr	r3, [r7, #8]
 800870e:	f003 031f 	and.w	r3, r3, #31
 8008712:	6879      	ldr	r1, [r7, #4]
 8008714:	fa01 f303 	lsl.w	r3, r1, r3
 8008718:	431a      	orrs	r2, r3
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	621a      	str	r2, [r3, #32]
}
 800871e:	bf00      	nop
 8008720:	371c      	adds	r7, #28
 8008722:	46bd      	mov	sp, r7
 8008724:	bc80      	pop	{r7}
 8008726:	4770      	bx	lr

08008728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008728:	b480      	push	{r7}
 800872a:	b085      	sub	sp, #20
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008738:	2b01      	cmp	r3, #1
 800873a:	d101      	bne.n	8008740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800873c:	2302      	movs	r3, #2
 800873e:	e032      	b.n	80087a6 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2201      	movs	r2, #1
 8008744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2202      	movs	r2, #2
 800874c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	685b      	ldr	r3, [r3, #4]
 8008756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	4313      	orrs	r3, r2
 8008770:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008778:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	68ba      	ldr	r2, [r7, #8]
 8008780:	4313      	orrs	r3, r2
 8008782:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	68fa      	ldr	r2, [r7, #12]
 800878a:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3714      	adds	r7, #20
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bc80      	pop	{r7}
 80087ae:	4770      	bx	lr

080087b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	bc80      	pop	{r7}
 80087c0:	4770      	bx	lr

080087c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087c2:	b480      	push	{r7}
 80087c4:	b083      	sub	sp, #12
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80087ca:	bf00      	nop
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bc80      	pop	{r7}
 80087d2:	4770      	bx	lr

080087d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b082      	sub	sp, #8
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d101      	bne.n	80087e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	e03f      	b.n	8008866 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d106      	bne.n	8008800 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f7fb fe16 	bl	800442c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2224      	movs	r2, #36	; 0x24
 8008804:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008816:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008818:	6878      	ldr	r0, [r7, #4]
 800881a:	f000 f90b 	bl	8008a34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800882c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	695a      	ldr	r2, [r3, #20]
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800883c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68da      	ldr	r2, [r3, #12]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800884c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2200      	movs	r2, #0
 8008852:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2220      	movs	r2, #32
 8008858:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2220      	movs	r2, #32
 8008860:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b088      	sub	sp, #32
 8008872:	af02      	add	r7, sp, #8
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	603b      	str	r3, [r7, #0]
 800887a:	4613      	mov	r3, r2
 800887c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800887e:	2300      	movs	r3, #0
 8008880:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008888:	b2db      	uxtb	r3, r3
 800888a:	2b20      	cmp	r3, #32
 800888c:	f040 8083 	bne.w	8008996 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d002      	beq.n	800889c <HAL_UART_Transmit+0x2e>
 8008896:	88fb      	ldrh	r3, [r7, #6]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d101      	bne.n	80088a0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800889c:	2301      	movs	r3, #1
 800889e:	e07b      	b.n	8008998 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088a6:	2b01      	cmp	r3, #1
 80088a8:	d101      	bne.n	80088ae <HAL_UART_Transmit+0x40>
 80088aa:	2302      	movs	r3, #2
 80088ac:	e074      	b.n	8008998 <HAL_UART_Transmit+0x12a>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2221      	movs	r2, #33	; 0x21
 80088c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80088c4:	f7fb ff10 	bl	80046e8 <HAL_GetTick>
 80088c8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	88fa      	ldrh	r2, [r7, #6]
 80088ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	88fa      	ldrh	r2, [r7, #6]
 80088d4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80088d6:	e042      	b.n	800895e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80088dc:	b29b      	uxth	r3, r3
 80088de:	3b01      	subs	r3, #1
 80088e0:	b29a      	uxth	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80088ee:	d122      	bne.n	8008936 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	2200      	movs	r2, #0
 80088f8:	2180      	movs	r1, #128	; 0x80
 80088fa:	68f8      	ldr	r0, [r7, #12]
 80088fc:	f000 f850 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8008900:	4603      	mov	r3, r0
 8008902:	2b00      	cmp	r3, #0
 8008904:	d001      	beq.n	800890a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8008906:	2303      	movs	r3, #3
 8008908:	e046      	b.n	8008998 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800890e:	693b      	ldr	r3, [r7, #16]
 8008910:	881b      	ldrh	r3, [r3, #0]
 8008912:	461a      	mov	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800891c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d103      	bne.n	800892e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	3302      	adds	r3, #2
 800892a:	60bb      	str	r3, [r7, #8]
 800892c:	e017      	b.n	800895e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	3301      	adds	r3, #1
 8008932:	60bb      	str	r3, [r7, #8]
 8008934:	e013      	b.n	800895e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	9300      	str	r3, [sp, #0]
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2200      	movs	r2, #0
 800893e:	2180      	movs	r1, #128	; 0x80
 8008940:	68f8      	ldr	r0, [r7, #12]
 8008942:	f000 f82d 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800894c:	2303      	movs	r3, #3
 800894e:	e023      	b.n	8008998 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	1c5a      	adds	r2, r3, #1
 8008954:	60ba      	str	r2, [r7, #8]
 8008956:	781a      	ldrb	r2, [r3, #0]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008962:	b29b      	uxth	r3, r3
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1b7      	bne.n	80088d8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	9300      	str	r3, [sp, #0]
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	2200      	movs	r2, #0
 8008970:	2140      	movs	r1, #64	; 0x40
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 f814 	bl	80089a0 <UART_WaitOnFlagUntilTimeout>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800897e:	2303      	movs	r3, #3
 8008980:	e00a      	b.n	8008998 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2220      	movs	r2, #32
 8008986:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8008992:	2300      	movs	r3, #0
 8008994:	e000      	b.n	8008998 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008996:	2302      	movs	r3, #2
  }
}
 8008998:	4618      	mov	r0, r3
 800899a:	3718      	adds	r7, #24
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	60f8      	str	r0, [r7, #12]
 80089a8:	60b9      	str	r1, [r7, #8]
 80089aa:	603b      	str	r3, [r7, #0]
 80089ac:	4613      	mov	r3, r2
 80089ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089b0:	e02c      	b.n	8008a0c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b8:	d028      	beq.n	8008a0c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d007      	beq.n	80089d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80089c0:	f7fb fe92 	bl	80046e8 <HAL_GetTick>
 80089c4:	4602      	mov	r2, r0
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	1ad3      	subs	r3, r2, r3
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d21d      	bcs.n	8008a0c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68da      	ldr	r2, [r3, #12]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80089de:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	695a      	ldr	r2, [r3, #20]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f022 0201 	bic.w	r2, r2, #1
 80089ee:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	2220      	movs	r2, #32
 80089f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2220      	movs	r2, #32
 80089fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008a08:	2303      	movs	r3, #3
 8008a0a:	e00f      	b.n	8008a2c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	4013      	ands	r3, r2
 8008a16:	68ba      	ldr	r2, [r7, #8]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	bf0c      	ite	eq
 8008a1c:	2301      	moveq	r3, #1
 8008a1e:	2300      	movne	r3, #0
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	461a      	mov	r2, r3
 8008a24:	79fb      	ldrb	r3, [r7, #7]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d0c3      	beq.n	80089b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008a2a:	2300      	movs	r3, #0
}
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	691b      	ldr	r3, [r3, #16]
 8008a42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68da      	ldr	r2, [r3, #12]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	689a      	ldr	r2, [r3, #8]
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	695b      	ldr	r3, [r3, #20]
 8008a60:	4313      	orrs	r3, r2
 8008a62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	68db      	ldr	r3, [r3, #12]
 8008a6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8008a6e:	f023 030c 	bic.w	r3, r3, #12
 8008a72:	687a      	ldr	r2, [r7, #4]
 8008a74:	6812      	ldr	r2, [r2, #0]
 8008a76:	68f9      	ldr	r1, [r7, #12]
 8008a78:	430b      	orrs	r3, r1
 8008a7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	695b      	ldr	r3, [r3, #20]
 8008a82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	699a      	ldr	r2, [r3, #24]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a52      	ldr	r2, [pc, #328]	; (8008be0 <UART_SetConfig+0x1ac>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d14e      	bne.n	8008b3a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8008a9c:	f7fe f98c 	bl	8006db8 <HAL_RCC_GetPCLK2Freq>
 8008aa0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	4413      	add	r3, r2
 8008aaa:	009a      	lsls	r2, r3, #2
 8008aac:	441a      	add	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	009b      	lsls	r3, r3, #2
 8008ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ab8:	4a4a      	ldr	r2, [pc, #296]	; (8008be4 <UART_SetConfig+0x1b0>)
 8008aba:	fba2 2303 	umull	r2, r3, r2, r3
 8008abe:	095b      	lsrs	r3, r3, #5
 8008ac0:	0119      	lsls	r1, r3, #4
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	009a      	lsls	r2, r3, #2
 8008acc:	441a      	add	r2, r3
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	685b      	ldr	r3, [r3, #4]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	fbb2 f2f3 	udiv	r2, r2, r3
 8008ad8:	4b42      	ldr	r3, [pc, #264]	; (8008be4 <UART_SetConfig+0x1b0>)
 8008ada:	fba3 0302 	umull	r0, r3, r3, r2
 8008ade:	095b      	lsrs	r3, r3, #5
 8008ae0:	2064      	movs	r0, #100	; 0x64
 8008ae2:	fb00 f303 	mul.w	r3, r0, r3
 8008ae6:	1ad3      	subs	r3, r2, r3
 8008ae8:	011b      	lsls	r3, r3, #4
 8008aea:	3332      	adds	r3, #50	; 0x32
 8008aec:	4a3d      	ldr	r2, [pc, #244]	; (8008be4 <UART_SetConfig+0x1b0>)
 8008aee:	fba2 2303 	umull	r2, r3, r2, r3
 8008af2:	095b      	lsrs	r3, r3, #5
 8008af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008af8:	4419      	add	r1, r3
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009a      	lsls	r2, r3, #2
 8008b04:	441a      	add	r2, r3
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b10:	4b34      	ldr	r3, [pc, #208]	; (8008be4 <UART_SetConfig+0x1b0>)
 8008b12:	fba3 0302 	umull	r0, r3, r3, r2
 8008b16:	095b      	lsrs	r3, r3, #5
 8008b18:	2064      	movs	r0, #100	; 0x64
 8008b1a:	fb00 f303 	mul.w	r3, r0, r3
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	3332      	adds	r3, #50	; 0x32
 8008b24:	4a2f      	ldr	r2, [pc, #188]	; (8008be4 <UART_SetConfig+0x1b0>)
 8008b26:	fba2 2303 	umull	r2, r3, r2, r3
 8008b2a:	095b      	lsrs	r3, r3, #5
 8008b2c:	f003 020f 	and.w	r2, r3, #15
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	440a      	add	r2, r1
 8008b36:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8008b38:	e04d      	b.n	8008bd6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8008b3a:	f7fe f929 	bl	8006d90 <HAL_RCC_GetPCLK1Freq>
 8008b3e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	4613      	mov	r3, r2
 8008b44:	009b      	lsls	r3, r3, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	009a      	lsls	r2, r3, #2
 8008b4a:	441a      	add	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	685b      	ldr	r3, [r3, #4]
 8008b50:	009b      	lsls	r3, r3, #2
 8008b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b56:	4a23      	ldr	r2, [pc, #140]	; (8008be4 <UART_SetConfig+0x1b0>)
 8008b58:	fba2 2303 	umull	r2, r3, r2, r3
 8008b5c:	095b      	lsrs	r3, r3, #5
 8008b5e:	0119      	lsls	r1, r3, #4
 8008b60:	68ba      	ldr	r2, [r7, #8]
 8008b62:	4613      	mov	r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	4413      	add	r3, r2
 8008b68:	009a      	lsls	r2, r3, #2
 8008b6a:	441a      	add	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	009b      	lsls	r3, r3, #2
 8008b72:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b76:	4b1b      	ldr	r3, [pc, #108]	; (8008be4 <UART_SetConfig+0x1b0>)
 8008b78:	fba3 0302 	umull	r0, r3, r3, r2
 8008b7c:	095b      	lsrs	r3, r3, #5
 8008b7e:	2064      	movs	r0, #100	; 0x64
 8008b80:	fb00 f303 	mul.w	r3, r0, r3
 8008b84:	1ad3      	subs	r3, r2, r3
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	3332      	adds	r3, #50	; 0x32
 8008b8a:	4a16      	ldr	r2, [pc, #88]	; (8008be4 <UART_SetConfig+0x1b0>)
 8008b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8008b90:	095b      	lsrs	r3, r3, #5
 8008b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008b96:	4419      	add	r1, r3
 8008b98:	68ba      	ldr	r2, [r7, #8]
 8008b9a:	4613      	mov	r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	4413      	add	r3, r2
 8008ba0:	009a      	lsls	r2, r3, #2
 8008ba2:	441a      	add	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	685b      	ldr	r3, [r3, #4]
 8008ba8:	009b      	lsls	r3, r3, #2
 8008baa:	fbb2 f2f3 	udiv	r2, r2, r3
 8008bae:	4b0d      	ldr	r3, [pc, #52]	; (8008be4 <UART_SetConfig+0x1b0>)
 8008bb0:	fba3 0302 	umull	r0, r3, r3, r2
 8008bb4:	095b      	lsrs	r3, r3, #5
 8008bb6:	2064      	movs	r0, #100	; 0x64
 8008bb8:	fb00 f303 	mul.w	r3, r0, r3
 8008bbc:	1ad3      	subs	r3, r2, r3
 8008bbe:	011b      	lsls	r3, r3, #4
 8008bc0:	3332      	adds	r3, #50	; 0x32
 8008bc2:	4a08      	ldr	r2, [pc, #32]	; (8008be4 <UART_SetConfig+0x1b0>)
 8008bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc8:	095b      	lsrs	r3, r3, #5
 8008bca:	f003 020f 	and.w	r2, r3, #15
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	440a      	add	r2, r1
 8008bd4:	609a      	str	r2, [r3, #8]
}
 8008bd6:	bf00      	nop
 8008bd8:	3710      	adds	r7, #16
 8008bda:	46bd      	mov	sp, r7
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	bf00      	nop
 8008be0:	40013800 	.word	0x40013800
 8008be4:	51eb851f 	.word	0x51eb851f

08008be8 <__errno>:
 8008be8:	4b01      	ldr	r3, [pc, #4]	; (8008bf0 <__errno+0x8>)
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	200000e0 	.word	0x200000e0

08008bf4 <__libc_init_array>:
 8008bf4:	b570      	push	{r4, r5, r6, lr}
 8008bf6:	2500      	movs	r5, #0
 8008bf8:	4e0c      	ldr	r6, [pc, #48]	; (8008c2c <__libc_init_array+0x38>)
 8008bfa:	4c0d      	ldr	r4, [pc, #52]	; (8008c30 <__libc_init_array+0x3c>)
 8008bfc:	1ba4      	subs	r4, r4, r6
 8008bfe:	10a4      	asrs	r4, r4, #2
 8008c00:	42a5      	cmp	r5, r4
 8008c02:	d109      	bne.n	8008c18 <__libc_init_array+0x24>
 8008c04:	f000 fc36 	bl	8009474 <_init>
 8008c08:	2500      	movs	r5, #0
 8008c0a:	4e0a      	ldr	r6, [pc, #40]	; (8008c34 <__libc_init_array+0x40>)
 8008c0c:	4c0a      	ldr	r4, [pc, #40]	; (8008c38 <__libc_init_array+0x44>)
 8008c0e:	1ba4      	subs	r4, r4, r6
 8008c10:	10a4      	asrs	r4, r4, #2
 8008c12:	42a5      	cmp	r5, r4
 8008c14:	d105      	bne.n	8008c22 <__libc_init_array+0x2e>
 8008c16:	bd70      	pop	{r4, r5, r6, pc}
 8008c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c1c:	4798      	blx	r3
 8008c1e:	3501      	adds	r5, #1
 8008c20:	e7ee      	b.n	8008c00 <__libc_init_array+0xc>
 8008c22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c26:	4798      	blx	r3
 8008c28:	3501      	adds	r5, #1
 8008c2a:	e7f2      	b.n	8008c12 <__libc_init_array+0x1e>
 8008c2c:	0800a7a8 	.word	0x0800a7a8
 8008c30:	0800a7a8 	.word	0x0800a7a8
 8008c34:	0800a7a8 	.word	0x0800a7a8
 8008c38:	0800a7ac 	.word	0x0800a7ac

08008c3c <memcpy>:
 8008c3c:	b510      	push	{r4, lr}
 8008c3e:	1e43      	subs	r3, r0, #1
 8008c40:	440a      	add	r2, r1
 8008c42:	4291      	cmp	r1, r2
 8008c44:	d100      	bne.n	8008c48 <memcpy+0xc>
 8008c46:	bd10      	pop	{r4, pc}
 8008c48:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c50:	e7f7      	b.n	8008c42 <memcpy+0x6>

08008c52 <memset>:
 8008c52:	4603      	mov	r3, r0
 8008c54:	4402      	add	r2, r0
 8008c56:	4293      	cmp	r3, r2
 8008c58:	d100      	bne.n	8008c5c <memset+0xa>
 8008c5a:	4770      	bx	lr
 8008c5c:	f803 1b01 	strb.w	r1, [r3], #1
 8008c60:	e7f9      	b.n	8008c56 <memset+0x4>
	...

08008c64 <siprintf>:
 8008c64:	b40e      	push	{r1, r2, r3}
 8008c66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008c6a:	b500      	push	{lr}
 8008c6c:	b09c      	sub	sp, #112	; 0x70
 8008c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8008c70:	9002      	str	r0, [sp, #8]
 8008c72:	9006      	str	r0, [sp, #24]
 8008c74:	9107      	str	r1, [sp, #28]
 8008c76:	9104      	str	r1, [sp, #16]
 8008c78:	4808      	ldr	r0, [pc, #32]	; (8008c9c <siprintf+0x38>)
 8008c7a:	4909      	ldr	r1, [pc, #36]	; (8008ca0 <siprintf+0x3c>)
 8008c7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c80:	9105      	str	r1, [sp, #20]
 8008c82:	6800      	ldr	r0, [r0, #0]
 8008c84:	a902      	add	r1, sp, #8
 8008c86:	9301      	str	r3, [sp, #4]
 8008c88:	f000 f866 	bl	8008d58 <_svfiprintf_r>
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	9b02      	ldr	r3, [sp, #8]
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	b01c      	add	sp, #112	; 0x70
 8008c94:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c98:	b003      	add	sp, #12
 8008c9a:	4770      	bx	lr
 8008c9c:	200000e0 	.word	0x200000e0
 8008ca0:	ffff0208 	.word	0xffff0208

08008ca4 <__ssputs_r>:
 8008ca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ca8:	688e      	ldr	r6, [r1, #8]
 8008caa:	4682      	mov	sl, r0
 8008cac:	429e      	cmp	r6, r3
 8008cae:	460c      	mov	r4, r1
 8008cb0:	4690      	mov	r8, r2
 8008cb2:	4699      	mov	r9, r3
 8008cb4:	d837      	bhi.n	8008d26 <__ssputs_r+0x82>
 8008cb6:	898a      	ldrh	r2, [r1, #12]
 8008cb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008cbc:	d031      	beq.n	8008d22 <__ssputs_r+0x7e>
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	6825      	ldr	r5, [r4, #0]
 8008cc2:	6909      	ldr	r1, [r1, #16]
 8008cc4:	1a6f      	subs	r7, r5, r1
 8008cc6:	6965      	ldr	r5, [r4, #20]
 8008cc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008ccc:	fb95 f5f3 	sdiv	r5, r5, r3
 8008cd0:	f109 0301 	add.w	r3, r9, #1
 8008cd4:	443b      	add	r3, r7
 8008cd6:	429d      	cmp	r5, r3
 8008cd8:	bf38      	it	cc
 8008cda:	461d      	movcc	r5, r3
 8008cdc:	0553      	lsls	r3, r2, #21
 8008cde:	d530      	bpl.n	8008d42 <__ssputs_r+0x9e>
 8008ce0:	4629      	mov	r1, r5
 8008ce2:	f000 fb2d 	bl	8009340 <_malloc_r>
 8008ce6:	4606      	mov	r6, r0
 8008ce8:	b950      	cbnz	r0, 8008d00 <__ssputs_r+0x5c>
 8008cea:	230c      	movs	r3, #12
 8008cec:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf0:	f8ca 3000 	str.w	r3, [sl]
 8008cf4:	89a3      	ldrh	r3, [r4, #12]
 8008cf6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cfa:	81a3      	strh	r3, [r4, #12]
 8008cfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d00:	463a      	mov	r2, r7
 8008d02:	6921      	ldr	r1, [r4, #16]
 8008d04:	f7ff ff9a 	bl	8008c3c <memcpy>
 8008d08:	89a3      	ldrh	r3, [r4, #12]
 8008d0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008d0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d12:	81a3      	strh	r3, [r4, #12]
 8008d14:	6126      	str	r6, [r4, #16]
 8008d16:	443e      	add	r6, r7
 8008d18:	6026      	str	r6, [r4, #0]
 8008d1a:	464e      	mov	r6, r9
 8008d1c:	6165      	str	r5, [r4, #20]
 8008d1e:	1bed      	subs	r5, r5, r7
 8008d20:	60a5      	str	r5, [r4, #8]
 8008d22:	454e      	cmp	r6, r9
 8008d24:	d900      	bls.n	8008d28 <__ssputs_r+0x84>
 8008d26:	464e      	mov	r6, r9
 8008d28:	4632      	mov	r2, r6
 8008d2a:	4641      	mov	r1, r8
 8008d2c:	6820      	ldr	r0, [r4, #0]
 8008d2e:	f000 faa1 	bl	8009274 <memmove>
 8008d32:	68a3      	ldr	r3, [r4, #8]
 8008d34:	2000      	movs	r0, #0
 8008d36:	1b9b      	subs	r3, r3, r6
 8008d38:	60a3      	str	r3, [r4, #8]
 8008d3a:	6823      	ldr	r3, [r4, #0]
 8008d3c:	441e      	add	r6, r3
 8008d3e:	6026      	str	r6, [r4, #0]
 8008d40:	e7dc      	b.n	8008cfc <__ssputs_r+0x58>
 8008d42:	462a      	mov	r2, r5
 8008d44:	f000 fb56 	bl	80093f4 <_realloc_r>
 8008d48:	4606      	mov	r6, r0
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d1e2      	bne.n	8008d14 <__ssputs_r+0x70>
 8008d4e:	6921      	ldr	r1, [r4, #16]
 8008d50:	4650      	mov	r0, sl
 8008d52:	f000 faa9 	bl	80092a8 <_free_r>
 8008d56:	e7c8      	b.n	8008cea <__ssputs_r+0x46>

08008d58 <_svfiprintf_r>:
 8008d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d5c:	461d      	mov	r5, r3
 8008d5e:	898b      	ldrh	r3, [r1, #12]
 8008d60:	b09d      	sub	sp, #116	; 0x74
 8008d62:	061f      	lsls	r7, r3, #24
 8008d64:	4680      	mov	r8, r0
 8008d66:	460c      	mov	r4, r1
 8008d68:	4616      	mov	r6, r2
 8008d6a:	d50f      	bpl.n	8008d8c <_svfiprintf_r+0x34>
 8008d6c:	690b      	ldr	r3, [r1, #16]
 8008d6e:	b96b      	cbnz	r3, 8008d8c <_svfiprintf_r+0x34>
 8008d70:	2140      	movs	r1, #64	; 0x40
 8008d72:	f000 fae5 	bl	8009340 <_malloc_r>
 8008d76:	6020      	str	r0, [r4, #0]
 8008d78:	6120      	str	r0, [r4, #16]
 8008d7a:	b928      	cbnz	r0, 8008d88 <_svfiprintf_r+0x30>
 8008d7c:	230c      	movs	r3, #12
 8008d7e:	f8c8 3000 	str.w	r3, [r8]
 8008d82:	f04f 30ff 	mov.w	r0, #4294967295
 8008d86:	e0c8      	b.n	8008f1a <_svfiprintf_r+0x1c2>
 8008d88:	2340      	movs	r3, #64	; 0x40
 8008d8a:	6163      	str	r3, [r4, #20]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8008d90:	2320      	movs	r3, #32
 8008d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d96:	2330      	movs	r3, #48	; 0x30
 8008d98:	f04f 0b01 	mov.w	fp, #1
 8008d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008da0:	9503      	str	r5, [sp, #12]
 8008da2:	4637      	mov	r7, r6
 8008da4:	463d      	mov	r5, r7
 8008da6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008daa:	b10b      	cbz	r3, 8008db0 <_svfiprintf_r+0x58>
 8008dac:	2b25      	cmp	r3, #37	; 0x25
 8008dae:	d13e      	bne.n	8008e2e <_svfiprintf_r+0xd6>
 8008db0:	ebb7 0a06 	subs.w	sl, r7, r6
 8008db4:	d00b      	beq.n	8008dce <_svfiprintf_r+0x76>
 8008db6:	4653      	mov	r3, sl
 8008db8:	4632      	mov	r2, r6
 8008dba:	4621      	mov	r1, r4
 8008dbc:	4640      	mov	r0, r8
 8008dbe:	f7ff ff71 	bl	8008ca4 <__ssputs_r>
 8008dc2:	3001      	adds	r0, #1
 8008dc4:	f000 80a4 	beq.w	8008f10 <_svfiprintf_r+0x1b8>
 8008dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dca:	4453      	add	r3, sl
 8008dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dce:	783b      	ldrb	r3, [r7, #0]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	f000 809d 	beq.w	8008f10 <_svfiprintf_r+0x1b8>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8008ddc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	9307      	str	r3, [sp, #28]
 8008de4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008de8:	931a      	str	r3, [sp, #104]	; 0x68
 8008dea:	462f      	mov	r7, r5
 8008dec:	2205      	movs	r2, #5
 8008dee:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008df2:	4850      	ldr	r0, [pc, #320]	; (8008f34 <_svfiprintf_r+0x1dc>)
 8008df4:	f000 fa30 	bl	8009258 <memchr>
 8008df8:	9b04      	ldr	r3, [sp, #16]
 8008dfa:	b9d0      	cbnz	r0, 8008e32 <_svfiprintf_r+0xda>
 8008dfc:	06d9      	lsls	r1, r3, #27
 8008dfe:	bf44      	itt	mi
 8008e00:	2220      	movmi	r2, #32
 8008e02:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e06:	071a      	lsls	r2, r3, #28
 8008e08:	bf44      	itt	mi
 8008e0a:	222b      	movmi	r2, #43	; 0x2b
 8008e0c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008e10:	782a      	ldrb	r2, [r5, #0]
 8008e12:	2a2a      	cmp	r2, #42	; 0x2a
 8008e14:	d015      	beq.n	8008e42 <_svfiprintf_r+0xea>
 8008e16:	462f      	mov	r7, r5
 8008e18:	2000      	movs	r0, #0
 8008e1a:	250a      	movs	r5, #10
 8008e1c:	9a07      	ldr	r2, [sp, #28]
 8008e1e:	4639      	mov	r1, r7
 8008e20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008e24:	3b30      	subs	r3, #48	; 0x30
 8008e26:	2b09      	cmp	r3, #9
 8008e28:	d94d      	bls.n	8008ec6 <_svfiprintf_r+0x16e>
 8008e2a:	b1b8      	cbz	r0, 8008e5c <_svfiprintf_r+0x104>
 8008e2c:	e00f      	b.n	8008e4e <_svfiprintf_r+0xf6>
 8008e2e:	462f      	mov	r7, r5
 8008e30:	e7b8      	b.n	8008da4 <_svfiprintf_r+0x4c>
 8008e32:	4a40      	ldr	r2, [pc, #256]	; (8008f34 <_svfiprintf_r+0x1dc>)
 8008e34:	463d      	mov	r5, r7
 8008e36:	1a80      	subs	r0, r0, r2
 8008e38:	fa0b f000 	lsl.w	r0, fp, r0
 8008e3c:	4318      	orrs	r0, r3
 8008e3e:	9004      	str	r0, [sp, #16]
 8008e40:	e7d3      	b.n	8008dea <_svfiprintf_r+0x92>
 8008e42:	9a03      	ldr	r2, [sp, #12]
 8008e44:	1d11      	adds	r1, r2, #4
 8008e46:	6812      	ldr	r2, [r2, #0]
 8008e48:	9103      	str	r1, [sp, #12]
 8008e4a:	2a00      	cmp	r2, #0
 8008e4c:	db01      	blt.n	8008e52 <_svfiprintf_r+0xfa>
 8008e4e:	9207      	str	r2, [sp, #28]
 8008e50:	e004      	b.n	8008e5c <_svfiprintf_r+0x104>
 8008e52:	4252      	negs	r2, r2
 8008e54:	f043 0302 	orr.w	r3, r3, #2
 8008e58:	9207      	str	r2, [sp, #28]
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	783b      	ldrb	r3, [r7, #0]
 8008e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8008e60:	d10c      	bne.n	8008e7c <_svfiprintf_r+0x124>
 8008e62:	787b      	ldrb	r3, [r7, #1]
 8008e64:	2b2a      	cmp	r3, #42	; 0x2a
 8008e66:	d133      	bne.n	8008ed0 <_svfiprintf_r+0x178>
 8008e68:	9b03      	ldr	r3, [sp, #12]
 8008e6a:	3702      	adds	r7, #2
 8008e6c:	1d1a      	adds	r2, r3, #4
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	9203      	str	r2, [sp, #12]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bfb8      	it	lt
 8008e76:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e7a:	9305      	str	r3, [sp, #20]
 8008e7c:	4d2e      	ldr	r5, [pc, #184]	; (8008f38 <_svfiprintf_r+0x1e0>)
 8008e7e:	2203      	movs	r2, #3
 8008e80:	7839      	ldrb	r1, [r7, #0]
 8008e82:	4628      	mov	r0, r5
 8008e84:	f000 f9e8 	bl	8009258 <memchr>
 8008e88:	b138      	cbz	r0, 8008e9a <_svfiprintf_r+0x142>
 8008e8a:	2340      	movs	r3, #64	; 0x40
 8008e8c:	1b40      	subs	r0, r0, r5
 8008e8e:	fa03 f000 	lsl.w	r0, r3, r0
 8008e92:	9b04      	ldr	r3, [sp, #16]
 8008e94:	3701      	adds	r7, #1
 8008e96:	4303      	orrs	r3, r0
 8008e98:	9304      	str	r3, [sp, #16]
 8008e9a:	7839      	ldrb	r1, [r7, #0]
 8008e9c:	2206      	movs	r2, #6
 8008e9e:	4827      	ldr	r0, [pc, #156]	; (8008f3c <_svfiprintf_r+0x1e4>)
 8008ea0:	1c7e      	adds	r6, r7, #1
 8008ea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008ea6:	f000 f9d7 	bl	8009258 <memchr>
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d038      	beq.n	8008f20 <_svfiprintf_r+0x1c8>
 8008eae:	4b24      	ldr	r3, [pc, #144]	; (8008f40 <_svfiprintf_r+0x1e8>)
 8008eb0:	bb13      	cbnz	r3, 8008ef8 <_svfiprintf_r+0x1a0>
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	3307      	adds	r3, #7
 8008eb6:	f023 0307 	bic.w	r3, r3, #7
 8008eba:	3308      	adds	r3, #8
 8008ebc:	9303      	str	r3, [sp, #12]
 8008ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ec0:	444b      	add	r3, r9
 8008ec2:	9309      	str	r3, [sp, #36]	; 0x24
 8008ec4:	e76d      	b.n	8008da2 <_svfiprintf_r+0x4a>
 8008ec6:	fb05 3202 	mla	r2, r5, r2, r3
 8008eca:	2001      	movs	r0, #1
 8008ecc:	460f      	mov	r7, r1
 8008ece:	e7a6      	b.n	8008e1e <_svfiprintf_r+0xc6>
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	250a      	movs	r5, #10
 8008ed4:	4619      	mov	r1, r3
 8008ed6:	3701      	adds	r7, #1
 8008ed8:	9305      	str	r3, [sp, #20]
 8008eda:	4638      	mov	r0, r7
 8008edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008ee0:	3a30      	subs	r2, #48	; 0x30
 8008ee2:	2a09      	cmp	r2, #9
 8008ee4:	d903      	bls.n	8008eee <_svfiprintf_r+0x196>
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d0c8      	beq.n	8008e7c <_svfiprintf_r+0x124>
 8008eea:	9105      	str	r1, [sp, #20]
 8008eec:	e7c6      	b.n	8008e7c <_svfiprintf_r+0x124>
 8008eee:	fb05 2101 	mla	r1, r5, r1, r2
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4607      	mov	r7, r0
 8008ef6:	e7f0      	b.n	8008eda <_svfiprintf_r+0x182>
 8008ef8:	ab03      	add	r3, sp, #12
 8008efa:	9300      	str	r3, [sp, #0]
 8008efc:	4622      	mov	r2, r4
 8008efe:	4b11      	ldr	r3, [pc, #68]	; (8008f44 <_svfiprintf_r+0x1ec>)
 8008f00:	a904      	add	r1, sp, #16
 8008f02:	4640      	mov	r0, r8
 8008f04:	f3af 8000 	nop.w
 8008f08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008f0c:	4681      	mov	r9, r0
 8008f0e:	d1d6      	bne.n	8008ebe <_svfiprintf_r+0x166>
 8008f10:	89a3      	ldrh	r3, [r4, #12]
 8008f12:	065b      	lsls	r3, r3, #25
 8008f14:	f53f af35 	bmi.w	8008d82 <_svfiprintf_r+0x2a>
 8008f18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008f1a:	b01d      	add	sp, #116	; 0x74
 8008f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f20:	ab03      	add	r3, sp, #12
 8008f22:	9300      	str	r3, [sp, #0]
 8008f24:	4622      	mov	r2, r4
 8008f26:	4b07      	ldr	r3, [pc, #28]	; (8008f44 <_svfiprintf_r+0x1ec>)
 8008f28:	a904      	add	r1, sp, #16
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	f000 f882 	bl	8009034 <_printf_i>
 8008f30:	e7ea      	b.n	8008f08 <_svfiprintf_r+0x1b0>
 8008f32:	bf00      	nop
 8008f34:	0800a76c 	.word	0x0800a76c
 8008f38:	0800a772 	.word	0x0800a772
 8008f3c:	0800a776 	.word	0x0800a776
 8008f40:	00000000 	.word	0x00000000
 8008f44:	08008ca5 	.word	0x08008ca5

08008f48 <_printf_common>:
 8008f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f4c:	4691      	mov	r9, r2
 8008f4e:	461f      	mov	r7, r3
 8008f50:	688a      	ldr	r2, [r1, #8]
 8008f52:	690b      	ldr	r3, [r1, #16]
 8008f54:	4606      	mov	r6, r0
 8008f56:	4293      	cmp	r3, r2
 8008f58:	bfb8      	it	lt
 8008f5a:	4613      	movlt	r3, r2
 8008f5c:	f8c9 3000 	str.w	r3, [r9]
 8008f60:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f64:	460c      	mov	r4, r1
 8008f66:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f6a:	b112      	cbz	r2, 8008f72 <_printf_common+0x2a>
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	f8c9 3000 	str.w	r3, [r9]
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	0699      	lsls	r1, r3, #26
 8008f76:	bf42      	ittt	mi
 8008f78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008f7c:	3302      	addmi	r3, #2
 8008f7e:	f8c9 3000 	strmi.w	r3, [r9]
 8008f82:	6825      	ldr	r5, [r4, #0]
 8008f84:	f015 0506 	ands.w	r5, r5, #6
 8008f88:	d107      	bne.n	8008f9a <_printf_common+0x52>
 8008f8a:	f104 0a19 	add.w	sl, r4, #25
 8008f8e:	68e3      	ldr	r3, [r4, #12]
 8008f90:	f8d9 2000 	ldr.w	r2, [r9]
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	42ab      	cmp	r3, r5
 8008f98:	dc29      	bgt.n	8008fee <_printf_common+0xa6>
 8008f9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008f9e:	6822      	ldr	r2, [r4, #0]
 8008fa0:	3300      	adds	r3, #0
 8008fa2:	bf18      	it	ne
 8008fa4:	2301      	movne	r3, #1
 8008fa6:	0692      	lsls	r2, r2, #26
 8008fa8:	d42e      	bmi.n	8009008 <_printf_common+0xc0>
 8008faa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008fae:	4639      	mov	r1, r7
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	47c0      	blx	r8
 8008fb4:	3001      	adds	r0, #1
 8008fb6:	d021      	beq.n	8008ffc <_printf_common+0xb4>
 8008fb8:	6823      	ldr	r3, [r4, #0]
 8008fba:	68e5      	ldr	r5, [r4, #12]
 8008fbc:	f003 0306 	and.w	r3, r3, #6
 8008fc0:	2b04      	cmp	r3, #4
 8008fc2:	bf18      	it	ne
 8008fc4:	2500      	movne	r5, #0
 8008fc6:	f8d9 2000 	ldr.w	r2, [r9]
 8008fca:	f04f 0900 	mov.w	r9, #0
 8008fce:	bf08      	it	eq
 8008fd0:	1aad      	subeq	r5, r5, r2
 8008fd2:	68a3      	ldr	r3, [r4, #8]
 8008fd4:	6922      	ldr	r2, [r4, #16]
 8008fd6:	bf08      	it	eq
 8008fd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	bfc4      	itt	gt
 8008fe0:	1a9b      	subgt	r3, r3, r2
 8008fe2:	18ed      	addgt	r5, r5, r3
 8008fe4:	341a      	adds	r4, #26
 8008fe6:	454d      	cmp	r5, r9
 8008fe8:	d11a      	bne.n	8009020 <_printf_common+0xd8>
 8008fea:	2000      	movs	r0, #0
 8008fec:	e008      	b.n	8009000 <_printf_common+0xb8>
 8008fee:	2301      	movs	r3, #1
 8008ff0:	4652      	mov	r2, sl
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	4630      	mov	r0, r6
 8008ff6:	47c0      	blx	r8
 8008ff8:	3001      	adds	r0, #1
 8008ffa:	d103      	bne.n	8009004 <_printf_common+0xbc>
 8008ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8009000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009004:	3501      	adds	r5, #1
 8009006:	e7c2      	b.n	8008f8e <_printf_common+0x46>
 8009008:	2030      	movs	r0, #48	; 0x30
 800900a:	18e1      	adds	r1, r4, r3
 800900c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009010:	1c5a      	adds	r2, r3, #1
 8009012:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009016:	4422      	add	r2, r4
 8009018:	3302      	adds	r3, #2
 800901a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800901e:	e7c4      	b.n	8008faa <_printf_common+0x62>
 8009020:	2301      	movs	r3, #1
 8009022:	4622      	mov	r2, r4
 8009024:	4639      	mov	r1, r7
 8009026:	4630      	mov	r0, r6
 8009028:	47c0      	blx	r8
 800902a:	3001      	adds	r0, #1
 800902c:	d0e6      	beq.n	8008ffc <_printf_common+0xb4>
 800902e:	f109 0901 	add.w	r9, r9, #1
 8009032:	e7d8      	b.n	8008fe6 <_printf_common+0x9e>

08009034 <_printf_i>:
 8009034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009038:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800903c:	460c      	mov	r4, r1
 800903e:	7e09      	ldrb	r1, [r1, #24]
 8009040:	b085      	sub	sp, #20
 8009042:	296e      	cmp	r1, #110	; 0x6e
 8009044:	4617      	mov	r7, r2
 8009046:	4606      	mov	r6, r0
 8009048:	4698      	mov	r8, r3
 800904a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800904c:	f000 80b3 	beq.w	80091b6 <_printf_i+0x182>
 8009050:	d822      	bhi.n	8009098 <_printf_i+0x64>
 8009052:	2963      	cmp	r1, #99	; 0x63
 8009054:	d036      	beq.n	80090c4 <_printf_i+0x90>
 8009056:	d80a      	bhi.n	800906e <_printf_i+0x3a>
 8009058:	2900      	cmp	r1, #0
 800905a:	f000 80b9 	beq.w	80091d0 <_printf_i+0x19c>
 800905e:	2958      	cmp	r1, #88	; 0x58
 8009060:	f000 8083 	beq.w	800916a <_printf_i+0x136>
 8009064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009068:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800906c:	e032      	b.n	80090d4 <_printf_i+0xa0>
 800906e:	2964      	cmp	r1, #100	; 0x64
 8009070:	d001      	beq.n	8009076 <_printf_i+0x42>
 8009072:	2969      	cmp	r1, #105	; 0x69
 8009074:	d1f6      	bne.n	8009064 <_printf_i+0x30>
 8009076:	6820      	ldr	r0, [r4, #0]
 8009078:	6813      	ldr	r3, [r2, #0]
 800907a:	0605      	lsls	r5, r0, #24
 800907c:	f103 0104 	add.w	r1, r3, #4
 8009080:	d52a      	bpl.n	80090d8 <_printf_i+0xa4>
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	6011      	str	r1, [r2, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	da03      	bge.n	8009092 <_printf_i+0x5e>
 800908a:	222d      	movs	r2, #45	; 0x2d
 800908c:	425b      	negs	r3, r3
 800908e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009092:	486f      	ldr	r0, [pc, #444]	; (8009250 <_printf_i+0x21c>)
 8009094:	220a      	movs	r2, #10
 8009096:	e039      	b.n	800910c <_printf_i+0xd8>
 8009098:	2973      	cmp	r1, #115	; 0x73
 800909a:	f000 809d 	beq.w	80091d8 <_printf_i+0x1a4>
 800909e:	d808      	bhi.n	80090b2 <_printf_i+0x7e>
 80090a0:	296f      	cmp	r1, #111	; 0x6f
 80090a2:	d020      	beq.n	80090e6 <_printf_i+0xb2>
 80090a4:	2970      	cmp	r1, #112	; 0x70
 80090a6:	d1dd      	bne.n	8009064 <_printf_i+0x30>
 80090a8:	6823      	ldr	r3, [r4, #0]
 80090aa:	f043 0320 	orr.w	r3, r3, #32
 80090ae:	6023      	str	r3, [r4, #0]
 80090b0:	e003      	b.n	80090ba <_printf_i+0x86>
 80090b2:	2975      	cmp	r1, #117	; 0x75
 80090b4:	d017      	beq.n	80090e6 <_printf_i+0xb2>
 80090b6:	2978      	cmp	r1, #120	; 0x78
 80090b8:	d1d4      	bne.n	8009064 <_printf_i+0x30>
 80090ba:	2378      	movs	r3, #120	; 0x78
 80090bc:	4865      	ldr	r0, [pc, #404]	; (8009254 <_printf_i+0x220>)
 80090be:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80090c2:	e055      	b.n	8009170 <_printf_i+0x13c>
 80090c4:	6813      	ldr	r3, [r2, #0]
 80090c6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090ca:	1d19      	adds	r1, r3, #4
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6011      	str	r1, [r2, #0]
 80090d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090d4:	2301      	movs	r3, #1
 80090d6:	e08c      	b.n	80091f2 <_printf_i+0x1be>
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80090de:	6011      	str	r1, [r2, #0]
 80090e0:	bf18      	it	ne
 80090e2:	b21b      	sxthne	r3, r3
 80090e4:	e7cf      	b.n	8009086 <_printf_i+0x52>
 80090e6:	6813      	ldr	r3, [r2, #0]
 80090e8:	6825      	ldr	r5, [r4, #0]
 80090ea:	1d18      	adds	r0, r3, #4
 80090ec:	6010      	str	r0, [r2, #0]
 80090ee:	0628      	lsls	r0, r5, #24
 80090f0:	d501      	bpl.n	80090f6 <_printf_i+0xc2>
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	e002      	b.n	80090fc <_printf_i+0xc8>
 80090f6:	0668      	lsls	r0, r5, #25
 80090f8:	d5fb      	bpl.n	80090f2 <_printf_i+0xbe>
 80090fa:	881b      	ldrh	r3, [r3, #0]
 80090fc:	296f      	cmp	r1, #111	; 0x6f
 80090fe:	bf14      	ite	ne
 8009100:	220a      	movne	r2, #10
 8009102:	2208      	moveq	r2, #8
 8009104:	4852      	ldr	r0, [pc, #328]	; (8009250 <_printf_i+0x21c>)
 8009106:	2100      	movs	r1, #0
 8009108:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800910c:	6865      	ldr	r5, [r4, #4]
 800910e:	2d00      	cmp	r5, #0
 8009110:	60a5      	str	r5, [r4, #8]
 8009112:	f2c0 8095 	blt.w	8009240 <_printf_i+0x20c>
 8009116:	6821      	ldr	r1, [r4, #0]
 8009118:	f021 0104 	bic.w	r1, r1, #4
 800911c:	6021      	str	r1, [r4, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d13d      	bne.n	800919e <_printf_i+0x16a>
 8009122:	2d00      	cmp	r5, #0
 8009124:	f040 808e 	bne.w	8009244 <_printf_i+0x210>
 8009128:	4665      	mov	r5, ip
 800912a:	2a08      	cmp	r2, #8
 800912c:	d10b      	bne.n	8009146 <_printf_i+0x112>
 800912e:	6823      	ldr	r3, [r4, #0]
 8009130:	07db      	lsls	r3, r3, #31
 8009132:	d508      	bpl.n	8009146 <_printf_i+0x112>
 8009134:	6923      	ldr	r3, [r4, #16]
 8009136:	6862      	ldr	r2, [r4, #4]
 8009138:	429a      	cmp	r2, r3
 800913a:	bfde      	ittt	le
 800913c:	2330      	movle	r3, #48	; 0x30
 800913e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009142:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009146:	ebac 0305 	sub.w	r3, ip, r5
 800914a:	6123      	str	r3, [r4, #16]
 800914c:	f8cd 8000 	str.w	r8, [sp]
 8009150:	463b      	mov	r3, r7
 8009152:	aa03      	add	r2, sp, #12
 8009154:	4621      	mov	r1, r4
 8009156:	4630      	mov	r0, r6
 8009158:	f7ff fef6 	bl	8008f48 <_printf_common>
 800915c:	3001      	adds	r0, #1
 800915e:	d14d      	bne.n	80091fc <_printf_i+0x1c8>
 8009160:	f04f 30ff 	mov.w	r0, #4294967295
 8009164:	b005      	add	sp, #20
 8009166:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800916a:	4839      	ldr	r0, [pc, #228]	; (8009250 <_printf_i+0x21c>)
 800916c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009170:	6813      	ldr	r3, [r2, #0]
 8009172:	6821      	ldr	r1, [r4, #0]
 8009174:	1d1d      	adds	r5, r3, #4
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6015      	str	r5, [r2, #0]
 800917a:	060a      	lsls	r2, r1, #24
 800917c:	d50b      	bpl.n	8009196 <_printf_i+0x162>
 800917e:	07ca      	lsls	r2, r1, #31
 8009180:	bf44      	itt	mi
 8009182:	f041 0120 	orrmi.w	r1, r1, #32
 8009186:	6021      	strmi	r1, [r4, #0]
 8009188:	b91b      	cbnz	r3, 8009192 <_printf_i+0x15e>
 800918a:	6822      	ldr	r2, [r4, #0]
 800918c:	f022 0220 	bic.w	r2, r2, #32
 8009190:	6022      	str	r2, [r4, #0]
 8009192:	2210      	movs	r2, #16
 8009194:	e7b7      	b.n	8009106 <_printf_i+0xd2>
 8009196:	064d      	lsls	r5, r1, #25
 8009198:	bf48      	it	mi
 800919a:	b29b      	uxthmi	r3, r3
 800919c:	e7ef      	b.n	800917e <_printf_i+0x14a>
 800919e:	4665      	mov	r5, ip
 80091a0:	fbb3 f1f2 	udiv	r1, r3, r2
 80091a4:	fb02 3311 	mls	r3, r2, r1, r3
 80091a8:	5cc3      	ldrb	r3, [r0, r3]
 80091aa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80091ae:	460b      	mov	r3, r1
 80091b0:	2900      	cmp	r1, #0
 80091b2:	d1f5      	bne.n	80091a0 <_printf_i+0x16c>
 80091b4:	e7b9      	b.n	800912a <_printf_i+0xf6>
 80091b6:	6813      	ldr	r3, [r2, #0]
 80091b8:	6825      	ldr	r5, [r4, #0]
 80091ba:	1d18      	adds	r0, r3, #4
 80091bc:	6961      	ldr	r1, [r4, #20]
 80091be:	6010      	str	r0, [r2, #0]
 80091c0:	0628      	lsls	r0, r5, #24
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	d501      	bpl.n	80091ca <_printf_i+0x196>
 80091c6:	6019      	str	r1, [r3, #0]
 80091c8:	e002      	b.n	80091d0 <_printf_i+0x19c>
 80091ca:	066a      	lsls	r2, r5, #25
 80091cc:	d5fb      	bpl.n	80091c6 <_printf_i+0x192>
 80091ce:	8019      	strh	r1, [r3, #0]
 80091d0:	2300      	movs	r3, #0
 80091d2:	4665      	mov	r5, ip
 80091d4:	6123      	str	r3, [r4, #16]
 80091d6:	e7b9      	b.n	800914c <_printf_i+0x118>
 80091d8:	6813      	ldr	r3, [r2, #0]
 80091da:	1d19      	adds	r1, r3, #4
 80091dc:	6011      	str	r1, [r2, #0]
 80091de:	681d      	ldr	r5, [r3, #0]
 80091e0:	6862      	ldr	r2, [r4, #4]
 80091e2:	2100      	movs	r1, #0
 80091e4:	4628      	mov	r0, r5
 80091e6:	f000 f837 	bl	8009258 <memchr>
 80091ea:	b108      	cbz	r0, 80091f0 <_printf_i+0x1bc>
 80091ec:	1b40      	subs	r0, r0, r5
 80091ee:	6060      	str	r0, [r4, #4]
 80091f0:	6863      	ldr	r3, [r4, #4]
 80091f2:	6123      	str	r3, [r4, #16]
 80091f4:	2300      	movs	r3, #0
 80091f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091fa:	e7a7      	b.n	800914c <_printf_i+0x118>
 80091fc:	6923      	ldr	r3, [r4, #16]
 80091fe:	462a      	mov	r2, r5
 8009200:	4639      	mov	r1, r7
 8009202:	4630      	mov	r0, r6
 8009204:	47c0      	blx	r8
 8009206:	3001      	adds	r0, #1
 8009208:	d0aa      	beq.n	8009160 <_printf_i+0x12c>
 800920a:	6823      	ldr	r3, [r4, #0]
 800920c:	079b      	lsls	r3, r3, #30
 800920e:	d413      	bmi.n	8009238 <_printf_i+0x204>
 8009210:	68e0      	ldr	r0, [r4, #12]
 8009212:	9b03      	ldr	r3, [sp, #12]
 8009214:	4298      	cmp	r0, r3
 8009216:	bfb8      	it	lt
 8009218:	4618      	movlt	r0, r3
 800921a:	e7a3      	b.n	8009164 <_printf_i+0x130>
 800921c:	2301      	movs	r3, #1
 800921e:	464a      	mov	r2, r9
 8009220:	4639      	mov	r1, r7
 8009222:	4630      	mov	r0, r6
 8009224:	47c0      	blx	r8
 8009226:	3001      	adds	r0, #1
 8009228:	d09a      	beq.n	8009160 <_printf_i+0x12c>
 800922a:	3501      	adds	r5, #1
 800922c:	68e3      	ldr	r3, [r4, #12]
 800922e:	9a03      	ldr	r2, [sp, #12]
 8009230:	1a9b      	subs	r3, r3, r2
 8009232:	42ab      	cmp	r3, r5
 8009234:	dcf2      	bgt.n	800921c <_printf_i+0x1e8>
 8009236:	e7eb      	b.n	8009210 <_printf_i+0x1dc>
 8009238:	2500      	movs	r5, #0
 800923a:	f104 0919 	add.w	r9, r4, #25
 800923e:	e7f5      	b.n	800922c <_printf_i+0x1f8>
 8009240:	2b00      	cmp	r3, #0
 8009242:	d1ac      	bne.n	800919e <_printf_i+0x16a>
 8009244:	7803      	ldrb	r3, [r0, #0]
 8009246:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800924a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800924e:	e76c      	b.n	800912a <_printf_i+0xf6>
 8009250:	0800a77d 	.word	0x0800a77d
 8009254:	0800a78e 	.word	0x0800a78e

08009258 <memchr>:
 8009258:	b510      	push	{r4, lr}
 800925a:	b2c9      	uxtb	r1, r1
 800925c:	4402      	add	r2, r0
 800925e:	4290      	cmp	r0, r2
 8009260:	4603      	mov	r3, r0
 8009262:	d101      	bne.n	8009268 <memchr+0x10>
 8009264:	2300      	movs	r3, #0
 8009266:	e003      	b.n	8009270 <memchr+0x18>
 8009268:	781c      	ldrb	r4, [r3, #0]
 800926a:	3001      	adds	r0, #1
 800926c:	428c      	cmp	r4, r1
 800926e:	d1f6      	bne.n	800925e <memchr+0x6>
 8009270:	4618      	mov	r0, r3
 8009272:	bd10      	pop	{r4, pc}

08009274 <memmove>:
 8009274:	4288      	cmp	r0, r1
 8009276:	b510      	push	{r4, lr}
 8009278:	eb01 0302 	add.w	r3, r1, r2
 800927c:	d807      	bhi.n	800928e <memmove+0x1a>
 800927e:	1e42      	subs	r2, r0, #1
 8009280:	4299      	cmp	r1, r3
 8009282:	d00a      	beq.n	800929a <memmove+0x26>
 8009284:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009288:	f802 4f01 	strb.w	r4, [r2, #1]!
 800928c:	e7f8      	b.n	8009280 <memmove+0xc>
 800928e:	4283      	cmp	r3, r0
 8009290:	d9f5      	bls.n	800927e <memmove+0xa>
 8009292:	1881      	adds	r1, r0, r2
 8009294:	1ad2      	subs	r2, r2, r3
 8009296:	42d3      	cmn	r3, r2
 8009298:	d100      	bne.n	800929c <memmove+0x28>
 800929a:	bd10      	pop	{r4, pc}
 800929c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80092a0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80092a4:	e7f7      	b.n	8009296 <memmove+0x22>
	...

080092a8 <_free_r>:
 80092a8:	b538      	push	{r3, r4, r5, lr}
 80092aa:	4605      	mov	r5, r0
 80092ac:	2900      	cmp	r1, #0
 80092ae:	d043      	beq.n	8009338 <_free_r+0x90>
 80092b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092b4:	1f0c      	subs	r4, r1, #4
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	bfb8      	it	lt
 80092ba:	18e4      	addlt	r4, r4, r3
 80092bc:	f000 f8d0 	bl	8009460 <__malloc_lock>
 80092c0:	4a1e      	ldr	r2, [pc, #120]	; (800933c <_free_r+0x94>)
 80092c2:	6813      	ldr	r3, [r2, #0]
 80092c4:	4610      	mov	r0, r2
 80092c6:	b933      	cbnz	r3, 80092d6 <_free_r+0x2e>
 80092c8:	6063      	str	r3, [r4, #4]
 80092ca:	6014      	str	r4, [r2, #0]
 80092cc:	4628      	mov	r0, r5
 80092ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80092d2:	f000 b8c6 	b.w	8009462 <__malloc_unlock>
 80092d6:	42a3      	cmp	r3, r4
 80092d8:	d90b      	bls.n	80092f2 <_free_r+0x4a>
 80092da:	6821      	ldr	r1, [r4, #0]
 80092dc:	1862      	adds	r2, r4, r1
 80092de:	4293      	cmp	r3, r2
 80092e0:	bf01      	itttt	eq
 80092e2:	681a      	ldreq	r2, [r3, #0]
 80092e4:	685b      	ldreq	r3, [r3, #4]
 80092e6:	1852      	addeq	r2, r2, r1
 80092e8:	6022      	streq	r2, [r4, #0]
 80092ea:	6063      	str	r3, [r4, #4]
 80092ec:	6004      	str	r4, [r0, #0]
 80092ee:	e7ed      	b.n	80092cc <_free_r+0x24>
 80092f0:	4613      	mov	r3, r2
 80092f2:	685a      	ldr	r2, [r3, #4]
 80092f4:	b10a      	cbz	r2, 80092fa <_free_r+0x52>
 80092f6:	42a2      	cmp	r2, r4
 80092f8:	d9fa      	bls.n	80092f0 <_free_r+0x48>
 80092fa:	6819      	ldr	r1, [r3, #0]
 80092fc:	1858      	adds	r0, r3, r1
 80092fe:	42a0      	cmp	r0, r4
 8009300:	d10b      	bne.n	800931a <_free_r+0x72>
 8009302:	6820      	ldr	r0, [r4, #0]
 8009304:	4401      	add	r1, r0
 8009306:	1858      	adds	r0, r3, r1
 8009308:	4282      	cmp	r2, r0
 800930a:	6019      	str	r1, [r3, #0]
 800930c:	d1de      	bne.n	80092cc <_free_r+0x24>
 800930e:	6810      	ldr	r0, [r2, #0]
 8009310:	6852      	ldr	r2, [r2, #4]
 8009312:	4401      	add	r1, r0
 8009314:	6019      	str	r1, [r3, #0]
 8009316:	605a      	str	r2, [r3, #4]
 8009318:	e7d8      	b.n	80092cc <_free_r+0x24>
 800931a:	d902      	bls.n	8009322 <_free_r+0x7a>
 800931c:	230c      	movs	r3, #12
 800931e:	602b      	str	r3, [r5, #0]
 8009320:	e7d4      	b.n	80092cc <_free_r+0x24>
 8009322:	6820      	ldr	r0, [r4, #0]
 8009324:	1821      	adds	r1, r4, r0
 8009326:	428a      	cmp	r2, r1
 8009328:	bf01      	itttt	eq
 800932a:	6811      	ldreq	r1, [r2, #0]
 800932c:	6852      	ldreq	r2, [r2, #4]
 800932e:	1809      	addeq	r1, r1, r0
 8009330:	6021      	streq	r1, [r4, #0]
 8009332:	6062      	str	r2, [r4, #4]
 8009334:	605c      	str	r4, [r3, #4]
 8009336:	e7c9      	b.n	80092cc <_free_r+0x24>
 8009338:	bd38      	pop	{r3, r4, r5, pc}
 800933a:	bf00      	nop
 800933c:	200006c0 	.word	0x200006c0

08009340 <_malloc_r>:
 8009340:	b570      	push	{r4, r5, r6, lr}
 8009342:	1ccd      	adds	r5, r1, #3
 8009344:	f025 0503 	bic.w	r5, r5, #3
 8009348:	3508      	adds	r5, #8
 800934a:	2d0c      	cmp	r5, #12
 800934c:	bf38      	it	cc
 800934e:	250c      	movcc	r5, #12
 8009350:	2d00      	cmp	r5, #0
 8009352:	4606      	mov	r6, r0
 8009354:	db01      	blt.n	800935a <_malloc_r+0x1a>
 8009356:	42a9      	cmp	r1, r5
 8009358:	d903      	bls.n	8009362 <_malloc_r+0x22>
 800935a:	230c      	movs	r3, #12
 800935c:	6033      	str	r3, [r6, #0]
 800935e:	2000      	movs	r0, #0
 8009360:	bd70      	pop	{r4, r5, r6, pc}
 8009362:	f000 f87d 	bl	8009460 <__malloc_lock>
 8009366:	4a21      	ldr	r2, [pc, #132]	; (80093ec <_malloc_r+0xac>)
 8009368:	6814      	ldr	r4, [r2, #0]
 800936a:	4621      	mov	r1, r4
 800936c:	b991      	cbnz	r1, 8009394 <_malloc_r+0x54>
 800936e:	4c20      	ldr	r4, [pc, #128]	; (80093f0 <_malloc_r+0xb0>)
 8009370:	6823      	ldr	r3, [r4, #0]
 8009372:	b91b      	cbnz	r3, 800937c <_malloc_r+0x3c>
 8009374:	4630      	mov	r0, r6
 8009376:	f000 f863 	bl	8009440 <_sbrk_r>
 800937a:	6020      	str	r0, [r4, #0]
 800937c:	4629      	mov	r1, r5
 800937e:	4630      	mov	r0, r6
 8009380:	f000 f85e 	bl	8009440 <_sbrk_r>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d124      	bne.n	80093d2 <_malloc_r+0x92>
 8009388:	230c      	movs	r3, #12
 800938a:	4630      	mov	r0, r6
 800938c:	6033      	str	r3, [r6, #0]
 800938e:	f000 f868 	bl	8009462 <__malloc_unlock>
 8009392:	e7e4      	b.n	800935e <_malloc_r+0x1e>
 8009394:	680b      	ldr	r3, [r1, #0]
 8009396:	1b5b      	subs	r3, r3, r5
 8009398:	d418      	bmi.n	80093cc <_malloc_r+0x8c>
 800939a:	2b0b      	cmp	r3, #11
 800939c:	d90f      	bls.n	80093be <_malloc_r+0x7e>
 800939e:	600b      	str	r3, [r1, #0]
 80093a0:	18cc      	adds	r4, r1, r3
 80093a2:	50cd      	str	r5, [r1, r3]
 80093a4:	4630      	mov	r0, r6
 80093a6:	f000 f85c 	bl	8009462 <__malloc_unlock>
 80093aa:	f104 000b 	add.w	r0, r4, #11
 80093ae:	1d23      	adds	r3, r4, #4
 80093b0:	f020 0007 	bic.w	r0, r0, #7
 80093b4:	1ac3      	subs	r3, r0, r3
 80093b6:	d0d3      	beq.n	8009360 <_malloc_r+0x20>
 80093b8:	425a      	negs	r2, r3
 80093ba:	50e2      	str	r2, [r4, r3]
 80093bc:	e7d0      	b.n	8009360 <_malloc_r+0x20>
 80093be:	684b      	ldr	r3, [r1, #4]
 80093c0:	428c      	cmp	r4, r1
 80093c2:	bf16      	itet	ne
 80093c4:	6063      	strne	r3, [r4, #4]
 80093c6:	6013      	streq	r3, [r2, #0]
 80093c8:	460c      	movne	r4, r1
 80093ca:	e7eb      	b.n	80093a4 <_malloc_r+0x64>
 80093cc:	460c      	mov	r4, r1
 80093ce:	6849      	ldr	r1, [r1, #4]
 80093d0:	e7cc      	b.n	800936c <_malloc_r+0x2c>
 80093d2:	1cc4      	adds	r4, r0, #3
 80093d4:	f024 0403 	bic.w	r4, r4, #3
 80093d8:	42a0      	cmp	r0, r4
 80093da:	d005      	beq.n	80093e8 <_malloc_r+0xa8>
 80093dc:	1a21      	subs	r1, r4, r0
 80093de:	4630      	mov	r0, r6
 80093e0:	f000 f82e 	bl	8009440 <_sbrk_r>
 80093e4:	3001      	adds	r0, #1
 80093e6:	d0cf      	beq.n	8009388 <_malloc_r+0x48>
 80093e8:	6025      	str	r5, [r4, #0]
 80093ea:	e7db      	b.n	80093a4 <_malloc_r+0x64>
 80093ec:	200006c0 	.word	0x200006c0
 80093f0:	200006c4 	.word	0x200006c4

080093f4 <_realloc_r>:
 80093f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093f6:	4607      	mov	r7, r0
 80093f8:	4614      	mov	r4, r2
 80093fa:	460e      	mov	r6, r1
 80093fc:	b921      	cbnz	r1, 8009408 <_realloc_r+0x14>
 80093fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009402:	4611      	mov	r1, r2
 8009404:	f7ff bf9c 	b.w	8009340 <_malloc_r>
 8009408:	b922      	cbnz	r2, 8009414 <_realloc_r+0x20>
 800940a:	f7ff ff4d 	bl	80092a8 <_free_r>
 800940e:	4625      	mov	r5, r4
 8009410:	4628      	mov	r0, r5
 8009412:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009414:	f000 f826 	bl	8009464 <_malloc_usable_size_r>
 8009418:	42a0      	cmp	r0, r4
 800941a:	d20f      	bcs.n	800943c <_realloc_r+0x48>
 800941c:	4621      	mov	r1, r4
 800941e:	4638      	mov	r0, r7
 8009420:	f7ff ff8e 	bl	8009340 <_malloc_r>
 8009424:	4605      	mov	r5, r0
 8009426:	2800      	cmp	r0, #0
 8009428:	d0f2      	beq.n	8009410 <_realloc_r+0x1c>
 800942a:	4631      	mov	r1, r6
 800942c:	4622      	mov	r2, r4
 800942e:	f7ff fc05 	bl	8008c3c <memcpy>
 8009432:	4631      	mov	r1, r6
 8009434:	4638      	mov	r0, r7
 8009436:	f7ff ff37 	bl	80092a8 <_free_r>
 800943a:	e7e9      	b.n	8009410 <_realloc_r+0x1c>
 800943c:	4635      	mov	r5, r6
 800943e:	e7e7      	b.n	8009410 <_realloc_r+0x1c>

08009440 <_sbrk_r>:
 8009440:	b538      	push	{r3, r4, r5, lr}
 8009442:	2300      	movs	r3, #0
 8009444:	4c05      	ldr	r4, [pc, #20]	; (800945c <_sbrk_r+0x1c>)
 8009446:	4605      	mov	r5, r0
 8009448:	4608      	mov	r0, r1
 800944a:	6023      	str	r3, [r4, #0]
 800944c:	f7fb f86e 	bl	800452c <_sbrk>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d102      	bne.n	800945a <_sbrk_r+0x1a>
 8009454:	6823      	ldr	r3, [r4, #0]
 8009456:	b103      	cbz	r3, 800945a <_sbrk_r+0x1a>
 8009458:	602b      	str	r3, [r5, #0]
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	200009a8 	.word	0x200009a8

08009460 <__malloc_lock>:
 8009460:	4770      	bx	lr

08009462 <__malloc_unlock>:
 8009462:	4770      	bx	lr

08009464 <_malloc_usable_size_r>:
 8009464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009468:	1f18      	subs	r0, r3, #4
 800946a:	2b00      	cmp	r3, #0
 800946c:	bfbc      	itt	lt
 800946e:	580b      	ldrlt	r3, [r1, r0]
 8009470:	18c0      	addlt	r0, r0, r3
 8009472:	4770      	bx	lr

08009474 <_init>:
 8009474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009476:	bf00      	nop
 8009478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800947a:	bc08      	pop	{r3}
 800947c:	469e      	mov	lr, r3
 800947e:	4770      	bx	lr

08009480 <_fini>:
 8009480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009482:	bf00      	nop
 8009484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009486:	bc08      	pop	{r3}
 8009488:	469e      	mov	lr, r3
 800948a:	4770      	bx	lr
