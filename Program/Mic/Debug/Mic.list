
Mic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076e4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  080077f4  080077f4  000177f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d98  08007d98  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007da0  08007da0  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007da0  08007da0  00017da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007da4  08007da4  00017da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08007da8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000045c  200000a0  08007e44  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200004fc  08007e44  000204fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014590  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002886  00000000  00000000  00034655  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013c0  00000000  00000000  00036ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012a8  00000000  00000000  000382a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001625e  00000000  00000000  00039548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dc07  00000000  00000000  0004f7a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ce7d  00000000  00000000  0005d3ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da22a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057ac  00000000  00000000  000da2a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	080077dc 	.word	0x080077dc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	080077dc 	.word	0x080077dc

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_ldivmod>:
 8000160:	b97b      	cbnz	r3, 8000182 <__aeabi_ldivmod+0x22>
 8000162:	b972      	cbnz	r2, 8000182 <__aeabi_ldivmod+0x22>
 8000164:	2900      	cmp	r1, #0
 8000166:	bfbe      	ittt	lt
 8000168:	2000      	movlt	r0, #0
 800016a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800016e:	e006      	blt.n	800017e <__aeabi_ldivmod+0x1e>
 8000170:	bf08      	it	eq
 8000172:	2800      	cmpeq	r0, #0
 8000174:	bf1c      	itt	ne
 8000176:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800017a:	f04f 30ff 	movne.w	r0, #4294967295
 800017e:	f000 b9a7 	b.w	80004d0 <__aeabi_idiv0>
 8000182:	f1ad 0c08 	sub.w	ip, sp, #8
 8000186:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800018a:	2900      	cmp	r1, #0
 800018c:	db09      	blt.n	80001a2 <__aeabi_ldivmod+0x42>
 800018e:	2b00      	cmp	r3, #0
 8000190:	db1a      	blt.n	80001c8 <__aeabi_ldivmod+0x68>
 8000192:	f000 f835 	bl	8000200 <__udivmoddi4>
 8000196:	f8dd e004 	ldr.w	lr, [sp, #4]
 800019a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800019e:	b004      	add	sp, #16
 80001a0:	4770      	bx	lr
 80001a2:	4240      	negs	r0, r0
 80001a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001a8:	2b00      	cmp	r3, #0
 80001aa:	db1b      	blt.n	80001e4 <__aeabi_ldivmod+0x84>
 80001ac:	f000 f828 	bl	8000200 <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4240      	negs	r0, r0
 80001bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c0:	4252      	negs	r2, r2
 80001c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001c6:	4770      	bx	lr
 80001c8:	4252      	negs	r2, r2
 80001ca:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ce:	f000 f817 	bl	8000200 <__udivmoddi4>
 80001d2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001da:	b004      	add	sp, #16
 80001dc:	4240      	negs	r0, r0
 80001de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001e2:	4770      	bx	lr
 80001e4:	4252      	negs	r2, r2
 80001e6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ea:	f000 f809 	bl	8000200 <__udivmoddi4>
 80001ee:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f6:	b004      	add	sp, #16
 80001f8:	4252      	negs	r2, r2
 80001fa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	4604      	mov	r4, r0
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0c03 	orr.w	ip, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	fbbc f7fe 	udiv	r7, ip, lr
 8000236:	fa1f f885 	uxth.w	r8, r5
 800023a:	fb0e c317 	mls	r3, lr, r7, ip
 800023e:	fb07 f908 	mul.w	r9, r7, r8
 8000242:	0c21      	lsrs	r1, r4, #16
 8000244:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000248:	4599      	cmp	r9, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 31ff 	add.w	r1, r7, #4294967295
 8000252:	f080 811c 	bcs.w	800048e <__udivmoddi4+0x28e>
 8000256:	4599      	cmp	r9, r3
 8000258:	f240 8119 	bls.w	800048e <__udivmoddi4+0x28e>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	eba3 0309 	sub.w	r3, r3, r9
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	fb00 f108 	mul.w	r1, r0, r8
 8000270:	b2a4      	uxth	r4, r4
 8000272:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000276:	42a1      	cmp	r1, r4
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	192c      	adds	r4, r5, r4
 800027c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000280:	f080 8107 	bcs.w	8000492 <__udivmoddi4+0x292>
 8000284:	42a1      	cmp	r1, r4
 8000286:	f240 8104 	bls.w	8000492 <__udivmoddi4+0x292>
 800028a:	3802      	subs	r0, #2
 800028c:	442c      	add	r4, r5
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	2700      	movs	r7, #0
 8000294:	1a64      	subs	r4, r4, r1
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	2300      	movs	r3, #0
 800029a:	40d4      	lsrs	r4, r2
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80ec 	beq.w	8000488 <__udivmoddi4+0x288>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d148      	bne.n	8000358 <__udivmoddi4+0x158>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fb 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	469c      	mov	ip, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4c00 	strd	r4, ip, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	2701      	movs	r7, #1
 80002f4:	1b49      	subs	r1, r1, r5
 80002f6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80002fa:	fa1f f985 	uxth.w	r9, r5
 80002fe:	fbb1 fef8 	udiv	lr, r1, r8
 8000302:	fb08 111e 	mls	r1, r8, lr, r1
 8000306:	fb09 f00e 	mul.w	r0, r9, lr
 800030a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800030e:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000312:	4298      	cmp	r0, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x126>
 8000316:	18eb      	adds	r3, r5, r3
 8000318:	f10e 31ff 	add.w	r1, lr, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x124>
 800031e:	4298      	cmp	r0, r3
 8000320:	f200 80cd 	bhi.w	80004be <__udivmoddi4+0x2be>
 8000324:	468e      	mov	lr, r1
 8000326:	1a1b      	subs	r3, r3, r0
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	fb09 f900 	mul.w	r9, r9, r0
 8000334:	b2a4      	uxth	r4, r4
 8000336:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800033a:	45a1      	cmp	r9, r4
 800033c:	d907      	bls.n	800034e <__udivmoddi4+0x14e>
 800033e:	192c      	adds	r4, r5, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x14c>
 8000346:	45a1      	cmp	r9, r4
 8000348:	f200 80b6 	bhi.w	80004b8 <__udivmoddi4+0x2b8>
 800034c:	4618      	mov	r0, r3
 800034e:	eba4 0409 	sub.w	r4, r4, r9
 8000352:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000356:	e79e      	b.n	8000296 <__udivmoddi4+0x96>
 8000358:	f1c7 0520 	rsb	r5, r7, #32
 800035c:	40bb      	lsls	r3, r7
 800035e:	fa22 fc05 	lsr.w	ip, r2, r5
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa21 f405 	lsr.w	r4, r1, r5
 800036a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800036e:	fbb4 f9fe 	udiv	r9, r4, lr
 8000372:	fa1f f88c 	uxth.w	r8, ip
 8000376:	fb0e 4419 	mls	r4, lr, r9, r4
 800037a:	fa20 f305 	lsr.w	r3, r0, r5
 800037e:	40b9      	lsls	r1, r7
 8000380:	fb09 fa08 	mul.w	sl, r9, r8
 8000384:	4319      	orrs	r1, r3
 8000386:	0c0b      	lsrs	r3, r1, #16
 8000388:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800038c:	45a2      	cmp	sl, r4
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f307 	lsl.w	r3, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2b4>
 80003a4:	45a2      	cmp	sl, r4
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2b4>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4464      	add	r4, ip
 80003b0:	eba4 040a 	sub.w	r4, r4, sl
 80003b4:	fbb4 f0fe 	udiv	r0, r4, lr
 80003b8:	fb0e 4410 	mls	r4, lr, r0, r4
 80003bc:	fb00 fa08 	mul.w	sl, r0, r8
 80003c0:	b289      	uxth	r1, r1
 80003c2:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 80003c6:	45a2      	cmp	sl, r4
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x1dc>
 80003ca:	eb1c 0404 	adds.w	r4, ip, r4
 80003ce:	f100 31ff 	add.w	r1, r0, #4294967295
 80003d2:	d26b      	bcs.n	80004ac <__udivmoddi4+0x2ac>
 80003d4:	45a2      	cmp	sl, r4
 80003d6:	d969      	bls.n	80004ac <__udivmoddi4+0x2ac>
 80003d8:	3802      	subs	r0, #2
 80003da:	4464      	add	r4, ip
 80003dc:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e0:	fba0 8902 	umull	r8, r9, r0, r2
 80003e4:	eba4 040a 	sub.w	r4, r4, sl
 80003e8:	454c      	cmp	r4, r9
 80003ea:	4641      	mov	r1, r8
 80003ec:	46ce      	mov	lr, r9
 80003ee:	d354      	bcc.n	800049a <__udivmoddi4+0x29a>
 80003f0:	d051      	beq.n	8000496 <__udivmoddi4+0x296>
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d069      	beq.n	80004ca <__udivmoddi4+0x2ca>
 80003f6:	1a5a      	subs	r2, r3, r1
 80003f8:	eb64 040e 	sbc.w	r4, r4, lr
 80003fc:	fa04 f505 	lsl.w	r5, r4, r5
 8000400:	fa22 f307 	lsr.w	r3, r2, r7
 8000404:	40fc      	lsrs	r4, r7
 8000406:	431d      	orrs	r5, r3
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	4095      	lsls	r5, r2
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	fa21 f003 	lsr.w	r0, r1, r3
 800041a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800041e:	fbb0 f7f8 	udiv	r7, r0, r8
 8000422:	fa1f f985 	uxth.w	r9, r5
 8000426:	fb08 0017 	mls	r0, r8, r7, r0
 800042a:	fa24 f303 	lsr.w	r3, r4, r3
 800042e:	4091      	lsls	r1, r2
 8000430:	fb07 fc09 	mul.w	ip, r7, r9
 8000434:	430b      	orrs	r3, r1
 8000436:	0c19      	lsrs	r1, r3, #16
 8000438:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800043c:	458c      	cmp	ip, r1
 800043e:	fa04 f402 	lsl.w	r4, r4, r2
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x254>
 8000444:	1869      	adds	r1, r5, r1
 8000446:	f107 30ff 	add.w	r0, r7, #4294967295
 800044a:	d231      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 800044c:	458c      	cmp	ip, r1
 800044e:	d92f      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000450:	3f02      	subs	r7, #2
 8000452:	4429      	add	r1, r5
 8000454:	eba1 010c 	sub.w	r1, r1, ip
 8000458:	fbb1 f0f8 	udiv	r0, r1, r8
 800045c:	fb08 1c10 	mls	ip, r8, r0, r1
 8000460:	fb00 fe09 	mul.w	lr, r0, r9
 8000464:	b299      	uxth	r1, r3
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	458e      	cmp	lr, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 33ff 	add.w	r3, r0, #4294967295
 8000474:	d218      	bcs.n	80004a8 <__udivmoddi4+0x2a8>
 8000476:	458e      	cmp	lr, r1
 8000478:	d916      	bls.n	80004a8 <__udivmoddi4+0x2a8>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	eba1 010e 	sub.w	r1, r1, lr
 8000482:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000486:	e73a      	b.n	80002fe <__udivmoddi4+0xfe>
 8000488:	4637      	mov	r7, r6
 800048a:	4630      	mov	r0, r6
 800048c:	e708      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048e:	460f      	mov	r7, r1
 8000490:	e6e6      	b.n	8000260 <__udivmoddi4+0x60>
 8000492:	4618      	mov	r0, r3
 8000494:	e6fb      	b.n	800028e <__udivmoddi4+0x8e>
 8000496:	4543      	cmp	r3, r8
 8000498:	d2ab      	bcs.n	80003f2 <__udivmoddi4+0x1f2>
 800049a:	ebb8 0102 	subs.w	r1, r8, r2
 800049e:	eb69 020c 	sbc.w	r2, r9, ip
 80004a2:	3801      	subs	r0, #1
 80004a4:	4696      	mov	lr, r2
 80004a6:	e7a4      	b.n	80003f2 <__udivmoddi4+0x1f2>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e7e8      	b.n	800047e <__udivmoddi4+0x27e>
 80004ac:	4608      	mov	r0, r1
 80004ae:	e795      	b.n	80003dc <__udivmoddi4+0x1dc>
 80004b0:	4607      	mov	r7, r0
 80004b2:	e7cf      	b.n	8000454 <__udivmoddi4+0x254>
 80004b4:	4681      	mov	r9, r0
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b8:	3802      	subs	r0, #2
 80004ba:	442c      	add	r4, r5
 80004bc:	e747      	b.n	800034e <__udivmoddi4+0x14e>
 80004be:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c2:	442b      	add	r3, r5
 80004c4:	e72f      	b.n	8000326 <__udivmoddi4+0x126>
 80004c6:	4638      	mov	r0, r7
 80004c8:	e707      	b.n	80002da <__udivmoddi4+0xda>
 80004ca:	4637      	mov	r7, r6
 80004cc:	e6e8      	b.n	80002a0 <__udivmoddi4+0xa0>
 80004ce:	bf00      	nop

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <Init>:
 *      Author: atmat
 */

#include "AccelGyro.h"

void Init(I2C_HandleTypeDef *I2Chnd, TIM_HandleTypeDef *htim) {
 80004d4:	b590      	push	{r4, r7, lr}
 80004d6:	b085      	sub	sp, #20
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	6039      	str	r1, [r7, #0]
	memcpy(&Timer, htim, sizeof(*htim));
 80004de:	2240      	movs	r2, #64	; 0x40
 80004e0:	6839      	ldr	r1, [r7, #0]
 80004e2:	482d      	ldr	r0, [pc, #180]	; (8000598 <Init+0xc4>)
 80004e4:	f006 fd5e 	bl	8006fa4 <memcpy>
	MPU6050_Init(I2Chnd);
 80004e8:	6878      	ldr	r0, [r7, #4]
 80004ea:	f001 fc65 	bl	8001db8 <MPU6050_Init>
	MpuConfig.Accel_Full_Scale = AFS_SEL_2g;
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <Init+0xc8>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	709a      	strb	r2, [r3, #2]
	MpuConfig.ClockSource = Internal_8MHz;
 80004f4:	4b29      	ldr	r3, [pc, #164]	; (800059c <Init+0xc8>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	701a      	strb	r2, [r3, #0]
	MpuConfig.CONFIG_DLPF = DLPF_260A_256G_Hz;
 80004fa:	4b28      	ldr	r3, [pc, #160]	; (800059c <Init+0xc8>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	70da      	strb	r2, [r3, #3]
	MpuConfig.Gyro_Full_Scale = FS_SEL_500;
 8000500:	4b26      	ldr	r3, [pc, #152]	; (800059c <Init+0xc8>)
 8000502:	2201      	movs	r2, #1
 8000504:	705a      	strb	r2, [r3, #1]
	MpuConfig.Sleep_Mode_Bit = 0;
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <Init+0xc8>)
 8000508:	2200      	movs	r2, #0
 800050a:	711a      	strb	r2, [r3, #4]
	MPU6050_Config(&MpuConfig);
 800050c:	4823      	ldr	r0, [pc, #140]	; (800059c <Init+0xc8>)
 800050e:	f001 fca9 	bl	8001e64 <MPU6050_Config>

	for (int a = 0; a < 6; a++){
 8000512:	2300      	movs	r3, #0
 8000514:	60fb      	str	r3, [r7, #12]
 8000516:	e034      	b.n	8000582 <Init+0xae>
		LastAcceleration[a] = Callibration[a] = Velocity[a] = LastVelocity[a] = Distance[a] = 0;
 8000518:	4a21      	ldr	r2, [pc, #132]	; (80005a0 <Init+0xcc>)
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	441a      	add	r2, r3
 8000520:	f04f 0300 	mov.w	r3, #0
 8000524:	f04f 0400 	mov.w	r4, #0
 8000528:	e9c2 3400 	strd	r3, r4, [r2]
 800052c:	4a1c      	ldr	r2, [pc, #112]	; (80005a0 <Init+0xcc>)
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	00db      	lsls	r3, r3, #3
 8000532:	4413      	add	r3, r2
 8000534:	cb18      	ldmia	r3, {r3, r4}
 8000536:	491b      	ldr	r1, [pc, #108]	; (80005a4 <Init+0xd0>)
 8000538:	68fa      	ldr	r2, [r7, #12]
 800053a:	00d2      	lsls	r2, r2, #3
 800053c:	440a      	add	r2, r1
 800053e:	e9c2 3400 	strd	r3, r4, [r2]
 8000542:	4a18      	ldr	r2, [pc, #96]	; (80005a4 <Init+0xd0>)
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	00db      	lsls	r3, r3, #3
 8000548:	4413      	add	r3, r2
 800054a:	cb18      	ldmia	r3, {r3, r4}
 800054c:	4916      	ldr	r1, [pc, #88]	; (80005a8 <Init+0xd4>)
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	00d2      	lsls	r2, r2, #3
 8000552:	440a      	add	r2, r1
 8000554:	e9c2 3400 	strd	r3, r4, [r2]
 8000558:	4a13      	ldr	r2, [pc, #76]	; (80005a8 <Init+0xd4>)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	00db      	lsls	r3, r3, #3
 800055e:	4413      	add	r3, r2
 8000560:	cb18      	ldmia	r3, {r3, r4}
 8000562:	b219      	sxth	r1, r3
 8000564:	4a11      	ldr	r2, [pc, #68]	; (80005ac <Init+0xd8>)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800056c:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <Init+0xd8>)
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000574:	4a0e      	ldr	r2, [pc, #56]	; (80005b0 <Init+0xdc>)
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int a = 0; a < 6; a++){
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	3301      	adds	r3, #1
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	2b05      	cmp	r3, #5
 8000586:	ddc7      	ble.n	8000518 <Init+0x44>
	}
	HAL_TIM_Base_Start_IT(&Timer);
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <Init+0xc4>)
 800058a:	f005 fcb2 	bl	8005ef2 <HAL_TIM_Base_Start_IT>
}
 800058e:	bf00      	nop
 8000590:	3714      	adds	r7, #20
 8000592:	46bd      	mov	sp, r7
 8000594:	bd90      	pop	{r4, r7, pc}
 8000596:	bf00      	nop
 8000598:	200000bc 	.word	0x200000bc
 800059c:	200002ec 	.word	0x200002ec
 80005a0:	20000218 	.word	0x20000218
 80005a4:	20000260 	.word	0x20000260
 80005a8:	200002a8 	.word	0x200002a8
 80005ac:	200002d8 	.word	0x200002d8
 80005b0:	20000248 	.word	0x20000248

080005b4 <Update>:

void Update(){
 80005b4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80005b8:	b082      	sub	sp, #8
 80005ba:	af00      	add	r7, sp, #0
	// Pobranie danych
	MPU6050_Get_Accel_RawData(&AccelData);	// Najpier trzeba akcelerometr
 80005bc:	4867      	ldr	r0, [pc, #412]	; (800075c <Update+0x1a8>)
 80005be:	f001 fd07 	bl	8001fd0 <MPU6050_Get_Accel_RawData>
	MPU6050_Get_Gyro_RawData(&GyroData);		// Potem zyroskop
 80005c2:	4867      	ldr	r0, [pc, #412]	; (8000760 <Update+0x1ac>)
 80005c4:	f001 fd6a 	bl	800209c <MPU6050_Get_Gyro_RawData>
	MiliSec  = Timer.Instance->CNT;
 80005c8:	4b66      	ldr	r3, [pc, #408]	; (8000764 <Update+0x1b0>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ce:	461a      	mov	r2, r3
 80005d0:	4b65      	ldr	r3, [pc, #404]	; (8000768 <Update+0x1b4>)
 80005d2:	601a      	str	r2, [r3, #0]
	Timer.Instance->CNT = 0;
 80005d4:	4b63      	ldr	r3, [pc, #396]	; (8000764 <Update+0x1b0>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2200      	movs	r2, #0
 80005da:	625a      	str	r2, [r3, #36]	; 0x24
	// Raw data
	RawData[0] = AccelData.x;
 80005dc:	4b5f      	ldr	r3, [pc, #380]	; (800075c <Update+0x1a8>)
 80005de:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005e2:	4b62      	ldr	r3, [pc, #392]	; (800076c <Update+0x1b8>)
 80005e4:	801a      	strh	r2, [r3, #0]
	RawData[1] = AccelData.y;
 80005e6:	4b5d      	ldr	r3, [pc, #372]	; (800075c <Update+0x1a8>)
 80005e8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80005ec:	4b5f      	ldr	r3, [pc, #380]	; (800076c <Update+0x1b8>)
 80005ee:	805a      	strh	r2, [r3, #2]
	RawData[2] = AccelData.z;
 80005f0:	4b5a      	ldr	r3, [pc, #360]	; (800075c <Update+0x1a8>)
 80005f2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80005f6:	4b5d      	ldr	r3, [pc, #372]	; (800076c <Update+0x1b8>)
 80005f8:	809a      	strh	r2, [r3, #4]
	RawData[3] = GyroData.x;
 80005fa:	4b59      	ldr	r3, [pc, #356]	; (8000760 <Update+0x1ac>)
 80005fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000600:	4b5a      	ldr	r3, [pc, #360]	; (800076c <Update+0x1b8>)
 8000602:	80da      	strh	r2, [r3, #6]
	RawData[4] = GyroData.y;
 8000604:	4b56      	ldr	r3, [pc, #344]	; (8000760 <Update+0x1ac>)
 8000606:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800060a:	4b58      	ldr	r3, [pc, #352]	; (800076c <Update+0x1b8>)
 800060c:	811a      	strh	r2, [r3, #8]
	RawData[5] = GyroData.z;
 800060e:	4b54      	ldr	r3, [pc, #336]	; (8000760 <Update+0x1ac>)
 8000610:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000614:	4b55      	ldr	r3, [pc, #340]	; (800076c <Update+0x1b8>)
 8000616:	815a      	strh	r2, [r3, #10]
	for (int a = 0; a < 6; a++){
 8000618:	2300      	movs	r3, #0
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	e094      	b.n	8000748 <Update+0x194>
		// Acceleration
		Acceleration[a] = RawData[a] - Callibration[a];
 800061e:	4a53      	ldr	r2, [pc, #332]	; (800076c <Update+0x1b8>)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000626:	b29a      	uxth	r2, r3
 8000628:	4951      	ldr	r1, [pc, #324]	; (8000770 <Update+0x1bc>)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000630:	b29b      	uxth	r3, r3
 8000632:	1ad3      	subs	r3, r2, r3
 8000634:	b29b      	uxth	r3, r3
 8000636:	b219      	sxth	r1, r3
 8000638:	4a4e      	ldr	r2, [pc, #312]	; (8000774 <Update+0x1c0>)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		// Velocity
		Velocity[a] += (Acceleration[a] + (Acceleration[a] - LastAcceleration[a]) / 2) * MiliSec;
 8000640:	4a4d      	ldr	r2, [pc, #308]	; (8000778 <Update+0x1c4>)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	00db      	lsls	r3, r3, #3
 8000646:	4413      	add	r3, r2
 8000648:	e9d3 1200 	ldrd	r1, r2, [r3]
 800064c:	4849      	ldr	r0, [pc, #292]	; (8000774 <Update+0x1c0>)
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8000654:	461c      	mov	r4, r3
 8000656:	4847      	ldr	r0, [pc, #284]	; (8000774 <Update+0x1c0>)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 800065e:	461d      	mov	r5, r3
 8000660:	4846      	ldr	r0, [pc, #280]	; (800077c <Update+0x1c8>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	f930 3013 	ldrsh.w	r3, [r0, r3, lsl #1]
 8000668:	1aeb      	subs	r3, r5, r3
 800066a:	0fd8      	lsrs	r0, r3, #31
 800066c:	4403      	add	r3, r0
 800066e:	105b      	asrs	r3, r3, #1
 8000670:	4423      	add	r3, r4
 8000672:	483d      	ldr	r0, [pc, #244]	; (8000768 <Update+0x1b4>)
 8000674:	6800      	ldr	r0, [r0, #0]
 8000676:	fb00 f303 	mul.w	r3, r0, r3
 800067a:	461d      	mov	r5, r3
 800067c:	ea4f 76e5 	mov.w	r6, r5, asr #31
 8000680:	186b      	adds	r3, r5, r1
 8000682:	eb46 0402 	adc.w	r4, r6, r2
 8000686:	493c      	ldr	r1, [pc, #240]	; (8000778 <Update+0x1c4>)
 8000688:	687a      	ldr	r2, [r7, #4]
 800068a:	00d2      	lsls	r2, r2, #3
 800068c:	440a      	add	r2, r1
 800068e:	e9c2 3400 	strd	r3, r4, [r2]
		// Distance
		Distance[a] += (Velocity[a] + (Velocity[a] - LastVelocity[a]) / 2) * MiliSec;
 8000692:	4a3b      	ldr	r2, [pc, #236]	; (8000780 <Update+0x1cc>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	4413      	add	r3, r2
 800069a:	e9d3 5600 	ldrd	r5, r6, [r3]
 800069e:	4a36      	ldr	r2, [pc, #216]	; (8000778 <Update+0x1c4>)
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	4413      	add	r3, r2
 80006a6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80006aa:	4833      	ldr	r0, [pc, #204]	; (8000778 <Update+0x1c4>)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	4403      	add	r3, r0
 80006b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80006b6:	4833      	ldr	r0, [pc, #204]	; (8000784 <Update+0x1d0>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	00db      	lsls	r3, r3, #3
 80006bc:	4403      	add	r3, r0
 80006be:	cb18      	ldmia	r3, {r3, r4}
 80006c0:	ebb8 0803 	subs.w	r8, r8, r3
 80006c4:	eb69 0904 	sbc.w	r9, r9, r4
 80006c8:	46c3      	mov	fp, r8
 80006ca:	46cc      	mov	ip, r9
 80006cc:	ea4f 70dc 	mov.w	r0, ip, lsr #31
 80006d0:	4680      	mov	r8, r0
 80006d2:	f04f 0900 	mov.w	r9, #0
 80006d6:	eb1b 0308 	adds.w	r3, fp, r8
 80006da:	eb4c 0409 	adc.w	r4, ip, r9
 80006de:	1064      	asrs	r4, r4, #1
 80006e0:	ea4f 0333 	mov.w	r3, r3, rrx
 80006e4:	eb11 0803 	adds.w	r8, r1, r3
 80006e8:	eb42 0904 	adc.w	r9, r2, r4
 80006ec:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <Update+0x1b4>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	ea4f 74e3 	mov.w	r4, r3, asr #31
 80006f4:	fb03 fc09 	mul.w	ip, r3, r9
 80006f8:	fb08 f004 	mul.w	r0, r8, r4
 80006fc:	4460      	add	r0, ip
 80006fe:	fba8 8903 	umull	r8, r9, r8, r3
 8000702:	eb00 0209 	add.w	r2, r0, r9
 8000706:	4691      	mov	r9, r2
 8000708:	eb18 0305 	adds.w	r3, r8, r5
 800070c:	eb49 0406 	adc.w	r4, r9, r6
 8000710:	491b      	ldr	r1, [pc, #108]	; (8000780 <Update+0x1cc>)
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	00d2      	lsls	r2, r2, #3
 8000716:	440a      	add	r2, r1
 8000718:	e9c2 3400 	strd	r3, r4, [r2]
		// Zapamiętanie ostatniej probki
		LastAcceleration[a] = Acceleration[a];
 800071c:	4a15      	ldr	r2, [pc, #84]	; (8000774 <Update+0x1c0>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 8000724:	4a15      	ldr	r2, [pc, #84]	; (800077c <Update+0x1c8>)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		LastVelocity[a] = Velocity[a];
 800072c:	4a12      	ldr	r2, [pc, #72]	; (8000778 <Update+0x1c4>)
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	4413      	add	r3, r2
 8000734:	cb18      	ldmia	r3, {r3, r4}
 8000736:	4913      	ldr	r1, [pc, #76]	; (8000784 <Update+0x1d0>)
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	00d2      	lsls	r2, r2, #3
 800073c:	440a      	add	r2, r1
 800073e:	e9c2 3400 	strd	r3, r4, [r2]
	for (int a = 0; a < 6; a++){
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	3301      	adds	r3, #1
 8000746:	607b      	str	r3, [r7, #4]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b05      	cmp	r3, #5
 800074c:	f77f af67 	ble.w	800061e <Update+0x6a>
	}
}
 8000750:	bf00      	nop
 8000752:	3708      	adds	r7, #8
 8000754:	46bd      	mov	sp, r7
 8000756:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
 800075a:	bf00      	nop
 800075c:	20000254 	.word	0x20000254
 8000760:	200002e4 	.word	0x200002e4
 8000764:	200000bc 	.word	0x200000bc
 8000768:	200002f4 	.word	0x200002f4
 800076c:	2000029c 	.word	0x2000029c
 8000770:	200002d8 	.word	0x200002d8
 8000774:	20000290 	.word	0x20000290
 8000778:	200002a8 	.word	0x200002a8
 800077c:	20000248 	.word	0x20000248
 8000780:	20000218 	.word	0x20000218
 8000784:	20000260 	.word	0x20000260

08000788 <Callibrate>:

void Callibrate(int count){
 8000788:	b590      	push	{r4, r7, lr}
 800078a:	b08d      	sub	sp, #52	; 0x34
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
	long int TmpCall[6];
    int Count = count;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int a = 0; a < 6; a++){
 8000794:	2300      	movs	r3, #0
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
 8000798:	e038      	b.n	800080c <Callibrate+0x84>
        TmpCall[a] = LastAcceleration[a] = Velocity[a] = LastVelocity[a] = Distance[a] = 0;
 800079a:	4a44      	ldr	r2, [pc, #272]	; (80008ac <Callibrate+0x124>)
 800079c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	441a      	add	r2, r3
 80007a2:	f04f 0300 	mov.w	r3, #0
 80007a6:	f04f 0400 	mov.w	r4, #0
 80007aa:	e9c2 3400 	strd	r3, r4, [r2]
 80007ae:	4a3f      	ldr	r2, [pc, #252]	; (80008ac <Callibrate+0x124>)
 80007b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007b2:	00db      	lsls	r3, r3, #3
 80007b4:	4413      	add	r3, r2
 80007b6:	cb18      	ldmia	r3, {r3, r4}
 80007b8:	493d      	ldr	r1, [pc, #244]	; (80008b0 <Callibrate+0x128>)
 80007ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007bc:	00d2      	lsls	r2, r2, #3
 80007be:	440a      	add	r2, r1
 80007c0:	e9c2 3400 	strd	r3, r4, [r2]
 80007c4:	4a3a      	ldr	r2, [pc, #232]	; (80008b0 <Callibrate+0x128>)
 80007c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c8:	00db      	lsls	r3, r3, #3
 80007ca:	4413      	add	r3, r2
 80007cc:	cb18      	ldmia	r3, {r3, r4}
 80007ce:	4939      	ldr	r1, [pc, #228]	; (80008b4 <Callibrate+0x12c>)
 80007d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80007d2:	00d2      	lsls	r2, r2, #3
 80007d4:	440a      	add	r2, r1
 80007d6:	e9c2 3400 	strd	r3, r4, [r2]
 80007da:	4a36      	ldr	r2, [pc, #216]	; (80008b4 <Callibrate+0x12c>)
 80007dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	4413      	add	r3, r2
 80007e2:	cb18      	ldmia	r3, {r3, r4}
 80007e4:	b219      	sxth	r1, r3
 80007e6:	4a34      	ldr	r2, [pc, #208]	; (80008b8 <Callibrate+0x130>)
 80007e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80007ee:	4a32      	ldr	r2, [pc, #200]	; (80008b8 <Callibrate+0x130>)
 80007f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007f2:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80007f6:	461a      	mov	r2, r3
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000800:	440b      	add	r3, r1
 8000802:	f843 2c24 	str.w	r2, [r3, #-36]
    for (int a = 0; a < 6; a++){
 8000806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000808:	3301      	adds	r3, #1
 800080a:	62bb      	str	r3, [r7, #40]	; 0x28
 800080c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800080e:	2b05      	cmp	r3, #5
 8000810:	ddc3      	ble.n	800079a <Callibrate+0x12>
    }
    while (Count > 0) {
 8000812:	e02c      	b.n	800086e <Callibrate+0xe6>
    	// Pobranie danych
    	MPU6050_Get_Accel_RawData(&AccelData);	// Najpier trzeba akcelerometr
 8000814:	4829      	ldr	r0, [pc, #164]	; (80008bc <Callibrate+0x134>)
 8000816:	f001 fbdb 	bl	8001fd0 <MPU6050_Get_Accel_RawData>
    	MPU6050_Get_Gyro_RawData(&GyroData);		// Potem zyroskop
 800081a:	4829      	ldr	r0, [pc, #164]	; (80008c0 <Callibrate+0x138>)
 800081c:	f001 fc3e 	bl	800209c <MPU6050_Get_Gyro_RawData>
    	// Raw data
    	TmpCall[0] += AccelData.x;
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	4a26      	ldr	r2, [pc, #152]	; (80008bc <Callibrate+0x134>)
 8000824:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000828:	4413      	add	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
    	TmpCall[1] += AccelData.y;
 800082c:	693b      	ldr	r3, [r7, #16]
 800082e:	4a23      	ldr	r2, [pc, #140]	; (80008bc <Callibrate+0x134>)
 8000830:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000834:	4413      	add	r3, r2
 8000836:	613b      	str	r3, [r7, #16]
    	TmpCall[2] += AccelData.z;
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	4a20      	ldr	r2, [pc, #128]	; (80008bc <Callibrate+0x134>)
 800083c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000840:	4413      	add	r3, r2
 8000842:	617b      	str	r3, [r7, #20]
    	TmpCall[3] += GyroData.x;
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	4a1e      	ldr	r2, [pc, #120]	; (80008c0 <Callibrate+0x138>)
 8000848:	f9b2 2000 	ldrsh.w	r2, [r2]
 800084c:	4413      	add	r3, r2
 800084e:	61bb      	str	r3, [r7, #24]
    	TmpCall[4] += GyroData.y;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	4a1b      	ldr	r2, [pc, #108]	; (80008c0 <Callibrate+0x138>)
 8000854:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 8000858:	4413      	add	r3, r2
 800085a:	61fb      	str	r3, [r7, #28]
    	TmpCall[5] += GyroData.z;
 800085c:	6a3b      	ldr	r3, [r7, #32]
 800085e:	4a18      	ldr	r2, [pc, #96]	; (80008c0 <Callibrate+0x138>)
 8000860:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000864:	4413      	add	r3, r2
 8000866:	623b      	str	r3, [r7, #32]

		Count--;
 8000868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086a:	3b01      	subs	r3, #1
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (Count > 0) {
 800086e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000870:	2b00      	cmp	r3, #0
 8000872:	dccf      	bgt.n	8000814 <Callibrate+0x8c>
    }
    for (int a = 0; a < 6; a++){
 8000874:	2300      	movs	r3, #0
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
 8000878:	e011      	b.n	800089e <Callibrate+0x116>
    	Callibration[a] = TmpCall[a]/count;
 800087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087c:	009b      	lsls	r3, r3, #2
 800087e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000882:	4413      	add	r3, r2
 8000884:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	fb92 f3f3 	sdiv	r3, r2, r3
 800088e:	b219      	sxth	r1, r3
 8000890:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <Callibrate+0x13c>)
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000894:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int a = 0; a < 6; a++){
 8000898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089a:	3301      	adds	r3, #1
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
 800089e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a0:	2b05      	cmp	r3, #5
 80008a2:	ddea      	ble.n	800087a <Callibrate+0xf2>
    }
}
 80008a4:	bf00      	nop
 80008a6:	3734      	adds	r7, #52	; 0x34
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bd90      	pop	{r4, r7, pc}
 80008ac:	20000218 	.word	0x20000218
 80008b0:	20000260 	.word	0x20000260
 80008b4:	200002a8 	.word	0x200002a8
 80008b8:	20000248 	.word	0x20000248
 80008bc:	20000254 	.word	0x20000254
 80008c0:	200002e4 	.word	0x200002e4
 80008c4:	200002d8 	.word	0x200002d8

080008c8 <GetAcceleration>:

void GetAcceleration(char out[], int start){
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	6039      	str	r1, [r7, #0]
	for (int a = 0; a < 6; a++){
 80008d2:	2300      	movs	r3, #0
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e01f      	b.n	8000918 <GetAcceleration+0x50>
		out[a * 2 + start] = Acceleration[a];
 80008d8:	4a13      	ldr	r2, [pc, #76]	; (8000928 <GetAcceleration+0x60>)
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	f932 1013 	ldrsh.w	r1, [r2, r3, lsl #1]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	005a      	lsls	r2, r3, #1
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	4413      	add	r3, r2
 80008e8:	461a      	mov	r2, r3
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	4413      	add	r3, r2
 80008ee:	b2ca      	uxtb	r2, r1
 80008f0:	701a      	strb	r2, [r3, #0]
		out[a * 2 + 1 + start] = Acceleration[a] >> 8;
 80008f2:	4a0d      	ldr	r2, [pc, #52]	; (8000928 <GetAcceleration+0x60>)
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80008fa:	121b      	asrs	r3, r3, #8
 80008fc:	b219      	sxth	r1, r3
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	1c5a      	adds	r2, r3, #1
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	4413      	add	r3, r2
 8000908:	461a      	mov	r2, r3
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	4413      	add	r3, r2
 800090e:	b2ca      	uxtb	r2, r1
 8000910:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < 6; a++){
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	3301      	adds	r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	2b05      	cmp	r3, #5
 800091c:	dddc      	ble.n	80008d8 <GetAcceleration+0x10>
	}
}
 800091e:	bf00      	nop
 8000920:	3714      	adds	r7, #20
 8000922:	46bd      	mov	sp, r7
 8000924:	bc80      	pop	{r7}
 8000926:	4770      	bx	lr
 8000928:	20000290 	.word	0x20000290

0800092c <GetVelocity>:

void GetVelocity(char out[], int start){
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
 8000934:	6039      	str	r1, [r7, #0]
	short vel;
	for (int a = 0; a < 6; a++){
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	e028      	b.n	800098e <GetVelocity+0x62>
		vel = (Velocity[a])/1000000;
 800093c:	4a17      	ldr	r2, [pc, #92]	; (800099c <GetVelocity+0x70>)
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	00db      	lsls	r3, r3, #3
 8000942:	4413      	add	r3, r2
 8000944:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000948:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <GetVelocity+0x74>)
 800094a:	f04f 0300 	mov.w	r3, #0
 800094e:	f7ff fc07 	bl	8000160 <__aeabi_ldivmod>
 8000952:	4603      	mov	r3, r0
 8000954:	460c      	mov	r4, r1
 8000956:	817b      	strh	r3, [r7, #10]
		out[a * 2 + start] = vel;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	005a      	lsls	r2, r3, #1
 800095c:	683b      	ldr	r3, [r7, #0]
 800095e:	4413      	add	r3, r2
 8000960:	461a      	mov	r2, r3
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	897a      	ldrh	r2, [r7, #10]
 8000968:	b2d2      	uxtb	r2, r2
 800096a:	701a      	strb	r2, [r3, #0]
		out[a * 2 + 1 + start] = vel >> 8;
 800096c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000970:	121b      	asrs	r3, r3, #8
 8000972:	b219      	sxth	r1, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	005b      	lsls	r3, r3, #1
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	4413      	add	r3, r2
 800097e:	461a      	mov	r2, r3
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	4413      	add	r3, r2
 8000984:	b2ca      	uxtb	r2, r1
 8000986:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < 6; a++){
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3301      	adds	r3, #1
 800098c:	60fb      	str	r3, [r7, #12]
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	2b05      	cmp	r3, #5
 8000992:	ddd3      	ble.n	800093c <GetVelocity+0x10>
	}
}
 8000994:	bf00      	nop
 8000996:	3714      	adds	r7, #20
 8000998:	46bd      	mov	sp, r7
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	200002a8 	.word	0x200002a8
 80009a0:	000f4240 	.word	0x000f4240
 80009a4:	00000000 	.word	0x00000000

080009a8 <GetDistance>:

void GetDistance(char out[], int start){
 80009a8:	b590      	push	{r4, r7, lr}
 80009aa:	b085      	sub	sp, #20
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
 80009b0:	6039      	str	r1, [r7, #0]
	short vel;
	for (int a = 0; a < 6; a++){
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	e028      	b.n	8000a0a <GetDistance+0x62>
		vel = (Distance[a])/1000000000000;
 80009b8:	4a19      	ldr	r2, [pc, #100]	; (8000a20 <GetDistance+0x78>)
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	00db      	lsls	r3, r3, #3
 80009be:	4413      	add	r3, r2
 80009c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009c4:	a314      	add	r3, pc, #80	; (adr r3, 8000a18 <GetDistance+0x70>)
 80009c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009ca:	f7ff fbc9 	bl	8000160 <__aeabi_ldivmod>
 80009ce:	4603      	mov	r3, r0
 80009d0:	460c      	mov	r4, r1
 80009d2:	817b      	strh	r3, [r7, #10]
		out[a * 2 + start] = vel;
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	005a      	lsls	r2, r3, #1
 80009d8:	683b      	ldr	r3, [r7, #0]
 80009da:	4413      	add	r3, r2
 80009dc:	461a      	mov	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4413      	add	r3, r2
 80009e2:	897a      	ldrh	r2, [r7, #10]
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	701a      	strb	r2, [r3, #0]
		out[a * 2 + 1 + start] = vel >> 8;
 80009e8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80009ec:	121b      	asrs	r3, r3, #8
 80009ee:	b219      	sxth	r1, r3
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	005b      	lsls	r3, r3, #1
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	461a      	mov	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4413      	add	r3, r2
 8000a00:	b2ca      	uxtb	r2, r1
 8000a02:	701a      	strb	r2, [r3, #0]
	for (int a = 0; a < 6; a++){
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	3301      	adds	r3, #1
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2b05      	cmp	r3, #5
 8000a0e:	ddd3      	ble.n	80009b8 <GetDistance+0x10>
	}
}
 8000a10:	bf00      	nop
 8000a12:	3714      	adds	r7, #20
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd90      	pop	{r4, r7, pc}
 8000a18:	d4a51000 	.word	0xd4a51000
 8000a1c:	000000e8 	.word	0x000000e8
 8000a20:	20000218 	.word	0x20000218

08000a24 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000a30:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <NRF24_DelayMicroSeconds+0x38>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <NRF24_DelayMicroSeconds+0x3c>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	0c9a      	lsrs	r2, r3, #18
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	fb02 f303 	mul.w	r3, r2, r3
 8000a42:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000a44:	bf00      	nop
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	60fa      	str	r2, [r7, #12]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1fa      	bne.n	8000a46 <NRF24_DelayMicroSeconds+0x22>
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	2000002c 	.word	0x2000002c
 8000a60:	165e9f81 	.word	0x165e9f81

08000a64 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d008      	beq.n	8000a84 <NRF24_csn+0x20>
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <NRF24_csn+0x38>)
 8000a74:	6818      	ldr	r0, [r3, #0]
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <NRF24_csn+0x3c>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f003 f895 	bl	8003bac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000a82:	e007      	b.n	8000a94 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <NRF24_csn+0x38>)
 8000a86:	6818      	ldr	r0, [r3, #0]
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <NRF24_csn+0x3c>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4619      	mov	r1, r3
 8000a90:	f003 f88c 	bl	8003bac <HAL_GPIO_WritePin>
}
 8000a94:	bf00      	nop
 8000a96:	3708      	adds	r7, #8
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	20000104 	.word	0x20000104
 8000aa0:	20000108 	.word	0x20000108

08000aa4 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d008      	beq.n	8000ac4 <NRF24_ce+0x20>
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <NRF24_ce+0x38>)
 8000ab4:	6818      	ldr	r0, [r3, #0]
 8000ab6:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <NRF24_ce+0x3c>)
 8000ab8:	881b      	ldrh	r3, [r3, #0]
 8000aba:	2201      	movs	r2, #1
 8000abc:	4619      	mov	r1, r3
 8000abe:	f003 f875 	bl	8003bac <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000ac2:	e007      	b.n	8000ad4 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <NRF24_ce+0x38>)
 8000ac6:	6818      	ldr	r0, [r3, #0]
 8000ac8:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <NRF24_ce+0x3c>)
 8000aca:	881b      	ldrh	r3, [r3, #0]
 8000acc:	2200      	movs	r2, #0
 8000ace:	4619      	mov	r1, r3
 8000ad0:	f003 f86c 	bl	8003bac <HAL_GPIO_WritePin>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000104 	.word	0x20000104
 8000ae0:	2000010a 	.word	0x2000010a

08000ae4 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	4603      	mov	r3, r0
 8000aec:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000aee:	2000      	movs	r0, #0
 8000af0:	f7ff ffb8 	bl	8000a64 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 031f 	and.w	r3, r3, #31
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000afe:	f107 010c 	add.w	r1, r7, #12
 8000b02:	2364      	movs	r3, #100	; 0x64
 8000b04:	2201      	movs	r2, #1
 8000b06:	480a      	ldr	r0, [pc, #40]	; (8000b30 <NRF24_read_register+0x4c>)
 8000b08:	f004 fd0f 	bl	800552a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	1c59      	adds	r1, r3, #1
 8000b12:	2364      	movs	r3, #100	; 0x64
 8000b14:	2201      	movs	r2, #1
 8000b16:	4806      	ldr	r0, [pc, #24]	; (8000b30 <NRF24_read_register+0x4c>)
 8000b18:	f004 fe3b 	bl	8005792 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000b1c:	7b7b      	ldrb	r3, [r7, #13]
 8000b1e:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff ff9f 	bl	8000a64 <NRF24_csn>
	return retData;
 8000b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	2000010c 	.word	0x2000010c

08000b34 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b084      	sub	sp, #16
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	6039      	str	r1, [r7, #0]
 8000b3e:	71fb      	strb	r3, [r7, #7]
 8000b40:	4613      	mov	r3, r2
 8000b42:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000b44:	2000      	movs	r0, #0
 8000b46:	f7ff ff8d 	bl	8000a64 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	f003 031f 	and.w	r3, r3, #31
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000b54:	f107 010c 	add.w	r1, r7, #12
 8000b58:	2364      	movs	r3, #100	; 0x64
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	4808      	ldr	r0, [pc, #32]	; (8000b80 <NRF24_read_registerN+0x4c>)
 8000b5e:	f004 fce4 	bl	800552a <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000b62:	79bb      	ldrb	r3, [r7, #6]
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	2364      	movs	r3, #100	; 0x64
 8000b68:	6839      	ldr	r1, [r7, #0]
 8000b6a:	4805      	ldr	r0, [pc, #20]	; (8000b80 <NRF24_read_registerN+0x4c>)
 8000b6c:	f004 fe11 	bl	8005792 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000b70:	2001      	movs	r0, #1
 8000b72:	f7ff ff77 	bl	8000a64 <NRF24_csn>
}
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	2000010c 	.word	0x2000010c

08000b84 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	460a      	mov	r2, r1
 8000b8e:	71fb      	strb	r3, [r7, #7]
 8000b90:	4613      	mov	r3, r2
 8000b92:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff ff65 	bl	8000a64 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	f043 0320 	orr.w	r3, r3, #32
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000ba8:	f107 010c 	add.w	r1, r7, #12
 8000bac:	2364      	movs	r3, #100	; 0x64
 8000bae:	2202      	movs	r2, #2
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <NRF24_write_register+0x40>)
 8000bb2:	f004 fcba 	bl	800552a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f7ff ff54 	bl	8000a64 <NRF24_csn>
}
 8000bbc:	bf00      	nop
 8000bbe:	3710      	adds	r7, #16
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2000010c 	.word	0x2000010c

08000bc8 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff ff43 	bl	8000a64 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f043 0320 	orr.w	r3, r3, #32
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000be8:	f107 010c 	add.w	r1, r7, #12
 8000bec:	2364      	movs	r3, #100	; 0x64
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4808      	ldr	r0, [pc, #32]	; (8000c14 <NRF24_write_registerN+0x4c>)
 8000bf2:	f004 fc9a 	bl	800552a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000bf6:	79bb      	ldrb	r3, [r7, #6]
 8000bf8:	b29a      	uxth	r2, r3
 8000bfa:	2364      	movs	r3, #100	; 0x64
 8000bfc:	6839      	ldr	r1, [r7, #0]
 8000bfe:	4805      	ldr	r0, [pc, #20]	; (8000c14 <NRF24_write_registerN+0x4c>)
 8000c00:	f004 fc93 	bl	800552a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f7ff ff2d 	bl	8000a64 <NRF24_csn>
}
 8000c0a:	bf00      	nop
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000010c 	.word	0x2000010c

08000c18 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000c24:	2000      	movs	r0, #0
 8000c26:	f7ff ff1d 	bl	8000a64 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000c2a:	23a0      	movs	r3, #160	; 0xa0
 8000c2c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000c2e:	f107 010f 	add.w	r1, r7, #15
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	2201      	movs	r2, #1
 8000c36:	4808      	ldr	r0, [pc, #32]	; (8000c58 <NRF24_write_payload+0x40>)
 8000c38:	f004 fc77 	bl	800552a <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	2364      	movs	r3, #100	; 0x64
 8000c42:	6879      	ldr	r1, [r7, #4]
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <NRF24_write_payload+0x40>)
 8000c46:	f004 fc70 	bl	800552a <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000c4a:	2001      	movs	r0, #1
 8000c4c:	f7ff ff0a 	bl	8000a64 <NRF24_csn>
}
 8000c50:	bf00      	nop
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	2000010c 	.word	0x2000010c

08000c5c <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	460b      	mov	r3, r1
 8000c66:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8000c68:	f000 fa10 	bl	800108c <NRF24_getPayloadSize>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	461a      	mov	r2, r3
 8000c70:	78fb      	ldrb	r3, [r7, #3]
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d303      	bcc.n	8000c7e <NRF24_read_payload+0x22>
 8000c76:	f000 fa09 	bl	800108c <NRF24_getPayloadSize>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	e000      	b.n	8000c80 <NRF24_read_payload+0x24>
 8000c7e:	78fb      	ldrb	r3, [r7, #3]
 8000c80:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000c82:	2000      	movs	r0, #0
 8000c84:	f7ff feee 	bl	8000a64 <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8000c88:	2361      	movs	r3, #97	; 0x61
 8000c8a:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8000c8c:	f107 010e 	add.w	r1, r7, #14
 8000c90:	2364      	movs	r3, #100	; 0x64
 8000c92:	2201      	movs	r2, #1
 8000c94:	4808      	ldr	r0, [pc, #32]	; (8000cb8 <NRF24_read_payload+0x5c>)
 8000c96:	f004 fc48 	bl	800552a <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	2364      	movs	r3, #100	; 0x64
 8000ca0:	6879      	ldr	r1, [r7, #4]
 8000ca2:	4805      	ldr	r0, [pc, #20]	; (8000cb8 <NRF24_read_payload+0x5c>)
 8000ca4:	f004 fd75 	bl	8005792 <HAL_SPI_Receive>
	NRF24_csn(1);
 8000ca8:	2001      	movs	r0, #1
 8000caa:	f7ff fedb 	bl	8000a64 <NRF24_csn>
}
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	2000010c 	.word	0x2000010c

08000cbc <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000cc0:	21ff      	movs	r1, #255	; 0xff
 8000cc2:	20e1      	movs	r0, #225	; 0xe1
 8000cc4:	f7ff ff5e 	bl	8000b84 <NRF24_write_register>
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000cd0:	21ff      	movs	r1, #255	; 0xff
 8000cd2:	20e2      	movs	r0, #226	; 0xe2
 8000cd4:	f7ff ff56 	bl	8000b84 <NRF24_write_register>
}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}

08000cdc <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000ce2:	2007      	movs	r0, #7
 8000ce4:	f7ff fefe 	bl	8000ae4 <NRF24_read_register>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000cec:	79fb      	ldrb	r3, [r7, #7]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
	...

08000cf8 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000cf8:	b082      	sub	sp, #8
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b084      	sub	sp, #16
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	61fb      	str	r3, [r7, #28]
 8000d04:	460b      	mov	r3, r1
 8000d06:	807b      	strh	r3, [r7, #2]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000d0c:	4b66      	ldr	r3, [pc, #408]	; (8000ea8 <NRF24_begin+0x1b0>)
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f107 031c 	add.w	r3, r7, #28
 8000d14:	2258      	movs	r2, #88	; 0x58
 8000d16:	4619      	mov	r1, r3
 8000d18:	f006 f944 	bl	8006fa4 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000d1c:	4a63      	ldr	r2, [pc, #396]	; (8000eac <NRF24_begin+0x1b4>)
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000d22:	4a63      	ldr	r2, [pc, #396]	; (8000eb0 <NRF24_begin+0x1b8>)
 8000d24:	887b      	ldrh	r3, [r7, #2]
 8000d26:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000d28:	4a62      	ldr	r2, [pc, #392]	; (8000eb4 <NRF24_begin+0x1bc>)
 8000d2a:	883b      	ldrh	r3, [r7, #0]
 8000d2c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000d2e:	2001      	movs	r0, #1
 8000d30:	f7ff fe98 	bl	8000a64 <NRF24_csn>
	NRF24_ce(0);
 8000d34:	2000      	movs	r0, #0
 8000d36:	f7ff feb5 	bl	8000aa4 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000d3a:	2005      	movs	r0, #5
 8000d3c:	f002 faa2 	bl	8003284 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000d40:	2108      	movs	r1, #8
 8000d42:	2000      	movs	r0, #0
 8000d44:	f7ff ff1e 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000d48:	213f      	movs	r1, #63	; 0x3f
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	f7ff ff1a 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000d50:	2103      	movs	r1, #3
 8000d52:	2002      	movs	r0, #2
 8000d54:	f7ff ff16 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000d58:	2103      	movs	r1, #3
 8000d5a:	2003      	movs	r0, #3
 8000d5c:	f7ff ff12 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000d60:	2103      	movs	r1, #3
 8000d62:	2004      	movs	r0, #4
 8000d64:	f7ff ff0e 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000d68:	2102      	movs	r1, #2
 8000d6a:	2005      	movs	r0, #5
 8000d6c:	f7ff ff0a 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000d70:	210f      	movs	r1, #15
 8000d72:	2006      	movs	r0, #6
 8000d74:	f7ff ff06 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000d78:	210e      	movs	r1, #14
 8000d7a:	2007      	movs	r0, #7
 8000d7c:	f7ff ff02 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000d80:	2100      	movs	r1, #0
 8000d82:	2008      	movs	r0, #8
 8000d84:	f7ff fefe 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000d88:	2100      	movs	r1, #0
 8000d8a:	2009      	movs	r0, #9
 8000d8c:	f7ff fefa 	bl	8000b84 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000d90:	23e7      	movs	r3, #231	; 0xe7
 8000d92:	733b      	strb	r3, [r7, #12]
 8000d94:	23e7      	movs	r3, #231	; 0xe7
 8000d96:	72fb      	strb	r3, [r7, #11]
 8000d98:	23e7      	movs	r3, #231	; 0xe7
 8000d9a:	72bb      	strb	r3, [r7, #10]
 8000d9c:	23e7      	movs	r3, #231	; 0xe7
 8000d9e:	727b      	strb	r3, [r7, #9]
 8000da0:	23e7      	movs	r3, #231	; 0xe7
 8000da2:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	2205      	movs	r2, #5
 8000daa:	4619      	mov	r1, r3
 8000dac:	200a      	movs	r0, #10
 8000dae:	f7ff ff0b 	bl	8000bc8 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000db2:	23c2      	movs	r3, #194	; 0xc2
 8000db4:	733b      	strb	r3, [r7, #12]
 8000db6:	23c2      	movs	r3, #194	; 0xc2
 8000db8:	72fb      	strb	r3, [r7, #11]
 8000dba:	23c2      	movs	r3, #194	; 0xc2
 8000dbc:	72bb      	strb	r3, [r7, #10]
 8000dbe:	23c2      	movs	r3, #194	; 0xc2
 8000dc0:	727b      	strb	r3, [r7, #9]
 8000dc2:	23c2      	movs	r3, #194	; 0xc2
 8000dc4:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000dc6:	f107 0308 	add.w	r3, r7, #8
 8000dca:	2205      	movs	r2, #5
 8000dcc:	4619      	mov	r1, r3
 8000dce:	200b      	movs	r0, #11
 8000dd0:	f7ff fefa 	bl	8000bc8 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000dd4:	21c3      	movs	r1, #195	; 0xc3
 8000dd6:	200c      	movs	r0, #12
 8000dd8:	f7ff fed4 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000ddc:	21c4      	movs	r1, #196	; 0xc4
 8000dde:	200d      	movs	r0, #13
 8000de0:	f7ff fed0 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000de4:	21c5      	movs	r1, #197	; 0xc5
 8000de6:	200e      	movs	r0, #14
 8000de8:	f7ff fecc 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000dec:	21c6      	movs	r1, #198	; 0xc6
 8000dee:	200f      	movs	r0, #15
 8000df0:	f7ff fec8 	bl	8000b84 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000df4:	23e7      	movs	r3, #231	; 0xe7
 8000df6:	733b      	strb	r3, [r7, #12]
 8000df8:	23e7      	movs	r3, #231	; 0xe7
 8000dfa:	72fb      	strb	r3, [r7, #11]
 8000dfc:	23e7      	movs	r3, #231	; 0xe7
 8000dfe:	72bb      	strb	r3, [r7, #10]
 8000e00:	23e7      	movs	r3, #231	; 0xe7
 8000e02:	727b      	strb	r3, [r7, #9]
 8000e04:	23e7      	movs	r3, #231	; 0xe7
 8000e06:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000e08:	f107 0308 	add.w	r3, r7, #8
 8000e0c:	2205      	movs	r2, #5
 8000e0e:	4619      	mov	r1, r3
 8000e10:	2010      	movs	r0, #16
 8000e12:	f7ff fed9 	bl	8000bc8 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000e16:	2100      	movs	r1, #0
 8000e18:	2011      	movs	r0, #17
 8000e1a:	f7ff feb3 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000e1e:	2100      	movs	r1, #0
 8000e20:	2012      	movs	r0, #18
 8000e22:	f7ff feaf 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000e26:	2100      	movs	r1, #0
 8000e28:	2013      	movs	r0, #19
 8000e2a:	f7ff feab 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000e2e:	2100      	movs	r1, #0
 8000e30:	2014      	movs	r0, #20
 8000e32:	f7ff fea7 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000e36:	2100      	movs	r1, #0
 8000e38:	2015      	movs	r0, #21
 8000e3a:	f7ff fea3 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000e3e:	2100      	movs	r1, #0
 8000e40:	2016      	movs	r0, #22
 8000e42:	f7ff fe9f 	bl	8000b84 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000e46:	f000 fb0b 	bl	8001460 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	201c      	movs	r0, #28
 8000e4e:	f7ff fe99 	bl	8000b84 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000e52:	2100      	movs	r1, #0
 8000e54:	201d      	movs	r0, #29
 8000e56:	f7ff fe95 	bl	8000b84 <NRF24_write_register>
	printRadioSettings();
 8000e5a:	f000 fb1b 	bl	8001494 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000e5e:	210f      	movs	r1, #15
 8000e60:	200f      	movs	r0, #15
 8000e62:	f000 f8cd 	bl	8001000 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000e66:	2003      	movs	r0, #3
 8000e68:	f000 f9af 	bl	80011ca <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f000 f9e5 	bl	800123c <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000e72:	2002      	movs	r0, #2
 8000e74:	f000 fa28 	bl	80012c8 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000e78:	f000 f97a 	bl	8001170 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000e7c:	2020      	movs	r0, #32
 8000e7e:	f000 f8ef 	bl	8001060 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000e82:	f000 fae4 	bl	800144e <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000e86:	204c      	movs	r0, #76	; 0x4c
 8000e88:	f000 f8d5 	bl	8001036 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000e8c:	f7ff ff16 	bl	8000cbc <NRF24_flush_tx>
	NRF24_flush_rx();
 8000e90:	f7ff ff1c 	bl	8000ccc <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000e94:	f000 fa40 	bl	8001318 <NRF24_powerDown>
	
}
 8000e98:	bf00      	nop
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ea2:	b002      	add	sp, #8
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	2000010c 	.word	0x2000010c
 8000eac:	20000104 	.word	0x20000104
 8000eb0:	20000108 	.word	0x20000108
 8000eb4:	2000010a 	.word	0x2000010a

08000eb8 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f7ff fdf1 	bl	8000aa4 <NRF24_ce>
	NRF24_flush_tx();
 8000ec2:	f7ff fefb 	bl	8000cbc <NRF24_flush_tx>
	NRF24_flush_rx();
 8000ec6:	f7ff ff01 	bl	8000ccc <NRF24_flush_rx>
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
	...

08000ed0 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000edc:	f000 fab7 	bl	800144e <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000ee0:	78fb      	ldrb	r3, [r7, #3]
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f000 fa56 	bl	8001396 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000eea:	f002 f9c1 	bl	8003270 <HAL_GetTick>
 8000eee:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000ef0:	230a      	movs	r3, #10
 8000ef2:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000ef4:	f107 030d 	add.w	r3, r7, #13
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4619      	mov	r1, r3
 8000efc:	2008      	movs	r0, #8
 8000efe:	f7ff fe19 	bl	8000b34 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000f02:	f7ff feeb 	bl	8000cdc <NRF24_get_status>
 8000f06:	4603      	mov	r3, r0
 8000f08:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d107      	bne.n	8000f24 <NRF24_write+0x54>
 8000f14:	f002 f9ac 	bl	8003270 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d8e7      	bhi.n	8000ef4 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000f24:	f107 010b 	add.w	r1, r7, #11
 8000f28:	f107 030c 	add.w	r3, r7, #12
 8000f2c:	4a0c      	ldr	r2, [pc, #48]	; (8000f60 <NRF24_write+0x90>)
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fa5a 	bl	80013e8 <NRF24_whatHappened>
	retStatus = tx_ok;
 8000f34:	7b3b      	ldrb	r3, [r7, #12]
 8000f36:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <NRF24_write+0x90>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d005      	beq.n	8000f4c <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000f40:	f000 f8ae 	bl	80010a0 <NRF24_getDynamicPayloadSize>
 8000f44:	4603      	mov	r3, r0
 8000f46:	461a      	mov	r2, r3
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <NRF24_write+0x94>)
 8000f4a:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000f4c:	f000 f80c 	bl	8000f68 <NRF24_available>
	NRF24_flush_tx();
 8000f50:	f7ff feb4 	bl	8000cbc <NRF24_flush_tx>
	return retStatus;
 8000f54:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	3718      	adds	r7, #24
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000fc 	.word	0x200000fc
 8000f64:	200000fd 	.word	0x200000fd

08000f68 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000f6c:	2000      	movs	r0, #0
 8000f6e:	f000 f9e2 	bl	8001336 <NRF24_availablePipe>
 8000f72:	4603      	mov	r3, r0
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8000f84:	78fb      	ldrb	r3, [r7, #3]
 8000f86:	4619      	mov	r1, r3
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff fe67 	bl	8000c5c <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8000f8e:	2017      	movs	r0, #23
 8000f90:	f7ff fda8 	bl	8000ae4 <NRF24_read_register>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f003 0301 	and.w	r3, r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8000f9c:	f7ff fe96 	bl	8000ccc <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8000fa0:	f000 f87e 	bl	80010a0 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	bf14      	ite	ne
 8000faa:	2301      	movne	r3, #1
 8000fac:	2300      	moveq	r3, #0
 8000fae:	b2db      	uxtb	r3, r3
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3710      	adds	r7, #16
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2205      	movs	r2, #5
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	200a      	movs	r0, #10
 8000fca:	f7ff fdfd 	bl	8000bc8 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2205      	movs	r2, #5
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	2010      	movs	r0, #16
 8000fd6:	f7ff fdf7 	bl	8000bc8 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000fda:	2320      	movs	r3, #32
 8000fdc:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000fde:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <NRF24_openWritingPipe+0x44>)
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	bf28      	it	cs
 8000fe8:	4613      	movcs	r3, r2
 8000fea:	b2db      	uxtb	r3, r3
 8000fec:	4619      	mov	r1, r3
 8000fee:	2011      	movs	r0, #17
 8000ff0:	f7ff fdc8 	bl	8000b84 <NRF24_write_register>
}
 8000ff4:	bf00      	nop
 8000ff6:	3710      	adds	r7, #16
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	200000fe 	.word	0x200000fe

08001000 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	460a      	mov	r2, r1
 800100a:	71fb      	strb	r3, [r7, #7]
 800100c:	4613      	mov	r3, r2
 800100e:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	011b      	lsls	r3, r3, #4
 8001014:	b25a      	sxtb	r2, r3
 8001016:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800101a:	f003 030f 	and.w	r3, r3, #15
 800101e:	b25b      	sxtb	r3, r3
 8001020:	4313      	orrs	r3, r2
 8001022:	b25b      	sxtb	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	4619      	mov	r1, r3
 8001028:	2004      	movs	r0, #4
 800102a:	f7ff fdab 	bl	8000b84 <NRF24_write_register>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}

08001036 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	4603      	mov	r3, r0
 800103e:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 8001040:	237f      	movs	r3, #127	; 0x7f
 8001042:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001044:	7bfa      	ldrb	r2, [r7, #15]
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4293      	cmp	r3, r2
 800104a:	bf28      	it	cs
 800104c:	4613      	movcs	r3, r2
 800104e:	b2db      	uxtb	r3, r3
 8001050:	4619      	mov	r1, r3
 8001052:	2005      	movs	r0, #5
 8001054:	f7ff fd96 	bl	8000b84 <NRF24_write_register>
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 800106a:	2320      	movs	r3, #32
 800106c:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4293      	cmp	r3, r2
 8001074:	bf28      	it	cs
 8001076:	4613      	movcs	r3, r2
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b03      	ldr	r3, [pc, #12]	; (8001088 <NRF24_setPayloadSize+0x28>)
 800107c:	701a      	strb	r2, [r3, #0]
}
 800107e:	bf00      	nop
 8001080:	3714      	adds	r7, #20
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	200000fe 	.word	0x200000fe

0800108c <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
	return payload_size;
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <NRF24_getPayloadSize+0x10>)
 8001092:	781b      	ldrb	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	200000fe 	.word	0x200000fe

080010a0 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80010a4:	2060      	movs	r0, #96	; 0x60
 80010a6:	f7ff fd1d 	bl	8000ae4 <NRF24_read_register>
 80010aa:	4603      	mov	r3, r0
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	bd80      	pop	{r7, pc}

080010b0 <NRF24_enableAckPayload>:
//25. Enable payload on Ackknowledge packet
void NRF24_enableAckPayload(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
	//Need to enable dynamic payload and Ack payload together
	 NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80010b4:	201d      	movs	r0, #29
 80010b6:	f7ff fd15 	bl	8000ae4 <NRF24_read_register>
 80010ba:	4603      	mov	r3, r0
 80010bc:	f043 0306 	orr.w	r3, r3, #6
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	4619      	mov	r1, r3
 80010c4:	201d      	movs	r0, #29
 80010c6:	f7ff fd5d 	bl	8000b84 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 80010ca:	201d      	movs	r0, #29
 80010cc:	f7ff fd0a 	bl	8000ae4 <NRF24_read_register>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d10c      	bne.n	80010f0 <NRF24_enableAckPayload+0x40>
	{
		NRF24_ACTIVATE_cmd();
 80010d6:	f000 f9c3 	bl	8001460 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) | _BV(BIT_EN_ACK_PAY) | _BV(BIT_EN_DPL) );
 80010da:	201d      	movs	r0, #29
 80010dc:	f7ff fd02 	bl	8000ae4 <NRF24_read_register>
 80010e0:	4603      	mov	r3, r0
 80010e2:	f043 0306 	orr.w	r3, r3, #6
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	4619      	mov	r1, r3
 80010ea:	201d      	movs	r0, #29
 80010ec:	f7ff fd4a 	bl	8000b84 <NRF24_write_register>
	}
	// Enable dynamic payload on pipes 0 & 1
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 80010f0:	201c      	movs	r0, #28
 80010f2:	f7ff fcf7 	bl	8000ae4 <NRF24_read_register>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f043 0303 	orr.w	r3, r3, #3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4619      	mov	r1, r3
 8001100:	201c      	movs	r0, #28
 8001102:	f7ff fd3f 	bl	8000b84 <NRF24_write_register>
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <NRF24_enableDynamicPayloads>:
//26. Enable dynamic payloads
void NRF24_enableDynamicPayloads(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
	//Enable dynamic payload through FEATURE register
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001110:	201d      	movs	r0, #29
 8001112:	f7ff fce7 	bl	8000ae4 <NRF24_read_register>
 8001116:	4603      	mov	r3, r0
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	b2db      	uxtb	r3, r3
 800111e:	4619      	mov	r1, r3
 8001120:	201d      	movs	r0, #29
 8001122:	f7ff fd2f 	bl	8000b84 <NRF24_write_register>
	if(!NRF24_read_register(REG_FEATURE))
 8001126:	201d      	movs	r0, #29
 8001128:	f7ff fcdc 	bl	8000ae4 <NRF24_read_register>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10c      	bne.n	800114c <NRF24_enableDynamicPayloads+0x40>
	{
		NRF24_ACTIVATE_cmd();
 8001132:	f000 f995 	bl	8001460 <NRF24_ACTIVATE_cmd>
		NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) |  _BV(BIT_EN_DPL) );
 8001136:	201d      	movs	r0, #29
 8001138:	f7ff fcd4 	bl	8000ae4 <NRF24_read_register>
 800113c:	4603      	mov	r3, r0
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	b2db      	uxtb	r3, r3
 8001144:	4619      	mov	r1, r3
 8001146:	201d      	movs	r0, #29
 8001148:	f7ff fd1c 	bl	8000b84 <NRF24_write_register>
	}
	//Enable Dynamic payload on all pipes
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
 800114c:	201c      	movs	r0, #28
 800114e:	f7ff fcc9 	bl	8000ae4 <NRF24_read_register>
 8001152:	4603      	mov	r3, r0
 8001154:	f043 033f 	orr.w	r3, r3, #63	; 0x3f
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	201c      	movs	r0, #28
 800115e:	f7ff fd11 	bl	8000b84 <NRF24_write_register>
  dynamic_payloads_enabled = true;
 8001162:	4b02      	ldr	r3, [pc, #8]	; (800116c <NRF24_enableDynamicPayloads+0x60>)
 8001164:	2201      	movs	r2, #1
 8001166:	701a      	strb	r2, [r3, #0]
	
}
 8001168:	bf00      	nop
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200000ff 	.word	0x200000ff

08001170 <NRF24_disableDynamicPayloads>:
void NRF24_disableDynamicPayloads(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8001174:	201d      	movs	r0, #29
 8001176:	f7ff fcb5 	bl	8000ae4 <NRF24_read_register>
 800117a:	4603      	mov	r3, r0
 800117c:	f023 0304 	bic.w	r3, r3, #4
 8001180:	b2db      	uxtb	r3, r3
 8001182:	4619      	mov	r1, r3
 8001184:	201d      	movs	r0, #29
 8001186:	f7ff fcfd 	bl	8000b84 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800118a:	2100      	movs	r1, #0
 800118c:	201c      	movs	r0, #28
 800118e:	f7ff fcf9 	bl	8000b84 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8001192:	4b02      	ldr	r3, [pc, #8]	; (800119c <NRF24_disableDynamicPayloads+0x2c>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	200000ff 	.word	0x200000ff

080011a0 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80011aa:	79fb      	ldrb	r3, [r7, #7]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d004      	beq.n	80011ba <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80011b0:	213f      	movs	r1, #63	; 0x3f
 80011b2:	2001      	movs	r0, #1
 80011b4:	f7ff fce6 	bl	8000b84 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 80011b8:	e003      	b.n	80011c2 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 80011ba:	2100      	movs	r1, #0
 80011bc:	2001      	movs	r0, #1
 80011be:	f7ff fce1 	bl	8000b84 <NRF24_write_register>
}
 80011c2:	bf00      	nop
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	4603      	mov	r3, r0
 80011d2:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 80011d4:	2006      	movs	r0, #6
 80011d6:	f7ff fc85 	bl	8000ae4 <NRF24_read_register>
 80011da:	4603      	mov	r3, r0
 80011dc:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	f023 0306 	bic.w	r3, r3, #6
 80011e4:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d104      	bne.n	80011f6 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	f043 0306 	orr.w	r3, r3, #6
 80011f2:	73fb      	strb	r3, [r7, #15]
 80011f4:	e019      	b.n	800122a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d104      	bne.n	8001206 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	f043 0304 	orr.w	r3, r3, #4
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e011      	b.n	800122a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d104      	bne.n	8001216 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800120c:	7bfb      	ldrb	r3, [r7, #15]
 800120e:	f043 0302 	orr.w	r3, r3, #2
 8001212:	73fb      	strb	r3, [r7, #15]
 8001214:	e009      	b.n	800122a <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d006      	beq.n	800122a <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	2b04      	cmp	r3, #4
 8001220:	d103      	bne.n	800122a <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001222:	7bfb      	ldrb	r3, [r7, #15]
 8001224:	f043 0306 	orr.w	r3, r3, #6
 8001228:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800122a:	7bfb      	ldrb	r3, [r7, #15]
 800122c:	4619      	mov	r1, r3
 800122e:	2006      	movs	r0, #6
 8001230:	f7ff fca8 	bl	8000b84 <NRF24_write_register>
}
 8001234:	bf00      	nop
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001246:	2300      	movs	r3, #0
 8001248:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800124a:	2006      	movs	r0, #6
 800124c:	f7ff fc4a 	bl	8000ae4 <NRF24_read_register>
 8001250:	4603      	mov	r3, r0
 8001252:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8001254:	4b1b      	ldr	r3, [pc, #108]	; (80012c4 <NRF24_setDataRate+0x88>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800125a:	7bbb      	ldrb	r3, [r7, #14]
 800125c:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001260:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8001262:	79fb      	ldrb	r3, [r7, #7]
 8001264:	2b02      	cmp	r3, #2
 8001266:	d107      	bne.n	8001278 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <NRF24_setDataRate+0x88>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800126e:	7bbb      	ldrb	r3, [r7, #14]
 8001270:	f043 0320 	orr.w	r3, r3, #32
 8001274:	73bb      	strb	r3, [r7, #14]
 8001276:	e00d      	b.n	8001294 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001278:	79fb      	ldrb	r3, [r7, #7]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d107      	bne.n	800128e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800127e:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <NRF24_setDataRate+0x88>)
 8001280:	2201      	movs	r2, #1
 8001282:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8001284:	7bbb      	ldrb	r3, [r7, #14]
 8001286:	f043 0308 	orr.w	r3, r3, #8
 800128a:	73bb      	strb	r3, [r7, #14]
 800128c:	e002      	b.n	8001294 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800128e:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <NRF24_setDataRate+0x88>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	4619      	mov	r1, r3
 8001298:	2006      	movs	r0, #6
 800129a:	f7ff fc73 	bl	8000b84 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800129e:	2006      	movs	r0, #6
 80012a0:	f7ff fc20 	bl	8000ae4 <NRF24_read_register>
 80012a4:	4603      	mov	r3, r0
 80012a6:	461a      	mov	r2, r3
 80012a8:	7bbb      	ldrb	r3, [r7, #14]
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d102      	bne.n	80012b4 <NRF24_setDataRate+0x78>
  {
    result = true;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e002      	b.n	80012ba <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 80012b4:	4b03      	ldr	r3, [pc, #12]	; (80012c4 <NRF24_setDataRate+0x88>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	701a      	strb	r2, [r3, #0]
  }

  return result;
 80012ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000100 	.word	0x20000100

080012c8 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b084      	sub	sp, #16
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 80012d2:	2000      	movs	r0, #0
 80012d4:	f7ff fc06 	bl	8000ae4 <NRF24_read_register>
 80012d8:	4603      	mov	r3, r0
 80012da:	f023 030c 	bic.w	r3, r3, #12
 80012de:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d00f      	beq.n	8001306 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d104      	bne.n	80012f6 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	73fb      	strb	r3, [r7, #15]
 80012f4:	e007      	b.n	8001306 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80012f6:	7bfb      	ldrb	r3, [r7, #15]
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f043 0304 	orr.w	r3, r3, #4
 8001304:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001306:	7bfb      	ldrb	r3, [r7, #15]
 8001308:	4619      	mov	r1, r3
 800130a:	2000      	movs	r0, #0
 800130c:	f7ff fc3a 	bl	8000b84 <NRF24_write_register>
}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800131c:	2000      	movs	r0, #0
 800131e:	f7ff fbe1 	bl	8000ae4 <NRF24_read_register>
 8001322:	4603      	mov	r3, r0
 8001324:	f023 0302 	bic.w	r3, r3, #2
 8001328:	b2db      	uxtb	r3, r3
 800132a:	4619      	mov	r1, r3
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fc29 	bl	8000b84 <NRF24_write_register>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}

08001336 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800133e:	f7ff fccd 	bl	8000cdc <NRF24_get_status>
 8001342:	4603      	mov	r3, r0
 8001344:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001346:	7bfb      	ldrb	r3, [r7, #15]
 8001348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800134c:	2b00      	cmp	r3, #0
 800134e:	bf14      	ite	ne
 8001350:	2301      	movne	r3, #1
 8001352:	2300      	moveq	r3, #0
 8001354:	73bb      	strb	r3, [r7, #14]

  if (result)
 8001356:	7bbb      	ldrb	r3, [r7, #14]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d017      	beq.n	800138c <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d007      	beq.n	8001372 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8001362:	7bfb      	ldrb	r3, [r7, #15]
 8001364:	085b      	lsrs	r3, r3, #1
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	b2da      	uxtb	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8001372:	2140      	movs	r1, #64	; 0x40
 8001374:	2007      	movs	r0, #7
 8001376:	f7ff fc05 	bl	8000b84 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	f003 0320 	and.w	r3, r3, #32
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8001384:	2120      	movs	r1, #32
 8001386:	2007      	movs	r0, #7
 8001388:	f7ff fbfc 	bl	8000b84 <NRF24_write_register>
    }
  }
  return result;
 800138c:	7bbb      	ldrb	r3, [r7, #14]
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 8001396:	b580      	push	{r7, lr}
 8001398:	b082      	sub	sp, #8
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
 800139e:	460b      	mov	r3, r1
 80013a0:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff fb9e 	bl	8000ae4 <NRF24_read_register>
 80013a8:	4603      	mov	r3, r0
 80013aa:	f043 0302 	orr.w	r3, r3, #2
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f023 0301 	bic.w	r3, r3, #1
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	4619      	mov	r1, r3
 80013b8:	2000      	movs	r0, #0
 80013ba:	f7ff fbe3 	bl	8000b84 <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 80013be:	2096      	movs	r0, #150	; 0x96
 80013c0:	f7ff fb30 	bl	8000a24 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 80013c4:	78fb      	ldrb	r3, [r7, #3]
 80013c6:	4619      	mov	r1, r3
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fc25 	bl	8000c18 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff fb68 	bl	8000aa4 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 80013d4:	200f      	movs	r0, #15
 80013d6:	f7ff fb25 	bl	8000a24 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 80013da:	2000      	movs	r0, #0
 80013dc:	f7ff fb62 	bl	8000aa4 <NRF24_ce>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80013f4:	f7ff fc72 	bl	8000cdc <NRF24_get_status>
 80013f8:	4603      	mov	r3, r0
 80013fa:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001402:	2170      	movs	r1, #112	; 0x70
 8001404:	2007      	movs	r0, #7
 8001406:	f7ff fbbd 	bl	8000b84 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800140a:	7dfb      	ldrb	r3, [r7, #23]
 800140c:	f003 0320 	and.w	r3, r3, #32
 8001410:	2b00      	cmp	r3, #0
 8001412:	bf14      	ite	ne
 8001414:	2301      	movne	r3, #1
 8001416:	2300      	moveq	r3, #0
 8001418:	b2da      	uxtb	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800141e:	7dfb      	ldrb	r3, [r7, #23]
 8001420:	f003 0310 	and.w	r3, r3, #16
 8001424:	2b00      	cmp	r3, #0
 8001426:	bf14      	ite	ne
 8001428:	2301      	movne	r3, #1
 800142a:	2300      	moveq	r3, #0
 800142c:	b2da      	uxtb	r2, r3
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 8001432:	7dfb      	ldrb	r3, [r7, #23]
 8001434:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001438:	2b00      	cmp	r3, #0
 800143a:	bf14      	ite	ne
 800143c:	2301      	movne	r3, #1
 800143e:	2300      	moveq	r3, #0
 8001440:	b2da      	uxtb	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	701a      	strb	r2, [r3, #0]
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001452:	2170      	movs	r1, #112	; 0x70
 8001454:	2007      	movs	r0, #7
 8001456:	f7ff fb95 	bl	8000b84 <NRF24_write_register>
}
 800145a:	bf00      	nop
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8001466:	2000      	movs	r0, #0
 8001468:	f7ff fafc 	bl	8000a64 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800146c:	2350      	movs	r3, #80	; 0x50
 800146e:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001470:	2373      	movs	r3, #115	; 0x73
 8001472:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001474:	1d39      	adds	r1, r7, #4
 8001476:	2364      	movs	r3, #100	; 0x64
 8001478:	2202      	movs	r2, #2
 800147a:	4805      	ldr	r0, [pc, #20]	; (8001490 <NRF24_ACTIVATE_cmd+0x30>)
 800147c:	f004 f855 	bl	800552a <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001480:	2001      	movs	r0, #1
 8001482:	f7ff faef 	bl	8000a64 <NRF24_csn>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	2000010c 	.word	0x2000010c

08001494 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001496:	b0a1      	sub	sp, #132	; 0x84
 8001498:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800149a:	f107 0308 	add.w	r3, r7, #8
 800149e:	4ab6      	ldr	r2, [pc, #728]	; (8001778 <printRadioSettings+0x2e4>)
 80014a0:	461c      	mov	r4, r3
 80014a2:	4615      	mov	r5, r2
 80014a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b0:	682b      	ldr	r3, [r5, #0]
 80014b2:	461a      	mov	r2, r3
 80014b4:	8022      	strh	r2, [r4, #0]
 80014b6:	3402      	adds	r4, #2
 80014b8:	0c1b      	lsrs	r3, r3, #16
 80014ba:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7fe fe45 	bl	8000150 <strlen>
 80014c6:	4603      	mov	r3, r0
 80014c8:	b29a      	uxth	r2, r3
 80014ca:	f107 0108 	add.w	r1, r7, #8
 80014ce:	230a      	movs	r3, #10
 80014d0:	48aa      	ldr	r0, [pc, #680]	; (800177c <printRadioSettings+0x2e8>)
 80014d2:	f005 fb80 	bl	8006bd6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f7ff fb04 	bl	8000ae4 <NRF24_read_register>
 80014dc:	4603      	mov	r3, r0
 80014de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80014e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d020      	beq.n	8001530 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80014ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014f2:	f003 0304 	and.w	r3, r3, #4
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00b      	beq.n	8001512 <printRadioSettings+0x7e>
 80014fa:	f107 0308 	add.w	r3, r7, #8
 80014fe:	4aa0      	ldr	r2, [pc, #640]	; (8001780 <printRadioSettings+0x2ec>)
 8001500:	461c      	mov	r4, r3
 8001502:	4615      	mov	r5, r2
 8001504:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001506:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001508:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800150c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001510:	e017      	b.n	8001542 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001512:	f107 0308 	add.w	r3, r7, #8
 8001516:	4a9b      	ldr	r2, [pc, #620]	; (8001784 <printRadioSettings+0x2f0>)
 8001518:	461c      	mov	r4, r3
 800151a:	4615      	mov	r5, r2
 800151c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001520:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001524:	c403      	stmia	r4!, {r0, r1}
 8001526:	8022      	strh	r2, [r4, #0]
 8001528:	3402      	adds	r4, #2
 800152a:	0c13      	lsrs	r3, r2, #16
 800152c:	7023      	strb	r3, [r4, #0]
 800152e:	e008      	b.n	8001542 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001530:	f107 0308 	add.w	r3, r7, #8
 8001534:	4a94      	ldr	r2, [pc, #592]	; (8001788 <printRadioSettings+0x2f4>)
 8001536:	461c      	mov	r4, r3
 8001538:	4615      	mov	r5, r2
 800153a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800153c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800153e:	682b      	ldr	r3, [r5, #0]
 8001540:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001542:	f107 0308 	add.w	r3, r7, #8
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fe02 	bl	8000150 <strlen>
 800154c:	4603      	mov	r3, r0
 800154e:	b29a      	uxth	r2, r3
 8001550:	f107 0108 	add.w	r1, r7, #8
 8001554:	230a      	movs	r3, #10
 8001556:	4889      	ldr	r0, [pc, #548]	; (800177c <printRadioSettings+0x2e8>)
 8001558:	f005 fb3d 	bl	8006bd6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800155c:	2001      	movs	r0, #1
 800155e:	f7ff fac1 	bl	8000ae4 <NRF24_read_register>
 8001562:	4603      	mov	r3, r0
 8001564:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001568:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800156c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001570:	2b00      	cmp	r3, #0
 8001572:	bfcc      	ite	gt
 8001574:	2301      	movgt	r3, #1
 8001576:	2300      	movle	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800157c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001580:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001584:	2b00      	cmp	r3, #0
 8001586:	bfcc      	ite	gt
 8001588:	2301      	movgt	r3, #1
 800158a:	2300      	movle	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001590:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001594:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfcc      	ite	gt
 800159c:	2301      	movgt	r3, #1
 800159e:	2300      	movle	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015a4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015a8:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bfcc      	ite	gt
 80015b0:	2301      	movgt	r3, #1
 80015b2:	2300      	movle	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015b8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015bc:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	bfcc      	ite	gt
 80015c4:	2301      	movgt	r3, #1
 80015c6:	2300      	movle	r3, #0
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015cc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015d0:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bfcc      	ite	gt
 80015d8:	2301      	movgt	r3, #1
 80015da:	2300      	movle	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f107 0008 	add.w	r0, r7, #8
 80015e2:	9303      	str	r3, [sp, #12]
 80015e4:	9402      	str	r4, [sp, #8]
 80015e6:	9101      	str	r1, [sp, #4]
 80015e8:	9200      	str	r2, [sp, #0]
 80015ea:	4633      	mov	r3, r6
 80015ec:	462a      	mov	r2, r5
 80015ee:	4967      	ldr	r1, [pc, #412]	; (800178c <printRadioSettings+0x2f8>)
 80015f0:	f005 fcec 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7fe fda9 	bl	8000150 <strlen>
 80015fe:	4603      	mov	r3, r0
 8001600:	b29a      	uxth	r2, r3
 8001602:	f107 0108 	add.w	r1, r7, #8
 8001606:	230a      	movs	r3, #10
 8001608:	485c      	ldr	r0, [pc, #368]	; (800177c <printRadioSettings+0x2e8>)
 800160a:	f005 fae4 	bl	8006bd6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800160e:	2002      	movs	r0, #2
 8001610:	f7ff fa68 	bl	8000ae4 <NRF24_read_register>
 8001614:	4603      	mov	r3, r0
 8001616:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800161a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161e:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001622:	2b00      	cmp	r3, #0
 8001624:	bfcc      	ite	gt
 8001626:	2301      	movgt	r3, #1
 8001628:	2300      	movle	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800162e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001632:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001636:	2b00      	cmp	r3, #0
 8001638:	bfcc      	ite	gt
 800163a:	2301      	movgt	r3, #1
 800163c:	2300      	movle	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001646:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800164a:	2b00      	cmp	r3, #0
 800164c:	bfcc      	ite	gt
 800164e:	2301      	movgt	r3, #1
 8001650:	2300      	movle	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001656:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800165a:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800165e:	2b00      	cmp	r3, #0
 8001660:	bfcc      	ite	gt
 8001662:	2301      	movgt	r3, #1
 8001664:	2300      	movle	r3, #0
 8001666:	b2db      	uxtb	r3, r3
 8001668:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800166a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800166e:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001672:	2b00      	cmp	r3, #0
 8001674:	bfcc      	ite	gt
 8001676:	2301      	movgt	r3, #1
 8001678:	2300      	movle	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800167e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001682:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001686:	2b00      	cmp	r3, #0
 8001688:	bfcc      	ite	gt
 800168a:	2301      	movgt	r3, #1
 800168c:	2300      	movle	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	f107 0008 	add.w	r0, r7, #8
 8001694:	9303      	str	r3, [sp, #12]
 8001696:	9402      	str	r4, [sp, #8]
 8001698:	9101      	str	r1, [sp, #4]
 800169a:	9200      	str	r2, [sp, #0]
 800169c:	4633      	mov	r3, r6
 800169e:	462a      	mov	r2, r5
 80016a0:	493b      	ldr	r1, [pc, #236]	; (8001790 <printRadioSettings+0x2fc>)
 80016a2:	f005 fc93 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016a6:	f107 0308 	add.w	r3, r7, #8
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe fd50 	bl	8000150 <strlen>
 80016b0:	4603      	mov	r3, r0
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	f107 0108 	add.w	r1, r7, #8
 80016b8:	230a      	movs	r3, #10
 80016ba:	4830      	ldr	r0, [pc, #192]	; (800177c <printRadioSettings+0x2e8>)
 80016bc:	f005 fa8b 	bl	8006bd6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 80016c0:	2003      	movs	r0, #3
 80016c2:	f7ff fa0f 	bl	8000ae4 <NRF24_read_register>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 80016d0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d4:	3302      	adds	r3, #2
 80016d6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 80016da:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	492c      	ldr	r1, [pc, #176]	; (8001794 <printRadioSettings+0x300>)
 80016e4:	4618      	mov	r0, r3
 80016e6:	f005 fc71 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ea:	f107 0308 	add.w	r3, r7, #8
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fd2e 	bl	8000150 <strlen>
 80016f4:	4603      	mov	r3, r0
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	f107 0108 	add.w	r1, r7, #8
 80016fc:	230a      	movs	r3, #10
 80016fe:	481f      	ldr	r0, [pc, #124]	; (800177c <printRadioSettings+0x2e8>)
 8001700:	f005 fa69 	bl	8006bd6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001704:	2005      	movs	r0, #5
 8001706:	f7ff f9ed 	bl	8000ae4 <NRF24_read_register>
 800170a:	4603      	mov	r3, r0
 800170c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001710:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001714:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	491e      	ldr	r1, [pc, #120]	; (8001798 <printRadioSettings+0x304>)
 800171e:	4618      	mov	r0, r3
 8001720:	f005 fc54 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe fd11 	bl	8000150 <strlen>
 800172e:	4603      	mov	r3, r0
 8001730:	b29a      	uxth	r2, r3
 8001732:	f107 0108 	add.w	r1, r7, #8
 8001736:	230a      	movs	r3, #10
 8001738:	4810      	ldr	r0, [pc, #64]	; (800177c <printRadioSettings+0x2e8>)
 800173a:	f005 fa4c 	bl	8006bd6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800173e:	2006      	movs	r0, #6
 8001740:	f7ff f9d0 	bl	8000ae4 <NRF24_read_register>
 8001744:	4603      	mov	r3, r0
 8001746:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800174a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d024      	beq.n	80017a0 <printRadioSettings+0x30c>
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <printRadioSettings+0x308>)
 800175c:	461c      	mov	r4, r3
 800175e:	4615      	mov	r5, r2
 8001760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001764:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001768:	6020      	str	r0, [r4, #0]
 800176a:	3404      	adds	r4, #4
 800176c:	8021      	strh	r1, [r4, #0]
 800176e:	3402      	adds	r4, #2
 8001770:	0c0b      	lsrs	r3, r1, #16
 8001772:	7023      	strb	r3, [r4, #0]
 8001774:	e023      	b.n	80017be <printRadioSettings+0x32a>
 8001776:	bf00      	nop
 8001778:	080077f4 	.word	0x080077f4
 800177c:	20000164 	.word	0x20000164
 8001780:	08007828 	.word	0x08007828
 8001784:	08007844 	.word	0x08007844
 8001788:	08007860 	.word	0x08007860
 800178c:	08007874 	.word	0x08007874
 8001790:	080078b8 	.word	0x080078b8
 8001794:	08007904 	.word	0x08007904
 8001798:	08007920 	.word	0x08007920
 800179c:	08007934 	.word	0x08007934
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	4a29      	ldr	r2, [pc, #164]	; (800184c <printRadioSettings+0x3b8>)
 80017a6:	461c      	mov	r4, r3
 80017a8:	4615      	mov	r5, r2
 80017aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017ae:	e895 0003 	ldmia.w	r5, {r0, r1}
 80017b2:	6020      	str	r0, [r4, #0]
 80017b4:	3404      	adds	r4, #4
 80017b6:	8021      	strh	r1, [r4, #0]
 80017b8:	3402      	adds	r4, #2
 80017ba:	0c0b      	lsrs	r3, r1, #16
 80017bc:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80017be:	f107 0308 	add.w	r3, r7, #8
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fcc4 	bl	8000150 <strlen>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	f107 0108 	add.w	r1, r7, #8
 80017d0:	230a      	movs	r3, #10
 80017d2:	481f      	ldr	r0, [pc, #124]	; (8001850 <printRadioSettings+0x3bc>)
 80017d4:	f005 f9ff 	bl	8006bd6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 80017d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017dc:	f003 0306 	and.w	r3, r3, #6
 80017e0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80017e4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017e8:	085b      	lsrs	r3, r3, #1
 80017ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80017ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <printRadioSettings+0x376>
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	4a16      	ldr	r2, [pc, #88]	; (8001854 <printRadioSettings+0x3c0>)
 80017fc:	461c      	mov	r4, r3
 80017fe:	4615      	mov	r5, r2
 8001800:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001802:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001804:	682b      	ldr	r3, [r5, #0]
 8001806:	6023      	str	r3, [r4, #0]
 8001808:	e037      	b.n	800187a <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800180a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800180e:	2b01      	cmp	r3, #1
 8001810:	d109      	bne.n	8001826 <printRadioSettings+0x392>
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4a10      	ldr	r2, [pc, #64]	; (8001858 <printRadioSettings+0x3c4>)
 8001818:	461c      	mov	r4, r3
 800181a:	4615      	mov	r5, r2
 800181c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800181e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001820:	682b      	ldr	r3, [r5, #0]
 8001822:	6023      	str	r3, [r4, #0]
 8001824:	e029      	b.n	800187a <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001826:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800182a:	2b02      	cmp	r3, #2
 800182c:	d118      	bne.n	8001860 <printRadioSettings+0x3cc>
 800182e:	f107 0308 	add.w	r3, r7, #8
 8001832:	4a0a      	ldr	r2, [pc, #40]	; (800185c <printRadioSettings+0x3c8>)
 8001834:	461c      	mov	r4, r3
 8001836:	4615      	mov	r5, r2
 8001838:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800183a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183c:	682b      	ldr	r3, [r5, #0]
 800183e:	461a      	mov	r2, r3
 8001840:	8022      	strh	r2, [r4, #0]
 8001842:	3402      	adds	r4, #2
 8001844:	0c1b      	lsrs	r3, r3, #16
 8001846:	7023      	strb	r3, [r4, #0]
 8001848:	e017      	b.n	800187a <printRadioSettings+0x3e6>
 800184a:	bf00      	nop
 800184c:	0800794c 	.word	0x0800794c
 8001850:	20000164 	.word	0x20000164
 8001854:	08007964 	.word	0x08007964
 8001858:	08007978 	.word	0x08007978
 800185c:	0800798c 	.word	0x0800798c
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001860:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001864:	2b03      	cmp	r3, #3
 8001866:	d108      	bne.n	800187a <printRadioSettings+0x3e6>
 8001868:	f107 0308 	add.w	r3, r7, #8
 800186c:	4ad7      	ldr	r2, [pc, #860]	; (8001bcc <printRadioSettings+0x738>)
 800186e:	461c      	mov	r4, r3
 8001870:	4615      	mov	r5, r2
 8001872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001876:	682b      	ldr	r3, [r5, #0]
 8001878:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800187a:	f107 0308 	add.w	r3, r7, #8
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fc66 	bl	8000150 <strlen>
 8001884:	4603      	mov	r3, r0
 8001886:	b29a      	uxth	r2, r3
 8001888:	f107 0108 	add.w	r1, r7, #8
 800188c:	230a      	movs	r3, #10
 800188e:	48d0      	ldr	r0, [pc, #832]	; (8001bd0 <printRadioSettings+0x73c>)
 8001890:	f005 f9a1 	bl	8006bd6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001894:	463b      	mov	r3, r7
 8001896:	2205      	movs	r2, #5
 8001898:	4619      	mov	r1, r3
 800189a:	200a      	movs	r0, #10
 800189c:	f7ff f94a 	bl	8000b34 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018a0:	793b      	ldrb	r3, [r7, #4]
 80018a2:	461c      	mov	r4, r3
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	461d      	mov	r5, r3
 80018a8:	78bb      	ldrb	r3, [r7, #2]
 80018aa:	787a      	ldrb	r2, [r7, #1]
 80018ac:	7839      	ldrb	r1, [r7, #0]
 80018ae:	f107 0008 	add.w	r0, r7, #8
 80018b2:	9102      	str	r1, [sp, #8]
 80018b4:	9201      	str	r2, [sp, #4]
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	462b      	mov	r3, r5
 80018ba:	4622      	mov	r2, r4
 80018bc:	49c5      	ldr	r1, [pc, #788]	; (8001bd4 <printRadioSettings+0x740>)
 80018be:	f005 fb85 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7fe fc42 	bl	8000150 <strlen>
 80018cc:	4603      	mov	r3, r0
 80018ce:	b29a      	uxth	r2, r3
 80018d0:	f107 0108 	add.w	r1, r7, #8
 80018d4:	230a      	movs	r3, #10
 80018d6:	48be      	ldr	r0, [pc, #760]	; (8001bd0 <printRadioSettings+0x73c>)
 80018d8:	f005 f97d 	bl	8006bd6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80018dc:	463b      	mov	r3, r7
 80018de:	2205      	movs	r2, #5
 80018e0:	4619      	mov	r1, r3
 80018e2:	200b      	movs	r0, #11
 80018e4:	f7ff f926 	bl	8000b34 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018e8:	793b      	ldrb	r3, [r7, #4]
 80018ea:	461c      	mov	r4, r3
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	461d      	mov	r5, r3
 80018f0:	78bb      	ldrb	r3, [r7, #2]
 80018f2:	787a      	ldrb	r2, [r7, #1]
 80018f4:	7839      	ldrb	r1, [r7, #0]
 80018f6:	f107 0008 	add.w	r0, r7, #8
 80018fa:	9102      	str	r1, [sp, #8]
 80018fc:	9201      	str	r2, [sp, #4]
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	462b      	mov	r3, r5
 8001902:	4622      	mov	r2, r4
 8001904:	49b4      	ldr	r1, [pc, #720]	; (8001bd8 <printRadioSettings+0x744>)
 8001906:	f005 fb61 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800190a:	f107 0308 	add.w	r3, r7, #8
 800190e:	4618      	mov	r0, r3
 8001910:	f7fe fc1e 	bl	8000150 <strlen>
 8001914:	4603      	mov	r3, r0
 8001916:	b29a      	uxth	r2, r3
 8001918:	f107 0108 	add.w	r1, r7, #8
 800191c:	230a      	movs	r3, #10
 800191e:	48ac      	ldr	r0, [pc, #688]	; (8001bd0 <printRadioSettings+0x73c>)
 8001920:	f005 f959 	bl	8006bd6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001924:	463b      	mov	r3, r7
 8001926:	2201      	movs	r2, #1
 8001928:	4619      	mov	r1, r3
 800192a:	200c      	movs	r0, #12
 800192c:	f7ff f902 	bl	8000b34 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001930:	783b      	ldrb	r3, [r7, #0]
 8001932:	461a      	mov	r2, r3
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	49a8      	ldr	r1, [pc, #672]	; (8001bdc <printRadioSettings+0x748>)
 800193a:	4618      	mov	r0, r3
 800193c:	f005 fb46 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fc03 	bl	8000150 <strlen>
 800194a:	4603      	mov	r3, r0
 800194c:	b29a      	uxth	r2, r3
 800194e:	f107 0108 	add.w	r1, r7, #8
 8001952:	230a      	movs	r3, #10
 8001954:	489e      	ldr	r0, [pc, #632]	; (8001bd0 <printRadioSettings+0x73c>)
 8001956:	f005 f93e 	bl	8006bd6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800195a:	463b      	mov	r3, r7
 800195c:	2201      	movs	r2, #1
 800195e:	4619      	mov	r1, r3
 8001960:	200d      	movs	r0, #13
 8001962:	f7ff f8e7 	bl	8000b34 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001966:	783b      	ldrb	r3, [r7, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	499c      	ldr	r1, [pc, #624]	; (8001be0 <printRadioSettings+0x74c>)
 8001970:	4618      	mov	r0, r3
 8001972:	f005 fb2b 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fbe8 	bl	8000150 <strlen>
 8001980:	4603      	mov	r3, r0
 8001982:	b29a      	uxth	r2, r3
 8001984:	f107 0108 	add.w	r1, r7, #8
 8001988:	230a      	movs	r3, #10
 800198a:	4891      	ldr	r0, [pc, #580]	; (8001bd0 <printRadioSettings+0x73c>)
 800198c:	f005 f923 	bl	8006bd6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001990:	463b      	mov	r3, r7
 8001992:	2201      	movs	r2, #1
 8001994:	4619      	mov	r1, r3
 8001996:	200e      	movs	r0, #14
 8001998:	f7ff f8cc 	bl	8000b34 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800199c:	783b      	ldrb	r3, [r7, #0]
 800199e:	461a      	mov	r2, r3
 80019a0:	f107 0308 	add.w	r3, r7, #8
 80019a4:	498f      	ldr	r1, [pc, #572]	; (8001be4 <printRadioSettings+0x750>)
 80019a6:	4618      	mov	r0, r3
 80019a8:	f005 fb10 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fbcd 	bl	8000150 <strlen>
 80019b6:	4603      	mov	r3, r0
 80019b8:	b29a      	uxth	r2, r3
 80019ba:	f107 0108 	add.w	r1, r7, #8
 80019be:	230a      	movs	r3, #10
 80019c0:	4883      	ldr	r0, [pc, #524]	; (8001bd0 <printRadioSettings+0x73c>)
 80019c2:	f005 f908 	bl	8006bd6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 80019c6:	463b      	mov	r3, r7
 80019c8:	2201      	movs	r2, #1
 80019ca:	4619      	mov	r1, r3
 80019cc:	200f      	movs	r0, #15
 80019ce:	f7ff f8b1 	bl	8000b34 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80019d2:	783b      	ldrb	r3, [r7, #0]
 80019d4:	461a      	mov	r2, r3
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	4983      	ldr	r1, [pc, #524]	; (8001be8 <printRadioSettings+0x754>)
 80019dc:	4618      	mov	r0, r3
 80019de:	f005 faf5 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019e2:	f107 0308 	add.w	r3, r7, #8
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7fe fbb2 	bl	8000150 <strlen>
 80019ec:	4603      	mov	r3, r0
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	f107 0108 	add.w	r1, r7, #8
 80019f4:	230a      	movs	r3, #10
 80019f6:	4876      	ldr	r0, [pc, #472]	; (8001bd0 <printRadioSettings+0x73c>)
 80019f8:	f005 f8ed 	bl	8006bd6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80019fc:	463b      	mov	r3, r7
 80019fe:	2205      	movs	r2, #5
 8001a00:	4619      	mov	r1, r3
 8001a02:	2010      	movs	r0, #16
 8001a04:	f7ff f896 	bl	8000b34 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001a08:	793b      	ldrb	r3, [r7, #4]
 8001a0a:	461c      	mov	r4, r3
 8001a0c:	78fb      	ldrb	r3, [r7, #3]
 8001a0e:	461d      	mov	r5, r3
 8001a10:	78bb      	ldrb	r3, [r7, #2]
 8001a12:	787a      	ldrb	r2, [r7, #1]
 8001a14:	7839      	ldrb	r1, [r7, #0]
 8001a16:	f107 0008 	add.w	r0, r7, #8
 8001a1a:	9102      	str	r1, [sp, #8]
 8001a1c:	9201      	str	r2, [sp, #4]
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	462b      	mov	r3, r5
 8001a22:	4622      	mov	r2, r4
 8001a24:	4971      	ldr	r1, [pc, #452]	; (8001bec <printRadioSettings+0x758>)
 8001a26:	f005 fad1 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a2a:	f107 0308 	add.w	r3, r7, #8
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f7fe fb8e 	bl	8000150 <strlen>
 8001a34:	4603      	mov	r3, r0
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	f107 0108 	add.w	r1, r7, #8
 8001a3c:	230a      	movs	r3, #10
 8001a3e:	4864      	ldr	r0, [pc, #400]	; (8001bd0 <printRadioSettings+0x73c>)
 8001a40:	f005 f8c9 	bl	8006bd6 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a44:	2011      	movs	r0, #17
 8001a46:	f7ff f84d 	bl	8000ae4 <NRF24_read_register>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a58:	f107 0308 	add.w	r3, r7, #8
 8001a5c:	4964      	ldr	r1, [pc, #400]	; (8001bf0 <printRadioSettings+0x75c>)
 8001a5e:	4618      	mov	r0, r3
 8001a60:	f005 fab4 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a64:	f107 0308 	add.w	r3, r7, #8
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fb71 	bl	8000150 <strlen>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	f107 0108 	add.w	r1, r7, #8
 8001a76:	230a      	movs	r3, #10
 8001a78:	4855      	ldr	r0, [pc, #340]	; (8001bd0 <printRadioSettings+0x73c>)
 8001a7a:	f005 f8ac 	bl	8006bd6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001a7e:	2012      	movs	r0, #18
 8001a80:	f7ff f830 	bl	8000ae4 <NRF24_read_register>
 8001a84:	4603      	mov	r3, r0
 8001a86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a8a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a92:	f107 0308 	add.w	r3, r7, #8
 8001a96:	4957      	ldr	r1, [pc, #348]	; (8001bf4 <printRadioSettings+0x760>)
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f005 fa97 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a9e:	f107 0308 	add.w	r3, r7, #8
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fb54 	bl	8000150 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	f107 0108 	add.w	r1, r7, #8
 8001ab0:	230a      	movs	r3, #10
 8001ab2:	4847      	ldr	r0, [pc, #284]	; (8001bd0 <printRadioSettings+0x73c>)
 8001ab4:	f005 f88f 	bl	8006bd6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001ab8:	2013      	movs	r0, #19
 8001aba:	f7ff f813 	bl	8000ae4 <NRF24_read_register>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ac4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ac8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001acc:	f107 0308 	add.w	r3, r7, #8
 8001ad0:	4949      	ldr	r1, [pc, #292]	; (8001bf8 <printRadioSettings+0x764>)
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f005 fa7a 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ad8:	f107 0308 	add.w	r3, r7, #8
 8001adc:	4618      	mov	r0, r3
 8001ade:	f7fe fb37 	bl	8000150 <strlen>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	f107 0108 	add.w	r1, r7, #8
 8001aea:	230a      	movs	r3, #10
 8001aec:	4838      	ldr	r0, [pc, #224]	; (8001bd0 <printRadioSettings+0x73c>)
 8001aee:	f005 f872 	bl	8006bd6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001af2:	2014      	movs	r0, #20
 8001af4:	f7fe fff6 	bl	8000ae4 <NRF24_read_register>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001afe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b06:	f107 0308 	add.w	r3, r7, #8
 8001b0a:	493c      	ldr	r1, [pc, #240]	; (8001bfc <printRadioSettings+0x768>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f005 fa5d 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7fe fb1a 	bl	8000150 <strlen>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	b29a      	uxth	r2, r3
 8001b20:	f107 0108 	add.w	r1, r7, #8
 8001b24:	230a      	movs	r3, #10
 8001b26:	482a      	ldr	r0, [pc, #168]	; (8001bd0 <printRadioSettings+0x73c>)
 8001b28:	f005 f855 	bl	8006bd6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001b2c:	2015      	movs	r0, #21
 8001b2e:	f7fe ffd9 	bl	8000ae4 <NRF24_read_register>
 8001b32:	4603      	mov	r3, r0
 8001b34:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b3c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	492e      	ldr	r1, [pc, #184]	; (8001c00 <printRadioSettings+0x76c>)
 8001b46:	4618      	mov	r0, r3
 8001b48:	f005 fa40 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fafd 	bl	8000150 <strlen>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	f107 0108 	add.w	r1, r7, #8
 8001b5e:	230a      	movs	r3, #10
 8001b60:	481b      	ldr	r0, [pc, #108]	; (8001bd0 <printRadioSettings+0x73c>)
 8001b62:	f005 f838 	bl	8006bd6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001b66:	2016      	movs	r0, #22
 8001b68:	f7fe ffbc 	bl	8000ae4 <NRF24_read_register>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	4921      	ldr	r1, [pc, #132]	; (8001c04 <printRadioSettings+0x770>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f005 fa23 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b86:	f107 0308 	add.w	r3, r7, #8
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7fe fae0 	bl	8000150 <strlen>
 8001b90:	4603      	mov	r3, r0
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	f107 0108 	add.w	r1, r7, #8
 8001b98:	230a      	movs	r3, #10
 8001b9a:	480d      	ldr	r0, [pc, #52]	; (8001bd0 <printRadioSettings+0x73c>)
 8001b9c:	f005 f81b 	bl	8006bd6 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001ba0:	201c      	movs	r0, #28
 8001ba2:	f7fe ff9f 	bl	8000ae4 <NRF24_read_register>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bb0:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	bfcc      	ite	gt
 8001bb8:	2301      	movgt	r3, #1
 8001bba:	2300      	movle	r3, #0
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bc4:	f003 0302 	and.w	r3, r3, #2
 8001bc8:	e01e      	b.n	8001c08 <printRadioSettings+0x774>
 8001bca:	bf00      	nop
 8001bcc:	080079a0 	.word	0x080079a0
 8001bd0:	20000164 	.word	0x20000164
 8001bd4:	080079b4 	.word	0x080079b4
 8001bd8:	080079e4 	.word	0x080079e4
 8001bdc:	08007a14 	.word	0x08007a14
 8001be0:	08007a3c 	.word	0x08007a3c
 8001be4:	08007a64 	.word	0x08007a64
 8001be8:	08007a8c 	.word	0x08007a8c
 8001bec:	08007ab4 	.word	0x08007ab4
 8001bf0:	08007ae0 	.word	0x08007ae0
 8001bf4:	08007afc 	.word	0x08007afc
 8001bf8:	08007b18 	.word	0x08007b18
 8001bfc:	08007b34 	.word	0x08007b34
 8001c00:	08007b50 	.word	0x08007b50
 8001c04:	08007b6c 	.word	0x08007b6c
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bfcc      	ite	gt
 8001c0c:	2301      	movgt	r3, #1
 8001c0e:	2300      	movle	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c18:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bfcc      	ite	gt
 8001c20:	2301      	movgt	r3, #1
 8001c22:	2300      	movle	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c2c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	bfcc      	ite	gt
 8001c34:	2301      	movgt	r3, #1
 8001c36:	2300      	movle	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c40:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bfcc      	ite	gt
 8001c48:	2301      	movgt	r3, #1
 8001c4a:	2300      	movle	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c50:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c54:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bfcc      	ite	gt
 8001c5c:	2301      	movgt	r3, #1
 8001c5e:	2300      	movle	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	f107 0008 	add.w	r0, r7, #8
 8001c66:	9303      	str	r3, [sp, #12]
 8001c68:	9402      	str	r4, [sp, #8]
 8001c6a:	9101      	str	r1, [sp, #4]
 8001c6c:	9200      	str	r2, [sp, #0]
 8001c6e:	4633      	mov	r3, r6
 8001c70:	462a      	mov	r2, r5
 8001c72:	494a      	ldr	r1, [pc, #296]	; (8001d9c <printRadioSettings+0x908>)
 8001c74:	f005 f9aa 	bl	8006fcc <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c78:	f107 0308 	add.w	r3, r7, #8
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7fe fa67 	bl	8000150 <strlen>
 8001c82:	4603      	mov	r3, r0
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	f107 0108 	add.w	r1, r7, #8
 8001c8a:	230a      	movs	r3, #10
 8001c8c:	4844      	ldr	r0, [pc, #272]	; (8001da0 <printRadioSettings+0x90c>)
 8001c8e:	f004 ffa2 	bl	8006bd6 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001c92:	201d      	movs	r0, #29
 8001c94:	f7fe ff26 	bl	8000ae4 <NRF24_read_register>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001c9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d00c      	beq.n	8001cc4 <printRadioSettings+0x830>
 8001caa:	f107 0308 	add.w	r3, r7, #8
 8001cae:	4a3d      	ldr	r2, [pc, #244]	; (8001da4 <printRadioSettings+0x910>)
 8001cb0:	461c      	mov	r4, r3
 8001cb2:	4615      	mov	r5, r2
 8001cb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cb8:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cbc:	6020      	str	r0, [r4, #0]
 8001cbe:	3404      	adds	r4, #4
 8001cc0:	8021      	strh	r1, [r4, #0]
 8001cc2:	e00e      	b.n	8001ce2 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001cc4:	f107 0308 	add.w	r3, r7, #8
 8001cc8:	4a37      	ldr	r2, [pc, #220]	; (8001da8 <printRadioSettings+0x914>)
 8001cca:	461c      	mov	r4, r3
 8001ccc:	4615      	mov	r5, r2
 8001cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cd2:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cd6:	6020      	str	r0, [r4, #0]
 8001cd8:	3404      	adds	r4, #4
 8001cda:	8021      	strh	r1, [r4, #0]
 8001cdc:	3402      	adds	r4, #2
 8001cde:	0c0b      	lsrs	r3, r1, #16
 8001ce0:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ce2:	f107 0308 	add.w	r3, r7, #8
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7fe fa32 	bl	8000150 <strlen>
 8001cec:	4603      	mov	r3, r0
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	f107 0108 	add.w	r1, r7, #8
 8001cf4:	230a      	movs	r3, #10
 8001cf6:	482a      	ldr	r0, [pc, #168]	; (8001da0 <printRadioSettings+0x90c>)
 8001cf8:	f004 ff6d 	bl	8006bd6 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001cfc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d00b      	beq.n	8001d20 <printRadioSettings+0x88c>
 8001d08:	f107 0308 	add.w	r3, r7, #8
 8001d0c:	4a27      	ldr	r2, [pc, #156]	; (8001dac <printRadioSettings+0x918>)
 8001d0e:	461c      	mov	r4, r3
 8001d10:	4615      	mov	r5, r2
 8001d12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d16:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d1a:	c403      	stmia	r4!, {r0, r1}
 8001d1c:	8022      	strh	r2, [r4, #0]
 8001d1e:	e00d      	b.n	8001d3c <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001d20:	f107 0308 	add.w	r3, r7, #8
 8001d24:	4a22      	ldr	r2, [pc, #136]	; (8001db0 <printRadioSettings+0x91c>)
 8001d26:	461c      	mov	r4, r3
 8001d28:	4615      	mov	r5, r2
 8001d2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d32:	c403      	stmia	r4!, {r0, r1}
 8001d34:	8022      	strh	r2, [r4, #0]
 8001d36:	3402      	adds	r4, #2
 8001d38:	0c13      	lsrs	r3, r2, #16
 8001d3a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe fa05 	bl	8000150 <strlen>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	f107 0108 	add.w	r1, r7, #8
 8001d4e:	230a      	movs	r3, #10
 8001d50:	4813      	ldr	r0, [pc, #76]	; (8001da0 <printRadioSettings+0x90c>)
 8001d52:	f004 ff40 	bl	8006bd6 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001d56:	f107 0308 	add.w	r3, r7, #8
 8001d5a:	4a16      	ldr	r2, [pc, #88]	; (8001db4 <printRadioSettings+0x920>)
 8001d5c:	461c      	mov	r4, r3
 8001d5e:	4615      	mov	r5, r2
 8001d60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d64:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d66:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d6c:	682b      	ldr	r3, [r5, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	8022      	strh	r2, [r4, #0]
 8001d72:	3402      	adds	r4, #2
 8001d74:	0c1b      	lsrs	r3, r3, #16
 8001d76:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d78:	f107 0308 	add.w	r3, r7, #8
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe f9e7 	bl	8000150 <strlen>
 8001d82:	4603      	mov	r3, r0
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	f107 0108 	add.w	r1, r7, #8
 8001d8a:	230a      	movs	r3, #10
 8001d8c:	4804      	ldr	r0, [pc, #16]	; (8001da0 <printRadioSettings+0x90c>)
 8001d8e:	f004 ff22 	bl	8006bd6 <HAL_UART_Transmit>
}
 8001d92:	bf00      	nop
 8001d94:	3774      	adds	r7, #116	; 0x74
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	08007b88 	.word	0x08007b88
 8001da0:	20000164 	.word	0x20000164
 8001da4:	08007bd4 	.word	0x08007bd4
 8001da8:	08007bec 	.word	0x08007bec
 8001dac:	08007c04 	.word	0x08007c04
 8001db0:	08007c20 	.word	0x08007c20
 8001db4:	080077f4 	.word	0x080077f4

08001db8 <MPU6050_Init>:
static int16_t GyroRW[3];

//Fucntion Definitions
//1- i2c Handler 
void MPU6050_Init(I2C_HandleTypeDef *I2Chnd)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	//Copy I2C CubeMX handle to local library
	memcpy(&i2cHandler, I2Chnd, sizeof(*I2Chnd));
 8001dc0:	2254      	movs	r2, #84	; 0x54
 8001dc2:	6879      	ldr	r1, [r7, #4]
 8001dc4:	4803      	ldr	r0, [pc, #12]	; (8001dd4 <MPU6050_Init+0x1c>)
 8001dc6:	f005 f8ed 	bl	8006fa4 <memcpy>
}
 8001dca:	bf00      	nop
 8001dcc:	3708      	adds	r7, #8
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200001a4 	.word	0x200001a4

08001dd8 <I2C_Read>:

//2- i2c Read
void I2C_Read(uint8_t ADDR, uint8_t *i2cBif, uint8_t NofData)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	4603      	mov	r3, r0
 8001de0:	6039      	str	r1, [r7, #0]
 8001de2:	71fb      	strb	r3, [r7, #7]
 8001de4:	4613      	mov	r3, r2
 8001de6:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cBuf[2];
	uint8_t MPUADDR;
	//Need to Shift address to make it proper to i2c operation
	MPUADDR = (MPU_ADDR<<1);
 8001de8:	23d0      	movs	r3, #208	; 0xd0
 8001dea:	73fb      	strb	r3, [r7, #15]
	i2cBuf[0] = ADDR;
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cBuf, 1, 10);
 8001df0:	7bfb      	ldrb	r3, [r7, #15]
 8001df2:	b299      	uxth	r1, r3
 8001df4:	f107 020c 	add.w	r2, r7, #12
 8001df8:	230a      	movs	r3, #10
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	4809      	ldr	r0, [pc, #36]	; (8001e24 <I2C_Read+0x4c>)
 8001e00:	f002 f82c 	bl	8003e5c <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cHandler, MPUADDR, i2cBif, NofData, 100);
 8001e04:	7bfb      	ldrb	r3, [r7, #15]
 8001e06:	b299      	uxth	r1, r3
 8001e08:	79bb      	ldrb	r3, [r7, #6]
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	2364      	movs	r3, #100	; 0x64
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	4803      	ldr	r0, [pc, #12]	; (8001e24 <I2C_Read+0x4c>)
 8001e16:	f002 f91f 	bl	8004058 <HAL_I2C_Master_Receive>
}
 8001e1a:	bf00      	nop
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	200001a4 	.word	0x200001a4

08001e28 <I2C_Write8>:

//3- i2c Write
void I2C_Write8(uint8_t ADDR, uint8_t data)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b086      	sub	sp, #24
 8001e2c:	af02      	add	r7, sp, #8
 8001e2e:	4603      	mov	r3, r0
 8001e30:	460a      	mov	r2, r1
 8001e32:	71fb      	strb	r3, [r7, #7]
 8001e34:	4613      	mov	r3, r2
 8001e36:	71bb      	strb	r3, [r7, #6]
	uint8_t i2cData[2];
	i2cData[0] = ADDR;
 8001e38:	79fb      	ldrb	r3, [r7, #7]
 8001e3a:	733b      	strb	r3, [r7, #12]
	i2cData[1] = data;
 8001e3c:	79bb      	ldrb	r3, [r7, #6]
 8001e3e:	737b      	strb	r3, [r7, #13]
	uint8_t MPUADDR = (MPU_ADDR<<1);
 8001e40:	23d0      	movs	r3, #208	; 0xd0
 8001e42:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(&i2cHandler, MPUADDR, i2cData, 2,100);
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	b299      	uxth	r1, r3
 8001e48:	f107 020c 	add.w	r2, r7, #12
 8001e4c:	2364      	movs	r3, #100	; 0x64
 8001e4e:	9300      	str	r3, [sp, #0]
 8001e50:	2302      	movs	r3, #2
 8001e52:	4803      	ldr	r0, [pc, #12]	; (8001e60 <I2C_Write8+0x38>)
 8001e54:	f002 f802 	bl	8003e5c <HAL_I2C_Master_Transmit>
}
 8001e58:	bf00      	nop
 8001e5a:	3710      	adds	r7, #16
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	200001a4 	.word	0x200001a4

08001e64 <MPU6050_Config>:

//4- MPU6050 Initialaztion Configuration 
void MPU6050_Config(MPU_ConfigTypeDef *config)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	uint8_t Buffer = 0;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	73fb      	strb	r3, [r7, #15]
	//Clock Source 
	//Reset Device
	I2C_Write8(PWR_MAGT_1_REG, 0x80);
 8001e70:	2180      	movs	r1, #128	; 0x80
 8001e72:	206b      	movs	r0, #107	; 0x6b
 8001e74:	f7ff ffd8 	bl	8001e28 <I2C_Write8>
	HAL_Delay(100);
 8001e78:	2064      	movs	r0, #100	; 0x64
 8001e7a:	f001 fa03 	bl	8003284 <HAL_Delay>
	Buffer = config ->ClockSource & 0x07; //change the 7th bits of register
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	73fb      	strb	r3, [r7, #15]
	Buffer |= (config ->Sleep_Mode_Bit << 6) &0x40; // change only the 7th bit in the register
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	791b      	ldrb	r3, [r3, #4]
 8001e8c:	019b      	lsls	r3, r3, #6
 8001e8e:	b25b      	sxtb	r3, r3
 8001e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e94:	b25a      	sxtb	r2, r3
 8001e96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e9a:	4313      	orrs	r3, r2
 8001e9c:	b25b      	sxtb	r3, r3
 8001e9e:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(PWR_MAGT_1_REG, Buffer);
 8001ea0:	7bfb      	ldrb	r3, [r7, #15]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	206b      	movs	r0, #107	; 0x6b
 8001ea6:	f7ff ffbf 	bl	8001e28 <I2C_Write8>
	HAL_Delay(100); // should wait 10ms after changeing the clock setting.
 8001eaa:	2064      	movs	r0, #100	; 0x64
 8001eac:	f001 f9ea 	bl	8003284 <HAL_Delay>
	
	//Set the Digital Low Pass Filter
	Buffer = 0;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
	Buffer = config->CONFIG_DLPF & 0x07;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	78db      	ldrb	r3, [r3, #3]
 8001eb8:	f003 0307 	and.w	r3, r3, #7
 8001ebc:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(CONFIG_REG, Buffer);
 8001ebe:	7bfb      	ldrb	r3, [r7, #15]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	201a      	movs	r0, #26
 8001ec4:	f7ff ffb0 	bl	8001e28 <I2C_Write8>
	
	//Select the Gyroscope Full Scale Range
	Buffer = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Gyro_Full_Scale << 3) & 0x18;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 0318 	and.w	r3, r3, #24
 8001ed8:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(GYRO_CONFIG_REG, Buffer);
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
 8001edc:	4619      	mov	r1, r3
 8001ede:	201b      	movs	r0, #27
 8001ee0:	f7ff ffa2 	bl	8001e28 <I2C_Write8>
	
	//Select the Accelerometer Full Scale Range 
	Buffer = 0; 
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	73fb      	strb	r3, [r7, #15]
	Buffer = (config->Accel_Full_Scale << 3) & 0x18;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	789b      	ldrb	r3, [r3, #2]
 8001eec:	00db      	lsls	r3, r3, #3
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	f003 0318 	and.w	r3, r3, #24
 8001ef4:	73fb      	strb	r3, [r7, #15]
	I2C_Write8(ACCEL_CONFIG_REG, Buffer);
 8001ef6:	7bfb      	ldrb	r3, [r7, #15]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	201c      	movs	r0, #28
 8001efc:	f7ff ff94 	bl	8001e28 <I2C_Write8>
	//Set SRD To Default
	MPU6050_Set_SMPRT_DIV(0x04);
 8001f00:	2004      	movs	r0, #4
 8001f02:	f000 f857 	bl	8001fb4 <MPU6050_Set_SMPRT_DIV>
	
	
	//Accelerometer Scaling Factor, Set the Accelerometer and Gyroscope Scaling Factor
	switch (config->Accel_Full_Scale)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	789b      	ldrb	r3, [r3, #2]
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	d81a      	bhi.n	8001f44 <MPU6050_Config+0xe0>
 8001f0e:	a201      	add	r2, pc, #4	; (adr r2, 8001f14 <MPU6050_Config+0xb0>)
 8001f10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f14:	08001f25 	.word	0x08001f25
 8001f18:	08001f2d 	.word	0x08001f2d
 8001f1c:	08001f35 	.word	0x08001f35
 8001f20:	08001f3d 	.word	0x08001f3d
	{
		case AFS_SEL_2g:
			accelScalingFactor = (2000.0f/32768.0f);
 8001f24:	4b1a      	ldr	r3, [pc, #104]	; (8001f90 <MPU6050_Config+0x12c>)
 8001f26:	4a1b      	ldr	r2, [pc, #108]	; (8001f94 <MPU6050_Config+0x130>)
 8001f28:	601a      	str	r2, [r3, #0]
			break;
 8001f2a:	e00c      	b.n	8001f46 <MPU6050_Config+0xe2>
		
		case AFS_SEL_4g:
			accelScalingFactor = (4000.0f/32768.0f);
 8001f2c:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <MPU6050_Config+0x12c>)
 8001f2e:	4a1a      	ldr	r2, [pc, #104]	; (8001f98 <MPU6050_Config+0x134>)
 8001f30:	601a      	str	r2, [r3, #0]
				break;
 8001f32:	e008      	b.n	8001f46 <MPU6050_Config+0xe2>
		
		case AFS_SEL_8g:
			accelScalingFactor = (8000.0f/32768.0f);
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <MPU6050_Config+0x12c>)
 8001f36:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <MPU6050_Config+0x138>)
 8001f38:	601a      	str	r2, [r3, #0]
			break;
 8001f3a:	e004      	b.n	8001f46 <MPU6050_Config+0xe2>
		
		case AFS_SEL_16g:
			accelScalingFactor = (16000.0f/32768.0f);
 8001f3c:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <MPU6050_Config+0x12c>)
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <MPU6050_Config+0x13c>)
 8001f40:	601a      	str	r2, [r3, #0]
			break;
 8001f42:	e000      	b.n	8001f46 <MPU6050_Config+0xe2>
		
		default:
			break;
 8001f44:	bf00      	nop
	}
	//Gyroscope Scaling Factor 
	switch (config->Gyro_Full_Scale)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	785b      	ldrb	r3, [r3, #1]
 8001f4a:	2b03      	cmp	r3, #3
 8001f4c:	d81a      	bhi.n	8001f84 <MPU6050_Config+0x120>
 8001f4e:	a201      	add	r2, pc, #4	; (adr r2, 8001f54 <MPU6050_Config+0xf0>)
 8001f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f6d 	.word	0x08001f6d
 8001f5c:	08001f75 	.word	0x08001f75
 8001f60:	08001f7d 	.word	0x08001f7d
	{
		case FS_SEL_250:
			gyroScalingFactor = 250.0f/32768.0f;
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <MPU6050_Config+0x140>)
 8001f66:	4a10      	ldr	r2, [pc, #64]	; (8001fa8 <MPU6050_Config+0x144>)
 8001f68:	601a      	str	r2, [r3, #0]
			break;
 8001f6a:	e00c      	b.n	8001f86 <MPU6050_Config+0x122>
		
		case FS_SEL_500:
				gyroScalingFactor = 500.0f/32768.0f;
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <MPU6050_Config+0x140>)
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <MPU6050_Config+0x148>)
 8001f70:	601a      	str	r2, [r3, #0]
				break;
 8001f72:	e008      	b.n	8001f86 <MPU6050_Config+0x122>
		
		case FS_SEL_1000:
			gyroScalingFactor = 1000.0f/32768.0f;
 8001f74:	4b0b      	ldr	r3, [pc, #44]	; (8001fa4 <MPU6050_Config+0x140>)
 8001f76:	4a0e      	ldr	r2, [pc, #56]	; (8001fb0 <MPU6050_Config+0x14c>)
 8001f78:	601a      	str	r2, [r3, #0]
			break;
 8001f7a:	e004      	b.n	8001f86 <MPU6050_Config+0x122>
		
		case FS_SEL_2000:
			gyroScalingFactor = 2000.0f/32768.0f;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <MPU6050_Config+0x140>)
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <MPU6050_Config+0x130>)
 8001f80:	601a      	str	r2, [r3, #0]
			break;
 8001f82:	e000      	b.n	8001f86 <MPU6050_Config+0x122>
		
		default:
			break;
 8001f84:	bf00      	nop
	}
	
}
 8001f86:	bf00      	nop
 8001f88:	3710      	adds	r7, #16
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	200001f8 	.word	0x200001f8
 8001f94:	3d7a0000 	.word	0x3d7a0000
 8001f98:	3dfa0000 	.word	0x3dfa0000
 8001f9c:	3e7a0000 	.word	0x3e7a0000
 8001fa0:	3efa0000 	.word	0x3efa0000
 8001fa4:	200001fc 	.word	0x200001fc
 8001fa8:	3bfa0000 	.word	0x3bfa0000
 8001fac:	3c7a0000 	.word	0x3c7a0000
 8001fb0:	3cfa0000 	.word	0x3cfa0000

08001fb4 <MPU6050_Set_SMPRT_DIV>:
	return Buffer;
}

//6- Set Sample Rate Divider
void MPU6050_Set_SMPRT_DIV(uint8_t SMPRTvalue)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
	I2C_Write8(SMPLRT_DIV_REG, SMPRTvalue);
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4619      	mov	r1, r3
 8001fc2:	2019      	movs	r0, #25
 8001fc4:	f7ff ff30 	bl	8001e28 <I2C_Write8>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <MPU6050_Get_Accel_RawData>:
	
}

//9- Get Accel Raw Data
void MPU6050_Get_Accel_RawData(RawData_Def *rawDef)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
	uint8_t i2cBuf[2];
	uint8_t AcceArr[6], GyroArr[6];
	
	//i2cBuf[1] = 0;

	I2C_Read(INT_STATUS_REG, &i2cBuf[1],1);
 8001fd8:	f107 031c 	add.w	r3, r7, #28
 8001fdc:	3301      	adds	r3, #1
 8001fde:	2201      	movs	r2, #1
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	203a      	movs	r0, #58	; 0x3a
 8001fe4:	f7ff fef8 	bl	8001dd8 <I2C_Read>
	if((i2cBuf[1]&&0x01))
 8001fe8:	7f7b      	ldrb	r3, [r7, #29]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d04f      	beq.n	800208e <MPU6050_Get_Accel_RawData+0xbe>
	{
		I2C_Read(ACCEL_XOUT_H_REG, AcceArr,6);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	2206      	movs	r2, #6
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	203b      	movs	r0, #59	; 0x3b
 8001ff8:	f7ff feee 	bl	8001dd8 <I2C_Read>
		
		//Accel Raw Data
		rawDef->x = ((AcceArr[0]<<8) + AcceArr[1]); // x-Axis
 8001ffc:	7d3b      	ldrb	r3, [r7, #20]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	b29a      	uxth	r2, r3
 8002004:	7d7b      	ldrb	r3, [r7, #21]
 8002006:	b29b      	uxth	r3, r3
 8002008:	4413      	add	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	b21a      	sxth	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	801a      	strh	r2, [r3, #0]
		rawDef->y = ((AcceArr[2]<<8) + AcceArr[3]); // y-Axis
 8002012:	7dbb      	ldrb	r3, [r7, #22]
 8002014:	b29b      	uxth	r3, r3
 8002016:	021b      	lsls	r3, r3, #8
 8002018:	b29a      	uxth	r2, r3
 800201a:	7dfb      	ldrb	r3, [r7, #23]
 800201c:	b29b      	uxth	r3, r3
 800201e:	4413      	add	r3, r2
 8002020:	b29b      	uxth	r3, r3
 8002022:	b21a      	sxth	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	805a      	strh	r2, [r3, #2]
		rawDef->z = ((AcceArr[4]<<8) + AcceArr[5]); // z-Axis
 8002028:	7e3b      	ldrb	r3, [r7, #24]
 800202a:	b29b      	uxth	r3, r3
 800202c:	021b      	lsls	r3, r3, #8
 800202e:	b29a      	uxth	r2, r3
 8002030:	7e7b      	ldrb	r3, [r7, #25]
 8002032:	b29b      	uxth	r3, r3
 8002034:	4413      	add	r3, r2
 8002036:	b29b      	uxth	r3, r3
 8002038:	b21a      	sxth	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	809a      	strh	r2, [r3, #4]
		//Gyro Raw Data
		I2C_Read(GYRO_XOUT_H_REG, GyroArr,6);
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	2206      	movs	r2, #6
 8002044:	4619      	mov	r1, r3
 8002046:	2043      	movs	r0, #67	; 0x43
 8002048:	f7ff fec6 	bl	8001dd8 <I2C_Read>
		GyroRW[0] = ((GyroArr[0]<<8) + GyroArr[1]);
 800204c:	7b3b      	ldrb	r3, [r7, #12]
 800204e:	b29b      	uxth	r3, r3
 8002050:	021b      	lsls	r3, r3, #8
 8002052:	b29a      	uxth	r2, r3
 8002054:	7b7b      	ldrb	r3, [r7, #13]
 8002056:	b29b      	uxth	r3, r3
 8002058:	4413      	add	r3, r2
 800205a:	b29b      	uxth	r3, r3
 800205c:	b21a      	sxth	r2, r3
 800205e:	4b0e      	ldr	r3, [pc, #56]	; (8002098 <MPU6050_Get_Accel_RawData+0xc8>)
 8002060:	801a      	strh	r2, [r3, #0]
		GyroRW[1] = (GyroArr[2]<<8) + GyroArr[3];
 8002062:	7bbb      	ldrb	r3, [r7, #14]
 8002064:	b29b      	uxth	r3, r3
 8002066:	021b      	lsls	r3, r3, #8
 8002068:	b29a      	uxth	r2, r3
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	b29b      	uxth	r3, r3
 800206e:	4413      	add	r3, r2
 8002070:	b29b      	uxth	r3, r3
 8002072:	b21a      	sxth	r2, r3
 8002074:	4b08      	ldr	r3, [pc, #32]	; (8002098 <MPU6050_Get_Accel_RawData+0xc8>)
 8002076:	805a      	strh	r2, [r3, #2]
		GyroRW[2] = ((GyroArr[4]<<8) + GyroArr[5]);
 8002078:	7c3b      	ldrb	r3, [r7, #16]
 800207a:	b29b      	uxth	r3, r3
 800207c:	021b      	lsls	r3, r3, #8
 800207e:	b29a      	uxth	r2, r3
 8002080:	7c7b      	ldrb	r3, [r7, #17]
 8002082:	b29b      	uxth	r3, r3
 8002084:	4413      	add	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	b21a      	sxth	r2, r3
 800208a:	4b03      	ldr	r3, [pc, #12]	; (8002098 <MPU6050_Get_Accel_RawData+0xc8>)
 800208c:	809a      	strh	r2, [r3, #4]
			GyroRW[0] = 9;
			GyroRW[1] = 9;
			GyroRW[2] = 9;
			*/
	}
}
 800208e:	bf00      	nop
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000200 	.word	0x20000200

0800209c <MPU6050_Get_Gyro_RawData>:
	CaliDef->y = (AccelScaled.y) - A_Y_Bias;// y-Axis
	CaliDef->z = (AccelScaled.z) - A_Z_Bias;// z-Axis
}
//12- Get Gyro Raw Data
void MPU6050_Get_Gyro_RawData(RawData_Def *rawDef)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
	
	//Accel Raw Data
	rawDef->x = GyroRW[0];
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <MPU6050_Get_Gyro_RawData+0x30>)
 80020a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	801a      	strh	r2, [r3, #0]
	rawDef->y = GyroRW[1];
 80020ae:	4b07      	ldr	r3, [pc, #28]	; (80020cc <MPU6050_Get_Gyro_RawData+0x30>)
 80020b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	805a      	strh	r2, [r3, #2]
	rawDef->z = GyroRW[2];
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <MPU6050_Get_Gyro_RawData+0x30>)
 80020ba:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	809a      	strh	r2, [r3, #4]
	
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr
 80020cc:	20000200 	.word	0x20000200

080020d0 <MotorSetValue>:
int Counter = 0;
int mode = MODE_ACCELERATION_BURST;


void MotorSetValue(int16_t Left, int16_t Right)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	460a      	mov	r2, r1
 80020da:	80fb      	strh	r3, [r7, #6]
 80020dc:	4613      	mov	r3, r2
 80020de:	80bb      	strh	r3, [r7, #4]
	if (Right > 0) {
 80020e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	dd0a      	ble.n	80020fe <MotorSetValue+0x2e>
		SetPwm(Right, 1);
 80020e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020ec:	2101      	movs	r1, #1
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f82e 	bl	8002150 <SetPwm>
		SetPwm(0, 2);
 80020f4:	2102      	movs	r1, #2
 80020f6:	2000      	movs	r0, #0
 80020f8:	f000 f82a 	bl	8002150 <SetPwm>
 80020fc:	e00a      	b.n	8002114 <MotorSetValue+0x44>
	} else {
		SetPwm(0, 1);
 80020fe:	2101      	movs	r1, #1
 8002100:	2000      	movs	r0, #0
 8002102:	f000 f825 	bl	8002150 <SetPwm>
		SetPwm(-1 * Right, 2);
 8002106:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800210a:	425b      	negs	r3, r3
 800210c:	2102      	movs	r1, #2
 800210e:	4618      	mov	r0, r3
 8002110:	f000 f81e 	bl	8002150 <SetPwm>
	}
	if (Left > 0) {
 8002114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002118:	2b00      	cmp	r3, #0
 800211a:	dd0a      	ble.n	8002132 <MotorSetValue+0x62>
		SetPwm(Left, 4);
 800211c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002120:	2104      	movs	r1, #4
 8002122:	4618      	mov	r0, r3
 8002124:	f000 f814 	bl	8002150 <SetPwm>
		SetPwm(0, 3);
 8002128:	2103      	movs	r1, #3
 800212a:	2000      	movs	r0, #0
 800212c:	f000 f810 	bl	8002150 <SetPwm>
		SetPwm(0, 4);
		SetPwm(-1 * Left, 3);
	}


}
 8002130:	e00a      	b.n	8002148 <MotorSetValue+0x78>
		SetPwm(0, 4);
 8002132:	2104      	movs	r1, #4
 8002134:	2000      	movs	r0, #0
 8002136:	f000 f80b 	bl	8002150 <SetPwm>
		SetPwm(-1 * Left, 3);
 800213a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800213e:	425b      	negs	r3, r3
 8002140:	2103      	movs	r1, #3
 8002142:	4618      	mov	r0, r3
 8002144:	f000 f804 	bl	8002150 <SetPwm>
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <SetPwm>:

void SetPwm(uint16_t Value, uint16_t Channel) {
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	4603      	mov	r3, r0
 8002158:	460a      	mov	r2, r1
 800215a:	80fb      	strh	r3, [r7, #6]
 800215c:	4613      	mov	r3, r2
 800215e:	80bb      	strh	r3, [r7, #4]
    TIM_OC_InitTypeDef sConfigOC;

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002160:	2360      	movs	r3, #96	; 0x60
 8002162:	60fb      	str	r3, [r7, #12]
    sConfigOC.Pulse = Value;
 8002164:	88fb      	ldrh	r3, [r7, #6]
 8002166:	613b      	str	r3, [r7, #16]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]

    switch(Channel) {
 8002170:	88bb      	ldrh	r3, [r7, #4]
 8002172:	3b01      	subs	r3, #1
 8002174:	2b03      	cmp	r3, #3
 8002176:	d83b      	bhi.n	80021f0 <SetPwm+0xa0>
 8002178:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <SetPwm+0x30>)
 800217a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800217e:	bf00      	nop
 8002180:	08002191 	.word	0x08002191
 8002184:	080021a9 	.word	0x080021a9
 8002188:	080021c1 	.word	0x080021c1
 800218c:	080021d9 	.word	0x080021d9
    case 1: {
    	HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1);
 8002190:	f107 030c 	add.w	r3, r7, #12
 8002194:	2200      	movs	r2, #0
 8002196:	4619      	mov	r1, r3
 8002198:	4818      	ldr	r0, [pc, #96]	; (80021fc <SetPwm+0xac>)
 800219a:	f004 f833 	bl	8006204 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800219e:	2100      	movs	r1, #0
 80021a0:	4816      	ldr	r0, [pc, #88]	; (80021fc <SetPwm+0xac>)
 80021a2:	f003 fef5 	bl	8005f90 <HAL_TIM_PWM_Start>
		break;
 80021a6:	e024      	b.n	80021f2 <SetPwm+0xa2>
    }
    case 2: {
		HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2);
 80021a8:	f107 030c 	add.w	r3, r7, #12
 80021ac:	2204      	movs	r2, #4
 80021ae:	4619      	mov	r1, r3
 80021b0:	4812      	ldr	r0, [pc, #72]	; (80021fc <SetPwm+0xac>)
 80021b2:	f004 f827 	bl	8006204 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80021b6:	2104      	movs	r1, #4
 80021b8:	4810      	ldr	r0, [pc, #64]	; (80021fc <SetPwm+0xac>)
 80021ba:	f003 fee9 	bl	8005f90 <HAL_TIM_PWM_Start>
		break;
 80021be:	e018      	b.n	80021f2 <SetPwm+0xa2>
	}
    case 3: {
		HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3);
 80021c0:	f107 030c 	add.w	r3, r7, #12
 80021c4:	2208      	movs	r2, #8
 80021c6:	4619      	mov	r1, r3
 80021c8:	480c      	ldr	r0, [pc, #48]	; (80021fc <SetPwm+0xac>)
 80021ca:	f004 f81b 	bl	8006204 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80021ce:	2108      	movs	r1, #8
 80021d0:	480a      	ldr	r0, [pc, #40]	; (80021fc <SetPwm+0xac>)
 80021d2:	f003 fedd 	bl	8005f90 <HAL_TIM_PWM_Start>
		break;
 80021d6:	e00c      	b.n	80021f2 <SetPwm+0xa2>
	}
    case 4: {
		HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4);
 80021d8:	f107 030c 	add.w	r3, r7, #12
 80021dc:	220c      	movs	r2, #12
 80021de:	4619      	mov	r1, r3
 80021e0:	4806      	ldr	r0, [pc, #24]	; (80021fc <SetPwm+0xac>)
 80021e2:	f004 f80f 	bl	8006204 <HAL_TIM_PWM_ConfigChannel>
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80021e6:	210c      	movs	r1, #12
 80021e8:	4804      	ldr	r0, [pc, #16]	; (80021fc <SetPwm+0xac>)
 80021ea:	f003 fed1 	bl	8005f90 <HAL_TIM_PWM_Start>
		break;
 80021ee:	e000      	b.n	80021f2 <SetPwm+0xa2>
	}
    default : {
    	// Blad XDD
    	break;
 80021f0:	bf00      	nop
    }
    }

}
 80021f2:	bf00      	nop
 80021f4:	3728      	adds	r7, #40	; 0x28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200002f8 	.word	0x200002f8

08002200 <HAL_TIM_PeriodElapsedCallback>:
double MapValue2(double input, double input_start,double input_end,double output_start,double output_end) {
	double slope = 1.0 * (output_end - output_start) / (input_end - input_start);
	return output_start + slope * (input - input_start);
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim3.Instance){
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d102      	bne.n	800221a <HAL_TIM_PeriodElapsedCallback+0x1a>
		Flag = 1;
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002216:	2201      	movs	r2, #1
 8002218:	601a      	str	r2, [r3, #0]
	}
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	2000038c 	.word	0x2000038c
 8002228:	20000208 	.word	0x20000208

0800222c <SendReturn>:
	if (a > 0) {
		CDC_Transmit_FS(in, a);
	}
}

void SendReturn(short val){
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	80fb      	strh	r3, [r7, #6]
	Msg[0] = OK;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <SendReturn+0x44>)
 8002238:	22ff      	movs	r2, #255	; 0xff
 800223a:	701a      	strb	r2, [r3, #0]
	Msg[1] = val;
 800223c:	88fb      	ldrh	r3, [r7, #6]
 800223e:	b2da      	uxtb	r2, r3
 8002240:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <SendReturn+0x44>)
 8002242:	705a      	strb	r2, [r3, #1]
	Msg[2] = val >> 8;
 8002244:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002248:	121b      	asrs	r3, r3, #8
 800224a:	b21b      	sxth	r3, r3
 800224c:	b2da      	uxtb	r2, r3
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <SendReturn+0x44>)
 8002250:	709a      	strb	r2, [r3, #2]
	if (NRF24_write(Msg, 3))
 8002252:	2103      	movs	r1, #3
 8002254:	4806      	ldr	r0, [pc, #24]	; (8002270 <SendReturn+0x44>)
 8002256:	f7fe fe3b 	bl	8000ed0 <NRF24_write>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <SendReturn+0x3c>
	  {
		  //HAL_Delay(1);
		  NRF24_read(RF_RxData, 16);
 8002260:	2110      	movs	r1, #16
 8002262:	4804      	ldr	r0, [pc, #16]	; (8002274 <SendReturn+0x48>)
 8002264:	f7fe fe88 	bl	8000f78 <NRF24_read>
	  }
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	20000008 	.word	0x20000008
 8002274:	200003fc 	.word	0x200003fc

08002278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b09f      	sub	sp, #124	; 0x7c
 800227c:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800227e:	f000 ff9f 	bl	80031c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002282:	f000 fa67 	bl	8002754 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002286:	f000 fca1 	bl	8002bcc <MX_GPIO_Init>
  MX_ADC1_Init();
 800228a:	f000 fabf 	bl	800280c <MX_ADC1_Init>
  MX_I2C2_Init();
 800228e:	f000 fafb 	bl	8002888 <MX_I2C2_Init>
  MX_SPI1_Init();
 8002292:	f000 fb27 	bl	80028e4 <MX_SPI1_Init>
  MX_TIM4_Init();
 8002296:	f000 fbf5 	bl	8002a84 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 800229a:	f000 fc6d 	bl	8002b78 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800229e:	f000 fb57 	bl	8002950 <MX_TIM2_Init>
  MX_TIM3_Init();
 80022a2:	f000 fba1 	bl	80029e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Timer
  HAL_TIM_Base_Start_IT(&htim3);
 80022a6:	48b7      	ldr	r0, [pc, #732]	; (8002584 <main+0x30c>)
 80022a8:	f003 fe23 	bl	8005ef2 <HAL_TIM_Base_Start_IT>

  // NRF
  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 80022ac:	4cb6      	ldr	r4, [pc, #728]	; (8002588 <main+0x310>)
 80022ae:	4668      	mov	r0, sp
 80022b0:	1d23      	adds	r3, r4, #4
 80022b2:	2254      	movs	r2, #84	; 0x54
 80022b4:	4619      	mov	r1, r3
 80022b6:	f004 fe75 	bl	8006fa4 <memcpy>
 80022ba:	6823      	ldr	r3, [r4, #0]
 80022bc:	2202      	movs	r2, #2
 80022be:	2101      	movs	r1, #1
 80022c0:	48b2      	ldr	r0, [pc, #712]	; (800258c <main+0x314>)
 80022c2:	f7fe fd19 	bl	8000cf8 <NRF24_begin>
  NRF24_stopListening();
 80022c6:	f7fe fdf7 	bl	8000eb8 <NRF24_stopListening>
  NRF24_openWritingPipe(PipeAddres);
 80022ca:	4bb1      	ldr	r3, [pc, #708]	; (8002590 <main+0x318>)
 80022cc:	cb18      	ldmia	r3, {r3, r4}
 80022ce:	4618      	mov	r0, r3
 80022d0:	4621      	mov	r1, r4
 80022d2:	f7fe fe71 	bl	8000fb8 <NRF24_openWritingPipe>
  NRF24_setAutoAck(true);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f7fe ff62 	bl	80011a0 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80022dc:	2034      	movs	r0, #52	; 0x34
 80022de:	f7fe feaa 	bl	8001036 <NRF24_setChannel>
  NRF24_setPayloadSize(13);
 80022e2:	200d      	movs	r0, #13
 80022e4:	f7fe febc 	bl	8001060 <NRF24_setPayloadSize>
  NRF24_enableDynamicPayloads();
 80022e8:	f7fe ff10 	bl	800110c <NRF24_enableDynamicPayloads>
  NRF24_enableAckPayload();
 80022ec:	f7fe fee0 	bl	80010b0 <NRF24_enableAckPayload>

  // MPU
  __HAL_RCC_I2C2_FORCE_RESET();
 80022f0:	4ba8      	ldr	r3, [pc, #672]	; (8002594 <main+0x31c>)
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	4aa7      	ldr	r2, [pc, #668]	; (8002594 <main+0x31c>)
 80022f6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022fa:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 80022fc:	4ba5      	ldr	r3, [pc, #660]	; (8002594 <main+0x31c>)
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	4aa4      	ldr	r2, [pc, #656]	; (8002594 <main+0x31c>)
 8002302:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002306:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 8002308:	f000 fabe 	bl	8002888 <MX_I2C2_Init>
  __HAL_RCC_I2C2_FORCE_RESET();
 800230c:	4ba1      	ldr	r3, [pc, #644]	; (8002594 <main+0x31c>)
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	4aa0      	ldr	r2, [pc, #640]	; (8002594 <main+0x31c>)
 8002312:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002316:	6113      	str	r3, [r2, #16]
  __HAL_RCC_I2C2_RELEASE_RESET();
 8002318:	4b9e      	ldr	r3, [pc, #632]	; (8002594 <main+0x31c>)
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	4a9d      	ldr	r2, [pc, #628]	; (8002594 <main+0x31c>)
 800231e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002322:	6113      	str	r3, [r2, #16]
  MX_I2C2_Init();
 8002324:	f000 fab0 	bl	8002888 <MX_I2C2_Init>
  Init(&hi2c2, &htim2);	// NIC NIE MOZE BYC PO TYM, URUCHAMIA SIE ZEGAR DO CALKOWANIA
 8002328:	499b      	ldr	r1, [pc, #620]	; (8002598 <main+0x320>)
 800232a:	489c      	ldr	r0, [pc, #624]	; (800259c <main+0x324>)
 800232c:	f7fe f8d2 	bl	80004d4 <Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Update();
 8002330:	f7fe f940 	bl	80005b4 <Update>
	  switch (mode){
 8002334:	4b9a      	ldr	r3, [pc, #616]	; (80025a0 <main+0x328>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2ba1      	cmp	r3, #161	; 0xa1
 800233a:	d008      	beq.n	800234e <main+0xd6>
 800233c:	2ba2      	cmp	r3, #162	; 0xa2
 800233e:	d00b      	beq.n	8002358 <main+0xe0>
 8002340:	2ba0      	cmp	r3, #160	; 0xa0
 8002342:	d10e      	bne.n	8002362 <main+0xea>
	  case MODE_ACCELERATION_BURST: {
		  GetAcceleration(Msg, 1);
 8002344:	2101      	movs	r1, #1
 8002346:	4897      	ldr	r0, [pc, #604]	; (80025a4 <main+0x32c>)
 8002348:	f7fe fabe 	bl	80008c8 <GetAcceleration>
		  break;
 800234c:	e009      	b.n	8002362 <main+0xea>
	  }
	  case MODE_VELOCITY_BURST: {
		  GetVelocity(Msg, 1);
 800234e:	2101      	movs	r1, #1
 8002350:	4894      	ldr	r0, [pc, #592]	; (80025a4 <main+0x32c>)
 8002352:	f7fe faeb 	bl	800092c <GetVelocity>
		  break;
 8002356:	e004      	b.n	8002362 <main+0xea>
	  }
	  case MODE_DISTANCE_BURST: {
		  GetDistance(Msg, 1);
 8002358:	2101      	movs	r1, #1
 800235a:	4892      	ldr	r0, [pc, #584]	; (80025a4 <main+0x32c>)
 800235c:	f7fe fb24 	bl	80009a8 <GetDistance>
		  break;
 8002360:	bf00      	nop
	  }
	  }

	  Msg[0] = FUNC_ACCEL_GYRO_DATA;
 8002362:	4b90      	ldr	r3, [pc, #576]	; (80025a4 <main+0x32c>)
 8002364:	2280      	movs	r2, #128	; 0x80
 8002366:	701a      	strb	r2, [r3, #0]

	  if (NRF24_write(Msg, 13))
 8002368:	210d      	movs	r1, #13
 800236a:	488e      	ldr	r0, [pc, #568]	; (80025a4 <main+0x32c>)
 800236c:	f7fe fdb0 	bl	8000ed0 <NRF24_write>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <main+0x106>
	  {
		  //HAL_Delay(1);
		  NRF24_read(RF_RxData, 16);
 8002376:	2110      	movs	r1, #16
 8002378:	488b      	ldr	r0, [pc, #556]	; (80025a8 <main+0x330>)
 800237a:	f7fe fdfd 	bl	8000f78 <NRF24_read>
	  }
	  //Counter ++;
	  HAL_Delay(1);
 800237e:	2001      	movs	r0, #1
 8002380:	f000 ff80 	bl	8003284 <HAL_Delay>
	  switch (RF_RxData[0]) {
 8002384:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <main+0x330>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	3b81      	subs	r3, #129	; 0x81
 800238a:	2b42      	cmp	r3, #66	; 0x42
 800238c:	f200 81c0 	bhi.w	8002710 <main+0x498>
 8002390:	a201      	add	r2, pc, #4	; (adr r2, 8002398 <main+0x120>)
 8002392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002396:	bf00      	nop
 8002398:	080024a5 	.word	0x080024a5
 800239c:	08002711 	.word	0x08002711
 80023a0:	08002711 	.word	0x08002711
 80023a4:	08002711 	.word	0x08002711
 80023a8:	08002711 	.word	0x08002711
 80023ac:	08002711 	.word	0x08002711
 80023b0:	08002711 	.word	0x08002711
 80023b4:	08002711 	.word	0x08002711
 80023b8:	08002711 	.word	0x08002711
 80023bc:	08002711 	.word	0x08002711
 80023c0:	08002711 	.word	0x08002711
 80023c4:	08002711 	.word	0x08002711
 80023c8:	08002711 	.word	0x08002711
 80023cc:	08002711 	.word	0x08002711
 80023d0:	08002711 	.word	0x08002711
 80023d4:	08002711 	.word	0x08002711
 80023d8:	08002711 	.word	0x08002711
 80023dc:	08002711 	.word	0x08002711
 80023e0:	08002711 	.word	0x08002711
 80023e4:	08002711 	.word	0x08002711
 80023e8:	08002711 	.word	0x08002711
 80023ec:	08002711 	.word	0x08002711
 80023f0:	08002711 	.word	0x08002711
 80023f4:	08002711 	.word	0x08002711
 80023f8:	08002711 	.word	0x08002711
 80023fc:	08002711 	.word	0x08002711
 8002400:	08002711 	.word	0x08002711
 8002404:	08002711 	.word	0x08002711
 8002408:	08002711 	.word	0x08002711
 800240c:	08002711 	.word	0x08002711
 8002410:	08002711 	.word	0x08002711
 8002414:	08002501 	.word	0x08002501
 8002418:	08002509 	.word	0x08002509
 800241c:	08002511 	.word	0x08002511
 8002420:	08002711 	.word	0x08002711
 8002424:	08002711 	.word	0x08002711
 8002428:	08002711 	.word	0x08002711
 800242c:	08002711 	.word	0x08002711
 8002430:	08002711 	.word	0x08002711
 8002434:	08002711 	.word	0x08002711
 8002438:	08002711 	.word	0x08002711
 800243c:	08002711 	.word	0x08002711
 8002440:	08002711 	.word	0x08002711
 8002444:	08002711 	.word	0x08002711
 8002448:	08002711 	.word	0x08002711
 800244c:	08002711 	.word	0x08002711
 8002450:	08002711 	.word	0x08002711
 8002454:	08002711 	.word	0x08002711
 8002458:	08002711 	.word	0x08002711
 800245c:	08002711 	.word	0x08002711
 8002460:	08002711 	.word	0x08002711
 8002464:	08002711 	.word	0x08002711
 8002468:	08002711 	.word	0x08002711
 800246c:	08002711 	.word	0x08002711
 8002470:	08002711 	.word	0x08002711
 8002474:	08002711 	.word	0x08002711
 8002478:	08002711 	.word	0x08002711
 800247c:	08002711 	.word	0x08002711
 8002480:	08002711 	.word	0x08002711
 8002484:	08002711 	.word	0x08002711
 8002488:	08002711 	.word	0x08002711
 800248c:	08002711 	.word	0x08002711
 8002490:	08002711 	.word	0x08002711
 8002494:	080024ef 	.word	0x080024ef
 8002498:	08002711 	.word	0x08002711
 800249c:	08002519 	.word	0x08002519
 80024a0:	08002637 	.word	0x08002637
	  case FUNC_JOYSTICK_DATA: {
		  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
		  int16_t Forward = (unsigned char)RF_RxData[1] | (((uint16_t)RF_RxData[2]) << 8);
 80024a4:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <main+0x330>)
 80024a6:	785b      	ldrb	r3, [r3, #1]
 80024a8:	b21a      	sxth	r2, r3
 80024aa:	4b3f      	ldr	r3, [pc, #252]	; (80025a8 <main+0x330>)
 80024ac:	789b      	ldrb	r3, [r3, #2]
 80024ae:	021b      	lsls	r3, r3, #8
 80024b0:	b21b      	sxth	r3, r3
 80024b2:	4313      	orrs	r3, r2
 80024b4:	813b      	strh	r3, [r7, #8]
		  int16_t Direction = (unsigned char)RF_RxData[3] | (((uint16_t)RF_RxData[4]) << 8);
 80024b6:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <main+0x330>)
 80024b8:	78db      	ldrb	r3, [r3, #3]
 80024ba:	b21a      	sxth	r2, r3
 80024bc:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <main+0x330>)
 80024be:	791b      	ldrb	r3, [r3, #4]
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	b21b      	sxth	r3, r3
 80024c4:	4313      	orrs	r3, r2
 80024c6:	80fb      	strh	r3, [r7, #6]
		  int16_t Left = Forward + Direction;
 80024c8:	893a      	ldrh	r2, [r7, #8]
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	4413      	add	r3, r2
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	80bb      	strh	r3, [r7, #4]
		  int16_t Right = Forward - Direction;
 80024d2:	893a      	ldrh	r2, [r7, #8]
 80024d4:	88fb      	ldrh	r3, [r7, #6]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	b29b      	uxth	r3, r3
 80024da:	807b      	strh	r3, [r7, #2]

		  MotorSetValue(Left, Right);
 80024dc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80024e0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024e4:	4611      	mov	r1, r2
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7ff fdf2 	bl	80020d0 <MotorSetValue>
		  break;
 80024ec:	e110      	b.n	8002710 <main+0x498>
	  }
	  case PROG_CALLIBRATE: {
		  Callibrate(RF_RxData[1]);
 80024ee:	4b2e      	ldr	r3, [pc, #184]	; (80025a8 <main+0x330>)
 80024f0:	785b      	ldrb	r3, [r3, #1]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f948 	bl	8000788 <Callibrate>
		  SendReturn(0);
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff fe97 	bl	800222c <SendReturn>
		  break;
 80024fe:	e107      	b.n	8002710 <main+0x498>
	  }
	  case MODE_ACCELERATION_BURST: {
		  mode = MODE_ACCELERATION_BURST;
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <main+0x328>)
 8002502:	22a0      	movs	r2, #160	; 0xa0
 8002504:	601a      	str	r2, [r3, #0]
		  break;
 8002506:	e103      	b.n	8002710 <main+0x498>
	  }
	  case MODE_VELOCITY_BURST: {
		  mode = MODE_VELOCITY_BURST;
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <main+0x328>)
 800250a:	22a1      	movs	r2, #161	; 0xa1
 800250c:	601a      	str	r2, [r3, #0]
		  break;
 800250e:	e0ff      	b.n	8002710 <main+0x498>
	  }
	  case MODE_DISTANCE_BURST: {
		  mode = MODE_DISTANCE_BURST;
 8002510:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <main+0x328>)
 8002512:	22a2      	movs	r2, #162	; 0xa2
 8002514:	601a      	str	r2, [r3, #0]
		  break;
 8002516:	e0fb      	b.n	8002710 <main+0x498>
	  }
	  case PROG_MOVE_BREAK: {
		  // PROG - START - ACCEL - MAX - DIST - STOP
		  short SSpeed = (unsigned char)RF_RxData[1] | (((uint16_t)RF_RxData[2]) << 8);
 8002518:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <main+0x330>)
 800251a:	785b      	ldrb	r3, [r3, #1]
 800251c:	b21a      	sxth	r2, r3
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <main+0x330>)
 8002520:	789b      	ldrb	r3, [r3, #2]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	b21b      	sxth	r3, r3
 8002526:	4313      	orrs	r3, r2
 8002528:	83fb      	strh	r3, [r7, #30]
		  short ASpeed = (unsigned char)RF_RxData[3] | (((uint16_t)RF_RxData[4]) << 8);
 800252a:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <main+0x330>)
 800252c:	78db      	ldrb	r3, [r3, #3]
 800252e:	b21a      	sxth	r2, r3
 8002530:	4b1d      	ldr	r3, [pc, #116]	; (80025a8 <main+0x330>)
 8002532:	791b      	ldrb	r3, [r3, #4]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	b21b      	sxth	r3, r3
 8002538:	4313      	orrs	r3, r2
 800253a:	823b      	strh	r3, [r7, #16]
		  short MSpeed = (unsigned char)RF_RxData[5] | (((uint16_t)RF_RxData[6]) << 8);
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <main+0x330>)
 800253e:	795b      	ldrb	r3, [r3, #5]
 8002540:	b21a      	sxth	r2, r3
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <main+0x330>)
 8002544:	799b      	ldrb	r3, [r3, #6]
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	b21b      	sxth	r3, r3
 800254a:	4313      	orrs	r3, r2
 800254c:	81fb      	strh	r3, [r7, #14]
		  short Dist = (unsigned char)RF_RxData[7] | (((uint16_t)RF_RxData[8]) << 8);
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <main+0x330>)
 8002550:	79db      	ldrb	r3, [r3, #7]
 8002552:	b21a      	sxth	r2, r3
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <main+0x330>)
 8002556:	7a1b      	ldrb	r3, [r3, #8]
 8002558:	021b      	lsls	r3, r3, #8
 800255a:	b21b      	sxth	r3, r3
 800255c:	4313      	orrs	r3, r2
 800255e:	81bb      	strh	r3, [r7, #12]
		  short ReturnDist = 0;
 8002560:	2300      	movs	r3, #0
 8002562:	83bb      	strh	r3, [r7, #28]
		  short Stop = (unsigned char)RF_RxData[9] | (((uint16_t)RF_RxData[10]) << 8);
 8002564:	4b10      	ldr	r3, [pc, #64]	; (80025a8 <main+0x330>)
 8002566:	7a5b      	ldrb	r3, [r3, #9]
 8002568:	b21a      	sxth	r2, r3
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <main+0x330>)
 800256c:	7a9b      	ldrb	r3, [r3, #10]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	b21b      	sxth	r3, r3
 8002572:	4313      	orrs	r3, r2
 8002574:	817b      	strh	r3, [r7, #10]
		  Callibrate(255);
 8002576:	20ff      	movs	r0, #255	; 0xff
 8002578:	f7fe f906 	bl	8000788 <Callibrate>
		  Update();
 800257c:	f7fe f81a 	bl	80005b4 <Update>
		  while(ReturnDist < Dist){
 8002580:	e049      	b.n	8002616 <main+0x39e>
 8002582:	bf00      	nop
 8002584:	2000038c 	.word	0x2000038c
 8002588:	2000045c 	.word	0x2000045c
 800258c:	40010c00 	.word	0x40010c00
 8002590:	20000000 	.word	0x20000000
 8002594:	40021000 	.word	0x40021000
 8002598:	200004b4 	.word	0x200004b4
 800259c:	20000338 	.word	0x20000338
 80025a0:	20000028 	.word	0x20000028
 80025a4:	20000008 	.word	0x20000008
 80025a8:	200003fc 	.word	0x200003fc
			  if (SSpeed <= MSpeed) {
 80025ac:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80025b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	dc0c      	bgt.n	80025d2 <main+0x35a>
				  MotorSetValue(SSpeed, SSpeed);
 80025b8:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 80025bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80025c0:	4611      	mov	r1, r2
 80025c2:	4618      	mov	r0, r3
 80025c4:	f7ff fd84 	bl	80020d0 <MotorSetValue>
				  SSpeed += ASpeed;
 80025c8:	8bfa      	ldrh	r2, [r7, #30]
 80025ca:	8a3b      	ldrh	r3, [r7, #16]
 80025cc:	4413      	add	r3, r2
 80025ce:	b29b      	uxth	r3, r3
 80025d0:	83fb      	strh	r3, [r7, #30]
			  }
			  ReturnDist = Distance[0]/1000000000000;
 80025d2:	4b59      	ldr	r3, [pc, #356]	; (8002738 <main+0x4c0>)
 80025d4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025d8:	a355      	add	r3, pc, #340	; (adr r3, 8002730 <main+0x4b8>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	f7fd fdbf 	bl	8000160 <__aeabi_ldivmod>
 80025e2:	4603      	mov	r3, r0
 80025e4:	460c      	mov	r4, r1
 80025e6:	83bb      	strh	r3, [r7, #28]
			  Update();
 80025e8:	f7fd ffe4 	bl	80005b4 <Update>
			  if ((Acceleration[0] > Stop) || (Acceleration[1] > Stop) || (Acceleration[2] > Stop)){
 80025ec:	4b53      	ldr	r3, [pc, #332]	; (800273c <main+0x4c4>)
 80025ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025f2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	db13      	blt.n	8002622 <main+0x3aa>
 80025fa:	4b50      	ldr	r3, [pc, #320]	; (800273c <main+0x4c4>)
 80025fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002600:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002604:	429a      	cmp	r2, r3
 8002606:	db0c      	blt.n	8002622 <main+0x3aa>
 8002608:	4b4c      	ldr	r3, [pc, #304]	; (800273c <main+0x4c4>)
 800260a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800260e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002612:	429a      	cmp	r2, r3
 8002614:	db05      	blt.n	8002622 <main+0x3aa>
		  while(ReturnDist < Dist){
 8002616:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800261a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800261e:	429a      	cmp	r2, r3
 8002620:	dbc4      	blt.n	80025ac <main+0x334>
				  break;	// Uderzenie
			  }
		  }
		  MotorSetValue(0, 0);
 8002622:	2100      	movs	r1, #0
 8002624:	2000      	movs	r0, #0
 8002626:	f7ff fd53 	bl	80020d0 <MotorSetValue>
		  SendReturn(ReturnDist);
 800262a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff fdfc 	bl	800222c <SendReturn>
		  break;
 8002634:	e06c      	b.n	8002710 <main+0x498>
	  }
	  case PROG_ROTATE: {
		  // PROG - START - ACCEL - MAX - ANGLE
		  short SSpeed = (unsigned char)RF_RxData[1] | (((uint16_t)RF_RxData[2]) << 8);
 8002636:	4b42      	ldr	r3, [pc, #264]	; (8002740 <main+0x4c8>)
 8002638:	785b      	ldrb	r3, [r3, #1]
 800263a:	b21a      	sxth	r2, r3
 800263c:	4b40      	ldr	r3, [pc, #256]	; (8002740 <main+0x4c8>)
 800263e:	789b      	ldrb	r3, [r3, #2]
 8002640:	021b      	lsls	r3, r3, #8
 8002642:	b21b      	sxth	r3, r3
 8002644:	4313      	orrs	r3, r2
 8002646:	837b      	strh	r3, [r7, #26]
		  short ASpeed = (unsigned char)RF_RxData[3] | (((uint16_t)RF_RxData[4]) << 8);
 8002648:	4b3d      	ldr	r3, [pc, #244]	; (8002740 <main+0x4c8>)
 800264a:	78db      	ldrb	r3, [r3, #3]
 800264c:	b21a      	sxth	r2, r3
 800264e:	4b3c      	ldr	r3, [pc, #240]	; (8002740 <main+0x4c8>)
 8002650:	791b      	ldrb	r3, [r3, #4]
 8002652:	021b      	lsls	r3, r3, #8
 8002654:	b21b      	sxth	r3, r3
 8002656:	4313      	orrs	r3, r2
 8002658:	82fb      	strh	r3, [r7, #22]
		  short MSpeed = (unsigned char)RF_RxData[5] | (((uint16_t)RF_RxData[6]) << 8);
 800265a:	4b39      	ldr	r3, [pc, #228]	; (8002740 <main+0x4c8>)
 800265c:	795b      	ldrb	r3, [r3, #5]
 800265e:	b21a      	sxth	r2, r3
 8002660:	4b37      	ldr	r3, [pc, #220]	; (8002740 <main+0x4c8>)
 8002662:	799b      	ldrb	r3, [r3, #6]
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	b21b      	sxth	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	82bb      	strh	r3, [r7, #20]
		  short Angle = (unsigned char)RF_RxData[7] | (((uint16_t)RF_RxData[8]) << 8);
 800266c:	4b34      	ldr	r3, [pc, #208]	; (8002740 <main+0x4c8>)
 800266e:	79db      	ldrb	r3, [r3, #7]
 8002670:	b21a      	sxth	r2, r3
 8002672:	4b33      	ldr	r3, [pc, #204]	; (8002740 <main+0x4c8>)
 8002674:	7a1b      	ldrb	r3, [r3, #8]
 8002676:	021b      	lsls	r3, r3, #8
 8002678:	b21b      	sxth	r3, r3
 800267a:	4313      	orrs	r3, r2
 800267c:	827b      	strh	r3, [r7, #18]
		  short ReturnAngle = 0;
 800267e:	2300      	movs	r3, #0
 8002680:	833b      	strh	r3, [r7, #24]
		  Callibrate(255);
 8002682:	20ff      	movs	r0, #255	; 0xff
 8002684:	f7fe f880 	bl	8000788 <Callibrate>
		  Update();
 8002688:	f7fd ff94 	bl	80005b4 <Update>
		  while(ReturnAngle < Angle){
 800268c:	e030      	b.n	80026f0 <main+0x478>
			  if (SSpeed <= MSpeed) {
 800268e:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8002692:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002696:	429a      	cmp	r2, r3
 8002698:	dc1d      	bgt.n	80026d6 <main+0x45e>
				  if (Angle > 0) MotorSetValue(-SSpeed, SSpeed);
 800269a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	dd0a      	ble.n	80026b8 <main+0x440>
 80026a2:	8b7b      	ldrh	r3, [r7, #26]
 80026a4:	425b      	negs	r3, r3
 80026a6:	b29b      	uxth	r3, r3
 80026a8:	b21b      	sxth	r3, r3
 80026aa:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80026ae:	4611      	mov	r1, r2
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fd0d 	bl	80020d0 <MotorSetValue>
 80026b6:	e009      	b.n	80026cc <main+0x454>
				  else MotorSetValue(SSpeed, -SSpeed);
 80026b8:	8b7b      	ldrh	r3, [r7, #26]
 80026ba:	425b      	negs	r3, r3
 80026bc:	b29b      	uxth	r3, r3
 80026be:	b21a      	sxth	r2, r3
 80026c0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fd02 	bl	80020d0 <MotorSetValue>
				  SSpeed += ASpeed;
 80026cc:	8b7a      	ldrh	r2, [r7, #26]
 80026ce:	8afb      	ldrh	r3, [r7, #22]
 80026d0:	4413      	add	r3, r2
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	837b      	strh	r3, [r7, #26]
			  }
			  ReturnAngle = Velocity[5]/1000000;
 80026d6:	4b1b      	ldr	r3, [pc, #108]	; (8002744 <main+0x4cc>)
 80026d8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80026dc:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <main+0x4d0>)
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	f7fd fd3d 	bl	8000160 <__aeabi_ldivmod>
 80026e6:	4603      	mov	r3, r0
 80026e8:	460c      	mov	r4, r1
 80026ea:	833b      	strh	r3, [r7, #24]
			  Update();
 80026ec:	f7fd ff62 	bl	80005b4 <Update>
		  while(ReturnAngle < Angle){
 80026f0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80026f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	dbc8      	blt.n	800268e <main+0x416>
		  }
		  MotorSetValue(0, 0);
 80026fc:	2100      	movs	r1, #0
 80026fe:	2000      	movs	r0, #0
 8002700:	f7ff fce6 	bl	80020d0 <MotorSetValue>
		  SendReturn(ReturnAngle);
 8002704:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff fd8f 	bl	800222c <SendReturn>
		  break;
 800270e:	bf00      	nop
	  }
	  }

	  if (Flag == 1) {
 8002710:	4b0e      	ldr	r3, [pc, #56]	; (800274c <main+0x4d4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	f47f ae0b 	bne.w	8002330 <main+0xb8>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800271a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800271e:	480c      	ldr	r0, [pc, #48]	; (8002750 <main+0x4d8>)
 8002720:	f001 fa5c 	bl	8003bdc <HAL_GPIO_TogglePin>
		  //char c[3] = {'<', '-'};
		  //SendInt(Counter);
		  //Serial_Send(c, 2);
		  //Counter = 0;
		  Flag = 0;
 8002724:	4b09      	ldr	r3, [pc, #36]	; (800274c <main+0x4d4>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
	  Update();
 800272a:	e601      	b.n	8002330 <main+0xb8>
 800272c:	f3af 8000 	nop.w
 8002730:	d4a51000 	.word	0xd4a51000
 8002734:	000000e8 	.word	0x000000e8
 8002738:	20000218 	.word	0x20000218
 800273c:	20000290 	.word	0x20000290
 8002740:	200003fc 	.word	0x200003fc
 8002744:	200002a8 	.word	0x200002a8
 8002748:	000f4240 	.word	0x000f4240
 800274c:	20000208 	.word	0x20000208
 8002750:	40011000 	.word	0x40011000

08002754 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b094      	sub	sp, #80	; 0x50
 8002758:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800275a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800275e:	2228      	movs	r2, #40	; 0x28
 8002760:	2100      	movs	r1, #0
 8002762:	4618      	mov	r0, r3
 8002764:	f004 fc29 	bl	8006fba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002784:	2301      	movs	r3, #1
 8002786:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800278e:	2300      	movs	r3, #0
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002792:	2301      	movs	r3, #1
 8002794:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002796:	2302      	movs	r3, #2
 8002798:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800279a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800279e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80027a0:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80027a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80027aa:	4618      	mov	r0, r3
 80027ac:	f002 f98a 	bl	8004ac4 <HAL_RCC_OscConfig>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80027b6:	f000 fa75 	bl	8002ca4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ba:	230f      	movs	r3, #15
 80027bc:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027be:	2302      	movs	r3, #2
 80027c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027c2:	2300      	movs	r3, #0
 80027c4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027ca:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	2102      	movs	r1, #2
 80027d6:	4618      	mov	r0, r3
 80027d8:	f002 fbf4 	bl	8004fc4 <HAL_RCC_ClockConfig>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 80027e2:	f000 fa5f 	bl	8002ca4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80027e6:	2302      	movs	r3, #2
 80027e8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80027ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027ee:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027f0:	1d3b      	adds	r3, r7, #4
 80027f2:	4618      	mov	r0, r3
 80027f4:	f002 fd82 	bl	80052fc <HAL_RCCEx_PeriphCLKConfig>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d001      	beq.n	8002802 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80027fe:	f000 fa51 	bl	8002ca4 <Error_Handler>
  }
}
 8002802:	bf00      	nop
 8002804:	3750      	adds	r7, #80	; 0x50
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002812:	1d3b      	adds	r3, r7, #4
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <MX_ADC1_Init+0x74>)
 800281e:	4a19      	ldr	r2, [pc, #100]	; (8002884 <MX_ADC1_Init+0x78>)
 8002820:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002822:	4b17      	ldr	r3, [pc, #92]	; (8002880 <MX_ADC1_Init+0x74>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002828:	4b15      	ldr	r3, [pc, #84]	; (8002880 <MX_ADC1_Init+0x74>)
 800282a:	2200      	movs	r2, #0
 800282c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800282e:	4b14      	ldr	r3, [pc, #80]	; (8002880 <MX_ADC1_Init+0x74>)
 8002830:	2200      	movs	r2, #0
 8002832:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <MX_ADC1_Init+0x74>)
 8002836:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800283a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800283c:	4b10      	ldr	r3, [pc, #64]	; (8002880 <MX_ADC1_Init+0x74>)
 800283e:	2200      	movs	r2, #0
 8002840:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <MX_ADC1_Init+0x74>)
 8002844:	2201      	movs	r2, #1
 8002846:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002848:	480d      	ldr	r0, [pc, #52]	; (8002880 <MX_ADC1_Init+0x74>)
 800284a:	f000 fd3d 	bl	80032c8 <HAL_ADC_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002854:	f000 fa26 	bl	8002ca4 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8002858:	2303      	movs	r3, #3
 800285a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800285c:	2301      	movs	r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002864:	1d3b      	adds	r3, r7, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4805      	ldr	r0, [pc, #20]	; (8002880 <MX_ADC1_Init+0x74>)
 800286a:	f000 fe05 	bl	8003478 <HAL_ADC_ConfigChannel>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002874:	f000 fa16 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002878:	bf00      	nop
 800287a:	3710      	adds	r7, #16
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	200003cc 	.word	0x200003cc
 8002884:	40012400 	.word	0x40012400

08002888 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <MX_I2C2_Init+0x50>)
 800288e:	4a13      	ldr	r2, [pc, #76]	; (80028dc <MX_I2C2_Init+0x54>)
 8002890:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002892:	4b11      	ldr	r3, [pc, #68]	; (80028d8 <MX_I2C2_Init+0x50>)
 8002894:	4a12      	ldr	r2, [pc, #72]	; (80028e0 <MX_I2C2_Init+0x58>)
 8002896:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002898:	4b0f      	ldr	r3, [pc, #60]	; (80028d8 <MX_I2C2_Init+0x50>)
 800289a:	2200      	movs	r2, #0
 800289c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <MX_I2C2_Init+0x50>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80028a4:	4b0c      	ldr	r3, [pc, #48]	; (80028d8 <MX_I2C2_Init+0x50>)
 80028a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80028aa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80028ac:	4b0a      	ldr	r3, [pc, #40]	; (80028d8 <MX_I2C2_Init+0x50>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <MX_I2C2_Init+0x50>)
 80028b4:	2200      	movs	r2, #0
 80028b6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028b8:	4b07      	ldr	r3, [pc, #28]	; (80028d8 <MX_I2C2_Init+0x50>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028be:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <MX_I2C2_Init+0x50>)
 80028c0:	2200      	movs	r2, #0
 80028c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80028c4:	4804      	ldr	r0, [pc, #16]	; (80028d8 <MX_I2C2_Init+0x50>)
 80028c6:	f001 f9a1 	bl	8003c0c <HAL_I2C_Init>
 80028ca:	4603      	mov	r3, r0
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d001      	beq.n	80028d4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80028d0:	f000 f9e8 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80028d4:	bf00      	nop
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20000338 	.word	0x20000338
 80028dc:	40005800 	.word	0x40005800
 80028e0:	00061a80 	.word	0x00061a80

080028e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80028e8:	4b17      	ldr	r3, [pc, #92]	; (8002948 <MX_SPI1_Init+0x64>)
 80028ea:	4a18      	ldr	r2, [pc, #96]	; (800294c <MX_SPI1_Init+0x68>)
 80028ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <MX_SPI1_Init+0x64>)
 80028f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80028f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80028f6:	4b14      	ldr	r3, [pc, #80]	; (8002948 <MX_SPI1_Init+0x64>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80028fc:	4b12      	ldr	r3, [pc, #72]	; (8002948 <MX_SPI1_Init+0x64>)
 80028fe:	2200      	movs	r2, #0
 8002900:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002902:	4b11      	ldr	r3, [pc, #68]	; (8002948 <MX_SPI1_Init+0x64>)
 8002904:	2200      	movs	r2, #0
 8002906:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002908:	4b0f      	ldr	r3, [pc, #60]	; (8002948 <MX_SPI1_Init+0x64>)
 800290a:	2200      	movs	r2, #0
 800290c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800290e:	4b0e      	ldr	r3, [pc, #56]	; (8002948 <MX_SPI1_Init+0x64>)
 8002910:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002914:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8002916:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <MX_SPI1_Init+0x64>)
 8002918:	2218      	movs	r2, #24
 800291a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <MX_SPI1_Init+0x64>)
 800291e:	2200      	movs	r2, #0
 8002920:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002922:	4b09      	ldr	r3, [pc, #36]	; (8002948 <MX_SPI1_Init+0x64>)
 8002924:	2200      	movs	r2, #0
 8002926:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002928:	4b07      	ldr	r3, [pc, #28]	; (8002948 <MX_SPI1_Init+0x64>)
 800292a:	2200      	movs	r2, #0
 800292c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <MX_SPI1_Init+0x64>)
 8002930:	220a      	movs	r2, #10
 8002932:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002934:	4804      	ldr	r0, [pc, #16]	; (8002948 <MX_SPI1_Init+0x64>)
 8002936:	f002 fd97 	bl	8005468 <HAL_SPI_Init>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002940:	f000 f9b0 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002944:	bf00      	nop
 8002946:	bd80      	pop	{r7, pc}
 8002948:	2000045c 	.word	0x2000045c
 800294c:	40013000 	.word	0x40013000

08002950 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002956:	f107 0308 	add.w	r3, r7, #8
 800295a:	2200      	movs	r2, #0
 800295c:	601a      	str	r2, [r3, #0]
 800295e:	605a      	str	r2, [r3, #4]
 8002960:	609a      	str	r2, [r3, #8]
 8002962:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002964:	463b      	mov	r3, r7
 8002966:	2200      	movs	r2, #0
 8002968:	601a      	str	r2, [r3, #0]
 800296a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800296c:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <MX_TIM2_Init+0x94>)
 800296e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002972:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8002974:	4b1b      	ldr	r3, [pc, #108]	; (80029e4 <MX_TIM2_Init+0x94>)
 8002976:	2247      	movs	r2, #71	; 0x47
 8002978:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800297a:	4b1a      	ldr	r3, [pc, #104]	; (80029e4 <MX_TIM2_Init+0x94>)
 800297c:	2200      	movs	r2, #0
 800297e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535-1;
 8002980:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <MX_TIM2_Init+0x94>)
 8002982:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002986:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002988:	4b16      	ldr	r3, [pc, #88]	; (80029e4 <MX_TIM2_Init+0x94>)
 800298a:	2200      	movs	r2, #0
 800298c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800298e:	4b15      	ldr	r3, [pc, #84]	; (80029e4 <MX_TIM2_Init+0x94>)
 8002990:	2200      	movs	r2, #0
 8002992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002994:	4813      	ldr	r0, [pc, #76]	; (80029e4 <MX_TIM2_Init+0x94>)
 8002996:	f003 fa81 	bl	8005e9c <HAL_TIM_Base_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80029a0:	f000 f980 	bl	8002ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80029a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80029aa:	f107 0308 	add.w	r3, r7, #8
 80029ae:	4619      	mov	r1, r3
 80029b0:	480c      	ldr	r0, [pc, #48]	; (80029e4 <MX_TIM2_Init+0x94>)
 80029b2:	f003 fced 	bl	8006390 <HAL_TIM_ConfigClockSource>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80029bc:	f000 f972 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80029c0:	2320      	movs	r3, #32
 80029c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80029c4:	2300      	movs	r3, #0
 80029c6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80029c8:	463b      	mov	r3, r7
 80029ca:	4619      	mov	r1, r3
 80029cc:	4805      	ldr	r0, [pc, #20]	; (80029e4 <MX_TIM2_Init+0x94>)
 80029ce:	f004 f85f 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
 80029d2:	4603      	mov	r3, r0
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d001      	beq.n	80029dc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80029d8:	f000 f964 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80029dc:	bf00      	nop
 80029de:	3718      	adds	r7, #24
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	200004b4 	.word	0x200004b4

080029e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80029ee:	f107 0308 	add.w	r3, r7, #8
 80029f2:	2200      	movs	r2, #0
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	609a      	str	r2, [r3, #8]
 80029fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029fc:	463b      	mov	r3, r7
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a06:	4a1e      	ldr	r2, [pc, #120]	; (8002a80 <MX_TIM3_Init+0x98>)
 8002a08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7200-1;
 8002a0a:	4b1c      	ldr	r3, [pc, #112]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a0c:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002a10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8002a18:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8002a1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a20:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a26:	4b15      	ldr	r3, [pc, #84]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a2c:	4813      	ldr	r0, [pc, #76]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a2e:	f003 fa35 	bl	8005e9c <HAL_TIM_Base_Init>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002a38:	f000 f934 	bl	8002ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a42:	f107 0308 	add.w	r3, r7, #8
 8002a46:	4619      	mov	r1, r3
 8002a48:	480c      	ldr	r0, [pc, #48]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a4a:	f003 fca1 	bl	8006390 <HAL_TIM_ConfigClockSource>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002a54:	f000 f926 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002a58:	2320      	movs	r3, #32
 8002a5a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002a60:	463b      	mov	r3, r7
 8002a62:	4619      	mov	r1, r3
 8002a64:	4805      	ldr	r0, [pc, #20]	; (8002a7c <MX_TIM3_Init+0x94>)
 8002a66:	f004 f813 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d001      	beq.n	8002a74 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002a70:	f000 f918 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002a74:	bf00      	nop
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	2000038c 	.word	0x2000038c
 8002a80:	40000400 	.word	0x40000400

08002a84 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a8a:	f107 0320 	add.w	r3, r7, #32
 8002a8e:	2200      	movs	r2, #0
 8002a90:	601a      	str	r2, [r3, #0]
 8002a92:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a94:	1d3b      	adds	r3, r7, #4
 8002a96:	2200      	movs	r2, #0
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	605a      	str	r2, [r3, #4]
 8002a9c:	609a      	str	r2, [r3, #8]
 8002a9e:	60da      	str	r2, [r3, #12]
 8002aa0:	611a      	str	r2, [r3, #16]
 8002aa2:	615a      	str	r2, [r3, #20]
 8002aa4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002aa6:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002aa8:	4a32      	ldr	r2, [pc, #200]	; (8002b74 <MX_TIM4_Init+0xf0>)
 8002aaa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = MOTOR_PRESCALLER;
 8002aac:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002aae:	2247      	movs	r2, #71	; 0x47
 8002ab0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ab2:	4b2f      	ldr	r3, [pc, #188]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = MOTOR_COUNTER;
 8002ab8:	4b2d      	ldr	r3, [pc, #180]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002aba:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8002abe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002ac0:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ac6:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002acc:	4828      	ldr	r0, [pc, #160]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002ace:	f003 fa33 	bl	8005f38 <HAL_TIM_PWM_Init>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d001      	beq.n	8002adc <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002ad8:	f000 f8e4 	bl	8002ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002adc:	2300      	movs	r3, #0
 8002ade:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002ae4:	f107 0320 	add.w	r3, r7, #32
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4821      	ldr	r0, [pc, #132]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002aec:	f003 ffd0 	bl	8006a90 <HAL_TIMEx_MasterConfigSynchronization>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8002af6:	f000 f8d5 	bl	8002ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002afa:	2360      	movs	r3, #96	; 0x60
 8002afc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002b0a:	1d3b      	adds	r3, r7, #4
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4817      	ldr	r0, [pc, #92]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002b12:	f003 fb77 	bl	8006204 <HAL_TIM_PWM_ConfigChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8002b1c:	f000 f8c2 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	2204      	movs	r2, #4
 8002b24:	4619      	mov	r1, r3
 8002b26:	4812      	ldr	r0, [pc, #72]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002b28:	f003 fb6c 	bl	8006204 <HAL_TIM_PWM_ConfigChannel>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d001      	beq.n	8002b36 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8002b32:	f000 f8b7 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002b36:	1d3b      	adds	r3, r7, #4
 8002b38:	2208      	movs	r2, #8
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	480c      	ldr	r0, [pc, #48]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002b3e:	f003 fb61 	bl	8006204 <HAL_TIM_PWM_ConfigChannel>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 8002b48:	f000 f8ac 	bl	8002ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002b4c:	1d3b      	adds	r3, r7, #4
 8002b4e:	220c      	movs	r2, #12
 8002b50:	4619      	mov	r1, r3
 8002b52:	4807      	ldr	r0, [pc, #28]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002b54:	f003 fb56 	bl	8006204 <HAL_TIM_PWM_ConfigChannel>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d001      	beq.n	8002b62 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8002b5e:	f000 f8a1 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002b62:	4803      	ldr	r0, [pc, #12]	; (8002b70 <MX_TIM4_Init+0xec>)
 8002b64:	f000 f9f2 	bl	8002f4c <HAL_TIM_MspPostInit>

}
 8002b68:	bf00      	nop
 8002b6a:	3728      	adds	r7, #40	; 0x28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	200002f8 	.word	0x200002f8
 8002b74:	40000800 	.word	0x40000800

08002b78 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002b7c:	4b11      	ldr	r3, [pc, #68]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b7e:	4a12      	ldr	r2, [pc, #72]	; (8002bc8 <MX_USART1_UART_Init+0x50>)
 8002b80:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002b82:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002b88:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002b96:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b9c:	4b09      	ldr	r3, [pc, #36]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002b9e:	220c      	movs	r2, #12
 8002ba0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ba2:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ba8:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002bae:	4805      	ldr	r0, [pc, #20]	; (8002bc4 <MX_USART1_UART_Init+0x4c>)
 8002bb0:	f003 ffc4 	bl	8006b3c <HAL_UART_Init>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002bba:	f000 f873 	bl	8002ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	2000041c 	.word	0x2000041c
 8002bc8:	40013800 	.word	0x40013800

08002bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bd2:	f107 0310 	add.w	r3, r7, #16
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	605a      	str	r2, [r3, #4]
 8002bdc:	609a      	str	r2, [r3, #8]
 8002bde:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002be0:	4b2d      	ldr	r3, [pc, #180]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	4a2c      	ldr	r2, [pc, #176]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002be6:	f043 0310 	orr.w	r3, r3, #16
 8002bea:	6193      	str	r3, [r2, #24]
 8002bec:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 0310 	and.w	r3, r3, #16
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bf8:	4b27      	ldr	r3, [pc, #156]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	4a26      	ldr	r2, [pc, #152]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002bfe:	f043 0320 	orr.w	r3, r3, #32
 8002c02:	6193      	str	r3, [r2, #24]
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	f003 0320 	and.w	r3, r3, #32
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c10:	4b21      	ldr	r3, [pc, #132]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	4a20      	ldr	r2, [pc, #128]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002c16:	f043 0304 	orr.w	r3, r3, #4
 8002c1a:	6193      	str	r3, [r2, #24]
 8002c1c:	4b1e      	ldr	r3, [pc, #120]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	f003 0304 	and.w	r3, r3, #4
 8002c24:	607b      	str	r3, [r7, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c28:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	4a1a      	ldr	r2, [pc, #104]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002c2e:	f043 0308 	orr.w	r3, r3, #8
 8002c32:	6193      	str	r3, [r2, #24]
 8002c34:	4b18      	ldr	r3, [pc, #96]	; (8002c98 <MX_GPIO_Init+0xcc>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f003 0308 	and.w	r3, r3, #8
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002c40:	2200      	movs	r2, #0
 8002c42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c46:	4815      	ldr	r0, [pc, #84]	; (8002c9c <MX_GPIO_Init+0xd0>)
 8002c48:	f000 ffb0 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2103      	movs	r1, #3
 8002c50:	4813      	ldr	r0, [pc, #76]	; (8002ca0 <MX_GPIO_Init+0xd4>)
 8002c52:	f000 ffab 	bl	8003bac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002c56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2302      	movs	r3, #2
 8002c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002c68:	f107 0310 	add.w	r3, r7, #16
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	480b      	ldr	r0, [pc, #44]	; (8002c9c <MX_GPIO_Init+0xd0>)
 8002c70:	f000 fe42 	bl	80038f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8002c74:	2303      	movs	r3, #3
 8002c76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c80:	2302      	movs	r3, #2
 8002c82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c84:	f107 0310 	add.w	r3, r7, #16
 8002c88:	4619      	mov	r1, r3
 8002c8a:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <MX_GPIO_Init+0xd4>)
 8002c8c:	f000 fe34 	bl	80038f8 <HAL_GPIO_Init>

}
 8002c90:	bf00      	nop
 8002c92:	3720      	adds	r7, #32
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	40011000 	.word	0x40011000
 8002ca0:	40010c00 	.word	0x40010c00

08002ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002ca8:	bf00      	nop
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002cb6:	4b15      	ldr	r3, [pc, #84]	; (8002d0c <HAL_MspInit+0x5c>)
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <HAL_MspInit+0x5c>)
 8002cbc:	f043 0301 	orr.w	r3, r3, #1
 8002cc0:	6193      	str	r3, [r2, #24]
 8002cc2:	4b12      	ldr	r3, [pc, #72]	; (8002d0c <HAL_MspInit+0x5c>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	60bb      	str	r3, [r7, #8]
 8002ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <HAL_MspInit+0x5c>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <HAL_MspInit+0x5c>)
 8002cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	61d3      	str	r3, [r2, #28]
 8002cda:	4b0c      	ldr	r3, [pc, #48]	; (8002d0c <HAL_MspInit+0x5c>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	607b      	str	r3, [r7, #4]
 8002ce4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <HAL_MspInit+0x60>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	60fb      	str	r3, [r7, #12]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	60fb      	str	r3, [r7, #12]
 8002cfc:	4a04      	ldr	r2, [pc, #16]	; (8002d10 <HAL_MspInit+0x60>)
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d02:	bf00      	nop
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bc80      	pop	{r7}
 8002d0a:	4770      	bx	lr
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	40010000 	.word	0x40010000

08002d14 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d1c:	f107 0310 	add.w	r3, r7, #16
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]
 8002d24:	605a      	str	r2, [r3, #4]
 8002d26:	609a      	str	r2, [r3, #8]
 8002d28:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a14      	ldr	r2, [pc, #80]	; (8002d80 <HAL_ADC_MspInit+0x6c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d121      	bne.n	8002d78 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <HAL_ADC_MspInit+0x70>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	4a12      	ldr	r2, [pc, #72]	; (8002d84 <HAL_ADC_MspInit+0x70>)
 8002d3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d3e:	6193      	str	r3, [r2, #24]
 8002d40:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_ADC_MspInit+0x70>)
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_ADC_MspInit+0x70>)
 8002d4e:	699b      	ldr	r3, [r3, #24]
 8002d50:	4a0c      	ldr	r2, [pc, #48]	; (8002d84 <HAL_ADC_MspInit+0x70>)
 8002d52:	f043 0304 	orr.w	r3, r3, #4
 8002d56:	6193      	str	r3, [r2, #24]
 8002d58:	4b0a      	ldr	r3, [pc, #40]	; (8002d84 <HAL_ADC_MspInit+0x70>)
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4 
    */
    GPIO_InitStruct.Pin = BAT_3V7_Pin|BAT_7V6_Pin;
 8002d64:	2318      	movs	r3, #24
 8002d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	4619      	mov	r1, r3
 8002d72:	4805      	ldr	r0, [pc, #20]	; (8002d88 <HAL_ADC_MspInit+0x74>)
 8002d74:	f000 fdc0 	bl	80038f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002d78:	bf00      	nop
 8002d7a:	3720      	adds	r7, #32
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	40012400 	.word	0x40012400
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40010800 	.word	0x40010800

08002d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 0310 	add.w	r3, r7, #16
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a16      	ldr	r2, [pc, #88]	; (8002e00 <HAL_I2C_MspInit+0x74>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d124      	bne.n	8002df6 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dac:	4b15      	ldr	r3, [pc, #84]	; (8002e04 <HAL_I2C_MspInit+0x78>)
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <HAL_I2C_MspInit+0x78>)
 8002db2:	f043 0308 	orr.w	r3, r3, #8
 8002db6:	6193      	str	r3, [r2, #24]
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <HAL_I2C_MspInit+0x78>)
 8002dba:	699b      	ldr	r3, [r3, #24]
 8002dbc:	f003 0308 	and.w	r3, r3, #8
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002dc4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002dc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002dca:	2312      	movs	r3, #18
 8002dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dce:	2303      	movs	r3, #3
 8002dd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd2:	f107 0310 	add.w	r3, r7, #16
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	480b      	ldr	r0, [pc, #44]	; (8002e08 <HAL_I2C_MspInit+0x7c>)
 8002dda:	f000 fd8d 	bl	80038f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <HAL_I2C_MspInit+0x78>)
 8002de0:	69db      	ldr	r3, [r3, #28]
 8002de2:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <HAL_I2C_MspInit+0x78>)
 8002de4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002de8:	61d3      	str	r3, [r2, #28]
 8002dea:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_I2C_MspInit+0x78>)
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df2:	60bb      	str	r3, [r7, #8]
 8002df4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002df6:	bf00      	nop
 8002df8:	3720      	adds	r7, #32
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40005800 	.word	0x40005800
 8002e04:	40021000 	.word	0x40021000
 8002e08:	40010c00 	.word	0x40010c00

08002e0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e14:	f107 0310 	add.w	r3, r7, #16
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	605a      	str	r2, [r3, #4]
 8002e1e:	609a      	str	r2, [r3, #8]
 8002e20:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_SPI_MspInit+0x88>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d12f      	bne.n	8002e8c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002e2c:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <HAL_SPI_MspInit+0x8c>)
 8002e2e:	699b      	ldr	r3, [r3, #24]
 8002e30:	4a19      	ldr	r2, [pc, #100]	; (8002e98 <HAL_SPI_MspInit+0x8c>)
 8002e32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002e36:	6193      	str	r3, [r2, #24]
 8002e38:	4b17      	ldr	r3, [pc, #92]	; (8002e98 <HAL_SPI_MspInit+0x8c>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e40:	60fb      	str	r3, [r7, #12]
 8002e42:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e44:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <HAL_SPI_MspInit+0x8c>)
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	4a13      	ldr	r2, [pc, #76]	; (8002e98 <HAL_SPI_MspInit+0x8c>)
 8002e4a:	f043 0304 	orr.w	r3, r3, #4
 8002e4e:	6193      	str	r3, [r2, #24]
 8002e50:	4b11      	ldr	r3, [pc, #68]	; (8002e98 <HAL_SPI_MspInit+0x8c>)
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002e5c:	23a0      	movs	r3, #160	; 0xa0
 8002e5e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e60:	2302      	movs	r3, #2
 8002e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e68:	f107 0310 	add.w	r3, r7, #16
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	480b      	ldr	r0, [pc, #44]	; (8002e9c <HAL_SPI_MspInit+0x90>)
 8002e70:	f000 fd42 	bl	80038f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002e74:	2340      	movs	r3, #64	; 0x40
 8002e76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e80:	f107 0310 	add.w	r3, r7, #16
 8002e84:	4619      	mov	r1, r3
 8002e86:	4805      	ldr	r0, [pc, #20]	; (8002e9c <HAL_SPI_MspInit+0x90>)
 8002e88:	f000 fd36 	bl	80038f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002e8c:	bf00      	nop
 8002e8e:	3720      	adds	r7, #32
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40013000 	.word	0x40013000
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40010800 	.word	0x40010800

08002ea0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b084      	sub	sp, #16
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eb0:	d10c      	bne.n	8002ecc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_TIM_Base_MspInit+0x68>)
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	4a14      	ldr	r2, [pc, #80]	; (8002f08 <HAL_TIM_Base_MspInit+0x68>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	61d3      	str	r3, [r2, #28]
 8002ebe:	4b12      	ldr	r3, [pc, #72]	; (8002f08 <HAL_TIM_Base_MspInit+0x68>)
 8002ec0:	69db      	ldr	r3, [r3, #28]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002eca:	e018      	b.n	8002efe <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a0e      	ldr	r2, [pc, #56]	; (8002f0c <HAL_TIM_Base_MspInit+0x6c>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d113      	bne.n	8002efe <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <HAL_TIM_Base_MspInit+0x68>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <HAL_TIM_Base_MspInit+0x68>)
 8002edc:	f043 0302 	orr.w	r3, r3, #2
 8002ee0:	61d3      	str	r3, [r2, #28]
 8002ee2:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_TIM_Base_MspInit+0x68>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2100      	movs	r1, #0
 8002ef2:	201d      	movs	r0, #29
 8002ef4:	f000 fcc9 	bl	800388a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002ef8:	201d      	movs	r0, #29
 8002efa:	f000 fce2 	bl	80038c2 <HAL_NVIC_EnableIRQ>
}
 8002efe:	bf00      	nop
 8002f00:	3710      	adds	r7, #16
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	40000400 	.word	0x40000400

08002f10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a09      	ldr	r2, [pc, #36]	; (8002f44 <HAL_TIM_PWM_MspInit+0x34>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10b      	bne.n	8002f3a <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <HAL_TIM_PWM_MspInit+0x38>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	4a08      	ldr	r2, [pc, #32]	; (8002f48 <HAL_TIM_PWM_MspInit+0x38>)
 8002f28:	f043 0304 	orr.w	r3, r3, #4
 8002f2c:	61d3      	str	r3, [r2, #28]
 8002f2e:	4b06      	ldr	r3, [pc, #24]	; (8002f48 <HAL_TIM_PWM_MspInit+0x38>)
 8002f30:	69db      	ldr	r3, [r3, #28]
 8002f32:	f003 0304 	and.w	r3, r3, #4
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40000800 	.word	0x40000800
 8002f48:	40021000 	.word	0x40021000

08002f4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f54:	f107 0310 	add.w	r3, r7, #16
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
 8002f5c:	605a      	str	r2, [r3, #4]
 8002f5e:	609a      	str	r2, [r3, #8]
 8002f60:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <HAL_TIM_MspPostInit+0x5c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d118      	bne.n	8002f9e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f6c:	4b0f      	ldr	r3, [pc, #60]	; (8002fac <HAL_TIM_MspPostInit+0x60>)
 8002f6e:	699b      	ldr	r3, [r3, #24]
 8002f70:	4a0e      	ldr	r2, [pc, #56]	; (8002fac <HAL_TIM_MspPostInit+0x60>)
 8002f72:	f043 0308 	orr.w	r3, r3, #8
 8002f76:	6193      	str	r3, [r2, #24]
 8002f78:	4b0c      	ldr	r3, [pc, #48]	; (8002fac <HAL_TIM_MspPostInit+0x60>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f003 0308 	and.w	r3, r3, #8
 8002f80:	60fb      	str	r3, [r7, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = MOTOR_1A_Pin|MOTOR_1B_Pin|MOTOR_2A_Pin|MOTOR_2B_Pin;
 8002f84:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002f88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8e:	2302      	movs	r3, #2
 8002f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f92:	f107 0310 	add.w	r3, r7, #16
 8002f96:	4619      	mov	r1, r3
 8002f98:	4805      	ldr	r0, [pc, #20]	; (8002fb0 <HAL_TIM_MspPostInit+0x64>)
 8002f9a:	f000 fcad 	bl	80038f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002f9e:	bf00      	nop
 8002fa0:	3720      	adds	r7, #32
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	bf00      	nop
 8002fa8:	40000800 	.word	0x40000800
 8002fac:	40021000 	.word	0x40021000
 8002fb0:	40010c00 	.word	0x40010c00

08002fb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b088      	sub	sp, #32
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fbc:	f107 0310 	add.w	r3, r7, #16
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	601a      	str	r2, [r3, #0]
 8002fc4:	605a      	str	r2, [r3, #4]
 8002fc6:	609a      	str	r2, [r3, #8]
 8002fc8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a1c      	ldr	r2, [pc, #112]	; (8003040 <HAL_UART_MspInit+0x8c>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d131      	bne.n	8003038 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002fd4:	4b1b      	ldr	r3, [pc, #108]	; (8003044 <HAL_UART_MspInit+0x90>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	4a1a      	ldr	r2, [pc, #104]	; (8003044 <HAL_UART_MspInit+0x90>)
 8002fda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fde:	6193      	str	r3, [r2, #24]
 8002fe0:	4b18      	ldr	r3, [pc, #96]	; (8003044 <HAL_UART_MspInit+0x90>)
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe8:	60fb      	str	r3, [r7, #12]
 8002fea:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fec:	4b15      	ldr	r3, [pc, #84]	; (8003044 <HAL_UART_MspInit+0x90>)
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	4a14      	ldr	r2, [pc, #80]	; (8003044 <HAL_UART_MspInit+0x90>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6193      	str	r3, [r2, #24]
 8002ff8:	4b12      	ldr	r3, [pc, #72]	; (8003044 <HAL_UART_MspInit+0x90>)
 8002ffa:	699b      	ldr	r3, [r3, #24]
 8002ffc:	f003 0304 	and.w	r3, r3, #4
 8003000:	60bb      	str	r3, [r7, #8]
 8003002:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003004:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003008:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800300a:	2302      	movs	r3, #2
 800300c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800300e:	2303      	movs	r3, #3
 8003010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003012:	f107 0310 	add.w	r3, r7, #16
 8003016:	4619      	mov	r1, r3
 8003018:	480b      	ldr	r0, [pc, #44]	; (8003048 <HAL_UART_MspInit+0x94>)
 800301a:	f000 fc6d 	bl	80038f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800301e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003022:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003024:	2300      	movs	r3, #0
 8003026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003028:	2300      	movs	r3, #0
 800302a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302c:	f107 0310 	add.w	r3, r7, #16
 8003030:	4619      	mov	r1, r3
 8003032:	4805      	ldr	r0, [pc, #20]	; (8003048 <HAL_UART_MspInit+0x94>)
 8003034:	f000 fc60 	bl	80038f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003038:	bf00      	nop
 800303a:	3720      	adds	r7, #32
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40013800 	.word	0x40013800
 8003044:	40021000 	.word	0x40021000
 8003048:	40010800 	.word	0x40010800

0800304c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800304c:	b480      	push	{r7}
 800304e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003050:	bf00      	nop
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800305c:	e7fe      	b.n	800305c <HardFault_Handler+0x4>

0800305e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003062:	e7fe      	b.n	8003062 <MemManage_Handler+0x4>

08003064 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003064:	b480      	push	{r7}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003068:	e7fe      	b.n	8003068 <BusFault_Handler+0x4>

0800306a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800306a:	b480      	push	{r7}
 800306c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800306e:	e7fe      	b.n	800306e <UsageFault_Handler+0x4>

08003070 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003074:	bf00      	nop
 8003076:	46bd      	mov	sp, r7
 8003078:	bc80      	pop	{r7}
 800307a:	4770      	bx	lr

0800307c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	bc80      	pop	{r7}
 8003086:	4770      	bx	lr

08003088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	bc80      	pop	{r7}
 8003092:	4770      	bx	lr

08003094 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003098:	f000 f8d8 	bl	800324c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800309c:	bf00      	nop
 800309e:	bd80      	pop	{r7, pc}

080030a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <TIM3_IRQHandler+0x10>)
 80030a6:	f002 ffa5 	bl	8005ff4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000038c 	.word	0x2000038c

080030b4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <_sbrk+0x50>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d102      	bne.n	80030ca <_sbrk+0x16>
		heap_end = &end;
 80030c4:	4b0f      	ldr	r3, [pc, #60]	; (8003104 <_sbrk+0x50>)
 80030c6:	4a10      	ldr	r2, [pc, #64]	; (8003108 <_sbrk+0x54>)
 80030c8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80030ca:	4b0e      	ldr	r3, [pc, #56]	; (8003104 <_sbrk+0x50>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <_sbrk+0x50>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4413      	add	r3, r2
 80030d8:	466a      	mov	r2, sp
 80030da:	4293      	cmp	r3, r2
 80030dc:	d907      	bls.n	80030ee <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80030de:	f003 ff37 	bl	8006f50 <__errno>
 80030e2:	4602      	mov	r2, r0
 80030e4:	230c      	movs	r3, #12
 80030e6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80030e8:	f04f 33ff 	mov.w	r3, #4294967295
 80030ec:	e006      	b.n	80030fc <_sbrk+0x48>
	}

	heap_end += incr;
 80030ee:	4b05      	ldr	r3, [pc, #20]	; (8003104 <_sbrk+0x50>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4413      	add	r3, r2
 80030f6:	4a03      	ldr	r2, [pc, #12]	; (8003104 <_sbrk+0x50>)
 80030f8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80030fa:	68fb      	ldr	r3, [r7, #12]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3710      	adds	r7, #16
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}
 8003104:	2000020c 	.word	0x2000020c
 8003108:	20000500 	.word	0x20000500

0800310c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003110:	4b15      	ldr	r3, [pc, #84]	; (8003168 <SystemInit+0x5c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a14      	ldr	r2, [pc, #80]	; (8003168 <SystemInit+0x5c>)
 8003116:	f043 0301 	orr.w	r3, r3, #1
 800311a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800311c:	4b12      	ldr	r3, [pc, #72]	; (8003168 <SystemInit+0x5c>)
 800311e:	685a      	ldr	r2, [r3, #4]
 8003120:	4911      	ldr	r1, [pc, #68]	; (8003168 <SystemInit+0x5c>)
 8003122:	4b12      	ldr	r3, [pc, #72]	; (800316c <SystemInit+0x60>)
 8003124:	4013      	ands	r3, r2
 8003126:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003128:	4b0f      	ldr	r3, [pc, #60]	; (8003168 <SystemInit+0x5c>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <SystemInit+0x5c>)
 800312e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003132:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003136:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003138:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <SystemInit+0x5c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a0a      	ldr	r2, [pc, #40]	; (8003168 <SystemInit+0x5c>)
 800313e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003142:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003144:	4b08      	ldr	r3, [pc, #32]	; (8003168 <SystemInit+0x5c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a07      	ldr	r2, [pc, #28]	; (8003168 <SystemInit+0x5c>)
 800314a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800314e:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003150:	4b05      	ldr	r3, [pc, #20]	; (8003168 <SystemInit+0x5c>)
 8003152:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003156:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003158:	4b05      	ldr	r3, [pc, #20]	; (8003170 <SystemInit+0x64>)
 800315a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800315e:	609a      	str	r2, [r3, #8]
#endif 
}
 8003160:	bf00      	nop
 8003162:	46bd      	mov	sp, r7
 8003164:	bc80      	pop	{r7}
 8003166:	4770      	bx	lr
 8003168:	40021000 	.word	0x40021000
 800316c:	f8ff0000 	.word	0xf8ff0000
 8003170:	e000ed00 	.word	0xe000ed00

08003174 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003174:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003176:	e003      	b.n	8003180 <LoopCopyDataInit>

08003178 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800317a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800317c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800317e:	3104      	adds	r1, #4

08003180 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003180:	480a      	ldr	r0, [pc, #40]	; (80031ac <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003182:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003184:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003186:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003188:	d3f6      	bcc.n	8003178 <CopyDataInit>
  ldr r2, =_sbss
 800318a:	4a0a      	ldr	r2, [pc, #40]	; (80031b4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800318c:	e002      	b.n	8003194 <LoopFillZerobss>

0800318e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800318e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003190:	f842 3b04 	str.w	r3, [r2], #4

08003194 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003196:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003198:	d3f9      	bcc.n	800318e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800319a:	f7ff ffb7 	bl	800310c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800319e:	f003 fedd 	bl	8006f5c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80031a2:	f7ff f869 	bl	8002278 <main>
  bx lr
 80031a6:	4770      	bx	lr
  ldr r3, =_sidata
 80031a8:	08007da8 	.word	0x08007da8
  ldr r0, =_sdata
 80031ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80031b0:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 80031b4:	200000a0 	.word	0x200000a0
  ldr r3, = _ebss
 80031b8:	200004fc 	.word	0x200004fc

080031bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80031bc:	e7fe      	b.n	80031bc <ADC1_2_IRQHandler>
	...

080031c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80031c4:	4b08      	ldr	r3, [pc, #32]	; (80031e8 <HAL_Init+0x28>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a07      	ldr	r2, [pc, #28]	; (80031e8 <HAL_Init+0x28>)
 80031ca:	f043 0310 	orr.w	r3, r3, #16
 80031ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80031d0:	2003      	movs	r0, #3
 80031d2:	f000 fb4f 	bl	8003874 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80031d6:	2000      	movs	r0, #0
 80031d8:	f000 f808 	bl	80031ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80031dc:	f7ff fd68 	bl	8002cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	40022000 	.word	0x40022000

080031ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031f4:	4b12      	ldr	r3, [pc, #72]	; (8003240 <HAL_InitTick+0x54>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	4b12      	ldr	r3, [pc, #72]	; (8003244 <HAL_InitTick+0x58>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4619      	mov	r1, r3
 80031fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003202:	fbb3 f3f1 	udiv	r3, r3, r1
 8003206:	fbb2 f3f3 	udiv	r3, r2, r3
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fb67 	bl	80038de <HAL_SYSTICK_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e00e      	b.n	8003238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b0f      	cmp	r3, #15
 800321e:	d80a      	bhi.n	8003236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003220:	2200      	movs	r2, #0
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	f04f 30ff 	mov.w	r0, #4294967295
 8003228:	f000 fb2f 	bl	800388a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800322c:	4a06      	ldr	r2, [pc, #24]	; (8003248 <HAL_InitTick+0x5c>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	e000      	b.n	8003238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
}
 8003238:	4618      	mov	r0, r3
 800323a:	3708      	adds	r7, #8
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	2000002c 	.word	0x2000002c
 8003244:	20000034 	.word	0x20000034
 8003248:	20000030 	.word	0x20000030

0800324c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_IncTick+0x1c>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_IncTick+0x20>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4413      	add	r3, r2
 800325c:	4a03      	ldr	r2, [pc, #12]	; (800326c <HAL_IncTick+0x20>)
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	46bd      	mov	sp, r7
 8003264:	bc80      	pop	{r7}
 8003266:	4770      	bx	lr
 8003268:	20000034 	.word	0x20000034
 800326c:	200004f4 	.word	0x200004f4

08003270 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  return uwTick;
 8003274:	4b02      	ldr	r3, [pc, #8]	; (8003280 <HAL_GetTick+0x10>)
 8003276:	681b      	ldr	r3, [r3, #0]
}
 8003278:	4618      	mov	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	bc80      	pop	{r7}
 800327e:	4770      	bx	lr
 8003280:	200004f4 	.word	0x200004f4

08003284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800328c:	f7ff fff0 	bl	8003270 <HAL_GetTick>
 8003290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329c:	d005      	beq.n	80032aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_Delay+0x40>)
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	461a      	mov	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80032aa:	bf00      	nop
 80032ac:	f7ff ffe0 	bl	8003270 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d8f7      	bhi.n	80032ac <HAL_Delay+0x28>
  {
  }
}
 80032bc:	bf00      	nop
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	20000034 	.word	0x20000034

080032c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80032d4:	2300      	movs	r3, #0
 80032d6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80032d8:	2300      	movs	r3, #0
 80032da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d101      	bne.n	80032ea <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e0be      	b.n	8003468 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d109      	bne.n	800330c <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f7ff fd04 	bl	8002d14 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f9ab 	bl	8003668 <ADC_ConversionStop_Disable>
 8003312:	4603      	mov	r3, r0
 8003314:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331a:	f003 0310 	and.w	r3, r3, #16
 800331e:	2b00      	cmp	r3, #0
 8003320:	f040 8099 	bne.w	8003456 <HAL_ADC_Init+0x18e>
 8003324:	7dfb      	ldrb	r3, [r7, #23]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f040 8095 	bne.w	8003456 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003330:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003334:	f023 0302 	bic.w	r3, r3, #2
 8003338:	f043 0202 	orr.w	r2, r3, #2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003348:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7b1b      	ldrb	r3, [r3, #12]
 800334e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003350:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	4313      	orrs	r3, r2
 8003356:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003360:	d003      	beq.n	800336a <HAL_ADC_Init+0xa2>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d102      	bne.n	8003370 <HAL_ADC_Init+0xa8>
 800336a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800336e:	e000      	b.n	8003372 <HAL_ADC_Init+0xaa>
 8003370:	2300      	movs	r3, #0
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	7d1b      	ldrb	r3, [r3, #20]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d119      	bne.n	80033b4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7b1b      	ldrb	r3, [r3, #12]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d109      	bne.n	800339c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	3b01      	subs	r3, #1
 800338e:	035a      	lsls	r2, r3, #13
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4313      	orrs	r3, r2
 8003394:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003398:	613b      	str	r3, [r7, #16]
 800339a:	e00b      	b.n	80033b4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033a0:	f043 0220 	orr.w	r2, r3, #32
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	f043 0201 	orr.w	r2, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	4b28      	ldr	r3, [pc, #160]	; (8003470 <HAL_ADC_Init+0x1a8>)
 80033d0:	4013      	ands	r3, r2
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6812      	ldr	r2, [r2, #0]
 80033d6:	68b9      	ldr	r1, [r7, #8]
 80033d8:	430b      	orrs	r3, r1
 80033da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033e4:	d003      	beq.n	80033ee <HAL_ADC_Init+0x126>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d104      	bne.n	80033f8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	3b01      	subs	r3, #1
 80033f4:	051b      	lsls	r3, r3, #20
 80033f6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68fa      	ldr	r2, [r7, #12]
 8003408:	430a      	orrs	r2, r1
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	4b18      	ldr	r3, [pc, #96]	; (8003474 <HAL_ADC_Init+0x1ac>)
 8003414:	4013      	ands	r3, r2
 8003416:	68ba      	ldr	r2, [r7, #8]
 8003418:	429a      	cmp	r2, r3
 800341a:	d10b      	bne.n	8003434 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003426:	f023 0303 	bic.w	r3, r3, #3
 800342a:	f043 0201 	orr.w	r2, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003432:	e018      	b.n	8003466 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003438:	f023 0312 	bic.w	r3, r3, #18
 800343c:	f043 0210 	orr.w	r2, r3, #16
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003448:	f043 0201 	orr.w	r2, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003454:	e007      	b.n	8003466 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345a:	f043 0210 	orr.w	r2, r3, #16
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003466:	7dfb      	ldrb	r3, [r7, #23]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	ffe1f7fd 	.word	0xffe1f7fd
 8003474:	ff1f0efe 	.word	0xff1f0efe

08003478 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003478:	b480      	push	{r7}
 800347a:	b085      	sub	sp, #20
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003482:	2300      	movs	r3, #0
 8003484:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x20>
 8003494:	2302      	movs	r3, #2
 8003496:	e0dc      	b.n	8003652 <HAL_ADC_ConfigChannel+0x1da>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b06      	cmp	r3, #6
 80034a6:	d81c      	bhi.n	80034e2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	4613      	mov	r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	4413      	add	r3, r2
 80034b8:	3b05      	subs	r3, #5
 80034ba:	221f      	movs	r2, #31
 80034bc:	fa02 f303 	lsl.w	r3, r2, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	4019      	ands	r1, r3
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	685a      	ldr	r2, [r3, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	3b05      	subs	r3, #5
 80034d4:	fa00 f203 	lsl.w	r2, r0, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	635a      	str	r2, [r3, #52]	; 0x34
 80034e0:	e03c      	b.n	800355c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b0c      	cmp	r3, #12
 80034e8:	d81c      	bhi.n	8003524 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685a      	ldr	r2, [r3, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	3b23      	subs	r3, #35	; 0x23
 80034fc:	221f      	movs	r2, #31
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	43db      	mvns	r3, r3
 8003504:	4019      	ands	r1, r3
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4413      	add	r3, r2
 8003514:	3b23      	subs	r3, #35	; 0x23
 8003516:	fa00 f203 	lsl.w	r2, r0, r3
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
 8003522:	e01b      	b.n	800355c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	3b41      	subs	r3, #65	; 0x41
 8003536:	221f      	movs	r2, #31
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	4019      	ands	r1, r3
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	6818      	ldr	r0, [r3, #0]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4413      	add	r3, r2
 800354e:	3b41      	subs	r3, #65	; 0x41
 8003550:	fa00 f203 	lsl.w	r2, r0, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2b09      	cmp	r3, #9
 8003562:	d91c      	bls.n	800359e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68d9      	ldr	r1, [r3, #12]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	3b1e      	subs	r3, #30
 8003576:	2207      	movs	r2, #7
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	43db      	mvns	r3, r3
 800357e:	4019      	ands	r1, r3
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	6898      	ldr	r0, [r3, #8]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	3b1e      	subs	r3, #30
 8003590:	fa00 f203 	lsl.w	r2, r0, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	430a      	orrs	r2, r1
 800359a:	60da      	str	r2, [r3, #12]
 800359c:	e019      	b.n	80035d2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	6919      	ldr	r1, [r3, #16]
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	4613      	mov	r3, r2
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	4413      	add	r3, r2
 80035ae:	2207      	movs	r2, #7
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	43db      	mvns	r3, r3
 80035b6:	4019      	ands	r1, r3
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6898      	ldr	r0, [r3, #8]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681a      	ldr	r2, [r3, #0]
 80035c0:	4613      	mov	r3, r2
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	4413      	add	r3, r2
 80035c6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	2b10      	cmp	r3, #16
 80035d8:	d003      	beq.n	80035e2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80035de:	2b11      	cmp	r3, #17
 80035e0:	d132      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a1d      	ldr	r2, [pc, #116]	; (800365c <HAL_ADC_ConfigChannel+0x1e4>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d125      	bne.n	8003638 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d126      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003608:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2b10      	cmp	r3, #16
 8003610:	d11a      	bne.n	8003648 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003612:	4b13      	ldr	r3, [pc, #76]	; (8003660 <HAL_ADC_ConfigChannel+0x1e8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a13      	ldr	r2, [pc, #76]	; (8003664 <HAL_ADC_ConfigChannel+0x1ec>)
 8003618:	fba2 2303 	umull	r2, r3, r2, r3
 800361c:	0c9a      	lsrs	r2, r3, #18
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	005b      	lsls	r3, r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003628:	e002      	b.n	8003630 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	3b01      	subs	r3, #1
 800362e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f9      	bne.n	800362a <HAL_ADC_ConfigChannel+0x1b2>
 8003636:	e007      	b.n	8003648 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003650:	7bfb      	ldrb	r3, [r7, #15]
}
 8003652:	4618      	mov	r0, r3
 8003654:	3714      	adds	r7, #20
 8003656:	46bd      	mov	sp, r7
 8003658:	bc80      	pop	{r7}
 800365a:	4770      	bx	lr
 800365c:	40012400 	.word	0x40012400
 8003660:	2000002c 	.word	0x2000002c
 8003664:	431bde83 	.word	0x431bde83

08003668 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003670:	2300      	movs	r3, #0
 8003672:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 0301 	and.w	r3, r3, #1
 800367e:	2b01      	cmp	r3, #1
 8003680:	d127      	bne.n	80036d2 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f022 0201 	bic.w	r2, r2, #1
 8003690:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003692:	f7ff fded 	bl	8003270 <HAL_GetTick>
 8003696:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003698:	e014      	b.n	80036c4 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800369a:	f7ff fde9 	bl	8003270 <HAL_GetTick>
 800369e:	4602      	mov	r2, r0
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	1ad3      	subs	r3, r2, r3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d90d      	bls.n	80036c4 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ac:	f043 0210 	orr.w	r2, r3, #16
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	f043 0201 	orr.w	r2, r3, #1
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e007      	b.n	80036d4 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d0e3      	beq.n	800369a <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036ec:	4b0c      	ldr	r3, [pc, #48]	; (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036f2:	68ba      	ldr	r2, [r7, #8]
 80036f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036f8:	4013      	ands	r3, r2
 80036fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800370e:	4a04      	ldr	r2, [pc, #16]	; (8003720 <__NVIC_SetPriorityGrouping+0x44>)
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	60d3      	str	r3, [r2, #12]
}
 8003714:	bf00      	nop
 8003716:	3714      	adds	r7, #20
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	e000ed00 	.word	0xe000ed00

08003724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003728:	4b04      	ldr	r3, [pc, #16]	; (800373c <__NVIC_GetPriorityGrouping+0x18>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	0a1b      	lsrs	r3, r3, #8
 800372e:	f003 0307 	and.w	r3, r3, #7
}
 8003732:	4618      	mov	r0, r3
 8003734:	46bd      	mov	sp, r7
 8003736:	bc80      	pop	{r7}
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	e000ed00 	.word	0xe000ed00

08003740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	4603      	mov	r3, r0
 8003748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	2b00      	cmp	r3, #0
 8003750:	db0b      	blt.n	800376a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003752:	79fb      	ldrb	r3, [r7, #7]
 8003754:	f003 021f 	and.w	r2, r3, #31
 8003758:	4906      	ldr	r1, [pc, #24]	; (8003774 <__NVIC_EnableIRQ+0x34>)
 800375a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800375e:	095b      	lsrs	r3, r3, #5
 8003760:	2001      	movs	r0, #1
 8003762:	fa00 f202 	lsl.w	r2, r0, r2
 8003766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	e000e100 	.word	0xe000e100

08003778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	4603      	mov	r3, r0
 8003780:	6039      	str	r1, [r7, #0]
 8003782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003788:	2b00      	cmp	r3, #0
 800378a:	db0a      	blt.n	80037a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	b2da      	uxtb	r2, r3
 8003790:	490c      	ldr	r1, [pc, #48]	; (80037c4 <__NVIC_SetPriority+0x4c>)
 8003792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003796:	0112      	lsls	r2, r2, #4
 8003798:	b2d2      	uxtb	r2, r2
 800379a:	440b      	add	r3, r1
 800379c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037a0:	e00a      	b.n	80037b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	b2da      	uxtb	r2, r3
 80037a6:	4908      	ldr	r1, [pc, #32]	; (80037c8 <__NVIC_SetPriority+0x50>)
 80037a8:	79fb      	ldrb	r3, [r7, #7]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	3b04      	subs	r3, #4
 80037b0:	0112      	lsls	r2, r2, #4
 80037b2:	b2d2      	uxtb	r2, r2
 80037b4:	440b      	add	r3, r1
 80037b6:	761a      	strb	r2, [r3, #24]
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	bc80      	pop	{r7}
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	e000e100 	.word	0xe000e100
 80037c8:	e000ed00 	.word	0xe000ed00

080037cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b089      	sub	sp, #36	; 0x24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	60b9      	str	r1, [r7, #8]
 80037d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0307 	and.w	r3, r3, #7
 80037de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f1c3 0307 	rsb	r3, r3, #7
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	bf28      	it	cs
 80037ea:	2304      	movcs	r3, #4
 80037ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3304      	adds	r3, #4
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d902      	bls.n	80037fc <NVIC_EncodePriority+0x30>
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	3b03      	subs	r3, #3
 80037fa:	e000      	b.n	80037fe <NVIC_EncodePriority+0x32>
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003800:	f04f 32ff 	mov.w	r2, #4294967295
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43da      	mvns	r2, r3
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	401a      	ands	r2, r3
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003814:	f04f 31ff 	mov.w	r1, #4294967295
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa01 f303 	lsl.w	r3, r1, r3
 800381e:	43d9      	mvns	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003824:	4313      	orrs	r3, r2
         );
}
 8003826:	4618      	mov	r0, r3
 8003828:	3724      	adds	r7, #36	; 0x24
 800382a:	46bd      	mov	sp, r7
 800382c:	bc80      	pop	{r7}
 800382e:	4770      	bx	lr

08003830 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	3b01      	subs	r3, #1
 800383c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003840:	d301      	bcc.n	8003846 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003842:	2301      	movs	r3, #1
 8003844:	e00f      	b.n	8003866 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003846:	4a0a      	ldr	r2, [pc, #40]	; (8003870 <SysTick_Config+0x40>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	3b01      	subs	r3, #1
 800384c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800384e:	210f      	movs	r1, #15
 8003850:	f04f 30ff 	mov.w	r0, #4294967295
 8003854:	f7ff ff90 	bl	8003778 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003858:	4b05      	ldr	r3, [pc, #20]	; (8003870 <SysTick_Config+0x40>)
 800385a:	2200      	movs	r2, #0
 800385c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800385e:	4b04      	ldr	r3, [pc, #16]	; (8003870 <SysTick_Config+0x40>)
 8003860:	2207      	movs	r2, #7
 8003862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	e000e010 	.word	0xe000e010

08003874 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	f7ff ff2d 	bl	80036dc <__NVIC_SetPriorityGrouping>
}
 8003882:	bf00      	nop
 8003884:	3708      	adds	r7, #8
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}

0800388a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	4603      	mov	r3, r0
 8003892:	60b9      	str	r1, [r7, #8]
 8003894:	607a      	str	r2, [r7, #4]
 8003896:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003898:	2300      	movs	r3, #0
 800389a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800389c:	f7ff ff42 	bl	8003724 <__NVIC_GetPriorityGrouping>
 80038a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	68b9      	ldr	r1, [r7, #8]
 80038a6:	6978      	ldr	r0, [r7, #20]
 80038a8:	f7ff ff90 	bl	80037cc <NVIC_EncodePriority>
 80038ac:	4602      	mov	r2, r0
 80038ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038b2:	4611      	mov	r1, r2
 80038b4:	4618      	mov	r0, r3
 80038b6:	f7ff ff5f 	bl	8003778 <__NVIC_SetPriority>
}
 80038ba:	bf00      	nop
 80038bc:	3718      	adds	r7, #24
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b082      	sub	sp, #8
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	4603      	mov	r3, r0
 80038ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d0:	4618      	mov	r0, r3
 80038d2:	f7ff ff35 	bl	8003740 <__NVIC_EnableIRQ>
}
 80038d6:	bf00      	nop
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}

080038de <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038de:	b580      	push	{r7, lr}
 80038e0:	b082      	sub	sp, #8
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7ff ffa2 	bl	8003830 <SysTick_Config>
 80038ec:	4603      	mov	r3, r0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
	...

080038f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b08b      	sub	sp, #44	; 0x2c
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003902:	2300      	movs	r3, #0
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003906:	2300      	movs	r3, #0
 8003908:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800390a:	e127      	b.n	8003b5c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800390c:	2201      	movs	r2, #1
 800390e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003910:	fa02 f303 	lsl.w	r3, r2, r3
 8003914:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	69fa      	ldr	r2, [r7, #28]
 800391c:	4013      	ands	r3, r2
 800391e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003920:	69ba      	ldr	r2, [r7, #24]
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	429a      	cmp	r2, r3
 8003926:	f040 8116 	bne.w	8003b56 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	2b12      	cmp	r3, #18
 8003930:	d034      	beq.n	800399c <HAL_GPIO_Init+0xa4>
 8003932:	2b12      	cmp	r3, #18
 8003934:	d80d      	bhi.n	8003952 <HAL_GPIO_Init+0x5a>
 8003936:	2b02      	cmp	r3, #2
 8003938:	d02b      	beq.n	8003992 <HAL_GPIO_Init+0x9a>
 800393a:	2b02      	cmp	r3, #2
 800393c:	d804      	bhi.n	8003948 <HAL_GPIO_Init+0x50>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d031      	beq.n	80039a6 <HAL_GPIO_Init+0xae>
 8003942:	2b01      	cmp	r3, #1
 8003944:	d01c      	beq.n	8003980 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003946:	e048      	b.n	80039da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003948:	2b03      	cmp	r3, #3
 800394a:	d043      	beq.n	80039d4 <HAL_GPIO_Init+0xdc>
 800394c:	2b11      	cmp	r3, #17
 800394e:	d01b      	beq.n	8003988 <HAL_GPIO_Init+0x90>
          break;
 8003950:	e043      	b.n	80039da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8003952:	4a89      	ldr	r2, [pc, #548]	; (8003b78 <HAL_GPIO_Init+0x280>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d026      	beq.n	80039a6 <HAL_GPIO_Init+0xae>
 8003958:	4a87      	ldr	r2, [pc, #540]	; (8003b78 <HAL_GPIO_Init+0x280>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d806      	bhi.n	800396c <HAL_GPIO_Init+0x74>
 800395e:	4a87      	ldr	r2, [pc, #540]	; (8003b7c <HAL_GPIO_Init+0x284>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d020      	beq.n	80039a6 <HAL_GPIO_Init+0xae>
 8003964:	4a86      	ldr	r2, [pc, #536]	; (8003b80 <HAL_GPIO_Init+0x288>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d01d      	beq.n	80039a6 <HAL_GPIO_Init+0xae>
          break;
 800396a:	e036      	b.n	80039da <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800396c:	4a85      	ldr	r2, [pc, #532]	; (8003b84 <HAL_GPIO_Init+0x28c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d019      	beq.n	80039a6 <HAL_GPIO_Init+0xae>
 8003972:	4a85      	ldr	r2, [pc, #532]	; (8003b88 <HAL_GPIO_Init+0x290>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d016      	beq.n	80039a6 <HAL_GPIO_Init+0xae>
 8003978:	4a84      	ldr	r2, [pc, #528]	; (8003b8c <HAL_GPIO_Init+0x294>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d013      	beq.n	80039a6 <HAL_GPIO_Init+0xae>
          break;
 800397e:	e02c      	b.n	80039da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	623b      	str	r3, [r7, #32]
          break;
 8003986:	e028      	b.n	80039da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	3304      	adds	r3, #4
 800398e:	623b      	str	r3, [r7, #32]
          break;
 8003990:	e023      	b.n	80039da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	3308      	adds	r3, #8
 8003998:	623b      	str	r3, [r7, #32]
          break;
 800399a:	e01e      	b.n	80039da <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	330c      	adds	r3, #12
 80039a2:	623b      	str	r3, [r7, #32]
          break;
 80039a4:	e019      	b.n	80039da <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d102      	bne.n	80039b4 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80039ae:	2304      	movs	r3, #4
 80039b0:	623b      	str	r3, [r7, #32]
          break;
 80039b2:	e012      	b.n	80039da <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d105      	bne.n	80039c8 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039bc:	2308      	movs	r3, #8
 80039be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	69fa      	ldr	r2, [r7, #28]
 80039c4:	611a      	str	r2, [r3, #16]
          break;
 80039c6:	e008      	b.n	80039da <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80039c8:	2308      	movs	r3, #8
 80039ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	69fa      	ldr	r2, [r7, #28]
 80039d0:	615a      	str	r2, [r3, #20]
          break;
 80039d2:	e002      	b.n	80039da <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80039d4:	2300      	movs	r3, #0
 80039d6:	623b      	str	r3, [r7, #32]
          break;
 80039d8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	2bff      	cmp	r3, #255	; 0xff
 80039de:	d801      	bhi.n	80039e4 <HAL_GPIO_Init+0xec>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	e001      	b.n	80039e8 <HAL_GPIO_Init+0xf0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
 80039e8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	2bff      	cmp	r3, #255	; 0xff
 80039ee:	d802      	bhi.n	80039f6 <HAL_GPIO_Init+0xfe>
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	e002      	b.n	80039fc <HAL_GPIO_Init+0x104>
 80039f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f8:	3b08      	subs	r3, #8
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	210f      	movs	r1, #15
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	fa01 f303 	lsl.w	r3, r1, r3
 8003a0a:	43db      	mvns	r3, r3
 8003a0c:	401a      	ands	r2, r3
 8003a0e:	6a39      	ldr	r1, [r7, #32]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	431a      	orrs	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 8096 	beq.w	8003b56 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003a2a:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_GPIO_Init+0x298>)
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	4a58      	ldr	r2, [pc, #352]	; (8003b90 <HAL_GPIO_Init+0x298>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6193      	str	r3, [r2, #24]
 8003a36:	4b56      	ldr	r3, [pc, #344]	; (8003b90 <HAL_GPIO_Init+0x298>)
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	60bb      	str	r3, [r7, #8]
 8003a40:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003a42:	4a54      	ldr	r2, [pc, #336]	; (8003b94 <HAL_GPIO_Init+0x29c>)
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	3302      	adds	r3, #2
 8003a4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a4e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	f003 0303 	and.w	r3, r3, #3
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	220f      	movs	r2, #15
 8003a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5e:	43db      	mvns	r3, r3
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	4013      	ands	r3, r2
 8003a64:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a4b      	ldr	r2, [pc, #300]	; (8003b98 <HAL_GPIO_Init+0x2a0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_Init+0x19e>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a4a      	ldr	r2, [pc, #296]	; (8003b9c <HAL_GPIO_Init+0x2a4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_Init+0x19a>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a49      	ldr	r2, [pc, #292]	; (8003ba0 <HAL_GPIO_Init+0x2a8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_Init+0x196>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a48      	ldr	r2, [pc, #288]	; (8003ba4 <HAL_GPIO_Init+0x2ac>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_Init+0x192>
 8003a86:	2303      	movs	r3, #3
 8003a88:	e006      	b.n	8003a98 <HAL_GPIO_Init+0x1a0>
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	e004      	b.n	8003a98 <HAL_GPIO_Init+0x1a0>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e002      	b.n	8003a98 <HAL_GPIO_Init+0x1a0>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_GPIO_Init+0x1a0>
 8003a96:	2300      	movs	r3, #0
 8003a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a9a:	f002 0203 	and.w	r2, r2, #3
 8003a9e:	0092      	lsls	r2, r2, #2
 8003aa0:	4093      	lsls	r3, r2
 8003aa2:	68fa      	ldr	r2, [r7, #12]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003aa8:	493a      	ldr	r1, [pc, #232]	; (8003b94 <HAL_GPIO_Init+0x29c>)
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3302      	adds	r3, #2
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d006      	beq.n	8003ad0 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003ac2:	4b39      	ldr	r3, [pc, #228]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4938      	ldr	r1, [pc, #224]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	600b      	str	r3, [r1, #0]
 8003ace:	e006      	b.n	8003ade <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003ad0:	4b35      	ldr	r3, [pc, #212]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	4933      	ldr	r1, [pc, #204]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003ada:	4013      	ands	r3, r2
 8003adc:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003aea:	4b2f      	ldr	r3, [pc, #188]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003aec:	685a      	ldr	r2, [r3, #4]
 8003aee:	492e      	ldr	r1, [pc, #184]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003af0:	69bb      	ldr	r3, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	604b      	str	r3, [r1, #4]
 8003af6:	e006      	b.n	8003b06 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003af8:	4b2b      	ldr	r3, [pc, #172]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	43db      	mvns	r3, r3
 8003b00:	4929      	ldr	r1, [pc, #164]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003b02:	4013      	ands	r3, r2
 8003b04:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003b12:	4b25      	ldr	r3, [pc, #148]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	4924      	ldr	r1, [pc, #144]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
 8003b1e:	e006      	b.n	8003b2e <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003b20:	4b21      	ldr	r3, [pc, #132]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003b22:	689a      	ldr	r2, [r3, #8]
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	43db      	mvns	r3, r3
 8003b28:	491f      	ldr	r1, [pc, #124]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d006      	beq.n	8003b48 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	491a      	ldr	r1, [pc, #104]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	60cb      	str	r3, [r1, #12]
 8003b46:	e006      	b.n	8003b56 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003b48:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003b4a:	68da      	ldr	r2, [r3, #12]
 8003b4c:	69bb      	ldr	r3, [r7, #24]
 8003b4e:	43db      	mvns	r3, r3
 8003b50:	4915      	ldr	r1, [pc, #84]	; (8003ba8 <HAL_GPIO_Init+0x2b0>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b58:	3301      	adds	r3, #1
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b62:	fa22 f303 	lsr.w	r3, r2, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f47f aed0 	bne.w	800390c <HAL_GPIO_Init+0x14>
  }
}
 8003b6c:	bf00      	nop
 8003b6e:	372c      	adds	r7, #44	; 0x2c
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bc80      	pop	{r7}
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	10210000 	.word	0x10210000
 8003b7c:	10110000 	.word	0x10110000
 8003b80:	10120000 	.word	0x10120000
 8003b84:	10310000 	.word	0x10310000
 8003b88:	10320000 	.word	0x10320000
 8003b8c:	10220000 	.word	0x10220000
 8003b90:	40021000 	.word	0x40021000
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40010800 	.word	0x40010800
 8003b9c:	40010c00 	.word	0x40010c00
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	40011400 	.word	0x40011400
 8003ba8:	40010400 	.word	0x40010400

08003bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	807b      	strh	r3, [r7, #2]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bbc:	787b      	ldrb	r3, [r7, #1]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d003      	beq.n	8003bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bc2:	887a      	ldrh	r2, [r7, #2]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003bc8:	e003      	b.n	8003bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003bca:	887b      	ldrh	r3, [r7, #2]
 8003bcc:	041a      	lsls	r2, r3, #16
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr

08003bdc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	460b      	mov	r3, r1
 8003be6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	887b      	ldrh	r3, [r7, #2]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bf4:	887a      	ldrh	r2, [r7, #2]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003bfa:	e002      	b.n	8003c02 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bfc:	887a      	ldrh	r2, [r7, #2]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	611a      	str	r2, [r3, #16]
}
 8003c02:	bf00      	nop
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr

08003c0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e10f      	b.n	8003e3e <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff f8aa 	bl	8002d8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2224      	movs	r2, #36	; 0x24
 8003c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0201 	bic.w	r2, r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c50:	f001 fb0e 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8003c54:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	4a7b      	ldr	r2, [pc, #492]	; (8003e48 <HAL_I2C_Init+0x23c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d807      	bhi.n	8003c70 <HAL_I2C_Init+0x64>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a7a      	ldr	r2, [pc, #488]	; (8003e4c <HAL_I2C_Init+0x240>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	bf94      	ite	ls
 8003c68:	2301      	movls	r3, #1
 8003c6a:	2300      	movhi	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	e006      	b.n	8003c7e <HAL_I2C_Init+0x72>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	4a77      	ldr	r2, [pc, #476]	; (8003e50 <HAL_I2C_Init+0x244>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	bf94      	ite	ls
 8003c78:	2301      	movls	r3, #1
 8003c7a:	2300      	movhi	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e0db      	b.n	8003e3e <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4a72      	ldr	r2, [pc, #456]	; (8003e54 <HAL_I2C_Init+0x248>)
 8003c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c8e:	0c9b      	lsrs	r3, r3, #18
 8003c90:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	4a64      	ldr	r2, [pc, #400]	; (8003e48 <HAL_I2C_Init+0x23c>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d802      	bhi.n	8003cc0 <HAL_I2C_Init+0xb4>
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	e009      	b.n	8003cd4 <HAL_I2C_Init+0xc8>
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cc6:	fb02 f303 	mul.w	r3, r2, r3
 8003cca:	4a63      	ldr	r2, [pc, #396]	; (8003e58 <HAL_I2C_Init+0x24c>)
 8003ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd0:	099b      	lsrs	r3, r3, #6
 8003cd2:	3301      	adds	r3, #1
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	430b      	orrs	r3, r1
 8003cda:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003ce6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	4956      	ldr	r1, [pc, #344]	; (8003e48 <HAL_I2C_Init+0x23c>)
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	d80d      	bhi.n	8003d10 <HAL_I2C_Init+0x104>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	1e59      	subs	r1, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d02:	3301      	adds	r3, #1
 8003d04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	bf38      	it	cc
 8003d0c:	2304      	movcc	r3, #4
 8003d0e:	e04f      	b.n	8003db0 <HAL_I2C_Init+0x1a4>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d111      	bne.n	8003d3c <HAL_I2C_Init+0x130>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	1e58      	subs	r0, r3, #1
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6859      	ldr	r1, [r3, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	440b      	add	r3, r1
 8003d26:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	bf0c      	ite	eq
 8003d34:	2301      	moveq	r3, #1
 8003d36:	2300      	movne	r3, #0
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	e012      	b.n	8003d62 <HAL_I2C_Init+0x156>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1e58      	subs	r0, r3, #1
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6859      	ldr	r1, [r3, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	0099      	lsls	r1, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d52:	3301      	adds	r3, #1
 8003d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	bf0c      	ite	eq
 8003d5c:	2301      	moveq	r3, #1
 8003d5e:	2300      	movne	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_I2C_Init+0x15e>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e022      	b.n	8003db0 <HAL_I2C_Init+0x1a4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10e      	bne.n	8003d90 <HAL_I2C_Init+0x184>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1e58      	subs	r0, r3, #1
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6859      	ldr	r1, [r3, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	440b      	add	r3, r1
 8003d80:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d84:	3301      	adds	r3, #1
 8003d86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8e:	e00f      	b.n	8003db0 <HAL_I2C_Init+0x1a4>
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	1e58      	subs	r0, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6859      	ldr	r1, [r3, #4]
 8003d98:	460b      	mov	r3, r1
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	0099      	lsls	r1, r3, #2
 8003da0:	440b      	add	r3, r1
 8003da2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da6:	3301      	adds	r3, #1
 8003da8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	6809      	ldr	r1, [r1, #0]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003dde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003de2:	687a      	ldr	r2, [r7, #4]
 8003de4:	6911      	ldr	r1, [r2, #16]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	68d2      	ldr	r2, [r2, #12]
 8003dea:	4311      	orrs	r1, r2
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	430b      	orrs	r3, r1
 8003df2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	695a      	ldr	r2, [r3, #20]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	000186a0 	.word	0x000186a0
 8003e4c:	001e847f 	.word	0x001e847f
 8003e50:	003d08ff 	.word	0x003d08ff
 8003e54:	431bde83 	.word	0x431bde83
 8003e58:	10624dd3 	.word	0x10624dd3

08003e5c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b088      	sub	sp, #32
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	607a      	str	r2, [r7, #4]
 8003e66:	461a      	mov	r2, r3
 8003e68:	460b      	mov	r3, r1
 8003e6a:	817b      	strh	r3, [r7, #10]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003e70:	f7ff f9fe 	bl	8003270 <HAL_GetTick>
 8003e74:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	2b20      	cmp	r3, #32
 8003e80:	f040 80e0 	bne.w	8004044 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	9300      	str	r3, [sp, #0]
 8003e88:	2319      	movs	r3, #25
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	4970      	ldr	r1, [pc, #448]	; (8004050 <HAL_I2C_Master_Transmit+0x1f4>)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fc3c 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	e0d3      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_I2C_Master_Transmit+0x50>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e0cc      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d007      	beq.n	8003ed2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f042 0201 	orr.w	r2, r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681a      	ldr	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2221      	movs	r2, #33	; 0x21
 8003ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2210      	movs	r2, #16
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	687a      	ldr	r2, [r7, #4]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	893a      	ldrh	r2, [r7, #8]
 8003f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f08:	b29a      	uxth	r2, r3
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	4a50      	ldr	r2, [pc, #320]	; (8004054 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f12:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f14:	8979      	ldrh	r1, [r7, #10]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	6a3a      	ldr	r2, [r7, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 faca 	bl	80044b4 <I2C_MasterRequestWrite>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e08d      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	613b      	str	r3, [r7, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f40:	e066      	b.n	8004010 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f42:	697a      	ldr	r2, [r7, #20]
 8003f44:	6a39      	ldr	r1, [r7, #32]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 fcb6 	bl	80048b8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d107      	bne.n	8003f6a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f68:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e06b      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	781a      	ldrb	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	695b      	ldr	r3, [r3, #20]
 8003fa4:	f003 0304 	and.w	r3, r3, #4
 8003fa8:	2b04      	cmp	r3, #4
 8003faa:	d11b      	bne.n	8003fe4 <HAL_I2C_Master_Transmit+0x188>
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d017      	beq.n	8003fe4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	781a      	ldrb	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fce:	b29b      	uxth	r3, r3
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fdc:	3b01      	subs	r3, #1
 8003fde:	b29a      	uxth	r2, r3
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	6a39      	ldr	r1, [r7, #32]
 8003fe8:	68f8      	ldr	r0, [r7, #12]
 8003fea:	f000 fca6 	bl	800493a <I2C_WaitOnBTFFlagUntilTimeout>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00d      	beq.n	8004010 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d107      	bne.n	800400c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800400a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e01a      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	2b00      	cmp	r3, #0
 8004016:	d194      	bne.n	8003f42 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004026:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004040:	2300      	movs	r3, #0
 8004042:	e000      	b.n	8004046 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004044:	2302      	movs	r3, #2
  }
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	00100002 	.word	0x00100002
 8004054:	ffff0000 	.word	0xffff0000

08004058 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b08c      	sub	sp, #48	; 0x30
 800405c:	af02      	add	r7, sp, #8
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	607a      	str	r2, [r7, #4]
 8004062:	461a      	mov	r2, r3
 8004064:	460b      	mov	r3, r1
 8004066:	817b      	strh	r3, [r7, #10]
 8004068:	4613      	mov	r3, r2
 800406a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800406c:	f7ff f900 	bl	8003270 <HAL_GetTick>
 8004070:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004078:	b2db      	uxtb	r3, r3
 800407a:	2b20      	cmp	r3, #32
 800407c:	f040 8213 	bne.w	80044a6 <HAL_I2C_Master_Receive+0x44e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	9300      	str	r3, [sp, #0]
 8004084:	2319      	movs	r3, #25
 8004086:	2201      	movs	r2, #1
 8004088:	497e      	ldr	r1, [pc, #504]	; (8004284 <HAL_I2C_Master_Receive+0x22c>)
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fb3e 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004096:	2302      	movs	r3, #2
 8004098:	e206      	b.n	80044a8 <HAL_I2C_Master_Receive+0x450>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d101      	bne.n	80040a8 <HAL_I2C_Master_Receive+0x50>
 80040a4:	2302      	movs	r3, #2
 80040a6:	e1ff      	b.n	80044a8 <HAL_I2C_Master_Receive+0x450>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d007      	beq.n	80040ce <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f042 0201 	orr.w	r2, r2, #1
 80040cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80040dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2222      	movs	r2, #34	; 0x22
 80040e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2210      	movs	r2, #16
 80040ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	893a      	ldrh	r2, [r7, #8]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29a      	uxth	r2, r3
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	4a5e      	ldr	r2, [pc, #376]	; (8004288 <HAL_I2C_Master_Receive+0x230>)
 800410e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004110:	8979      	ldrh	r1, [r7, #10]
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 fa42 	bl	80045a0 <I2C_MasterRequestRead>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e1c0      	b.n	80044a8 <HAL_I2C_Master_Receive+0x450>
    }

    if (hi2c->XferSize == 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800412a:	2b00      	cmp	r3, #0
 800412c:	d113      	bne.n	8004156 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800412e:	2300      	movs	r3, #0
 8004130:	623b      	str	r3, [r7, #32]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	695b      	ldr	r3, [r3, #20]
 8004138:	623b      	str	r3, [r7, #32]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	623b      	str	r3, [r7, #32]
 8004142:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	681a      	ldr	r2, [r3, #0]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004152:	601a      	str	r2, [r3, #0]
 8004154:	e194      	b.n	8004480 <HAL_I2C_Master_Receive+0x428>
    }
    else if (hi2c->XferSize == 1U)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800415a:	2b01      	cmp	r3, #1
 800415c:	d11d      	bne.n	800419a <HAL_I2C_Master_Receive+0x142>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800416c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800416e:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	695b      	ldr	r3, [r3, #20]
 800417a:	61fb      	str	r3, [r7, #28]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	61fb      	str	r3, [r7, #28]
 8004184:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004194:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004196:	b662      	cpsie	i
 8004198:	e172      	b.n	8004480 <HAL_I2C_Master_Receive+0x428>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d11d      	bne.n	80041de <HAL_I2C_Master_Receive+0x186>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80041b2:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041b4:	2300      	movs	r3, #0
 80041b6:	61bb      	str	r3, [r7, #24]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	69bb      	ldr	r3, [r7, #24]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80041da:	b662      	cpsie	i
 80041dc:	e150      	b.n	8004480 <HAL_I2C_Master_Receive+0x428>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681a      	ldr	r2, [r3, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041ee:	2300      	movs	r3, #0
 80041f0:	617b      	str	r3, [r7, #20]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	617b      	str	r3, [r7, #20]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	617b      	str	r3, [r7, #20]
 8004202:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004204:	e13c      	b.n	8004480 <HAL_I2C_Master_Receive+0x428>
    {
      if (hi2c->XferSize <= 3U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420a:	2b03      	cmp	r3, #3
 800420c:	f200 80f5 	bhi.w	80043fa <HAL_I2C_Master_Receive+0x3a2>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004214:	2b01      	cmp	r3, #1
 8004216:	d123      	bne.n	8004260 <HAL_I2C_Master_Receive+0x208>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 fbcd 	bl	80049bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d001      	beq.n	800422c <HAL_I2C_Master_Receive+0x1d4>
          {
            return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e13d      	b.n	80044a8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	691a      	ldr	r2, [r3, #16]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004248:	3b01      	subs	r3, #1
 800424a:	b29a      	uxth	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004254:	b29b      	uxth	r3, r3
 8004256:	3b01      	subs	r3, #1
 8004258:	b29a      	uxth	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800425e:	e10f      	b.n	8004480 <HAL_I2C_Master_Receive+0x428>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004264:	2b02      	cmp	r3, #2
 8004266:	d150      	bne.n	800430a <HAL_I2C_Master_Receive+0x2b2>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426e:	2200      	movs	r2, #0
 8004270:	4906      	ldr	r1, [pc, #24]	; (800428c <HAL_I2C_Master_Receive+0x234>)
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f000 fa4a 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d008      	beq.n	8004290 <HAL_I2C_Master_Receive+0x238>
          {
            return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e112      	b.n	80044a8 <HAL_I2C_Master_Receive+0x450>
 8004282:	bf00      	nop
 8004284:	00100002 	.word	0x00100002
 8004288:	ffff0000 	.word	0xffff0000
 800428c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8004290:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042a0:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042be:	3b01      	subs	r3, #1
 80042c0:	b29a      	uxth	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3b01      	subs	r3, #1
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80042d4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	691a      	ldr	r2, [r3, #16]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042f2:	3b01      	subs	r3, #1
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042fe:	b29b      	uxth	r3, r3
 8004300:	3b01      	subs	r3, #1
 8004302:	b29a      	uxth	r2, r3
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004308:	e0ba      	b.n	8004480 <HAL_I2C_Master_Receive+0x428>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004310:	2200      	movs	r2, #0
 8004312:	4967      	ldr	r1, [pc, #412]	; (80044b0 <HAL_I2C_Master_Receive+0x458>)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f9f9 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_I2C_Master_Receive+0x2cc>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e0c1      	b.n	80044a8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004332:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8004334:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004352:	3b01      	subs	r3, #1
 8004354:	b29a      	uxth	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435e:	b29b      	uxth	r3, r3
 8004360:	3b01      	subs	r3, #1
 8004362:	b29a      	uxth	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436e:	2200      	movs	r2, #0
 8004370:	494f      	ldr	r1, [pc, #316]	; (80044b0 <HAL_I2C_Master_Receive+0x458>)
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f9ca 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Master_Receive+0x32a>
          {
            return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e092      	b.n	80044a8 <HAL_I2C_Master_Receive+0x450>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004390:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	691a      	ldr	r2, [r3, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	1c5a      	adds	r2, r3, #1
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043ae:	3b01      	subs	r3, #1
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	3b01      	subs	r3, #1
 80043be:	b29a      	uxth	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80043c4:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	691a      	ldr	r2, [r3, #16]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043f8:	e042      	b.n	8004480 <HAL_I2C_Master_Receive+0x428>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043fe:	68f8      	ldr	r0, [r7, #12]
 8004400:	f000 fadc 	bl	80049bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8004404:	4603      	mov	r3, r0
 8004406:	2b00      	cmp	r3, #0
 8004408:	d001      	beq.n	800440e <HAL_I2C_Master_Receive+0x3b6>
        {
          return HAL_ERROR;
 800440a:	2301      	movs	r3, #1
 800440c:	e04c      	b.n	80044a8 <HAL_I2C_Master_Receive+0x450>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	691a      	ldr	r2, [r3, #16]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	1c5a      	adds	r2, r3, #1
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800442a:	3b01      	subs	r3, #1
 800442c:	b29a      	uxth	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004436:	b29b      	uxth	r3, r3
 8004438:	3b01      	subs	r3, #1
 800443a:	b29a      	uxth	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	f003 0304 	and.w	r3, r3, #4
 800444a:	2b04      	cmp	r3, #4
 800444c:	d118      	bne.n	8004480 <HAL_I2C_Master_Receive+0x428>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004484:	2b00      	cmp	r3, #0
 8004486:	f47f aebe 	bne.w	8004206 <HAL_I2C_Master_Receive+0x1ae>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	e000      	b.n	80044a8 <HAL_I2C_Master_Receive+0x450>
  }
  else
  {
    return HAL_BUSY;
 80044a6:	2302      	movs	r3, #2
  }
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3728      	adds	r7, #40	; 0x28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}
 80044b0:	00010004 	.word	0x00010004

080044b4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af02      	add	r7, sp, #8
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	603b      	str	r3, [r7, #0]
 80044c0:	460b      	mov	r3, r1
 80044c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2b08      	cmp	r3, #8
 80044ce:	d006      	beq.n	80044de <I2C_MasterRequestWrite+0x2a>
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d003      	beq.n	80044de <I2C_MasterRequestWrite+0x2a>
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044dc:	d108      	bne.n	80044f0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044ec:	601a      	str	r2, [r3, #0]
 80044ee:	e00b      	b.n	8004508 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f4:	2b12      	cmp	r3, #18
 80044f6:	d107      	bne.n	8004508 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004506:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 f8f9 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 800451a:	4603      	mov	r3, r0
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e035      	b.n	8004590 <I2C_MasterRequestWrite+0xdc>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800452c:	d108      	bne.n	8004540 <I2C_MasterRequestWrite+0x8c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800452e:	897b      	ldrh	r3, [r7, #10]
 8004530:	b2db      	uxtb	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800453c:	611a      	str	r2, [r3, #16]
 800453e:	e01b      	b.n	8004578 <I2C_MasterRequestWrite+0xc4>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004540:	897b      	ldrh	r3, [r7, #10]
 8004542:	11db      	asrs	r3, r3, #7
 8004544:	b2db      	uxtb	r3, r3
 8004546:	f003 0306 	and.w	r3, r3, #6
 800454a:	b2db      	uxtb	r3, r3
 800454c:	f063 030f 	orn	r3, r3, #15
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	490e      	ldr	r1, [pc, #56]	; (8004598 <I2C_MasterRequestWrite+0xe4>)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f000 f92b 	bl	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <I2C_MasterRequestWrite+0xba>
    {
      return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e010      	b.n	8004590 <I2C_MasterRequestWrite+0xdc>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800456e:	897b      	ldrh	r3, [r7, #10]
 8004570:	b2da      	uxtb	r2, r3
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	4907      	ldr	r1, [pc, #28]	; (800459c <I2C_MasterRequestWrite+0xe8>)
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f000 f91b 	bl	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <I2C_MasterRequestWrite+0xda>
  {
    return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <I2C_MasterRequestWrite+0xdc>
  }

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3718      	adds	r7, #24
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}
 8004598:	00010008 	.word	0x00010008
 800459c:	00010002 	.word	0x00010002

080045a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af02      	add	r7, sp, #8
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	607a      	str	r2, [r7, #4]
 80045aa:	603b      	str	r3, [r7, #0]
 80045ac:	460b      	mov	r3, r1
 80045ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	2b08      	cmp	r3, #8
 80045ca:	d006      	beq.n	80045da <I2C_MasterRequestRead+0x3a>
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d003      	beq.n	80045da <I2C_MasterRequestRead+0x3a>
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045d8:	d108      	bne.n	80045ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045e8:	601a      	str	r2, [r3, #0]
 80045ea:	e00b      	b.n	8004604 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	2b11      	cmp	r3, #17
 80045f2:	d107      	bne.n	8004604 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004602:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	9300      	str	r3, [sp, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f87b 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e06d      	b.n	80046fc <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004628:	d108      	bne.n	800463c <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800462a:	897b      	ldrh	r3, [r7, #10]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f043 0301 	orr.w	r3, r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	611a      	str	r2, [r3, #16]
 800463a:	e053      	b.n	80046e4 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800463c:	897b      	ldrh	r3, [r7, #10]
 800463e:	11db      	asrs	r3, r3, #7
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 0306 	and.w	r3, r3, #6
 8004646:	b2db      	uxtb	r3, r3
 8004648:	f063 030f 	orn	r3, r3, #15
 800464c:	b2da      	uxtb	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	492a      	ldr	r1, [pc, #168]	; (8004704 <I2C_MasterRequestRead+0x164>)
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f8ad 	bl	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e048      	b.n	80046fc <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800466a:	897b      	ldrh	r3, [r7, #10]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	687a      	ldr	r2, [r7, #4]
 8004678:	4923      	ldr	r1, [pc, #140]	; (8004708 <I2C_MasterRequestRead+0x168>)
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f89d 	bl	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d001      	beq.n	800468a <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e038      	b.n	80046fc <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800468a:	2300      	movs	r3, #0
 800468c:	613b      	str	r3, [r7, #16]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	613b      	str	r3, [r7, #16]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80046ae:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	9300      	str	r3, [sp, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 f825 	bl	800470c <I2C_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e017      	b.n	80046fc <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80046cc:	897b      	ldrh	r3, [r7, #10]
 80046ce:	11db      	asrs	r3, r3, #7
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f003 0306 	and.w	r3, r3, #6
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f063 030e 	orn	r3, r3, #14
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4907      	ldr	r1, [pc, #28]	; (8004708 <I2C_MasterRequestRead+0x168>)
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f865 	bl	80047ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}
 8004704:	00010008 	.word	0x00010008
 8004708:	00010002 	.word	0x00010002

0800470c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	603b      	str	r3, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800471c:	e025      	b.n	800476a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004724:	d021      	beq.n	800476a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004726:	f7fe fda3 	bl	8003270 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	69bb      	ldr	r3, [r7, #24]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d302      	bcc.n	800473c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d116      	bne.n	800476a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	f043 0220 	orr.w	r2, r3, #32
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e023      	b.n	80047b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	0c1b      	lsrs	r3, r3, #16
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d10d      	bne.n	8004790 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	695b      	ldr	r3, [r3, #20]
 800477a:	43da      	mvns	r2, r3
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4013      	ands	r3, r2
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	bf0c      	ite	eq
 8004786:	2301      	moveq	r3, #1
 8004788:	2300      	movne	r3, #0
 800478a:	b2db      	uxtb	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	e00c      	b.n	80047aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	43da      	mvns	r2, r3
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	4013      	ands	r3, r2
 800479c:	b29b      	uxth	r3, r3
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf0c      	ite	eq
 80047a2:	2301      	moveq	r3, #1
 80047a4:	2300      	movne	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	461a      	mov	r2, r3
 80047aa:	79fb      	ldrb	r3, [r7, #7]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d0b6      	beq.n	800471e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	607a      	str	r2, [r7, #4]
 80047c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047c8:	e051      	b.n	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d8:	d123      	bne.n	8004822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f043 0204 	orr.w	r2, r3, #4
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e046      	b.n	80048b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d021      	beq.n	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482a:	f7fe fd21 	bl	8003270 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	429a      	cmp	r2, r3
 8004838:	d302      	bcc.n	8004840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d116      	bne.n	800486e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2220      	movs	r2, #32
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f043 0220 	orr.w	r2, r3, #32
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	2200      	movs	r2, #0
 8004866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e020      	b.n	80048b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	d10c      	bne.n	8004892 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	43da      	mvns	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4013      	ands	r3, r2
 8004884:	b29b      	uxth	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	bf14      	ite	ne
 800488a:	2301      	movne	r3, #1
 800488c:	2300      	moveq	r3, #0
 800488e:	b2db      	uxtb	r3, r3
 8004890:	e00b      	b.n	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	699b      	ldr	r3, [r3, #24]
 8004898:	43da      	mvns	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	4013      	ands	r3, r2
 800489e:	b29b      	uxth	r3, r3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d18d      	bne.n	80047ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3710      	adds	r7, #16
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}

080048b8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048c4:	e02d      	b.n	8004922 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f000 f8ce 	bl	8004a68 <I2C_IsAcknowledgeFailed>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e02d      	b.n	8004932 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048dc:	d021      	beq.n	8004922 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048de:	f7fe fcc7 	bl	8003270 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d302      	bcc.n	80048f4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d116      	bne.n	8004922 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490e:	f043 0220 	orr.w	r2, r3, #32
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e007      	b.n	8004932 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	695b      	ldr	r3, [r3, #20]
 8004928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800492c:	2b80      	cmp	r3, #128	; 0x80
 800492e:	d1ca      	bne.n	80048c6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	3710      	adds	r7, #16
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b084      	sub	sp, #16
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004946:	e02d      	b.n	80049a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f88d 	bl	8004a68 <I2C_IsAcknowledgeFailed>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e02d      	b.n	80049b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800495e:	d021      	beq.n	80049a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004960:	f7fe fc86 	bl	8003270 <HAL_GetTick>
 8004964:	4602      	mov	r2, r0
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	68ba      	ldr	r2, [r7, #8]
 800496c:	429a      	cmp	r2, r3
 800496e:	d302      	bcc.n	8004976 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d116      	bne.n	80049a4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	f043 0220 	orr.w	r2, r3, #32
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	e007      	b.n	80049b4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d1ca      	bne.n	8004948 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049b2:	2300      	movs	r3, #0
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	3710      	adds	r7, #16
 80049b8:	46bd      	mov	sp, r7
 80049ba:	bd80      	pop	{r7, pc}

080049bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b084      	sub	sp, #16
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049c8:	e042      	b.n	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	f003 0310 	and.w	r3, r3, #16
 80049d4:	2b10      	cmp	r3, #16
 80049d6:	d119      	bne.n	8004a0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f06f 0210 	mvn.w	r2, #16
 80049e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2200      	movs	r2, #0
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2220      	movs	r2, #32
 80049ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e029      	b.n	8004a60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a0c:	f7fe fc30 	bl	8003270 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d302      	bcc.n	8004a22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d116      	bne.n	8004a50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2220      	movs	r2, #32
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	f043 0220 	orr.w	r2, r3, #32
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e007      	b.n	8004a60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a5a:	2b40      	cmp	r3, #64	; 0x40
 8004a5c:	d1b5      	bne.n	80049ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3710      	adds	r7, #16
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bd80      	pop	{r7, pc}

08004a68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	695b      	ldr	r3, [r3, #20]
 8004a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7e:	d11b      	bne.n	8004ab8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2220      	movs	r2, #32
 8004a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	f043 0204 	orr.w	r2, r3, #4
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e26c      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 8087 	beq.w	8004bf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ae4:	4b92      	ldr	r3, [pc, #584]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f003 030c 	and.w	r3, r3, #12
 8004aec:	2b04      	cmp	r3, #4
 8004aee:	d00c      	beq.n	8004b0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004af0:	4b8f      	ldr	r3, [pc, #572]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f003 030c 	and.w	r3, r3, #12
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d112      	bne.n	8004b22 <HAL_RCC_OscConfig+0x5e>
 8004afc:	4b8c      	ldr	r3, [pc, #560]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b08:	d10b      	bne.n	8004b22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b0a:	4b89      	ldr	r3, [pc, #548]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d06c      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x12c>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d168      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e246      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2a:	d106      	bne.n	8004b3a <HAL_RCC_OscConfig+0x76>
 8004b2c:	4b80      	ldr	r3, [pc, #512]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a7f      	ldr	r2, [pc, #508]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b36:	6013      	str	r3, [r2, #0]
 8004b38:	e02e      	b.n	8004b98 <HAL_RCC_OscConfig+0xd4>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10c      	bne.n	8004b5c <HAL_RCC_OscConfig+0x98>
 8004b42:	4b7b      	ldr	r3, [pc, #492]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a7a      	ldr	r2, [pc, #488]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	4b78      	ldr	r3, [pc, #480]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a77      	ldr	r2, [pc, #476]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e01d      	b.n	8004b98 <HAL_RCC_OscConfig+0xd4>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0xbc>
 8004b66:	4b72      	ldr	r3, [pc, #456]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a71      	ldr	r2, [pc, #452]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	4b6f      	ldr	r3, [pc, #444]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a6e      	ldr	r2, [pc, #440]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e00b      	b.n	8004b98 <HAL_RCC_OscConfig+0xd4>
 8004b80:	4b6b      	ldr	r3, [pc, #428]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a6a      	ldr	r2, [pc, #424]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	4b68      	ldr	r3, [pc, #416]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a67      	ldr	r2, [pc, #412]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d013      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba0:	f7fe fb66 	bl	8003270 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ba8:	f7fe fb62 	bl	8003270 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	; 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e1fa      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	4b5d      	ldr	r3, [pc, #372]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0xe4>
 8004bc6:	e014      	b.n	8004bf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fe fb52 	bl	8003270 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fe fb4e 	bl	8003270 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e1e6      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be2:	4b53      	ldr	r3, [pc, #332]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x10c>
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d063      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bfe:	4b4c      	ldr	r3, [pc, #304]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00b      	beq.n	8004c22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004c0a:	4b49      	ldr	r3, [pc, #292]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d11c      	bne.n	8004c50 <HAL_RCC_OscConfig+0x18c>
 8004c16:	4b46      	ldr	r3, [pc, #280]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d116      	bne.n	8004c50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c22:	4b43      	ldr	r3, [pc, #268]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <HAL_RCC_OscConfig+0x176>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d001      	beq.n	8004c3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e1ba      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3a:	4b3d      	ldr	r3, [pc, #244]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	695b      	ldr	r3, [r3, #20]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4939      	ldr	r1, [pc, #228]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4e:	e03a      	b.n	8004cc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c58:	4b36      	ldr	r3, [pc, #216]	; (8004d34 <HAL_RCC_OscConfig+0x270>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c5e:	f7fe fb07 	bl	8003270 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c66:	f7fe fb03 	bl	8003270 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e19b      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c78:	4b2d      	ldr	r3, [pc, #180]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c84:	4b2a      	ldr	r3, [pc, #168]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4927      	ldr	r1, [pc, #156]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	600b      	str	r3, [r1, #0]
 8004c98:	e015      	b.n	8004cc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9a:	4b26      	ldr	r3, [pc, #152]	; (8004d34 <HAL_RCC_OscConfig+0x270>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fe fae6 	bl	8003270 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ca8:	f7fe fae2 	bl	8003270 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e17a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cba:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d03a      	beq.n	8004d48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d019      	beq.n	8004d0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cda:	4b17      	ldr	r3, [pc, #92]	; (8004d38 <HAL_RCC_OscConfig+0x274>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce0:	f7fe fac6 	bl	8003270 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ce8:	f7fe fac2 	bl	8003270 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e15a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfa:	4b0d      	ldr	r3, [pc, #52]	; (8004d30 <HAL_RCC_OscConfig+0x26c>)
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004d06:	2001      	movs	r0, #1
 8004d08:	f000 fada 	bl	80052c0 <RCC_Delay>
 8004d0c:	e01c      	b.n	8004d48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d0e:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <HAL_RCC_OscConfig+0x274>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d14:	f7fe faac 	bl	8003270 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d1a:	e00f      	b.n	8004d3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d1c:	f7fe faa8 	bl	8003270 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d908      	bls.n	8004d3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e140      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
 8004d2e:	bf00      	nop
 8004d30:	40021000 	.word	0x40021000
 8004d34:	42420000 	.word	0x42420000
 8004d38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d3c:	4b9e      	ldr	r3, [pc, #632]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	f003 0302 	and.w	r3, r3, #2
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d1e9      	bne.n	8004d1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 0304 	and.w	r3, r3, #4
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f000 80a6 	beq.w	8004ea2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d56:	2300      	movs	r3, #0
 8004d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d5a:	4b97      	ldr	r3, [pc, #604]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004d5c:	69db      	ldr	r3, [r3, #28]
 8004d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10d      	bne.n	8004d82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d66:	4b94      	ldr	r3, [pc, #592]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4a93      	ldr	r2, [pc, #588]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d70:	61d3      	str	r3, [r2, #28]
 8004d72:	4b91      	ldr	r3, [pc, #580]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004d74:	69db      	ldr	r3, [r3, #28]
 8004d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	60bb      	str	r3, [r7, #8]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d82:	4b8e      	ldr	r3, [pc, #568]	; (8004fbc <HAL_RCC_OscConfig+0x4f8>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d118      	bne.n	8004dc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d8e:	4b8b      	ldr	r3, [pc, #556]	; (8004fbc <HAL_RCC_OscConfig+0x4f8>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a8a      	ldr	r2, [pc, #552]	; (8004fbc <HAL_RCC_OscConfig+0x4f8>)
 8004d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d9a:	f7fe fa69 	bl	8003270 <HAL_GetTick>
 8004d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004da0:	e008      	b.n	8004db4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da2:	f7fe fa65 	bl	8003270 <HAL_GetTick>
 8004da6:	4602      	mov	r2, r0
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	1ad3      	subs	r3, r2, r3
 8004dac:	2b64      	cmp	r3, #100	; 0x64
 8004dae:	d901      	bls.n	8004db4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004db0:	2303      	movs	r3, #3
 8004db2:	e0fd      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db4:	4b81      	ldr	r3, [pc, #516]	; (8004fbc <HAL_RCC_OscConfig+0x4f8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d0f0      	beq.n	8004da2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d106      	bne.n	8004dd6 <HAL_RCC_OscConfig+0x312>
 8004dc8:	4b7b      	ldr	r3, [pc, #492]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	4a7a      	ldr	r2, [pc, #488]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004dce:	f043 0301 	orr.w	r3, r3, #1
 8004dd2:	6213      	str	r3, [r2, #32]
 8004dd4:	e02d      	b.n	8004e32 <HAL_RCC_OscConfig+0x36e>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10c      	bne.n	8004df8 <HAL_RCC_OscConfig+0x334>
 8004dde:	4b76      	ldr	r3, [pc, #472]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004de0:	6a1b      	ldr	r3, [r3, #32]
 8004de2:	4a75      	ldr	r2, [pc, #468]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004de4:	f023 0301 	bic.w	r3, r3, #1
 8004de8:	6213      	str	r3, [r2, #32]
 8004dea:	4b73      	ldr	r3, [pc, #460]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	4a72      	ldr	r2, [pc, #456]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004df0:	f023 0304 	bic.w	r3, r3, #4
 8004df4:	6213      	str	r3, [r2, #32]
 8004df6:	e01c      	b.n	8004e32 <HAL_RCC_OscConfig+0x36e>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	2b05      	cmp	r3, #5
 8004dfe:	d10c      	bne.n	8004e1a <HAL_RCC_OscConfig+0x356>
 8004e00:	4b6d      	ldr	r3, [pc, #436]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e02:	6a1b      	ldr	r3, [r3, #32]
 8004e04:	4a6c      	ldr	r2, [pc, #432]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e06:	f043 0304 	orr.w	r3, r3, #4
 8004e0a:	6213      	str	r3, [r2, #32]
 8004e0c:	4b6a      	ldr	r3, [pc, #424]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	4a69      	ldr	r2, [pc, #420]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e12:	f043 0301 	orr.w	r3, r3, #1
 8004e16:	6213      	str	r3, [r2, #32]
 8004e18:	e00b      	b.n	8004e32 <HAL_RCC_OscConfig+0x36e>
 8004e1a:	4b67      	ldr	r3, [pc, #412]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	4a66      	ldr	r2, [pc, #408]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e20:	f023 0301 	bic.w	r3, r3, #1
 8004e24:	6213      	str	r3, [r2, #32]
 8004e26:	4b64      	ldr	r3, [pc, #400]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	4a63      	ldr	r2, [pc, #396]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e2c:	f023 0304 	bic.w	r3, r3, #4
 8004e30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d015      	beq.n	8004e66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e3a:	f7fe fa19 	bl	8003270 <HAL_GetTick>
 8004e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e40:	e00a      	b.n	8004e58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e42:	f7fe fa15 	bl	8003270 <HAL_GetTick>
 8004e46:	4602      	mov	r2, r0
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	1ad3      	subs	r3, r2, r3
 8004e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d901      	bls.n	8004e58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004e54:	2303      	movs	r3, #3
 8004e56:	e0ab      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e58:	4b57      	ldr	r3, [pc, #348]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e5a:	6a1b      	ldr	r3, [r3, #32]
 8004e5c:	f003 0302 	and.w	r3, r3, #2
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d0ee      	beq.n	8004e42 <HAL_RCC_OscConfig+0x37e>
 8004e64:	e014      	b.n	8004e90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e66:	f7fe fa03 	bl	8003270 <HAL_GetTick>
 8004e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6c:	e00a      	b.n	8004e84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e6e:	f7fe f9ff 	bl	8003270 <HAL_GetTick>
 8004e72:	4602      	mov	r2, r0
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e095      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e84:	4b4c      	ldr	r3, [pc, #304]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d1ee      	bne.n	8004e6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e90:	7dfb      	ldrb	r3, [r7, #23]
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d105      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e96:	4b48      	ldr	r3, [pc, #288]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e98:	69db      	ldr	r3, [r3, #28]
 8004e9a:	4a47      	ldr	r2, [pc, #284]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ea0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	f000 8081 	beq.w	8004fae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004eac:	4b42      	ldr	r3, [pc, #264]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	f003 030c 	and.w	r3, r3, #12
 8004eb4:	2b08      	cmp	r3, #8
 8004eb6:	d061      	beq.n	8004f7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	69db      	ldr	r3, [r3, #28]
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d146      	bne.n	8004f4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec0:	4b3f      	ldr	r3, [pc, #252]	; (8004fc0 <HAL_RCC_OscConfig+0x4fc>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec6:	f7fe f9d3 	bl	8003270 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ece:	f7fe f9cf 	bl	8003270 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e067      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004ee0:	4b35      	ldr	r3, [pc, #212]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a1b      	ldr	r3, [r3, #32]
 8004ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef4:	d108      	bne.n	8004f08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004ef6:	4b30      	ldr	r3, [pc, #192]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	492d      	ldr	r1, [pc, #180]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004f08:	4b2b      	ldr	r3, [pc, #172]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a19      	ldr	r1, [r3, #32]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	4927      	ldr	r1, [pc, #156]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f20:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <HAL_RCC_OscConfig+0x4fc>)
 8004f22:	2201      	movs	r2, #1
 8004f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f26:	f7fe f9a3 	bl	8003270 <HAL_GetTick>
 8004f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f2c:	e008      	b.n	8004f40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f2e:	f7fe f99f 	bl	8003270 <HAL_GetTick>
 8004f32:	4602      	mov	r2, r0
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	1ad3      	subs	r3, r2, r3
 8004f38:	2b02      	cmp	r3, #2
 8004f3a:	d901      	bls.n	8004f40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004f3c:	2303      	movs	r3, #3
 8004f3e:	e037      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004f40:	4b1d      	ldr	r3, [pc, #116]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d0f0      	beq.n	8004f2e <HAL_RCC_OscConfig+0x46a>
 8004f4c:	e02f      	b.n	8004fae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b1c      	ldr	r3, [pc, #112]	; (8004fc0 <HAL_RCC_OscConfig+0x4fc>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f54:	f7fe f98c 	bl	8003270 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fe f988 	bl	8003270 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e020      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004f6e:	4b12      	ldr	r3, [pc, #72]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x498>
 8004f7a:	e018      	b.n	8004fae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d101      	bne.n	8004f88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e013      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004f88:	4b0b      	ldr	r3, [pc, #44]	; (8004fb8 <HAL_RCC_OscConfig+0x4f4>)
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a1b      	ldr	r3, [r3, #32]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d106      	bne.n	8004faa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d001      	beq.n	8004fae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e000      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3718      	adds	r7, #24
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	40021000 	.word	0x40021000
 8004fbc:	40007000 	.word	0x40007000
 8004fc0:	42420060 	.word	0x42420060

08004fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d101      	bne.n	8004fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e0d0      	b.n	800517a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fd8:	4b6a      	ldr	r3, [pc, #424]	; (8005184 <HAL_RCC_ClockConfig+0x1c0>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0307 	and.w	r3, r3, #7
 8004fe0:	683a      	ldr	r2, [r7, #0]
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d910      	bls.n	8005008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fe6:	4b67      	ldr	r3, [pc, #412]	; (8005184 <HAL_RCC_ClockConfig+0x1c0>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f023 0207 	bic.w	r2, r3, #7
 8004fee:	4965      	ldr	r1, [pc, #404]	; (8005184 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff6:	4b63      	ldr	r3, [pc, #396]	; (8005184 <HAL_RCC_ClockConfig+0x1c0>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	683a      	ldr	r2, [r7, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d001      	beq.n	8005008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0b8      	b.n	800517a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d020      	beq.n	8005056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d005      	beq.n	800502c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005020:	4b59      	ldr	r3, [pc, #356]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	4a58      	ldr	r2, [pc, #352]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800502a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0308 	and.w	r3, r3, #8
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005038:	4b53      	ldr	r3, [pc, #332]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	4a52      	ldr	r2, [pc, #328]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 800503e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8005042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005044:	4b50      	ldr	r3, [pc, #320]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	494d      	ldr	r1, [pc, #308]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005052:	4313      	orrs	r3, r2
 8005054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 0301 	and.w	r3, r3, #1
 800505e:	2b00      	cmp	r3, #0
 8005060:	d040      	beq.n	80050e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d107      	bne.n	800507a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506a:	4b47      	ldr	r3, [pc, #284]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d115      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e07f      	b.n	800517a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	2b02      	cmp	r3, #2
 8005080:	d107      	bne.n	8005092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005082:	4b41      	ldr	r3, [pc, #260]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e073      	b.n	800517a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005092:	4b3d      	ldr	r3, [pc, #244]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d101      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e06b      	b.n	800517a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050a2:	4b39      	ldr	r3, [pc, #228]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f023 0203 	bic.w	r2, r3, #3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	4936      	ldr	r1, [pc, #216]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050b4:	f7fe f8dc 	bl	8003270 <HAL_GetTick>
 80050b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ba:	e00a      	b.n	80050d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050bc:	f7fe f8d8 	bl	8003270 <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d901      	bls.n	80050d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e053      	b.n	800517a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d2:	4b2d      	ldr	r3, [pc, #180]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f003 020c 	and.w	r2, r3, #12
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d1eb      	bne.n	80050bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050e4:	4b27      	ldr	r3, [pc, #156]	; (8005184 <HAL_RCC_ClockConfig+0x1c0>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d210      	bcs.n	8005114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <HAL_RCC_ClockConfig+0x1c0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f023 0207 	bic.w	r2, r3, #7
 80050fa:	4922      	ldr	r1, [pc, #136]	; (8005184 <HAL_RCC_ClockConfig+0x1c0>)
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	4313      	orrs	r3, r2
 8005100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b20      	ldr	r3, [pc, #128]	; (8005184 <HAL_RCC_ClockConfig+0x1c0>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e032      	b.n	800517a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0304 	and.w	r3, r3, #4
 800511c:	2b00      	cmp	r3, #0
 800511e:	d008      	beq.n	8005132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005120:	4b19      	ldr	r3, [pc, #100]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	4916      	ldr	r1, [pc, #88]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 800512e:	4313      	orrs	r3, r2
 8005130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0308 	and.w	r3, r3, #8
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800513e:	4b12      	ldr	r3, [pc, #72]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	00db      	lsls	r3, r3, #3
 800514c:	490e      	ldr	r1, [pc, #56]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 800514e:	4313      	orrs	r3, r2
 8005150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005152:	f000 f821 	bl	8005198 <HAL_RCC_GetSysClockFreq>
 8005156:	4601      	mov	r1, r0
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCC_ClockConfig+0x1c4>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 030f 	and.w	r3, r3, #15
 8005162:	4a0a      	ldr	r2, [pc, #40]	; (800518c <HAL_RCC_ClockConfig+0x1c8>)
 8005164:	5cd3      	ldrb	r3, [r2, r3]
 8005166:	fa21 f303 	lsr.w	r3, r1, r3
 800516a:	4a09      	ldr	r2, [pc, #36]	; (8005190 <HAL_RCC_ClockConfig+0x1cc>)
 800516c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800516e:	4b09      	ldr	r3, [pc, #36]	; (8005194 <HAL_RCC_ClockConfig+0x1d0>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe f83a 	bl	80031ec <HAL_InitTick>

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40022000 	.word	0x40022000
 8005188:	40021000 	.word	0x40021000
 800518c:	08007d4c 	.word	0x08007d4c
 8005190:	2000002c 	.word	0x2000002c
 8005194:	20000030 	.word	0x20000030

08005198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005198:	b490      	push	{r4, r7}
 800519a:	b08a      	sub	sp, #40	; 0x28
 800519c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800519e:	4b2a      	ldr	r3, [pc, #168]	; (8005248 <HAL_RCC_GetSysClockFreq+0xb0>)
 80051a0:	1d3c      	adds	r4, r7, #4
 80051a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80051a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80051a8:	4b28      	ldr	r3, [pc, #160]	; (800524c <HAL_RCC_GetSysClockFreq+0xb4>)
 80051aa:	881b      	ldrh	r3, [r3, #0]
 80051ac:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	61fb      	str	r3, [r7, #28]
 80051b2:	2300      	movs	r3, #0
 80051b4:	61bb      	str	r3, [r7, #24]
 80051b6:	2300      	movs	r3, #0
 80051b8:	627b      	str	r3, [r7, #36]	; 0x24
 80051ba:	2300      	movs	r3, #0
 80051bc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80051be:	2300      	movs	r3, #0
 80051c0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80051c2:	4b23      	ldr	r3, [pc, #140]	; (8005250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80051c8:	69fb      	ldr	r3, [r7, #28]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b04      	cmp	r3, #4
 80051d0:	d002      	beq.n	80051d8 <HAL_RCC_GetSysClockFreq+0x40>
 80051d2:	2b08      	cmp	r3, #8
 80051d4:	d003      	beq.n	80051de <HAL_RCC_GetSysClockFreq+0x46>
 80051d6:	e02d      	b.n	8005234 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80051d8:	4b1e      	ldr	r3, [pc, #120]	; (8005254 <HAL_RCC_GetSysClockFreq+0xbc>)
 80051da:	623b      	str	r3, [r7, #32]
      break;
 80051dc:	e02d      	b.n	800523a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80051de:	69fb      	ldr	r3, [r7, #28]
 80051e0:	0c9b      	lsrs	r3, r3, #18
 80051e2:	f003 030f 	and.w	r3, r3, #15
 80051e6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80051ea:	4413      	add	r3, r2
 80051ec:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80051f0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d013      	beq.n	8005224 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80051fc:	4b14      	ldr	r3, [pc, #80]	; (8005250 <HAL_RCC_GetSysClockFreq+0xb8>)
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	0c5b      	lsrs	r3, r3, #17
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800520a:	4413      	add	r3, r2
 800520c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005210:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	4a0f      	ldr	r2, [pc, #60]	; (8005254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005216:	fb02 f203 	mul.w	r2, r2, r3
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005220:	627b      	str	r3, [r7, #36]	; 0x24
 8005222:	e004      	b.n	800522e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4a0c      	ldr	r2, [pc, #48]	; (8005258 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005228:	fb02 f303 	mul.w	r3, r2, r3
 800522c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	623b      	str	r3, [r7, #32]
      break;
 8005232:	e002      	b.n	800523a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005234:	4b07      	ldr	r3, [pc, #28]	; (8005254 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005236:	623b      	str	r3, [r7, #32]
      break;
 8005238:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523a:	6a3b      	ldr	r3, [r7, #32]
}
 800523c:	4618      	mov	r0, r3
 800523e:	3728      	adds	r7, #40	; 0x28
 8005240:	46bd      	mov	sp, r7
 8005242:	bc90      	pop	{r4, r7}
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	08007d38 	.word	0x08007d38
 800524c:	08007d48 	.word	0x08007d48
 8005250:	40021000 	.word	0x40021000
 8005254:	007a1200 	.word	0x007a1200
 8005258:	003d0900 	.word	0x003d0900

0800525c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005260:	4b02      	ldr	r3, [pc, #8]	; (800526c <HAL_RCC_GetHCLKFreq+0x10>)
 8005262:	681b      	ldr	r3, [r3, #0]
}
 8005264:	4618      	mov	r0, r3
 8005266:	46bd      	mov	sp, r7
 8005268:	bc80      	pop	{r7}
 800526a:	4770      	bx	lr
 800526c:	2000002c 	.word	0x2000002c

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005274:	f7ff fff2 	bl	800525c <HAL_RCC_GetHCLKFreq>
 8005278:	4601      	mov	r1, r0
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	0a1b      	lsrs	r3, r3, #8
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4a03      	ldr	r2, [pc, #12]	; (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005286:	5cd3      	ldrb	r3, [r2, r3]
 8005288:	fa21 f303 	lsr.w	r3, r1, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40021000 	.word	0x40021000
 8005294:	08007d5c 	.word	0x08007d5c

08005298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800529c:	f7ff ffde 	bl	800525c <HAL_RCC_GetHCLKFreq>
 80052a0:	4601      	mov	r1, r0
 80052a2:	4b05      	ldr	r3, [pc, #20]	; (80052b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	0adb      	lsrs	r3, r3, #11
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4a03      	ldr	r2, [pc, #12]	; (80052bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ae:	5cd3      	ldrb	r3, [r2, r3]
 80052b0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40021000 	.word	0x40021000
 80052bc:	08007d5c 	.word	0x08007d5c

080052c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80052c8:	4b0a      	ldr	r3, [pc, #40]	; (80052f4 <RCC_Delay+0x34>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a0a      	ldr	r2, [pc, #40]	; (80052f8 <RCC_Delay+0x38>)
 80052ce:	fba2 2303 	umull	r2, r3, r2, r3
 80052d2:	0a5b      	lsrs	r3, r3, #9
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	fb02 f303 	mul.w	r3, r2, r3
 80052da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80052dc:	bf00      	nop
  }
  while (Delay --);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	1e5a      	subs	r2, r3, #1
 80052e2:	60fa      	str	r2, [r7, #12]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f9      	bne.n	80052dc <RCC_Delay+0x1c>
}
 80052e8:	bf00      	nop
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	2000002c 	.word	0x2000002c
 80052f8:	10624dd3 	.word	0x10624dd3

080052fc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b086      	sub	sp, #24
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005304:	2300      	movs	r3, #0
 8005306:	613b      	str	r3, [r7, #16]
 8005308:	2300      	movs	r3, #0
 800530a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0301 	and.w	r3, r3, #1
 8005314:	2b00      	cmp	r3, #0
 8005316:	d07d      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8005318:	2300      	movs	r3, #0
 800531a:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531c:	4b4f      	ldr	r3, [pc, #316]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800531e:	69db      	ldr	r3, [r3, #28]
 8005320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10d      	bne.n	8005344 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005328:	4b4c      	ldr	r3, [pc, #304]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532a:	69db      	ldr	r3, [r3, #28]
 800532c:	4a4b      	ldr	r2, [pc, #300]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800532e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005332:	61d3      	str	r3, [r2, #28]
 8005334:	4b49      	ldr	r3, [pc, #292]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533c:	60bb      	str	r3, [r7, #8]
 800533e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005340:	2301      	movs	r3, #1
 8005342:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005344:	4b46      	ldr	r3, [pc, #280]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534c:	2b00      	cmp	r3, #0
 800534e:	d118      	bne.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005350:	4b43      	ldr	r3, [pc, #268]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a42      	ldr	r2, [pc, #264]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535c:	f7fd ff88 	bl	8003270 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005362:	e008      	b.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005364:	f7fd ff84 	bl	8003270 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b64      	cmp	r3, #100	; 0x64
 8005370:	d901      	bls.n	8005376 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e06d      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005376:	4b3a      	ldr	r3, [pc, #232]	; (8005460 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f0      	beq.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005382:	4b36      	ldr	r3, [pc, #216]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800538a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d02e      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	429a      	cmp	r2, r3
 800539e:	d027      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053a0:	4b2e      	ldr	r3, [pc, #184]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053a8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053aa:	4b2e      	ldr	r3, [pc, #184]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053ac:	2201      	movs	r2, #1
 80053ae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053b0:	4b2c      	ldr	r3, [pc, #176]	; (8005464 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80053b2:	2200      	movs	r2, #0
 80053b4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80053b6:	4a29      	ldr	r2, [pc, #164]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d014      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c6:	f7fd ff53 	bl	8003270 <HAL_GetTick>
 80053ca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	e00a      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053ce:	f7fd ff4f 	bl	8003270 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053dc:	4293      	cmp	r3, r2
 80053de:	d901      	bls.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80053e0:	2303      	movs	r3, #3
 80053e2:	e036      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e4:	4b1d      	ldr	r3, [pc, #116]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053e6:	6a1b      	ldr	r3, [r3, #32]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d0ee      	beq.n	80053ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053f0:	4b1a      	ldr	r3, [pc, #104]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	4917      	ldr	r1, [pc, #92]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80053fe:	4313      	orrs	r3, r2
 8005400:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005402:	7dfb      	ldrb	r3, [r7, #23]
 8005404:	2b01      	cmp	r3, #1
 8005406:	d105      	bne.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005408:	4b14      	ldr	r3, [pc, #80]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540a:	69db      	ldr	r3, [r3, #28]
 800540c:	4a13      	ldr	r2, [pc, #76]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800540e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005412:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005420:	4b0e      	ldr	r3, [pc, #56]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	490b      	ldr	r1, [pc, #44]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800542e:	4313      	orrs	r3, r2
 8005430:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0310 	and.w	r3, r3, #16
 800543a:	2b00      	cmp	r3, #0
 800543c:	d008      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800543e:	4b07      	ldr	r3, [pc, #28]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	4904      	ldr	r1, [pc, #16]	; (800545c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800544c:	4313      	orrs	r3, r2
 800544e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005450:	2300      	movs	r3, #0
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	40021000 	.word	0x40021000
 8005460:	40007000 	.word	0x40007000
 8005464:	42420440 	.word	0x42420440

08005468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	e053      	b.n	8005522 <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2200      	movs	r2, #0
 800547e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d106      	bne.n	800549a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f7fd fcb9 	bl	8002e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	685a      	ldr	r2, [r3, #4]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	431a      	orrs	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	691b      	ldr	r3, [r3, #16]
 80054c6:	431a      	orrs	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	431a      	orrs	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	ea42 0103 	orr.w	r1, r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	430a      	orrs	r2, r1
 80054f0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	699b      	ldr	r3, [r3, #24]
 80054f6:	0c1a      	lsrs	r2, r3, #16
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f002 0204 	and.w	r2, r2, #4
 8005500:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005510:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3708      	adds	r7, #8
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b088      	sub	sp, #32
 800552e:	af00      	add	r7, sp, #0
 8005530:	60f8      	str	r0, [r7, #12]
 8005532:	60b9      	str	r1, [r7, #8]
 8005534:	603b      	str	r3, [r7, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_SPI_Transmit+0x22>
 8005548:	2302      	movs	r3, #2
 800554a:	e11e      	b.n	800578a <HAL_SPI_Transmit+0x260>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005554:	f7fd fe8c 	bl	8003270 <HAL_GetTick>
 8005558:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800555a:	88fb      	ldrh	r3, [r7, #6]
 800555c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b01      	cmp	r3, #1
 8005568:	d002      	beq.n	8005570 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800556a:	2302      	movs	r3, #2
 800556c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800556e:	e103      	b.n	8005778 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_SPI_Transmit+0x52>
 8005576:	88fb      	ldrh	r3, [r7, #6]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d102      	bne.n	8005582 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005580:	e0fa      	b.n	8005778 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2203      	movs	r2, #3
 8005586:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68ba      	ldr	r2, [r7, #8]
 8005594:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	88fa      	ldrh	r2, [r7, #6]
 800559a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	88fa      	ldrh	r2, [r7, #6]
 80055a0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055c8:	d107      	bne.n	80055da <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e4:	2b40      	cmp	r3, #64	; 0x40
 80055e6:	d007      	beq.n	80055f8 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005600:	d14b      	bne.n	800569a <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d002      	beq.n	8005610 <HAL_SPI_Transmit+0xe6>
 800560a:	8afb      	ldrh	r3, [r7, #22]
 800560c:	2b01      	cmp	r3, #1
 800560e:	d13e      	bne.n	800568e <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005614:	881a      	ldrh	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005620:	1c9a      	adds	r2, r3, #2
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800562a:	b29b      	uxth	r3, r3
 800562c:	3b01      	subs	r3, #1
 800562e:	b29a      	uxth	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005634:	e02b      	b.n	800568e <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b02      	cmp	r3, #2
 8005642:	d112      	bne.n	800566a <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005648:	881a      	ldrh	r2, [r3, #0]
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005654:	1c9a      	adds	r2, r3, #2
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	86da      	strh	r2, [r3, #54]	; 0x36
 8005668:	e011      	b.n	800568e <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800566a:	f7fd fe01 	bl	8003270 <HAL_GetTick>
 800566e:	4602      	mov	r2, r0
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	683a      	ldr	r2, [r7, #0]
 8005676:	429a      	cmp	r2, r3
 8005678:	d803      	bhi.n	8005682 <HAL_SPI_Transmit+0x158>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d102      	bne.n	8005688 <HAL_SPI_Transmit+0x15e>
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d102      	bne.n	800568e <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8005688:	2303      	movs	r3, #3
 800568a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800568c:	e074      	b.n	8005778 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d1ce      	bne.n	8005636 <HAL_SPI_Transmit+0x10c>
 8005698:	e04c      	b.n	8005734 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_SPI_Transmit+0x17e>
 80056a2:	8afb      	ldrh	r3, [r7, #22]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d140      	bne.n	800572a <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	7812      	ldrb	r2, [r2, #0]
 80056b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	1c5a      	adds	r2, r3, #1
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056ce:	e02c      	b.n	800572a <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d113      	bne.n	8005706 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	7812      	ldrb	r2, [r2, #0]
 80056ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	86da      	strh	r2, [r3, #54]	; 0x36
 8005704:	e011      	b.n	800572a <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005706:	f7fd fdb3 	bl	8003270 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	429a      	cmp	r2, r3
 8005714:	d803      	bhi.n	800571e <HAL_SPI_Transmit+0x1f4>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571c:	d102      	bne.n	8005724 <HAL_SPI_Transmit+0x1fa>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005728:	e026      	b.n	8005778 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800572e:	b29b      	uxth	r3, r3
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1cd      	bne.n	80056d0 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005734:	69ba      	ldr	r2, [r7, #24]
 8005736:	6839      	ldr	r1, [r7, #0]
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 fb91 	bl	8005e60 <SPI_EndRxTxTransaction>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2220      	movs	r2, #32
 8005748:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d10a      	bne.n	8005768 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68db      	ldr	r3, [r3, #12]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	77fb      	strb	r3, [r7, #31]
 8005774:	e000      	b.n	8005778 <HAL_SPI_Transmit+0x24e>
  }

error:
 8005776:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005788:	7ffb      	ldrb	r3, [r7, #31]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3720      	adds	r7, #32
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b088      	sub	sp, #32
 8005796:	af02      	add	r7, sp, #8
 8005798:	60f8      	str	r0, [r7, #12]
 800579a:	60b9      	str	r1, [r7, #8]
 800579c:	603b      	str	r3, [r7, #0]
 800579e:	4613      	mov	r3, r2
 80057a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057ae:	d112      	bne.n	80057d6 <HAL_SPI_Receive+0x44>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d10e      	bne.n	80057d6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	2204      	movs	r2, #4
 80057bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80057c0:	88fa      	ldrh	r2, [r7, #6]
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	9300      	str	r3, [sp, #0]
 80057c6:	4613      	mov	r3, r2
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	68b9      	ldr	r1, [r7, #8]
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f8e9 	bl	80059a4 <HAL_SPI_TransmitReceive>
 80057d2:	4603      	mov	r3, r0
 80057d4:	e0e2      	b.n	800599c <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d101      	bne.n	80057e4 <HAL_SPI_Receive+0x52>
 80057e0:	2302      	movs	r3, #2
 80057e2:	e0db      	b.n	800599c <HAL_SPI_Receive+0x20a>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ec:	f7fd fd40 	bl	8003270 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d002      	beq.n	8005804 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80057fe:	2302      	movs	r3, #2
 8005800:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005802:	e0c2      	b.n	800598a <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d002      	beq.n	8005810 <HAL_SPI_Receive+0x7e>
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d102      	bne.n	8005816 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005814:	e0b9      	b.n	800598a <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	2204      	movs	r2, #4
 800581a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	2200      	movs	r2, #0
 8005822:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	68ba      	ldr	r2, [r7, #8]
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	88fa      	ldrh	r2, [r7, #6]
 800582e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	88fa      	ldrh	r2, [r7, #6]
 8005834:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2200      	movs	r2, #0
 800583a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2200      	movs	r2, #0
 8005840:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	2200      	movs	r2, #0
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	689b      	ldr	r3, [r3, #8]
 8005858:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800585c:	d107      	bne.n	800586e <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800586c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005878:	2b40      	cmp	r3, #64	; 0x40
 800587a:	d007      	beq.n	800588c <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800588a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d162      	bne.n	800595a <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005894:	e02e      	b.n	80058f4 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d115      	bne.n	80058d0 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f103 020c 	add.w	r2, r3, #12
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	7812      	ldrb	r2, [r2, #0]
 80058b2:	b2d2      	uxtb	r2, r2
 80058b4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058ce:	e011      	b.n	80058f4 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80058d0:	f7fd fcce 	bl	8003270 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d803      	bhi.n	80058e8 <HAL_SPI_Receive+0x156>
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e6:	d102      	bne.n	80058ee <HAL_SPI_Receive+0x15c>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d102      	bne.n	80058f4 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	75fb      	strb	r3, [r7, #23]
          goto error;
 80058f2:	e04a      	b.n	800598a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1cb      	bne.n	8005896 <HAL_SPI_Receive+0x104>
 80058fe:	e031      	b.n	8005964 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b01      	cmp	r3, #1
 800590c:	d113      	bne.n	8005936 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	b292      	uxth	r2, r2
 800591a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005920:	1c9a      	adds	r2, r3, #2
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800592a:	b29b      	uxth	r3, r3
 800592c:	3b01      	subs	r3, #1
 800592e:	b29a      	uxth	r2, r3
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005934:	e011      	b.n	800595a <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005936:	f7fd fc9b 	bl	8003270 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	683a      	ldr	r2, [r7, #0]
 8005942:	429a      	cmp	r2, r3
 8005944:	d803      	bhi.n	800594e <HAL_SPI_Receive+0x1bc>
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594c:	d102      	bne.n	8005954 <HAL_SPI_Receive+0x1c2>
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d102      	bne.n	800595a <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005958:	e017      	b.n	800598a <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800595e:	b29b      	uxth	r3, r3
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1cd      	bne.n	8005900 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	f000 fa27 	bl	8005dbc <SPI_EndRxTransaction>
 800596e:	4603      	mov	r3, r0
 8005970:	2b00      	cmp	r3, #0
 8005972:	d002      	beq.n	800597a <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800597e:	2b00      	cmp	r3, #0
 8005980:	d002      	beq.n	8005988 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	75fb      	strb	r3, [r7, #23]
 8005986:	e000      	b.n	800598a <HAL_SPI_Receive+0x1f8>
  }

error :
 8005988:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2200      	movs	r2, #0
 8005996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800599a:	7dfb      	ldrb	r3, [r7, #23]
}
 800599c:	4618      	mov	r0, r3
 800599e:	3718      	adds	r7, #24
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b08c      	sub	sp, #48	; 0x30
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
 80059b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80059b2:	2301      	movs	r3, #1
 80059b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80059b6:	2300      	movs	r3, #0
 80059b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	d101      	bne.n	80059ca <HAL_SPI_TransmitReceive+0x26>
 80059c6:	2302      	movs	r3, #2
 80059c8:	e18a      	b.n	8005ce0 <HAL_SPI_TransmitReceive+0x33c>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2201      	movs	r2, #1
 80059ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80059d2:	f7fd fc4d 	bl	8003270 <HAL_GetTick>
 80059d6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80059de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80059e8:	887b      	ldrh	r3, [r7, #2]
 80059ea:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80059ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d00f      	beq.n	8005a14 <HAL_SPI_TransmitReceive+0x70>
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fa:	d107      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d103      	bne.n	8005a0c <HAL_SPI_TransmitReceive+0x68>
 8005a04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d003      	beq.n	8005a14 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a12:	e15b      	b.n	8005ccc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d005      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x82>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_SPI_TransmitReceive+0x82>
 8005a20:	887b      	ldrh	r3, [r7, #2]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d103      	bne.n	8005a2e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8005a2c:	e14e      	b.n	8005ccc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d003      	beq.n	8005a42 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2205      	movs	r2, #5
 8005a3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2200      	movs	r2, #0
 8005a46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	887a      	ldrh	r2, [r7, #2]
 8005a52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	887a      	ldrh	r2, [r7, #2]
 8005a58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	887a      	ldrh	r2, [r7, #2]
 8005a64:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	887a      	ldrh	r2, [r7, #2]
 8005a6a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2200      	movs	r2, #0
 8005a76:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b40      	cmp	r3, #64	; 0x40
 8005a84:	d007      	beq.n	8005a96 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a94:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a9e:	d178      	bne.n	8005b92 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_SPI_TransmitReceive+0x10a>
 8005aa8:	8b7b      	ldrh	r3, [r7, #26]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d166      	bne.n	8005b7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab2:	881a      	ldrh	r2, [r3, #0]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005abe:	1c9a      	adds	r2, r3, #2
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ad2:	e053      	b.n	8005b7c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	f003 0302 	and.w	r3, r3, #2
 8005ade:	2b02      	cmp	r3, #2
 8005ae0:	d11b      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x176>
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ae6:	b29b      	uxth	r3, r3
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d016      	beq.n	8005b1a <HAL_SPI_TransmitReceive+0x176>
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d113      	bne.n	8005b1a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af6:	881a      	ldrh	r2, [r3, #0]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	1c9a      	adds	r2, r3, #2
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005b16:	2300      	movs	r3, #0
 8005b18:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d119      	bne.n	8005b5c <HAL_SPI_TransmitReceive+0x1b8>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b2c:	b29b      	uxth	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d014      	beq.n	8005b5c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68da      	ldr	r2, [r3, #12]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3c:	b292      	uxth	r2, r2
 8005b3e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b44:	1c9a      	adds	r2, r3, #2
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005b5c:	f7fd fb88 	bl	8003270 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d807      	bhi.n	8005b7c <HAL_SPI_TransmitReceive+0x1d8>
 8005b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b72:	d003      	beq.n	8005b7c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005b7a:	e0a7      	b.n	8005ccc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1a6      	bne.n	8005ad4 <HAL_SPI_TransmitReceive+0x130>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1a1      	bne.n	8005ad4 <HAL_SPI_TransmitReceive+0x130>
 8005b90:	e07c      	b.n	8005c8c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_SPI_TransmitReceive+0x1fc>
 8005b9a:	8b7b      	ldrh	r3, [r7, #26]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d16b      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	7812      	ldrb	r2, [r2, #0]
 8005bac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	b29a      	uxth	r2, r3
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005bc6:	e057      	b.n	8005c78 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b02      	cmp	r3, #2
 8005bd4:	d11c      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x26c>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bda:	b29b      	uxth	r3, r3
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d017      	beq.n	8005c10 <HAL_SPI_TransmitReceive+0x26c>
 8005be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be2:	2b01      	cmp	r3, #1
 8005be4:	d114      	bne.n	8005c10 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	330c      	adds	r3, #12
 8005bf0:	7812      	ldrb	r2, [r2, #0]
 8005bf2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bf8:	1c5a      	adds	r2, r3, #1
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	3b01      	subs	r3, #1
 8005c06:	b29a      	uxth	r2, r3
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d119      	bne.n	8005c52 <HAL_SPI_TransmitReceive+0x2ae>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d014      	beq.n	8005c52 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68da      	ldr	r2, [r3, #12]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3a:	1c5a      	adds	r2, r3, #1
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	3b01      	subs	r3, #1
 8005c48:	b29a      	uxth	r2, r3
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005c52:	f7fd fb0d 	bl	8003270 <HAL_GetTick>
 8005c56:	4602      	mov	r2, r0
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	1ad3      	subs	r3, r2, r3
 8005c5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d803      	bhi.n	8005c6a <HAL_SPI_TransmitReceive+0x2c6>
 8005c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c68:	d102      	bne.n	8005c70 <HAL_SPI_TransmitReceive+0x2cc>
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d103      	bne.n	8005c78 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8005c70:	2303      	movs	r3, #3
 8005c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005c76:	e029      	b.n	8005ccc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d1a2      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x224>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d19d      	bne.n	8005bc8 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c8e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f000 f8e5 	bl	8005e60 <SPI_EndRxTxTransaction>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d006      	beq.n	8005caa <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005ca8:	e010      	b.n	8005ccc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10b      	bne.n	8005cca <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	e000      	b.n	8005ccc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005cca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005cdc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3730      	adds	r7, #48	; 0x30
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	603b      	str	r3, [r7, #0]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005cf8:	e04c      	b.n	8005d94 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d00:	d048      	beq.n	8005d94 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8005d02:	f7fd fab5 	bl	8003270 <HAL_GetTick>
 8005d06:	4602      	mov	r2, r0
 8005d08:	69bb      	ldr	r3, [r7, #24]
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d902      	bls.n	8005d18 <SPI_WaitFlagStateUntilTimeout+0x30>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d13d      	bne.n	8005d94 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	685a      	ldr	r2, [r3, #4]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d26:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d30:	d111      	bne.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d3a:	d004      	beq.n	8005d46 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d44:	d107      	bne.n	8005d56 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	681a      	ldr	r2, [r3, #0]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d54:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d5e:	d10f      	bne.n	8005d80 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d7e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005d90:	2303      	movs	r3, #3
 8005d92:	e00f      	b.n	8005db4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	68ba      	ldr	r2, [r7, #8]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	bf0c      	ite	eq
 8005da4:	2301      	moveq	r3, #1
 8005da6:	2300      	movne	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d1a3      	bne.n	8005cfa <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3710      	adds	r7, #16
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af02      	add	r7, sp, #8
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dd0:	d111      	bne.n	8005df6 <SPI_EndRxTransaction+0x3a>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dda:	d004      	beq.n	8005de6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de4:	d107      	bne.n	8005df6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005df4:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dfe:	d117      	bne.n	8005e30 <SPI_EndRxTransaction+0x74>
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e08:	d112      	bne.n	8005e30 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	9300      	str	r3, [sp, #0]
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	2200      	movs	r2, #0
 8005e12:	2101      	movs	r1, #1
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f7ff ff67 	bl	8005ce8 <SPI_WaitFlagStateUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d01a      	beq.n	8005e56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e24:	f043 0220 	orr.w	r2, r3, #32
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e2c:	2303      	movs	r3, #3
 8005e2e:	e013      	b.n	8005e58 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	9300      	str	r3, [sp, #0]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2200      	movs	r2, #0
 8005e38:	2180      	movs	r1, #128	; 0x80
 8005e3a:	68f8      	ldr	r0, [r7, #12]
 8005e3c:	f7ff ff54 	bl	8005ce8 <SPI_WaitFlagStateUntilTimeout>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d007      	beq.n	8005e56 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e4a:	f043 0220 	orr.w	r2, r3, #32
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e000      	b.n	8005e58 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8005e56:	2300      	movs	r3, #0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	9300      	str	r3, [sp, #0]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	2200      	movs	r2, #0
 8005e74:	2180      	movs	r1, #128	; 0x80
 8005e76:	68f8      	ldr	r0, [r7, #12]
 8005e78:	f7ff ff36 	bl	8005ce8 <SPI_WaitFlagStateUntilTimeout>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d007      	beq.n	8005e92 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e86:	f043 0220 	orr.w	r2, r3, #32
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8005e8e:	2303      	movs	r3, #3
 8005e90:	e000      	b.n	8005e94 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8005e92:	2300      	movs	r3, #0
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d101      	bne.n	8005eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e01d      	b.n	8005eea <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fc ffec 	bl	8002ea0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681a      	ldr	r2, [r3, #0]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	4619      	mov	r1, r3
 8005eda:	4610      	mov	r0, r2
 8005edc:	f000 fb34 	bl	8006548 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ee8:	2300      	movs	r3, #0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	b085      	sub	sp, #20
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68da      	ldr	r2, [r3, #12]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f042 0201 	orr.w	r2, r2, #1
 8005f08:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f003 0307 	and.w	r3, r3, #7
 8005f14:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2b06      	cmp	r3, #6
 8005f1a:	d007      	beq.n	8005f2c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0201 	orr.w	r2, r2, #1
 8005f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bc80      	pop	{r7}
 8005f36:	4770      	bx	lr

08005f38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f46:	2301      	movs	r3, #1
 8005f48:	e01d      	b.n	8005f86 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d106      	bne.n	8005f64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7fc ffd6 	bl	8002f10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	3304      	adds	r3, #4
 8005f74:	4619      	mov	r1, r3
 8005f76:	4610      	mov	r0, r2
 8005f78:	f000 fae6 	bl	8006548 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
	...

08005f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	6839      	ldr	r1, [r7, #0]
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	f000 fd50 	bl	8006a48 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a10      	ldr	r2, [pc, #64]	; (8005ff0 <HAL_TIM_PWM_Start+0x60>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d107      	bne.n	8005fc2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	f003 0307 	and.w	r3, r3, #7
 8005fcc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b06      	cmp	r3, #6
 8005fd2:	d007      	beq.n	8005fe4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f042 0201 	orr.w	r2, r2, #1
 8005fe2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	40012c00 	.word	0x40012c00

08005ff4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b02      	cmp	r3, #2
 8006008:	d122      	bne.n	8006050 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	f003 0302 	and.w	r3, r3, #2
 8006014:	2b02      	cmp	r3, #2
 8006016:	d11b      	bne.n	8006050 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f06f 0202 	mvn.w	r2, #2
 8006020:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d003      	beq.n	800603e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 fa6a 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 800603c:	e005      	b.n	800604a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa5d 	bl	80064fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fa6c 	bl	8006522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	f003 0304 	and.w	r3, r3, #4
 800605a:	2b04      	cmp	r3, #4
 800605c:	d122      	bne.n	80060a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	f003 0304 	and.w	r3, r3, #4
 8006068:	2b04      	cmp	r3, #4
 800606a:	d11b      	bne.n	80060a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f06f 0204 	mvn.w	r2, #4
 8006074:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2202      	movs	r2, #2
 800607a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fa40 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 8006090:	e005      	b.n	800609e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f000 fa33 	bl	80064fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fa42 	bl	8006522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f003 0308 	and.w	r3, r3, #8
 80060ae:	2b08      	cmp	r3, #8
 80060b0:	d122      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f003 0308 	and.w	r3, r3, #8
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d11b      	bne.n	80060f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f06f 0208 	mvn.w	r2, #8
 80060c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2204      	movs	r2, #4
 80060ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	69db      	ldr	r3, [r3, #28]
 80060d6:	f003 0303 	and.w	r3, r3, #3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa16 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 80060e4:	e005      	b.n	80060f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fa09 	bl	80064fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 fa18 	bl	8006522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	691b      	ldr	r3, [r3, #16]
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b10      	cmp	r3, #16
 8006104:	d122      	bne.n	800614c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b10      	cmp	r3, #16
 8006112:	d11b      	bne.n	800614c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0210 	mvn.w	r2, #16
 800611c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2208      	movs	r2, #8
 8006122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800612e:	2b00      	cmp	r3, #0
 8006130:	d003      	beq.n	800613a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 f9ec 	bl	8006510 <HAL_TIM_IC_CaptureCallback>
 8006138:	e005      	b.n	8006146 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 f9df 	bl	80064fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	f000 f9ee 	bl	8006522 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	2b01      	cmp	r3, #1
 8006158:	d10e      	bne.n	8006178 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d107      	bne.n	8006178 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f06f 0201 	mvn.w	r2, #1
 8006170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fc f844 	bl	8002200 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006182:	2b80      	cmp	r3, #128	; 0x80
 8006184:	d10e      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006190:	2b80      	cmp	r3, #128	; 0x80
 8006192:	d107      	bne.n	80061a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800619c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fcc3 	bl	8006b2a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	691b      	ldr	r3, [r3, #16]
 80061aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061ae:	2b40      	cmp	r3, #64	; 0x40
 80061b0:	d10e      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061bc:	2b40      	cmp	r3, #64	; 0x40
 80061be:	d107      	bne.n	80061d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	f000 f9b2 	bl	8006534 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0320 	and.w	r3, r3, #32
 80061da:	2b20      	cmp	r3, #32
 80061dc:	d10e      	bne.n	80061fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68db      	ldr	r3, [r3, #12]
 80061e4:	f003 0320 	and.w	r3, r3, #32
 80061e8:	2b20      	cmp	r3, #32
 80061ea:	d107      	bne.n	80061fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f06f 0220 	mvn.w	r2, #32
 80061f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fc8e 	bl	8006b18 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061fc:	bf00      	nop
 80061fe:	3708      	adds	r7, #8
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}

08006204 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af00      	add	r7, sp, #0
 800620a:	60f8      	str	r0, [r7, #12]
 800620c:	60b9      	str	r1, [r7, #8]
 800620e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006216:	2b01      	cmp	r3, #1
 8006218:	d101      	bne.n	800621e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800621a:	2302      	movs	r3, #2
 800621c:	e0b4      	b.n	8006388 <HAL_TIM_PWM_ConfigChannel+0x184>
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2201      	movs	r2, #1
 8006222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2202      	movs	r2, #2
 800622a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2b0c      	cmp	r3, #12
 8006232:	f200 809f 	bhi.w	8006374 <HAL_TIM_PWM_ConfigChannel+0x170>
 8006236:	a201      	add	r2, pc, #4	; (adr r2, 800623c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8006238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623c:	08006271 	.word	0x08006271
 8006240:	08006375 	.word	0x08006375
 8006244:	08006375 	.word	0x08006375
 8006248:	08006375 	.word	0x08006375
 800624c:	080062b1 	.word	0x080062b1
 8006250:	08006375 	.word	0x08006375
 8006254:	08006375 	.word	0x08006375
 8006258:	08006375 	.word	0x08006375
 800625c:	080062f3 	.word	0x080062f3
 8006260:	08006375 	.word	0x08006375
 8006264:	08006375 	.word	0x08006375
 8006268:	08006375 	.word	0x08006375
 800626c:	08006333 	.word	0x08006333
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	68b9      	ldr	r1, [r7, #8]
 8006276:	4618      	mov	r0, r3
 8006278:	f000 f9c8 	bl	800660c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	699a      	ldr	r2, [r3, #24]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f042 0208 	orr.w	r2, r2, #8
 800628a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f022 0204 	bic.w	r2, r2, #4
 800629a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6999      	ldr	r1, [r3, #24]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	691a      	ldr	r2, [r3, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	619a      	str	r2, [r3, #24]
      break;
 80062ae:	e062      	b.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	68b9      	ldr	r1, [r7, #8]
 80062b6:	4618      	mov	r0, r3
 80062b8:	f000 fa0e 	bl	80066d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	699a      	ldr	r2, [r3, #24]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	699a      	ldr	r2, [r3, #24]
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	6999      	ldr	r1, [r3, #24]
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	691b      	ldr	r3, [r3, #16]
 80062e6:	021a      	lsls	r2, r3, #8
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	430a      	orrs	r2, r1
 80062ee:	619a      	str	r2, [r3, #24]
      break;
 80062f0:	e041      	b.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fa57 	bl	80067ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	69da      	ldr	r2, [r3, #28]
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f042 0208 	orr.w	r2, r2, #8
 800630c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0204 	bic.w	r2, r2, #4
 800631c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69d9      	ldr	r1, [r3, #28]
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	691a      	ldr	r2, [r3, #16]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	430a      	orrs	r2, r1
 800632e:	61da      	str	r2, [r3, #28]
      break;
 8006330:	e021      	b.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68b9      	ldr	r1, [r7, #8]
 8006338:	4618      	mov	r0, r3
 800633a:	f000 faa1 	bl	8006880 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	69da      	ldr	r2, [r3, #28]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800634c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	69da      	ldr	r2, [r3, #28]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800635c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	69d9      	ldr	r1, [r3, #28]
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	021a      	lsls	r2, r3, #8
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	430a      	orrs	r2, r1
 8006370:	61da      	str	r2, [r3, #28]
      break;
 8006372:	e000      	b.n	8006376 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006374:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006386:	2300      	movs	r3, #0
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063a0:	2b01      	cmp	r3, #1
 80063a2:	d101      	bne.n	80063a8 <HAL_TIM_ConfigClockSource+0x18>
 80063a4:	2302      	movs	r3, #2
 80063a6:	e0a6      	b.n	80064f6 <HAL_TIM_ConfigClockSource+0x166>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80063c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	d067      	beq.n	80064b0 <HAL_TIM_ConfigClockSource+0x120>
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d80b      	bhi.n	80063fc <HAL_TIM_ConfigClockSource+0x6c>
 80063e4:	2b10      	cmp	r3, #16
 80063e6:	d073      	beq.n	80064d0 <HAL_TIM_ConfigClockSource+0x140>
 80063e8:	2b10      	cmp	r3, #16
 80063ea:	d802      	bhi.n	80063f2 <HAL_TIM_ConfigClockSource+0x62>
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d06f      	beq.n	80064d0 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80063f0:	e078      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d06c      	beq.n	80064d0 <HAL_TIM_ConfigClockSource+0x140>
 80063f6:	2b30      	cmp	r3, #48	; 0x30
 80063f8:	d06a      	beq.n	80064d0 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80063fa:	e073      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80063fc:	2b70      	cmp	r3, #112	; 0x70
 80063fe:	d00d      	beq.n	800641c <HAL_TIM_ConfigClockSource+0x8c>
 8006400:	2b70      	cmp	r3, #112	; 0x70
 8006402:	d804      	bhi.n	800640e <HAL_TIM_ConfigClockSource+0x7e>
 8006404:	2b50      	cmp	r3, #80	; 0x50
 8006406:	d033      	beq.n	8006470 <HAL_TIM_ConfigClockSource+0xe0>
 8006408:	2b60      	cmp	r3, #96	; 0x60
 800640a:	d041      	beq.n	8006490 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800640c:	e06a      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800640e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006412:	d066      	beq.n	80064e2 <HAL_TIM_ConfigClockSource+0x152>
 8006414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006418:	d017      	beq.n	800644a <HAL_TIM_ConfigClockSource+0xba>
      break;
 800641a:	e063      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6818      	ldr	r0, [r3, #0]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	6899      	ldr	r1, [r3, #8]
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	685a      	ldr	r2, [r3, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f000 faed 	bl	8006a0a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800643e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	609a      	str	r2, [r3, #8]
      break;
 8006448:	e04c      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6899      	ldr	r1, [r3, #8]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f000 fad6 	bl	8006a0a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689a      	ldr	r2, [r3, #8]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800646c:	609a      	str	r2, [r3, #8]
      break;
 800646e:	e039      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6818      	ldr	r0, [r3, #0]
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	6859      	ldr	r1, [r3, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	461a      	mov	r2, r3
 800647e:	f000 fa4d 	bl	800691c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	2150      	movs	r1, #80	; 0x50
 8006488:	4618      	mov	r0, r3
 800648a:	f000 faa4 	bl	80069d6 <TIM_ITRx_SetConfig>
      break;
 800648e:	e029      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6818      	ldr	r0, [r3, #0]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	6859      	ldr	r1, [r3, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	461a      	mov	r2, r3
 800649e:	f000 fa6b 	bl	8006978 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2160      	movs	r1, #96	; 0x60
 80064a8:	4618      	mov	r0, r3
 80064aa:	f000 fa94 	bl	80069d6 <TIM_ITRx_SetConfig>
      break;
 80064ae:	e019      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6818      	ldr	r0, [r3, #0]
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	6859      	ldr	r1, [r3, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	461a      	mov	r2, r3
 80064be:	f000 fa2d 	bl	800691c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2140      	movs	r1, #64	; 0x40
 80064c8:	4618      	mov	r0, r3
 80064ca:	f000 fa84 	bl	80069d6 <TIM_ITRx_SetConfig>
      break;
 80064ce:	e009      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	4619      	mov	r1, r3
 80064da:	4610      	mov	r0, r2
 80064dc:	f000 fa7b 	bl	80069d6 <TIM_ITRx_SetConfig>
      break;
 80064e0:	e000      	b.n	80064e4 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80064e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3710      	adds	r7, #16
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}

080064fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr

08006510 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr

08006522 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006522:	b480      	push	{r7}
 8006524:	b083      	sub	sp, #12
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800652a:	bf00      	nop
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	bc80      	pop	{r7}
 8006532:	4770      	bx	lr

08006534 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	bc80      	pop	{r7}
 8006544:	4770      	bx	lr
	...

08006548 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a29      	ldr	r2, [pc, #164]	; (8006600 <TIM_Base_SetConfig+0xb8>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d00b      	beq.n	8006578 <TIM_Base_SetConfig+0x30>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006566:	d007      	beq.n	8006578 <TIM_Base_SetConfig+0x30>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a26      	ldr	r2, [pc, #152]	; (8006604 <TIM_Base_SetConfig+0xbc>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d003      	beq.n	8006578 <TIM_Base_SetConfig+0x30>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a25      	ldr	r2, [pc, #148]	; (8006608 <TIM_Base_SetConfig+0xc0>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d108      	bne.n	800658a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800657e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	4313      	orrs	r3, r2
 8006588:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a1c      	ldr	r2, [pc, #112]	; (8006600 <TIM_Base_SetConfig+0xb8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d00b      	beq.n	80065aa <TIM_Base_SetConfig+0x62>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006598:	d007      	beq.n	80065aa <TIM_Base_SetConfig+0x62>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a19      	ldr	r2, [pc, #100]	; (8006604 <TIM_Base_SetConfig+0xbc>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d003      	beq.n	80065aa <TIM_Base_SetConfig+0x62>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a18      	ldr	r2, [pc, #96]	; (8006608 <TIM_Base_SetConfig+0xc0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d108      	bne.n	80065bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	68fa      	ldr	r2, [r7, #12]
 80065b8:	4313      	orrs	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	695b      	ldr	r3, [r3, #20]
 80065c6:	4313      	orrs	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68fa      	ldr	r2, [r7, #12]
 80065ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	689a      	ldr	r2, [r3, #8]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a07      	ldr	r2, [pc, #28]	; (8006600 <TIM_Base_SetConfig+0xb8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d103      	bne.n	80065f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	615a      	str	r2, [r3, #20]
}
 80065f6:	bf00      	nop
 80065f8:	3714      	adds	r7, #20
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bc80      	pop	{r7}
 80065fe:	4770      	bx	lr
 8006600:	40012c00 	.word	0x40012c00
 8006604:	40000400 	.word	0x40000400
 8006608:	40000800 	.word	0x40000800

0800660c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800660c:	b480      	push	{r7}
 800660e:	b087      	sub	sp, #28
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	f023 0201 	bic.w	r2, r3, #1
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6a1b      	ldr	r3, [r3, #32]
 8006626:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f023 0303 	bic.w	r3, r3, #3
 8006642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	4313      	orrs	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	f023 0302 	bic.w	r3, r3, #2
 8006654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	697a      	ldr	r2, [r7, #20]
 800665c:	4313      	orrs	r3, r2
 800665e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a1c      	ldr	r2, [pc, #112]	; (80066d4 <TIM_OC1_SetConfig+0xc8>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d10c      	bne.n	8006682 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	f023 0308 	bic.w	r3, r3, #8
 800666e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 0304 	bic.w	r3, r3, #4
 8006680:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a13      	ldr	r2, [pc, #76]	; (80066d4 <TIM_OC1_SetConfig+0xc8>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d111      	bne.n	80066ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bc80      	pop	{r7}
 80066d0:	4770      	bx	lr
 80066d2:	bf00      	nop
 80066d4:	40012c00 	.word	0x40012c00

080066d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066d8:	b480      	push	{r7}
 80066da:	b087      	sub	sp, #28
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	f023 0210 	bic.w	r2, r3, #16
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	699b      	ldr	r3, [r3, #24]
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800670e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	021b      	lsls	r3, r3, #8
 8006716:	68fa      	ldr	r2, [r7, #12]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	f023 0320 	bic.w	r3, r3, #32
 8006722:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	011b      	lsls	r3, r3, #4
 800672a:	697a      	ldr	r2, [r7, #20]
 800672c:	4313      	orrs	r3, r2
 800672e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a1d      	ldr	r2, [pc, #116]	; (80067a8 <TIM_OC2_SetConfig+0xd0>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d10d      	bne.n	8006754 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800673e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	011b      	lsls	r3, r3, #4
 8006746:	697a      	ldr	r2, [r7, #20]
 8006748:	4313      	orrs	r3, r2
 800674a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a14      	ldr	r2, [pc, #80]	; (80067a8 <TIM_OC2_SetConfig+0xd0>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d113      	bne.n	8006784 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006762:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800676a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	695b      	ldr	r3, [r3, #20]
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	693a      	ldr	r2, [r7, #16]
 8006774:	4313      	orrs	r3, r2
 8006776:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	699b      	ldr	r3, [r3, #24]
 800677c:	009b      	lsls	r3, r3, #2
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	68fa      	ldr	r2, [r7, #12]
 800678e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	621a      	str	r2, [r3, #32]
}
 800679e:	bf00      	nop
 80067a0:	371c      	adds	r7, #28
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bc80      	pop	{r7}
 80067a6:	4770      	bx	lr
 80067a8:	40012c00 	.word	0x40012c00

080067ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0303 	bic.w	r3, r3, #3
 80067e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	4313      	orrs	r3, r2
 8006800:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a1d      	ldr	r2, [pc, #116]	; (800687c <TIM_OC3_SetConfig+0xd0>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d10d      	bne.n	8006826 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006810:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	021b      	lsls	r3, r3, #8
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	4313      	orrs	r3, r2
 800681c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a14      	ldr	r2, [pc, #80]	; (800687c <TIM_OC3_SetConfig+0xd0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d113      	bne.n	8006856 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800683c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	011b      	lsls	r3, r3, #4
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	bc80      	pop	{r7}
 8006878:	4770      	bx	lr
 800687a:	bf00      	nop
 800687c:	40012c00 	.word	0x40012c00

08006880 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006880:	b480      	push	{r7}
 8006882:	b087      	sub	sp, #28
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a1b      	ldr	r3, [r3, #32]
 800688e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6a1b      	ldr	r3, [r3, #32]
 800689a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	68fa      	ldr	r2, [r7, #12]
 80068c0:	4313      	orrs	r3, r2
 80068c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	031b      	lsls	r3, r3, #12
 80068d2:	693a      	ldr	r2, [r7, #16]
 80068d4:	4313      	orrs	r3, r2
 80068d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a0f      	ldr	r2, [pc, #60]	; (8006918 <TIM_OC4_SetConfig+0x98>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d109      	bne.n	80068f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	019b      	lsls	r3, r3, #6
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	4313      	orrs	r3, r2
 80068f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr
 8006918:	40012c00 	.word	0x40012c00

0800691c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800691c:	b480      	push	{r7}
 800691e:	b087      	sub	sp, #28
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f023 0201 	bic.w	r2, r3, #1
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	011b      	lsls	r3, r3, #4
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 030a 	bic.w	r3, r3, #10
 8006958:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4313      	orrs	r3, r2
 8006960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	697a      	ldr	r2, [r7, #20]
 800696c:	621a      	str	r2, [r3, #32]
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr

08006978 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006978:	b480      	push	{r7}
 800697a:	b087      	sub	sp, #28
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	60b9      	str	r1, [r7, #8]
 8006982:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6a1b      	ldr	r3, [r3, #32]
 8006988:	f023 0210 	bic.w	r2, r3, #16
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	699b      	ldr	r3, [r3, #24]
 8006994:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	6a1b      	ldr	r3, [r3, #32]
 800699a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069a2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	031b      	lsls	r3, r3, #12
 80069a8:	697a      	ldr	r2, [r7, #20]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069b4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	011b      	lsls	r3, r3, #4
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	4313      	orrs	r3, r2
 80069be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	697a      	ldr	r2, [r7, #20]
 80069c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	693a      	ldr	r2, [r7, #16]
 80069ca:	621a      	str	r2, [r3, #32]
}
 80069cc:	bf00      	nop
 80069ce:	371c      	adds	r7, #28
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bc80      	pop	{r7}
 80069d4:	4770      	bx	lr

080069d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80069d6:	b480      	push	{r7}
 80069d8:	b085      	sub	sp, #20
 80069da:	af00      	add	r7, sp, #0
 80069dc:	6078      	str	r0, [r7, #4]
 80069de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	689b      	ldr	r3, [r3, #8]
 80069e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80069ee:	683a      	ldr	r2, [r7, #0]
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	f043 0307 	orr.w	r3, r3, #7
 80069f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	609a      	str	r2, [r3, #8]
}
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bc80      	pop	{r7}
 8006a08:	4770      	bx	lr

08006a0a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a0a:	b480      	push	{r7}
 8006a0c:	b087      	sub	sp, #28
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	60f8      	str	r0, [r7, #12]
 8006a12:	60b9      	str	r1, [r7, #8]
 8006a14:	607a      	str	r2, [r7, #4]
 8006a16:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a24:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	021a      	lsls	r2, r3, #8
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	431a      	orrs	r2, r3
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	697a      	ldr	r2, [r7, #20]
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	609a      	str	r2, [r3, #8]
}
 8006a3e:	bf00      	nop
 8006a40:	371c      	adds	r7, #28
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr

08006a48 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f003 031f 	and.w	r3, r3, #31
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	6a1a      	ldr	r2, [r3, #32]
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	43db      	mvns	r3, r3
 8006a6a:	401a      	ands	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6a1a      	ldr	r2, [r3, #32]
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	6879      	ldr	r1, [r7, #4]
 8006a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8006a80:	431a      	orrs	r2, r3
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	621a      	str	r2, [r3, #32]
}
 8006a86:	bf00      	nop
 8006a88:	371c      	adds	r7, #28
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bc80      	pop	{r7}
 8006a8e:	4770      	bx	lr

08006a90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
 8006a98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e032      	b.n	8006b0e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ace:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ae0:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68fa      	ldr	r2, [r7, #12]
 8006af2:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2200      	movs	r2, #0
 8006b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	bc80      	pop	{r7}
 8006b16:	4770      	bx	lr

08006b18 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b083      	sub	sp, #12
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b20:	bf00      	nop
 8006b22:	370c      	adds	r7, #12
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bc80      	pop	{r7}
 8006b28:	4770      	bx	lr

08006b2a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b2a:	b480      	push	{r7}
 8006b2c:	b083      	sub	sp, #12
 8006b2e:	af00      	add	r7, sp, #0
 8006b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b32:	bf00      	nop
 8006b34:	370c      	adds	r7, #12
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bc80      	pop	{r7}
 8006b3a:	4770      	bx	lr

08006b3c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b082      	sub	sp, #8
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e03f      	b.n	8006bce <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b54:	b2db      	uxtb	r3, r3
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d106      	bne.n	8006b68 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	f7fc fa26 	bl	8002fb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2224      	movs	r2, #36	; 0x24
 8006b6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b7e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f90b 	bl	8006d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	691a      	ldr	r2, [r3, #16]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b94:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	695a      	ldr	r2, [r3, #20]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ba4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68da      	ldr	r2, [r3, #12]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bb4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2220      	movs	r2, #32
 8006bc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2220      	movs	r2, #32
 8006bc8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006bcc:	2300      	movs	r3, #0
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3708      	adds	r7, #8
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b088      	sub	sp, #32
 8006bda:	af02      	add	r7, sp, #8
 8006bdc:	60f8      	str	r0, [r7, #12]
 8006bde:	60b9      	str	r1, [r7, #8]
 8006be0:	603b      	str	r3, [r7, #0]
 8006be2:	4613      	mov	r3, r2
 8006be4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b20      	cmp	r3, #32
 8006bf4:	f040 8083 	bne.w	8006cfe <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d002      	beq.n	8006c04 <HAL_UART_Transmit+0x2e>
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e07b      	b.n	8006d00 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d101      	bne.n	8006c16 <HAL_UART_Transmit+0x40>
 8006c12:	2302      	movs	r3, #2
 8006c14:	e074      	b.n	8006d00 <HAL_UART_Transmit+0x12a>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2221      	movs	r2, #33	; 0x21
 8006c28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006c2c:	f7fc fb20 	bl	8003270 <HAL_GetTick>
 8006c30:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	88fa      	ldrh	r2, [r7, #6]
 8006c36:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	88fa      	ldrh	r2, [r7, #6]
 8006c3c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006c3e:	e042      	b.n	8006cc6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	3b01      	subs	r3, #1
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	689b      	ldr	r3, [r3, #8]
 8006c52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c56:	d122      	bne.n	8006c9e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c58:	683b      	ldr	r3, [r7, #0]
 8006c5a:	9300      	str	r3, [sp, #0]
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	2180      	movs	r1, #128	; 0x80
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	f000 f850 	bl	8006d08 <UART_WaitOnFlagUntilTimeout>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e046      	b.n	8006d00 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	881b      	ldrh	r3, [r3, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c84:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d103      	bne.n	8006c96 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	3302      	adds	r3, #2
 8006c92:	60bb      	str	r3, [r7, #8]
 8006c94:	e017      	b.n	8006cc6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	3301      	adds	r3, #1
 8006c9a:	60bb      	str	r3, [r7, #8]
 8006c9c:	e013      	b.n	8006cc6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	9300      	str	r3, [sp, #0]
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	2180      	movs	r1, #128	; 0x80
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f000 f82d 	bl	8006d08 <UART_WaitOnFlagUntilTimeout>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8006cb4:	2303      	movs	r3, #3
 8006cb6:	e023      	b.n	8006d00 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	1c5a      	adds	r2, r3, #1
 8006cbc:	60ba      	str	r2, [r7, #8]
 8006cbe:	781a      	ldrb	r2, [r3, #0]
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d1b7      	bne.n	8006c40 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	9300      	str	r3, [sp, #0]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	2140      	movs	r1, #64	; 0x40
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f000 f814 	bl	8006d08 <UART_WaitOnFlagUntilTimeout>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d001      	beq.n	8006cea <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006ce6:	2303      	movs	r3, #3
 8006ce8:	e00a      	b.n	8006d00 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	e000      	b.n	8006d00 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8006cfe:	2302      	movs	r3, #2
  }
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b084      	sub	sp, #16
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	4613      	mov	r3, r2
 8006d16:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d18:	e02c      	b.n	8006d74 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d20:	d028      	beq.n	8006d74 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d007      	beq.n	8006d38 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d28:	f7fc faa2 	bl	8003270 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d21d      	bcs.n	8006d74 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68da      	ldr	r2, [r3, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006d46:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	695a      	ldr	r2, [r3, #20]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f022 0201 	bic.w	r2, r2, #1
 8006d56:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2220      	movs	r2, #32
 8006d64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006d70:	2303      	movs	r3, #3
 8006d72:	e00f      	b.n	8006d94 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	bf0c      	ite	eq
 8006d84:	2301      	moveq	r3, #1
 8006d86:	2300      	movne	r3, #0
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	79fb      	ldrb	r3, [r7, #7]
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d0c3      	beq.n	8006d1a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3710      	adds	r7, #16
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68da      	ldr	r2, [r3, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	430a      	orrs	r2, r1
 8006db8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	689a      	ldr	r2, [r3, #8]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68db      	ldr	r3, [r3, #12]
 8006dd2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006dd6:	f023 030c 	bic.w	r3, r3, #12
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	6812      	ldr	r2, [r2, #0]
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	430b      	orrs	r3, r1
 8006de2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	695b      	ldr	r3, [r3, #20]
 8006dea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699a      	ldr	r2, [r3, #24]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a52      	ldr	r2, [pc, #328]	; (8006f48 <UART_SetConfig+0x1ac>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d14e      	bne.n	8006ea2 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006e04:	f7fe fa48 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 8006e08:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e0a:	68ba      	ldr	r2, [r7, #8]
 8006e0c:	4613      	mov	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	009a      	lsls	r2, r3, #2
 8006e14:	441a      	add	r2, r3
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e20:	4a4a      	ldr	r2, [pc, #296]	; (8006f4c <UART_SetConfig+0x1b0>)
 8006e22:	fba2 2303 	umull	r2, r3, r2, r3
 8006e26:	095b      	lsrs	r3, r3, #5
 8006e28:	0119      	lsls	r1, r3, #4
 8006e2a:	68ba      	ldr	r2, [r7, #8]
 8006e2c:	4613      	mov	r3, r2
 8006e2e:	009b      	lsls	r3, r3, #2
 8006e30:	4413      	add	r3, r2
 8006e32:	009a      	lsls	r2, r3, #2
 8006e34:	441a      	add	r2, r3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e40:	4b42      	ldr	r3, [pc, #264]	; (8006f4c <UART_SetConfig+0x1b0>)
 8006e42:	fba3 0302 	umull	r0, r3, r3, r2
 8006e46:	095b      	lsrs	r3, r3, #5
 8006e48:	2064      	movs	r0, #100	; 0x64
 8006e4a:	fb00 f303 	mul.w	r3, r0, r3
 8006e4e:	1ad3      	subs	r3, r2, r3
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	3332      	adds	r3, #50	; 0x32
 8006e54:	4a3d      	ldr	r2, [pc, #244]	; (8006f4c <UART_SetConfig+0x1b0>)
 8006e56:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5a:	095b      	lsrs	r3, r3, #5
 8006e5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006e60:	4419      	add	r1, r3
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	4613      	mov	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	4413      	add	r3, r2
 8006e6a:	009a      	lsls	r2, r3, #2
 8006e6c:	441a      	add	r2, r3
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	009b      	lsls	r3, r3, #2
 8006e74:	fbb2 f2f3 	udiv	r2, r2, r3
 8006e78:	4b34      	ldr	r3, [pc, #208]	; (8006f4c <UART_SetConfig+0x1b0>)
 8006e7a:	fba3 0302 	umull	r0, r3, r3, r2
 8006e7e:	095b      	lsrs	r3, r3, #5
 8006e80:	2064      	movs	r0, #100	; 0x64
 8006e82:	fb00 f303 	mul.w	r3, r0, r3
 8006e86:	1ad3      	subs	r3, r2, r3
 8006e88:	011b      	lsls	r3, r3, #4
 8006e8a:	3332      	adds	r3, #50	; 0x32
 8006e8c:	4a2f      	ldr	r2, [pc, #188]	; (8006f4c <UART_SetConfig+0x1b0>)
 8006e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8006e92:	095b      	lsrs	r3, r3, #5
 8006e94:	f003 020f 	and.w	r2, r3, #15
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	440a      	add	r2, r1
 8006e9e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8006ea0:	e04d      	b.n	8006f3e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8006ea2:	f7fe f9e5 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006ea6:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	4613      	mov	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	4413      	add	r3, r2
 8006eb0:	009a      	lsls	r2, r3, #2
 8006eb2:	441a      	add	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ebe:	4a23      	ldr	r2, [pc, #140]	; (8006f4c <UART_SetConfig+0x1b0>)
 8006ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	0119      	lsls	r1, r3, #4
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009a      	lsls	r2, r3, #2
 8006ed2:	441a      	add	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	009b      	lsls	r3, r3, #2
 8006eda:	fbb2 f2f3 	udiv	r2, r2, r3
 8006ede:	4b1b      	ldr	r3, [pc, #108]	; (8006f4c <UART_SetConfig+0x1b0>)
 8006ee0:	fba3 0302 	umull	r0, r3, r3, r2
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	2064      	movs	r0, #100	; 0x64
 8006ee8:	fb00 f303 	mul.w	r3, r0, r3
 8006eec:	1ad3      	subs	r3, r2, r3
 8006eee:	011b      	lsls	r3, r3, #4
 8006ef0:	3332      	adds	r3, #50	; 0x32
 8006ef2:	4a16      	ldr	r2, [pc, #88]	; (8006f4c <UART_SetConfig+0x1b0>)
 8006ef4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006efe:	4419      	add	r1, r3
 8006f00:	68ba      	ldr	r2, [r7, #8]
 8006f02:	4613      	mov	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4413      	add	r3, r2
 8006f08:	009a      	lsls	r2, r3, #2
 8006f0a:	441a      	add	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f16:	4b0d      	ldr	r3, [pc, #52]	; (8006f4c <UART_SetConfig+0x1b0>)
 8006f18:	fba3 0302 	umull	r0, r3, r3, r2
 8006f1c:	095b      	lsrs	r3, r3, #5
 8006f1e:	2064      	movs	r0, #100	; 0x64
 8006f20:	fb00 f303 	mul.w	r3, r0, r3
 8006f24:	1ad3      	subs	r3, r2, r3
 8006f26:	011b      	lsls	r3, r3, #4
 8006f28:	3332      	adds	r3, #50	; 0x32
 8006f2a:	4a08      	ldr	r2, [pc, #32]	; (8006f4c <UART_SetConfig+0x1b0>)
 8006f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f30:	095b      	lsrs	r3, r3, #5
 8006f32:	f003 020f 	and.w	r2, r3, #15
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	440a      	add	r2, r1
 8006f3c:	609a      	str	r2, [r3, #8]
}
 8006f3e:	bf00      	nop
 8006f40:	3710      	adds	r7, #16
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}
 8006f46:	bf00      	nop
 8006f48:	40013800 	.word	0x40013800
 8006f4c:	51eb851f 	.word	0x51eb851f

08006f50 <__errno>:
 8006f50:	4b01      	ldr	r3, [pc, #4]	; (8006f58 <__errno+0x8>)
 8006f52:	6818      	ldr	r0, [r3, #0]
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000038 	.word	0x20000038

08006f5c <__libc_init_array>:
 8006f5c:	b570      	push	{r4, r5, r6, lr}
 8006f5e:	2500      	movs	r5, #0
 8006f60:	4e0c      	ldr	r6, [pc, #48]	; (8006f94 <__libc_init_array+0x38>)
 8006f62:	4c0d      	ldr	r4, [pc, #52]	; (8006f98 <__libc_init_array+0x3c>)
 8006f64:	1ba4      	subs	r4, r4, r6
 8006f66:	10a4      	asrs	r4, r4, #2
 8006f68:	42a5      	cmp	r5, r4
 8006f6a:	d109      	bne.n	8006f80 <__libc_init_array+0x24>
 8006f6c:	f000 fc36 	bl	80077dc <_init>
 8006f70:	2500      	movs	r5, #0
 8006f72:	4e0a      	ldr	r6, [pc, #40]	; (8006f9c <__libc_init_array+0x40>)
 8006f74:	4c0a      	ldr	r4, [pc, #40]	; (8006fa0 <__libc_init_array+0x44>)
 8006f76:	1ba4      	subs	r4, r4, r6
 8006f78:	10a4      	asrs	r4, r4, #2
 8006f7a:	42a5      	cmp	r5, r4
 8006f7c:	d105      	bne.n	8006f8a <__libc_init_array+0x2e>
 8006f7e:	bd70      	pop	{r4, r5, r6, pc}
 8006f80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f84:	4798      	blx	r3
 8006f86:	3501      	adds	r5, #1
 8006f88:	e7ee      	b.n	8006f68 <__libc_init_array+0xc>
 8006f8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f8e:	4798      	blx	r3
 8006f90:	3501      	adds	r5, #1
 8006f92:	e7f2      	b.n	8006f7a <__libc_init_array+0x1e>
 8006f94:	08007da0 	.word	0x08007da0
 8006f98:	08007da0 	.word	0x08007da0
 8006f9c:	08007da0 	.word	0x08007da0
 8006fa0:	08007da4 	.word	0x08007da4

08006fa4 <memcpy>:
 8006fa4:	b510      	push	{r4, lr}
 8006fa6:	1e43      	subs	r3, r0, #1
 8006fa8:	440a      	add	r2, r1
 8006faa:	4291      	cmp	r1, r2
 8006fac:	d100      	bne.n	8006fb0 <memcpy+0xc>
 8006fae:	bd10      	pop	{r4, pc}
 8006fb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fb8:	e7f7      	b.n	8006faa <memcpy+0x6>

08006fba <memset>:
 8006fba:	4603      	mov	r3, r0
 8006fbc:	4402      	add	r2, r0
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d100      	bne.n	8006fc4 <memset+0xa>
 8006fc2:	4770      	bx	lr
 8006fc4:	f803 1b01 	strb.w	r1, [r3], #1
 8006fc8:	e7f9      	b.n	8006fbe <memset+0x4>
	...

08006fcc <siprintf>:
 8006fcc:	b40e      	push	{r1, r2, r3}
 8006fce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fd2:	b500      	push	{lr}
 8006fd4:	b09c      	sub	sp, #112	; 0x70
 8006fd6:	ab1d      	add	r3, sp, #116	; 0x74
 8006fd8:	9002      	str	r0, [sp, #8]
 8006fda:	9006      	str	r0, [sp, #24]
 8006fdc:	9107      	str	r1, [sp, #28]
 8006fde:	9104      	str	r1, [sp, #16]
 8006fe0:	4808      	ldr	r0, [pc, #32]	; (8007004 <siprintf+0x38>)
 8006fe2:	4909      	ldr	r1, [pc, #36]	; (8007008 <siprintf+0x3c>)
 8006fe4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe8:	9105      	str	r1, [sp, #20]
 8006fea:	6800      	ldr	r0, [r0, #0]
 8006fec:	a902      	add	r1, sp, #8
 8006fee:	9301      	str	r3, [sp, #4]
 8006ff0:	f000 f866 	bl	80070c0 <_svfiprintf_r>
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	9b02      	ldr	r3, [sp, #8]
 8006ff8:	701a      	strb	r2, [r3, #0]
 8006ffa:	b01c      	add	sp, #112	; 0x70
 8006ffc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007000:	b003      	add	sp, #12
 8007002:	4770      	bx	lr
 8007004:	20000038 	.word	0x20000038
 8007008:	ffff0208 	.word	0xffff0208

0800700c <__ssputs_r>:
 800700c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007010:	688e      	ldr	r6, [r1, #8]
 8007012:	4682      	mov	sl, r0
 8007014:	429e      	cmp	r6, r3
 8007016:	460c      	mov	r4, r1
 8007018:	4690      	mov	r8, r2
 800701a:	4699      	mov	r9, r3
 800701c:	d837      	bhi.n	800708e <__ssputs_r+0x82>
 800701e:	898a      	ldrh	r2, [r1, #12]
 8007020:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007024:	d031      	beq.n	800708a <__ssputs_r+0x7e>
 8007026:	2302      	movs	r3, #2
 8007028:	6825      	ldr	r5, [r4, #0]
 800702a:	6909      	ldr	r1, [r1, #16]
 800702c:	1a6f      	subs	r7, r5, r1
 800702e:	6965      	ldr	r5, [r4, #20]
 8007030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007034:	fb95 f5f3 	sdiv	r5, r5, r3
 8007038:	f109 0301 	add.w	r3, r9, #1
 800703c:	443b      	add	r3, r7
 800703e:	429d      	cmp	r5, r3
 8007040:	bf38      	it	cc
 8007042:	461d      	movcc	r5, r3
 8007044:	0553      	lsls	r3, r2, #21
 8007046:	d530      	bpl.n	80070aa <__ssputs_r+0x9e>
 8007048:	4629      	mov	r1, r5
 800704a:	f000 fb2d 	bl	80076a8 <_malloc_r>
 800704e:	4606      	mov	r6, r0
 8007050:	b950      	cbnz	r0, 8007068 <__ssputs_r+0x5c>
 8007052:	230c      	movs	r3, #12
 8007054:	f04f 30ff 	mov.w	r0, #4294967295
 8007058:	f8ca 3000 	str.w	r3, [sl]
 800705c:	89a3      	ldrh	r3, [r4, #12]
 800705e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007062:	81a3      	strh	r3, [r4, #12]
 8007064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007068:	463a      	mov	r2, r7
 800706a:	6921      	ldr	r1, [r4, #16]
 800706c:	f7ff ff9a 	bl	8006fa4 <memcpy>
 8007070:	89a3      	ldrh	r3, [r4, #12]
 8007072:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800707a:	81a3      	strh	r3, [r4, #12]
 800707c:	6126      	str	r6, [r4, #16]
 800707e:	443e      	add	r6, r7
 8007080:	6026      	str	r6, [r4, #0]
 8007082:	464e      	mov	r6, r9
 8007084:	6165      	str	r5, [r4, #20]
 8007086:	1bed      	subs	r5, r5, r7
 8007088:	60a5      	str	r5, [r4, #8]
 800708a:	454e      	cmp	r6, r9
 800708c:	d900      	bls.n	8007090 <__ssputs_r+0x84>
 800708e:	464e      	mov	r6, r9
 8007090:	4632      	mov	r2, r6
 8007092:	4641      	mov	r1, r8
 8007094:	6820      	ldr	r0, [r4, #0]
 8007096:	f000 faa1 	bl	80075dc <memmove>
 800709a:	68a3      	ldr	r3, [r4, #8]
 800709c:	2000      	movs	r0, #0
 800709e:	1b9b      	subs	r3, r3, r6
 80070a0:	60a3      	str	r3, [r4, #8]
 80070a2:	6823      	ldr	r3, [r4, #0]
 80070a4:	441e      	add	r6, r3
 80070a6:	6026      	str	r6, [r4, #0]
 80070a8:	e7dc      	b.n	8007064 <__ssputs_r+0x58>
 80070aa:	462a      	mov	r2, r5
 80070ac:	f000 fb56 	bl	800775c <_realloc_r>
 80070b0:	4606      	mov	r6, r0
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d1e2      	bne.n	800707c <__ssputs_r+0x70>
 80070b6:	6921      	ldr	r1, [r4, #16]
 80070b8:	4650      	mov	r0, sl
 80070ba:	f000 faa9 	bl	8007610 <_free_r>
 80070be:	e7c8      	b.n	8007052 <__ssputs_r+0x46>

080070c0 <_svfiprintf_r>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	461d      	mov	r5, r3
 80070c6:	898b      	ldrh	r3, [r1, #12]
 80070c8:	b09d      	sub	sp, #116	; 0x74
 80070ca:	061f      	lsls	r7, r3, #24
 80070cc:	4680      	mov	r8, r0
 80070ce:	460c      	mov	r4, r1
 80070d0:	4616      	mov	r6, r2
 80070d2:	d50f      	bpl.n	80070f4 <_svfiprintf_r+0x34>
 80070d4:	690b      	ldr	r3, [r1, #16]
 80070d6:	b96b      	cbnz	r3, 80070f4 <_svfiprintf_r+0x34>
 80070d8:	2140      	movs	r1, #64	; 0x40
 80070da:	f000 fae5 	bl	80076a8 <_malloc_r>
 80070de:	6020      	str	r0, [r4, #0]
 80070e0:	6120      	str	r0, [r4, #16]
 80070e2:	b928      	cbnz	r0, 80070f0 <_svfiprintf_r+0x30>
 80070e4:	230c      	movs	r3, #12
 80070e6:	f8c8 3000 	str.w	r3, [r8]
 80070ea:	f04f 30ff 	mov.w	r0, #4294967295
 80070ee:	e0c8      	b.n	8007282 <_svfiprintf_r+0x1c2>
 80070f0:	2340      	movs	r3, #64	; 0x40
 80070f2:	6163      	str	r3, [r4, #20]
 80070f4:	2300      	movs	r3, #0
 80070f6:	9309      	str	r3, [sp, #36]	; 0x24
 80070f8:	2320      	movs	r3, #32
 80070fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070fe:	2330      	movs	r3, #48	; 0x30
 8007100:	f04f 0b01 	mov.w	fp, #1
 8007104:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007108:	9503      	str	r5, [sp, #12]
 800710a:	4637      	mov	r7, r6
 800710c:	463d      	mov	r5, r7
 800710e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007112:	b10b      	cbz	r3, 8007118 <_svfiprintf_r+0x58>
 8007114:	2b25      	cmp	r3, #37	; 0x25
 8007116:	d13e      	bne.n	8007196 <_svfiprintf_r+0xd6>
 8007118:	ebb7 0a06 	subs.w	sl, r7, r6
 800711c:	d00b      	beq.n	8007136 <_svfiprintf_r+0x76>
 800711e:	4653      	mov	r3, sl
 8007120:	4632      	mov	r2, r6
 8007122:	4621      	mov	r1, r4
 8007124:	4640      	mov	r0, r8
 8007126:	f7ff ff71 	bl	800700c <__ssputs_r>
 800712a:	3001      	adds	r0, #1
 800712c:	f000 80a4 	beq.w	8007278 <_svfiprintf_r+0x1b8>
 8007130:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007132:	4453      	add	r3, sl
 8007134:	9309      	str	r3, [sp, #36]	; 0x24
 8007136:	783b      	ldrb	r3, [r7, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	f000 809d 	beq.w	8007278 <_svfiprintf_r+0x1b8>
 800713e:	2300      	movs	r3, #0
 8007140:	f04f 32ff 	mov.w	r2, #4294967295
 8007144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007148:	9304      	str	r3, [sp, #16]
 800714a:	9307      	str	r3, [sp, #28]
 800714c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007150:	931a      	str	r3, [sp, #104]	; 0x68
 8007152:	462f      	mov	r7, r5
 8007154:	2205      	movs	r2, #5
 8007156:	f817 1b01 	ldrb.w	r1, [r7], #1
 800715a:	4850      	ldr	r0, [pc, #320]	; (800729c <_svfiprintf_r+0x1dc>)
 800715c:	f000 fa30 	bl	80075c0 <memchr>
 8007160:	9b04      	ldr	r3, [sp, #16]
 8007162:	b9d0      	cbnz	r0, 800719a <_svfiprintf_r+0xda>
 8007164:	06d9      	lsls	r1, r3, #27
 8007166:	bf44      	itt	mi
 8007168:	2220      	movmi	r2, #32
 800716a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800716e:	071a      	lsls	r2, r3, #28
 8007170:	bf44      	itt	mi
 8007172:	222b      	movmi	r2, #43	; 0x2b
 8007174:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007178:	782a      	ldrb	r2, [r5, #0]
 800717a:	2a2a      	cmp	r2, #42	; 0x2a
 800717c:	d015      	beq.n	80071aa <_svfiprintf_r+0xea>
 800717e:	462f      	mov	r7, r5
 8007180:	2000      	movs	r0, #0
 8007182:	250a      	movs	r5, #10
 8007184:	9a07      	ldr	r2, [sp, #28]
 8007186:	4639      	mov	r1, r7
 8007188:	f811 3b01 	ldrb.w	r3, [r1], #1
 800718c:	3b30      	subs	r3, #48	; 0x30
 800718e:	2b09      	cmp	r3, #9
 8007190:	d94d      	bls.n	800722e <_svfiprintf_r+0x16e>
 8007192:	b1b8      	cbz	r0, 80071c4 <_svfiprintf_r+0x104>
 8007194:	e00f      	b.n	80071b6 <_svfiprintf_r+0xf6>
 8007196:	462f      	mov	r7, r5
 8007198:	e7b8      	b.n	800710c <_svfiprintf_r+0x4c>
 800719a:	4a40      	ldr	r2, [pc, #256]	; (800729c <_svfiprintf_r+0x1dc>)
 800719c:	463d      	mov	r5, r7
 800719e:	1a80      	subs	r0, r0, r2
 80071a0:	fa0b f000 	lsl.w	r0, fp, r0
 80071a4:	4318      	orrs	r0, r3
 80071a6:	9004      	str	r0, [sp, #16]
 80071a8:	e7d3      	b.n	8007152 <_svfiprintf_r+0x92>
 80071aa:	9a03      	ldr	r2, [sp, #12]
 80071ac:	1d11      	adds	r1, r2, #4
 80071ae:	6812      	ldr	r2, [r2, #0]
 80071b0:	9103      	str	r1, [sp, #12]
 80071b2:	2a00      	cmp	r2, #0
 80071b4:	db01      	blt.n	80071ba <_svfiprintf_r+0xfa>
 80071b6:	9207      	str	r2, [sp, #28]
 80071b8:	e004      	b.n	80071c4 <_svfiprintf_r+0x104>
 80071ba:	4252      	negs	r2, r2
 80071bc:	f043 0302 	orr.w	r3, r3, #2
 80071c0:	9207      	str	r2, [sp, #28]
 80071c2:	9304      	str	r3, [sp, #16]
 80071c4:	783b      	ldrb	r3, [r7, #0]
 80071c6:	2b2e      	cmp	r3, #46	; 0x2e
 80071c8:	d10c      	bne.n	80071e4 <_svfiprintf_r+0x124>
 80071ca:	787b      	ldrb	r3, [r7, #1]
 80071cc:	2b2a      	cmp	r3, #42	; 0x2a
 80071ce:	d133      	bne.n	8007238 <_svfiprintf_r+0x178>
 80071d0:	9b03      	ldr	r3, [sp, #12]
 80071d2:	3702      	adds	r7, #2
 80071d4:	1d1a      	adds	r2, r3, #4
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	9203      	str	r2, [sp, #12]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	bfb8      	it	lt
 80071de:	f04f 33ff 	movlt.w	r3, #4294967295
 80071e2:	9305      	str	r3, [sp, #20]
 80071e4:	4d2e      	ldr	r5, [pc, #184]	; (80072a0 <_svfiprintf_r+0x1e0>)
 80071e6:	2203      	movs	r2, #3
 80071e8:	7839      	ldrb	r1, [r7, #0]
 80071ea:	4628      	mov	r0, r5
 80071ec:	f000 f9e8 	bl	80075c0 <memchr>
 80071f0:	b138      	cbz	r0, 8007202 <_svfiprintf_r+0x142>
 80071f2:	2340      	movs	r3, #64	; 0x40
 80071f4:	1b40      	subs	r0, r0, r5
 80071f6:	fa03 f000 	lsl.w	r0, r3, r0
 80071fa:	9b04      	ldr	r3, [sp, #16]
 80071fc:	3701      	adds	r7, #1
 80071fe:	4303      	orrs	r3, r0
 8007200:	9304      	str	r3, [sp, #16]
 8007202:	7839      	ldrb	r1, [r7, #0]
 8007204:	2206      	movs	r2, #6
 8007206:	4827      	ldr	r0, [pc, #156]	; (80072a4 <_svfiprintf_r+0x1e4>)
 8007208:	1c7e      	adds	r6, r7, #1
 800720a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800720e:	f000 f9d7 	bl	80075c0 <memchr>
 8007212:	2800      	cmp	r0, #0
 8007214:	d038      	beq.n	8007288 <_svfiprintf_r+0x1c8>
 8007216:	4b24      	ldr	r3, [pc, #144]	; (80072a8 <_svfiprintf_r+0x1e8>)
 8007218:	bb13      	cbnz	r3, 8007260 <_svfiprintf_r+0x1a0>
 800721a:	9b03      	ldr	r3, [sp, #12]
 800721c:	3307      	adds	r3, #7
 800721e:	f023 0307 	bic.w	r3, r3, #7
 8007222:	3308      	adds	r3, #8
 8007224:	9303      	str	r3, [sp, #12]
 8007226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007228:	444b      	add	r3, r9
 800722a:	9309      	str	r3, [sp, #36]	; 0x24
 800722c:	e76d      	b.n	800710a <_svfiprintf_r+0x4a>
 800722e:	fb05 3202 	mla	r2, r5, r2, r3
 8007232:	2001      	movs	r0, #1
 8007234:	460f      	mov	r7, r1
 8007236:	e7a6      	b.n	8007186 <_svfiprintf_r+0xc6>
 8007238:	2300      	movs	r3, #0
 800723a:	250a      	movs	r5, #10
 800723c:	4619      	mov	r1, r3
 800723e:	3701      	adds	r7, #1
 8007240:	9305      	str	r3, [sp, #20]
 8007242:	4638      	mov	r0, r7
 8007244:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007248:	3a30      	subs	r2, #48	; 0x30
 800724a:	2a09      	cmp	r2, #9
 800724c:	d903      	bls.n	8007256 <_svfiprintf_r+0x196>
 800724e:	2b00      	cmp	r3, #0
 8007250:	d0c8      	beq.n	80071e4 <_svfiprintf_r+0x124>
 8007252:	9105      	str	r1, [sp, #20]
 8007254:	e7c6      	b.n	80071e4 <_svfiprintf_r+0x124>
 8007256:	fb05 2101 	mla	r1, r5, r1, r2
 800725a:	2301      	movs	r3, #1
 800725c:	4607      	mov	r7, r0
 800725e:	e7f0      	b.n	8007242 <_svfiprintf_r+0x182>
 8007260:	ab03      	add	r3, sp, #12
 8007262:	9300      	str	r3, [sp, #0]
 8007264:	4622      	mov	r2, r4
 8007266:	4b11      	ldr	r3, [pc, #68]	; (80072ac <_svfiprintf_r+0x1ec>)
 8007268:	a904      	add	r1, sp, #16
 800726a:	4640      	mov	r0, r8
 800726c:	f3af 8000 	nop.w
 8007270:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007274:	4681      	mov	r9, r0
 8007276:	d1d6      	bne.n	8007226 <_svfiprintf_r+0x166>
 8007278:	89a3      	ldrh	r3, [r4, #12]
 800727a:	065b      	lsls	r3, r3, #25
 800727c:	f53f af35 	bmi.w	80070ea <_svfiprintf_r+0x2a>
 8007280:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007282:	b01d      	add	sp, #116	; 0x74
 8007284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007288:	ab03      	add	r3, sp, #12
 800728a:	9300      	str	r3, [sp, #0]
 800728c:	4622      	mov	r2, r4
 800728e:	4b07      	ldr	r3, [pc, #28]	; (80072ac <_svfiprintf_r+0x1ec>)
 8007290:	a904      	add	r1, sp, #16
 8007292:	4640      	mov	r0, r8
 8007294:	f000 f882 	bl	800739c <_printf_i>
 8007298:	e7ea      	b.n	8007270 <_svfiprintf_r+0x1b0>
 800729a:	bf00      	nop
 800729c:	08007d64 	.word	0x08007d64
 80072a0:	08007d6a 	.word	0x08007d6a
 80072a4:	08007d6e 	.word	0x08007d6e
 80072a8:	00000000 	.word	0x00000000
 80072ac:	0800700d 	.word	0x0800700d

080072b0 <_printf_common>:
 80072b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b4:	4691      	mov	r9, r2
 80072b6:	461f      	mov	r7, r3
 80072b8:	688a      	ldr	r2, [r1, #8]
 80072ba:	690b      	ldr	r3, [r1, #16]
 80072bc:	4606      	mov	r6, r0
 80072be:	4293      	cmp	r3, r2
 80072c0:	bfb8      	it	lt
 80072c2:	4613      	movlt	r3, r2
 80072c4:	f8c9 3000 	str.w	r3, [r9]
 80072c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072cc:	460c      	mov	r4, r1
 80072ce:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072d2:	b112      	cbz	r2, 80072da <_printf_common+0x2a>
 80072d4:	3301      	adds	r3, #1
 80072d6:	f8c9 3000 	str.w	r3, [r9]
 80072da:	6823      	ldr	r3, [r4, #0]
 80072dc:	0699      	lsls	r1, r3, #26
 80072de:	bf42      	ittt	mi
 80072e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072e4:	3302      	addmi	r3, #2
 80072e6:	f8c9 3000 	strmi.w	r3, [r9]
 80072ea:	6825      	ldr	r5, [r4, #0]
 80072ec:	f015 0506 	ands.w	r5, r5, #6
 80072f0:	d107      	bne.n	8007302 <_printf_common+0x52>
 80072f2:	f104 0a19 	add.w	sl, r4, #25
 80072f6:	68e3      	ldr	r3, [r4, #12]
 80072f8:	f8d9 2000 	ldr.w	r2, [r9]
 80072fc:	1a9b      	subs	r3, r3, r2
 80072fe:	42ab      	cmp	r3, r5
 8007300:	dc29      	bgt.n	8007356 <_printf_common+0xa6>
 8007302:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007306:	6822      	ldr	r2, [r4, #0]
 8007308:	3300      	adds	r3, #0
 800730a:	bf18      	it	ne
 800730c:	2301      	movne	r3, #1
 800730e:	0692      	lsls	r2, r2, #26
 8007310:	d42e      	bmi.n	8007370 <_printf_common+0xc0>
 8007312:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007316:	4639      	mov	r1, r7
 8007318:	4630      	mov	r0, r6
 800731a:	47c0      	blx	r8
 800731c:	3001      	adds	r0, #1
 800731e:	d021      	beq.n	8007364 <_printf_common+0xb4>
 8007320:	6823      	ldr	r3, [r4, #0]
 8007322:	68e5      	ldr	r5, [r4, #12]
 8007324:	f003 0306 	and.w	r3, r3, #6
 8007328:	2b04      	cmp	r3, #4
 800732a:	bf18      	it	ne
 800732c:	2500      	movne	r5, #0
 800732e:	f8d9 2000 	ldr.w	r2, [r9]
 8007332:	f04f 0900 	mov.w	r9, #0
 8007336:	bf08      	it	eq
 8007338:	1aad      	subeq	r5, r5, r2
 800733a:	68a3      	ldr	r3, [r4, #8]
 800733c:	6922      	ldr	r2, [r4, #16]
 800733e:	bf08      	it	eq
 8007340:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007344:	4293      	cmp	r3, r2
 8007346:	bfc4      	itt	gt
 8007348:	1a9b      	subgt	r3, r3, r2
 800734a:	18ed      	addgt	r5, r5, r3
 800734c:	341a      	adds	r4, #26
 800734e:	454d      	cmp	r5, r9
 8007350:	d11a      	bne.n	8007388 <_printf_common+0xd8>
 8007352:	2000      	movs	r0, #0
 8007354:	e008      	b.n	8007368 <_printf_common+0xb8>
 8007356:	2301      	movs	r3, #1
 8007358:	4652      	mov	r2, sl
 800735a:	4639      	mov	r1, r7
 800735c:	4630      	mov	r0, r6
 800735e:	47c0      	blx	r8
 8007360:	3001      	adds	r0, #1
 8007362:	d103      	bne.n	800736c <_printf_common+0xbc>
 8007364:	f04f 30ff 	mov.w	r0, #4294967295
 8007368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736c:	3501      	adds	r5, #1
 800736e:	e7c2      	b.n	80072f6 <_printf_common+0x46>
 8007370:	2030      	movs	r0, #48	; 0x30
 8007372:	18e1      	adds	r1, r4, r3
 8007374:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007378:	1c5a      	adds	r2, r3, #1
 800737a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800737e:	4422      	add	r2, r4
 8007380:	3302      	adds	r3, #2
 8007382:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007386:	e7c4      	b.n	8007312 <_printf_common+0x62>
 8007388:	2301      	movs	r3, #1
 800738a:	4622      	mov	r2, r4
 800738c:	4639      	mov	r1, r7
 800738e:	4630      	mov	r0, r6
 8007390:	47c0      	blx	r8
 8007392:	3001      	adds	r0, #1
 8007394:	d0e6      	beq.n	8007364 <_printf_common+0xb4>
 8007396:	f109 0901 	add.w	r9, r9, #1
 800739a:	e7d8      	b.n	800734e <_printf_common+0x9e>

0800739c <_printf_i>:
 800739c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80073a4:	460c      	mov	r4, r1
 80073a6:	7e09      	ldrb	r1, [r1, #24]
 80073a8:	b085      	sub	sp, #20
 80073aa:	296e      	cmp	r1, #110	; 0x6e
 80073ac:	4617      	mov	r7, r2
 80073ae:	4606      	mov	r6, r0
 80073b0:	4698      	mov	r8, r3
 80073b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073b4:	f000 80b3 	beq.w	800751e <_printf_i+0x182>
 80073b8:	d822      	bhi.n	8007400 <_printf_i+0x64>
 80073ba:	2963      	cmp	r1, #99	; 0x63
 80073bc:	d036      	beq.n	800742c <_printf_i+0x90>
 80073be:	d80a      	bhi.n	80073d6 <_printf_i+0x3a>
 80073c0:	2900      	cmp	r1, #0
 80073c2:	f000 80b9 	beq.w	8007538 <_printf_i+0x19c>
 80073c6:	2958      	cmp	r1, #88	; 0x58
 80073c8:	f000 8083 	beq.w	80074d2 <_printf_i+0x136>
 80073cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80073d4:	e032      	b.n	800743c <_printf_i+0xa0>
 80073d6:	2964      	cmp	r1, #100	; 0x64
 80073d8:	d001      	beq.n	80073de <_printf_i+0x42>
 80073da:	2969      	cmp	r1, #105	; 0x69
 80073dc:	d1f6      	bne.n	80073cc <_printf_i+0x30>
 80073de:	6820      	ldr	r0, [r4, #0]
 80073e0:	6813      	ldr	r3, [r2, #0]
 80073e2:	0605      	lsls	r5, r0, #24
 80073e4:	f103 0104 	add.w	r1, r3, #4
 80073e8:	d52a      	bpl.n	8007440 <_printf_i+0xa4>
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	6011      	str	r1, [r2, #0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	da03      	bge.n	80073fa <_printf_i+0x5e>
 80073f2:	222d      	movs	r2, #45	; 0x2d
 80073f4:	425b      	negs	r3, r3
 80073f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80073fa:	486f      	ldr	r0, [pc, #444]	; (80075b8 <_printf_i+0x21c>)
 80073fc:	220a      	movs	r2, #10
 80073fe:	e039      	b.n	8007474 <_printf_i+0xd8>
 8007400:	2973      	cmp	r1, #115	; 0x73
 8007402:	f000 809d 	beq.w	8007540 <_printf_i+0x1a4>
 8007406:	d808      	bhi.n	800741a <_printf_i+0x7e>
 8007408:	296f      	cmp	r1, #111	; 0x6f
 800740a:	d020      	beq.n	800744e <_printf_i+0xb2>
 800740c:	2970      	cmp	r1, #112	; 0x70
 800740e:	d1dd      	bne.n	80073cc <_printf_i+0x30>
 8007410:	6823      	ldr	r3, [r4, #0]
 8007412:	f043 0320 	orr.w	r3, r3, #32
 8007416:	6023      	str	r3, [r4, #0]
 8007418:	e003      	b.n	8007422 <_printf_i+0x86>
 800741a:	2975      	cmp	r1, #117	; 0x75
 800741c:	d017      	beq.n	800744e <_printf_i+0xb2>
 800741e:	2978      	cmp	r1, #120	; 0x78
 8007420:	d1d4      	bne.n	80073cc <_printf_i+0x30>
 8007422:	2378      	movs	r3, #120	; 0x78
 8007424:	4865      	ldr	r0, [pc, #404]	; (80075bc <_printf_i+0x220>)
 8007426:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800742a:	e055      	b.n	80074d8 <_printf_i+0x13c>
 800742c:	6813      	ldr	r3, [r2, #0]
 800742e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007432:	1d19      	adds	r1, r3, #4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	6011      	str	r1, [r2, #0]
 8007438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800743c:	2301      	movs	r3, #1
 800743e:	e08c      	b.n	800755a <_printf_i+0x1be>
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007446:	6011      	str	r1, [r2, #0]
 8007448:	bf18      	it	ne
 800744a:	b21b      	sxthne	r3, r3
 800744c:	e7cf      	b.n	80073ee <_printf_i+0x52>
 800744e:	6813      	ldr	r3, [r2, #0]
 8007450:	6825      	ldr	r5, [r4, #0]
 8007452:	1d18      	adds	r0, r3, #4
 8007454:	6010      	str	r0, [r2, #0]
 8007456:	0628      	lsls	r0, r5, #24
 8007458:	d501      	bpl.n	800745e <_printf_i+0xc2>
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	e002      	b.n	8007464 <_printf_i+0xc8>
 800745e:	0668      	lsls	r0, r5, #25
 8007460:	d5fb      	bpl.n	800745a <_printf_i+0xbe>
 8007462:	881b      	ldrh	r3, [r3, #0]
 8007464:	296f      	cmp	r1, #111	; 0x6f
 8007466:	bf14      	ite	ne
 8007468:	220a      	movne	r2, #10
 800746a:	2208      	moveq	r2, #8
 800746c:	4852      	ldr	r0, [pc, #328]	; (80075b8 <_printf_i+0x21c>)
 800746e:	2100      	movs	r1, #0
 8007470:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007474:	6865      	ldr	r5, [r4, #4]
 8007476:	2d00      	cmp	r5, #0
 8007478:	60a5      	str	r5, [r4, #8]
 800747a:	f2c0 8095 	blt.w	80075a8 <_printf_i+0x20c>
 800747e:	6821      	ldr	r1, [r4, #0]
 8007480:	f021 0104 	bic.w	r1, r1, #4
 8007484:	6021      	str	r1, [r4, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d13d      	bne.n	8007506 <_printf_i+0x16a>
 800748a:	2d00      	cmp	r5, #0
 800748c:	f040 808e 	bne.w	80075ac <_printf_i+0x210>
 8007490:	4665      	mov	r5, ip
 8007492:	2a08      	cmp	r2, #8
 8007494:	d10b      	bne.n	80074ae <_printf_i+0x112>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	07db      	lsls	r3, r3, #31
 800749a:	d508      	bpl.n	80074ae <_printf_i+0x112>
 800749c:	6923      	ldr	r3, [r4, #16]
 800749e:	6862      	ldr	r2, [r4, #4]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	bfde      	ittt	le
 80074a4:	2330      	movle	r3, #48	; 0x30
 80074a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074aa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074ae:	ebac 0305 	sub.w	r3, ip, r5
 80074b2:	6123      	str	r3, [r4, #16]
 80074b4:	f8cd 8000 	str.w	r8, [sp]
 80074b8:	463b      	mov	r3, r7
 80074ba:	aa03      	add	r2, sp, #12
 80074bc:	4621      	mov	r1, r4
 80074be:	4630      	mov	r0, r6
 80074c0:	f7ff fef6 	bl	80072b0 <_printf_common>
 80074c4:	3001      	adds	r0, #1
 80074c6:	d14d      	bne.n	8007564 <_printf_i+0x1c8>
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295
 80074cc:	b005      	add	sp, #20
 80074ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074d2:	4839      	ldr	r0, [pc, #228]	; (80075b8 <_printf_i+0x21c>)
 80074d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80074d8:	6813      	ldr	r3, [r2, #0]
 80074da:	6821      	ldr	r1, [r4, #0]
 80074dc:	1d1d      	adds	r5, r3, #4
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	6015      	str	r5, [r2, #0]
 80074e2:	060a      	lsls	r2, r1, #24
 80074e4:	d50b      	bpl.n	80074fe <_printf_i+0x162>
 80074e6:	07ca      	lsls	r2, r1, #31
 80074e8:	bf44      	itt	mi
 80074ea:	f041 0120 	orrmi.w	r1, r1, #32
 80074ee:	6021      	strmi	r1, [r4, #0]
 80074f0:	b91b      	cbnz	r3, 80074fa <_printf_i+0x15e>
 80074f2:	6822      	ldr	r2, [r4, #0]
 80074f4:	f022 0220 	bic.w	r2, r2, #32
 80074f8:	6022      	str	r2, [r4, #0]
 80074fa:	2210      	movs	r2, #16
 80074fc:	e7b7      	b.n	800746e <_printf_i+0xd2>
 80074fe:	064d      	lsls	r5, r1, #25
 8007500:	bf48      	it	mi
 8007502:	b29b      	uxthmi	r3, r3
 8007504:	e7ef      	b.n	80074e6 <_printf_i+0x14a>
 8007506:	4665      	mov	r5, ip
 8007508:	fbb3 f1f2 	udiv	r1, r3, r2
 800750c:	fb02 3311 	mls	r3, r2, r1, r3
 8007510:	5cc3      	ldrb	r3, [r0, r3]
 8007512:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007516:	460b      	mov	r3, r1
 8007518:	2900      	cmp	r1, #0
 800751a:	d1f5      	bne.n	8007508 <_printf_i+0x16c>
 800751c:	e7b9      	b.n	8007492 <_printf_i+0xf6>
 800751e:	6813      	ldr	r3, [r2, #0]
 8007520:	6825      	ldr	r5, [r4, #0]
 8007522:	1d18      	adds	r0, r3, #4
 8007524:	6961      	ldr	r1, [r4, #20]
 8007526:	6010      	str	r0, [r2, #0]
 8007528:	0628      	lsls	r0, r5, #24
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	d501      	bpl.n	8007532 <_printf_i+0x196>
 800752e:	6019      	str	r1, [r3, #0]
 8007530:	e002      	b.n	8007538 <_printf_i+0x19c>
 8007532:	066a      	lsls	r2, r5, #25
 8007534:	d5fb      	bpl.n	800752e <_printf_i+0x192>
 8007536:	8019      	strh	r1, [r3, #0]
 8007538:	2300      	movs	r3, #0
 800753a:	4665      	mov	r5, ip
 800753c:	6123      	str	r3, [r4, #16]
 800753e:	e7b9      	b.n	80074b4 <_printf_i+0x118>
 8007540:	6813      	ldr	r3, [r2, #0]
 8007542:	1d19      	adds	r1, r3, #4
 8007544:	6011      	str	r1, [r2, #0]
 8007546:	681d      	ldr	r5, [r3, #0]
 8007548:	6862      	ldr	r2, [r4, #4]
 800754a:	2100      	movs	r1, #0
 800754c:	4628      	mov	r0, r5
 800754e:	f000 f837 	bl	80075c0 <memchr>
 8007552:	b108      	cbz	r0, 8007558 <_printf_i+0x1bc>
 8007554:	1b40      	subs	r0, r0, r5
 8007556:	6060      	str	r0, [r4, #4]
 8007558:	6863      	ldr	r3, [r4, #4]
 800755a:	6123      	str	r3, [r4, #16]
 800755c:	2300      	movs	r3, #0
 800755e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007562:	e7a7      	b.n	80074b4 <_printf_i+0x118>
 8007564:	6923      	ldr	r3, [r4, #16]
 8007566:	462a      	mov	r2, r5
 8007568:	4639      	mov	r1, r7
 800756a:	4630      	mov	r0, r6
 800756c:	47c0      	blx	r8
 800756e:	3001      	adds	r0, #1
 8007570:	d0aa      	beq.n	80074c8 <_printf_i+0x12c>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	079b      	lsls	r3, r3, #30
 8007576:	d413      	bmi.n	80075a0 <_printf_i+0x204>
 8007578:	68e0      	ldr	r0, [r4, #12]
 800757a:	9b03      	ldr	r3, [sp, #12]
 800757c:	4298      	cmp	r0, r3
 800757e:	bfb8      	it	lt
 8007580:	4618      	movlt	r0, r3
 8007582:	e7a3      	b.n	80074cc <_printf_i+0x130>
 8007584:	2301      	movs	r3, #1
 8007586:	464a      	mov	r2, r9
 8007588:	4639      	mov	r1, r7
 800758a:	4630      	mov	r0, r6
 800758c:	47c0      	blx	r8
 800758e:	3001      	adds	r0, #1
 8007590:	d09a      	beq.n	80074c8 <_printf_i+0x12c>
 8007592:	3501      	adds	r5, #1
 8007594:	68e3      	ldr	r3, [r4, #12]
 8007596:	9a03      	ldr	r2, [sp, #12]
 8007598:	1a9b      	subs	r3, r3, r2
 800759a:	42ab      	cmp	r3, r5
 800759c:	dcf2      	bgt.n	8007584 <_printf_i+0x1e8>
 800759e:	e7eb      	b.n	8007578 <_printf_i+0x1dc>
 80075a0:	2500      	movs	r5, #0
 80075a2:	f104 0919 	add.w	r9, r4, #25
 80075a6:	e7f5      	b.n	8007594 <_printf_i+0x1f8>
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d1ac      	bne.n	8007506 <_printf_i+0x16a>
 80075ac:	7803      	ldrb	r3, [r0, #0]
 80075ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075b2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075b6:	e76c      	b.n	8007492 <_printf_i+0xf6>
 80075b8:	08007d75 	.word	0x08007d75
 80075bc:	08007d86 	.word	0x08007d86

080075c0 <memchr>:
 80075c0:	b510      	push	{r4, lr}
 80075c2:	b2c9      	uxtb	r1, r1
 80075c4:	4402      	add	r2, r0
 80075c6:	4290      	cmp	r0, r2
 80075c8:	4603      	mov	r3, r0
 80075ca:	d101      	bne.n	80075d0 <memchr+0x10>
 80075cc:	2300      	movs	r3, #0
 80075ce:	e003      	b.n	80075d8 <memchr+0x18>
 80075d0:	781c      	ldrb	r4, [r3, #0]
 80075d2:	3001      	adds	r0, #1
 80075d4:	428c      	cmp	r4, r1
 80075d6:	d1f6      	bne.n	80075c6 <memchr+0x6>
 80075d8:	4618      	mov	r0, r3
 80075da:	bd10      	pop	{r4, pc}

080075dc <memmove>:
 80075dc:	4288      	cmp	r0, r1
 80075de:	b510      	push	{r4, lr}
 80075e0:	eb01 0302 	add.w	r3, r1, r2
 80075e4:	d807      	bhi.n	80075f6 <memmove+0x1a>
 80075e6:	1e42      	subs	r2, r0, #1
 80075e8:	4299      	cmp	r1, r3
 80075ea:	d00a      	beq.n	8007602 <memmove+0x26>
 80075ec:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075f0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80075f4:	e7f8      	b.n	80075e8 <memmove+0xc>
 80075f6:	4283      	cmp	r3, r0
 80075f8:	d9f5      	bls.n	80075e6 <memmove+0xa>
 80075fa:	1881      	adds	r1, r0, r2
 80075fc:	1ad2      	subs	r2, r2, r3
 80075fe:	42d3      	cmn	r3, r2
 8007600:	d100      	bne.n	8007604 <memmove+0x28>
 8007602:	bd10      	pop	{r4, pc}
 8007604:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007608:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800760c:	e7f7      	b.n	80075fe <memmove+0x22>
	...

08007610 <_free_r>:
 8007610:	b538      	push	{r3, r4, r5, lr}
 8007612:	4605      	mov	r5, r0
 8007614:	2900      	cmp	r1, #0
 8007616:	d043      	beq.n	80076a0 <_free_r+0x90>
 8007618:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800761c:	1f0c      	subs	r4, r1, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	bfb8      	it	lt
 8007622:	18e4      	addlt	r4, r4, r3
 8007624:	f000 f8d0 	bl	80077c8 <__malloc_lock>
 8007628:	4a1e      	ldr	r2, [pc, #120]	; (80076a4 <_free_r+0x94>)
 800762a:	6813      	ldr	r3, [r2, #0]
 800762c:	4610      	mov	r0, r2
 800762e:	b933      	cbnz	r3, 800763e <_free_r+0x2e>
 8007630:	6063      	str	r3, [r4, #4]
 8007632:	6014      	str	r4, [r2, #0]
 8007634:	4628      	mov	r0, r5
 8007636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800763a:	f000 b8c6 	b.w	80077ca <__malloc_unlock>
 800763e:	42a3      	cmp	r3, r4
 8007640:	d90b      	bls.n	800765a <_free_r+0x4a>
 8007642:	6821      	ldr	r1, [r4, #0]
 8007644:	1862      	adds	r2, r4, r1
 8007646:	4293      	cmp	r3, r2
 8007648:	bf01      	itttt	eq
 800764a:	681a      	ldreq	r2, [r3, #0]
 800764c:	685b      	ldreq	r3, [r3, #4]
 800764e:	1852      	addeq	r2, r2, r1
 8007650:	6022      	streq	r2, [r4, #0]
 8007652:	6063      	str	r3, [r4, #4]
 8007654:	6004      	str	r4, [r0, #0]
 8007656:	e7ed      	b.n	8007634 <_free_r+0x24>
 8007658:	4613      	mov	r3, r2
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	b10a      	cbz	r2, 8007662 <_free_r+0x52>
 800765e:	42a2      	cmp	r2, r4
 8007660:	d9fa      	bls.n	8007658 <_free_r+0x48>
 8007662:	6819      	ldr	r1, [r3, #0]
 8007664:	1858      	adds	r0, r3, r1
 8007666:	42a0      	cmp	r0, r4
 8007668:	d10b      	bne.n	8007682 <_free_r+0x72>
 800766a:	6820      	ldr	r0, [r4, #0]
 800766c:	4401      	add	r1, r0
 800766e:	1858      	adds	r0, r3, r1
 8007670:	4282      	cmp	r2, r0
 8007672:	6019      	str	r1, [r3, #0]
 8007674:	d1de      	bne.n	8007634 <_free_r+0x24>
 8007676:	6810      	ldr	r0, [r2, #0]
 8007678:	6852      	ldr	r2, [r2, #4]
 800767a:	4401      	add	r1, r0
 800767c:	6019      	str	r1, [r3, #0]
 800767e:	605a      	str	r2, [r3, #4]
 8007680:	e7d8      	b.n	8007634 <_free_r+0x24>
 8007682:	d902      	bls.n	800768a <_free_r+0x7a>
 8007684:	230c      	movs	r3, #12
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	e7d4      	b.n	8007634 <_free_r+0x24>
 800768a:	6820      	ldr	r0, [r4, #0]
 800768c:	1821      	adds	r1, r4, r0
 800768e:	428a      	cmp	r2, r1
 8007690:	bf01      	itttt	eq
 8007692:	6811      	ldreq	r1, [r2, #0]
 8007694:	6852      	ldreq	r2, [r2, #4]
 8007696:	1809      	addeq	r1, r1, r0
 8007698:	6021      	streq	r1, [r4, #0]
 800769a:	6062      	str	r2, [r4, #4]
 800769c:	605c      	str	r4, [r3, #4]
 800769e:	e7c9      	b.n	8007634 <_free_r+0x24>
 80076a0:	bd38      	pop	{r3, r4, r5, pc}
 80076a2:	bf00      	nop
 80076a4:	20000210 	.word	0x20000210

080076a8 <_malloc_r>:
 80076a8:	b570      	push	{r4, r5, r6, lr}
 80076aa:	1ccd      	adds	r5, r1, #3
 80076ac:	f025 0503 	bic.w	r5, r5, #3
 80076b0:	3508      	adds	r5, #8
 80076b2:	2d0c      	cmp	r5, #12
 80076b4:	bf38      	it	cc
 80076b6:	250c      	movcc	r5, #12
 80076b8:	2d00      	cmp	r5, #0
 80076ba:	4606      	mov	r6, r0
 80076bc:	db01      	blt.n	80076c2 <_malloc_r+0x1a>
 80076be:	42a9      	cmp	r1, r5
 80076c0:	d903      	bls.n	80076ca <_malloc_r+0x22>
 80076c2:	230c      	movs	r3, #12
 80076c4:	6033      	str	r3, [r6, #0]
 80076c6:	2000      	movs	r0, #0
 80076c8:	bd70      	pop	{r4, r5, r6, pc}
 80076ca:	f000 f87d 	bl	80077c8 <__malloc_lock>
 80076ce:	4a21      	ldr	r2, [pc, #132]	; (8007754 <_malloc_r+0xac>)
 80076d0:	6814      	ldr	r4, [r2, #0]
 80076d2:	4621      	mov	r1, r4
 80076d4:	b991      	cbnz	r1, 80076fc <_malloc_r+0x54>
 80076d6:	4c20      	ldr	r4, [pc, #128]	; (8007758 <_malloc_r+0xb0>)
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	b91b      	cbnz	r3, 80076e4 <_malloc_r+0x3c>
 80076dc:	4630      	mov	r0, r6
 80076de:	f000 f863 	bl	80077a8 <_sbrk_r>
 80076e2:	6020      	str	r0, [r4, #0]
 80076e4:	4629      	mov	r1, r5
 80076e6:	4630      	mov	r0, r6
 80076e8:	f000 f85e 	bl	80077a8 <_sbrk_r>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d124      	bne.n	800773a <_malloc_r+0x92>
 80076f0:	230c      	movs	r3, #12
 80076f2:	4630      	mov	r0, r6
 80076f4:	6033      	str	r3, [r6, #0]
 80076f6:	f000 f868 	bl	80077ca <__malloc_unlock>
 80076fa:	e7e4      	b.n	80076c6 <_malloc_r+0x1e>
 80076fc:	680b      	ldr	r3, [r1, #0]
 80076fe:	1b5b      	subs	r3, r3, r5
 8007700:	d418      	bmi.n	8007734 <_malloc_r+0x8c>
 8007702:	2b0b      	cmp	r3, #11
 8007704:	d90f      	bls.n	8007726 <_malloc_r+0x7e>
 8007706:	600b      	str	r3, [r1, #0]
 8007708:	18cc      	adds	r4, r1, r3
 800770a:	50cd      	str	r5, [r1, r3]
 800770c:	4630      	mov	r0, r6
 800770e:	f000 f85c 	bl	80077ca <__malloc_unlock>
 8007712:	f104 000b 	add.w	r0, r4, #11
 8007716:	1d23      	adds	r3, r4, #4
 8007718:	f020 0007 	bic.w	r0, r0, #7
 800771c:	1ac3      	subs	r3, r0, r3
 800771e:	d0d3      	beq.n	80076c8 <_malloc_r+0x20>
 8007720:	425a      	negs	r2, r3
 8007722:	50e2      	str	r2, [r4, r3]
 8007724:	e7d0      	b.n	80076c8 <_malloc_r+0x20>
 8007726:	684b      	ldr	r3, [r1, #4]
 8007728:	428c      	cmp	r4, r1
 800772a:	bf16      	itet	ne
 800772c:	6063      	strne	r3, [r4, #4]
 800772e:	6013      	streq	r3, [r2, #0]
 8007730:	460c      	movne	r4, r1
 8007732:	e7eb      	b.n	800770c <_malloc_r+0x64>
 8007734:	460c      	mov	r4, r1
 8007736:	6849      	ldr	r1, [r1, #4]
 8007738:	e7cc      	b.n	80076d4 <_malloc_r+0x2c>
 800773a:	1cc4      	adds	r4, r0, #3
 800773c:	f024 0403 	bic.w	r4, r4, #3
 8007740:	42a0      	cmp	r0, r4
 8007742:	d005      	beq.n	8007750 <_malloc_r+0xa8>
 8007744:	1a21      	subs	r1, r4, r0
 8007746:	4630      	mov	r0, r6
 8007748:	f000 f82e 	bl	80077a8 <_sbrk_r>
 800774c:	3001      	adds	r0, #1
 800774e:	d0cf      	beq.n	80076f0 <_malloc_r+0x48>
 8007750:	6025      	str	r5, [r4, #0]
 8007752:	e7db      	b.n	800770c <_malloc_r+0x64>
 8007754:	20000210 	.word	0x20000210
 8007758:	20000214 	.word	0x20000214

0800775c <_realloc_r>:
 800775c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800775e:	4607      	mov	r7, r0
 8007760:	4614      	mov	r4, r2
 8007762:	460e      	mov	r6, r1
 8007764:	b921      	cbnz	r1, 8007770 <_realloc_r+0x14>
 8007766:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800776a:	4611      	mov	r1, r2
 800776c:	f7ff bf9c 	b.w	80076a8 <_malloc_r>
 8007770:	b922      	cbnz	r2, 800777c <_realloc_r+0x20>
 8007772:	f7ff ff4d 	bl	8007610 <_free_r>
 8007776:	4625      	mov	r5, r4
 8007778:	4628      	mov	r0, r5
 800777a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800777c:	f000 f826 	bl	80077cc <_malloc_usable_size_r>
 8007780:	42a0      	cmp	r0, r4
 8007782:	d20f      	bcs.n	80077a4 <_realloc_r+0x48>
 8007784:	4621      	mov	r1, r4
 8007786:	4638      	mov	r0, r7
 8007788:	f7ff ff8e 	bl	80076a8 <_malloc_r>
 800778c:	4605      	mov	r5, r0
 800778e:	2800      	cmp	r0, #0
 8007790:	d0f2      	beq.n	8007778 <_realloc_r+0x1c>
 8007792:	4631      	mov	r1, r6
 8007794:	4622      	mov	r2, r4
 8007796:	f7ff fc05 	bl	8006fa4 <memcpy>
 800779a:	4631      	mov	r1, r6
 800779c:	4638      	mov	r0, r7
 800779e:	f7ff ff37 	bl	8007610 <_free_r>
 80077a2:	e7e9      	b.n	8007778 <_realloc_r+0x1c>
 80077a4:	4635      	mov	r5, r6
 80077a6:	e7e7      	b.n	8007778 <_realloc_r+0x1c>

080077a8 <_sbrk_r>:
 80077a8:	b538      	push	{r3, r4, r5, lr}
 80077aa:	2300      	movs	r3, #0
 80077ac:	4c05      	ldr	r4, [pc, #20]	; (80077c4 <_sbrk_r+0x1c>)
 80077ae:	4605      	mov	r5, r0
 80077b0:	4608      	mov	r0, r1
 80077b2:	6023      	str	r3, [r4, #0]
 80077b4:	f7fb fc7e 	bl	80030b4 <_sbrk>
 80077b8:	1c43      	adds	r3, r0, #1
 80077ba:	d102      	bne.n	80077c2 <_sbrk_r+0x1a>
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	b103      	cbz	r3, 80077c2 <_sbrk_r+0x1a>
 80077c0:	602b      	str	r3, [r5, #0]
 80077c2:	bd38      	pop	{r3, r4, r5, pc}
 80077c4:	200004f8 	.word	0x200004f8

080077c8 <__malloc_lock>:
 80077c8:	4770      	bx	lr

080077ca <__malloc_unlock>:
 80077ca:	4770      	bx	lr

080077cc <_malloc_usable_size_r>:
 80077cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d0:	1f18      	subs	r0, r3, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfbc      	itt	lt
 80077d6:	580b      	ldrlt	r3, [r1, r0]
 80077d8:	18c0      	addlt	r0, r0, r3
 80077da:	4770      	bx	lr

080077dc <_init>:
 80077dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077de:	bf00      	nop
 80077e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077e2:	bc08      	pop	{r3}
 80077e4:	469e      	mov	lr, r3
 80077e6:	4770      	bx	lr

080077e8 <_fini>:
 80077e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ea:	bf00      	nop
 80077ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077ee:	bc08      	pop	{r3}
 80077f0:	469e      	mov	lr, r3
 80077f2:	4770      	bx	lr
