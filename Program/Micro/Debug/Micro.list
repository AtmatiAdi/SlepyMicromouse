
Micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004370  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  0800447c  0800447c  0001447c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a20  08004a20  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08004a20  08004a20  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a20  08004a20  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a20  08004a20  00014a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a24  08004a24  00014a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004a28  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c4  20000078  08004aa0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08004aa0  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf53  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001acd  00000000  00000000  0002bff4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c38  00000000  00000000  0002dac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  0002e700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00014247  00000000  00000000  0002f280  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008bb6  00000000  00000000  000434c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00070040  00000000  00000000  0004c07d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bc0bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000360c  00000000  00000000  000bc138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08004464 	.word	0x08004464

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08004464 	.word	0x08004464

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000164:	687b      	ldr	r3, [r7, #4]
 8000166:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000168:	4b0a      	ldr	r3, [pc, #40]	; (8000194 <NRF24_DelayMicroSeconds+0x38>)
 800016a:	681b      	ldr	r3, [r3, #0]
 800016c:	4a0a      	ldr	r2, [pc, #40]	; (8000198 <NRF24_DelayMicroSeconds+0x3c>)
 800016e:	fba2 2303 	umull	r2, r3, r2, r3
 8000172:	0c9a      	lsrs	r2, r3, #18
 8000174:	68fb      	ldr	r3, [r7, #12]
 8000176:	fb02 f303 	mul.w	r3, r2, r3
 800017a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800017c:	bf00      	nop
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	1e5a      	subs	r2, r3, #1
 8000182:	60fa      	str	r2, [r7, #12]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d1fa      	bne.n	800017e <NRF24_DelayMicroSeconds+0x22>
}
 8000188:	bf00      	nop
 800018a:	3714      	adds	r7, #20
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000008 	.word	0x20000008
 8000198:	165e9f81 	.word	0x165e9f81

0800019c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	b082      	sub	sp, #8
 80001a0:	af00      	add	r7, sp, #0
 80001a2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	2b00      	cmp	r3, #0
 80001a8:	d008      	beq.n	80001bc <NRF24_csn+0x20>
 80001aa:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <NRF24_csn+0x38>)
 80001ac:	6818      	ldr	r0, [r3, #0]
 80001ae:	4b0a      	ldr	r3, [pc, #40]	; (80001d8 <NRF24_csn+0x3c>)
 80001b0:	881b      	ldrh	r3, [r3, #0]
 80001b2:	2201      	movs	r2, #1
 80001b4:	4619      	mov	r1, r3
 80001b6:	f001 fefd 	bl	8001fb4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 80001ba:	e007      	b.n	80001cc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 80001bc:	4b05      	ldr	r3, [pc, #20]	; (80001d4 <NRF24_csn+0x38>)
 80001be:	6818      	ldr	r0, [r3, #0]
 80001c0:	4b05      	ldr	r3, [pc, #20]	; (80001d8 <NRF24_csn+0x3c>)
 80001c2:	881b      	ldrh	r3, [r3, #0]
 80001c4:	2200      	movs	r2, #0
 80001c6:	4619      	mov	r1, r3
 80001c8:	f001 fef4 	bl	8001fb4 <HAL_GPIO_WritePin>
}
 80001cc:	bf00      	nop
 80001ce:	3708      	adds	r7, #8
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	2000009c 	.word	0x2000009c
 80001d8:	200000a0 	.word	0x200000a0

080001dc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b082      	sub	sp, #8
 80001e0:	af00      	add	r7, sp, #0
 80001e2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d008      	beq.n	80001fc <NRF24_ce+0x20>
 80001ea:	4b0a      	ldr	r3, [pc, #40]	; (8000214 <NRF24_ce+0x38>)
 80001ec:	6818      	ldr	r0, [r3, #0]
 80001ee:	4b0a      	ldr	r3, [pc, #40]	; (8000218 <NRF24_ce+0x3c>)
 80001f0:	881b      	ldrh	r3, [r3, #0]
 80001f2:	2201      	movs	r2, #1
 80001f4:	4619      	mov	r1, r3
 80001f6:	f001 fedd 	bl	8001fb4 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 80001fa:	e007      	b.n	800020c <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 80001fc:	4b05      	ldr	r3, [pc, #20]	; (8000214 <NRF24_ce+0x38>)
 80001fe:	6818      	ldr	r0, [r3, #0]
 8000200:	4b05      	ldr	r3, [pc, #20]	; (8000218 <NRF24_ce+0x3c>)
 8000202:	881b      	ldrh	r3, [r3, #0]
 8000204:	2200      	movs	r2, #0
 8000206:	4619      	mov	r1, r3
 8000208:	f001 fed4 	bl	8001fb4 <HAL_GPIO_WritePin>
}
 800020c:	bf00      	nop
 800020e:	3708      	adds	r7, #8
 8000210:	46bd      	mov	sp, r7
 8000212:	bd80      	pop	{r7, pc}
 8000214:	2000009c 	.word	0x2000009c
 8000218:	200000a2 	.word	0x200000a2

0800021c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000226:	2000      	movs	r0, #0
 8000228:	f7ff ffb8 	bl	800019c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 800022c:	79fb      	ldrb	r3, [r7, #7]
 800022e:	f003 031f 	and.w	r3, r3, #31
 8000232:	b2db      	uxtb	r3, r3
 8000234:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000236:	f107 010c 	add.w	r1, r7, #12
 800023a:	2364      	movs	r3, #100	; 0x64
 800023c:	2201      	movs	r2, #1
 800023e:	480a      	ldr	r0, [pc, #40]	; (8000268 <NRF24_read_register+0x4c>)
 8000240:	f002 fe07 	bl	8002e52 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000244:	f107 030c 	add.w	r3, r7, #12
 8000248:	1c59      	adds	r1, r3, #1
 800024a:	2364      	movs	r3, #100	; 0x64
 800024c:	2201      	movs	r2, #1
 800024e:	4806      	ldr	r0, [pc, #24]	; (8000268 <NRF24_read_register+0x4c>)
 8000250:	f002 ff33 	bl	80030ba <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000254:	7b7b      	ldrb	r3, [r7, #13]
 8000256:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000258:	2001      	movs	r0, #1
 800025a:	f7ff ff9f 	bl	800019c <NRF24_csn>
	return retData;
 800025e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3710      	adds	r7, #16
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}
 8000268:	200000a4 	.word	0x200000a4

0800026c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b084      	sub	sp, #16
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	6039      	str	r1, [r7, #0]
 8000276:	71fb      	strb	r3, [r7, #7]
 8000278:	4613      	mov	r3, r2
 800027a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 800027c:	2000      	movs	r0, #0
 800027e:	f7ff ff8d 	bl	800019c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 031f 	and.w	r3, r3, #31
 8000288:	b2db      	uxtb	r3, r3
 800028a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 800028c:	f107 010c 	add.w	r1, r7, #12
 8000290:	2364      	movs	r3, #100	; 0x64
 8000292:	2201      	movs	r2, #1
 8000294:	4808      	ldr	r0, [pc, #32]	; (80002b8 <NRF24_read_registerN+0x4c>)
 8000296:	f002 fddc 	bl	8002e52 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800029a:	79bb      	ldrb	r3, [r7, #6]
 800029c:	b29a      	uxth	r2, r3
 800029e:	2364      	movs	r3, #100	; 0x64
 80002a0:	6839      	ldr	r1, [r7, #0]
 80002a2:	4805      	ldr	r0, [pc, #20]	; (80002b8 <NRF24_read_registerN+0x4c>)
 80002a4:	f002 ff09 	bl	80030ba <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 80002a8:	2001      	movs	r0, #1
 80002aa:	f7ff ff77 	bl	800019c <NRF24_csn>
}
 80002ae:	bf00      	nop
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	200000a4 	.word	0x200000a4

080002bc <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	b084      	sub	sp, #16
 80002c0:	af00      	add	r7, sp, #0
 80002c2:	4603      	mov	r3, r0
 80002c4:	460a      	mov	r2, r1
 80002c6:	71fb      	strb	r3, [r7, #7]
 80002c8:	4613      	mov	r3, r2
 80002ca:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 80002cc:	2000      	movs	r0, #0
 80002ce:	f7ff ff65 	bl	800019c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 80002d2:	79fb      	ldrb	r3, [r7, #7]
 80002d4:	f043 0320 	orr.w	r3, r3, #32
 80002d8:	b2db      	uxtb	r3, r3
 80002da:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 80002dc:	79bb      	ldrb	r3, [r7, #6]
 80002de:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 80002e0:	f107 010c 	add.w	r1, r7, #12
 80002e4:	2364      	movs	r3, #100	; 0x64
 80002e6:	2202      	movs	r2, #2
 80002e8:	4804      	ldr	r0, [pc, #16]	; (80002fc <NRF24_write_register+0x40>)
 80002ea:	f002 fdb2 	bl	8002e52 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80002ee:	2001      	movs	r0, #1
 80002f0:	f7ff ff54 	bl	800019c <NRF24_csn>
}
 80002f4:	bf00      	nop
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}
 80002fc:	200000a4 	.word	0x200000a4

08000300 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0
 8000306:	4603      	mov	r3, r0
 8000308:	6039      	str	r1, [r7, #0]
 800030a:	71fb      	strb	r3, [r7, #7]
 800030c:	4613      	mov	r3, r2
 800030e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000310:	2000      	movs	r0, #0
 8000312:	f7ff ff43 	bl	800019c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000316:	79fb      	ldrb	r3, [r7, #7]
 8000318:	f043 0320 	orr.w	r3, r3, #32
 800031c:	b2db      	uxtb	r3, r3
 800031e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000320:	f107 010c 	add.w	r1, r7, #12
 8000324:	2364      	movs	r3, #100	; 0x64
 8000326:	2201      	movs	r2, #1
 8000328:	4808      	ldr	r0, [pc, #32]	; (800034c <NRF24_write_registerN+0x4c>)
 800032a:	f002 fd92 	bl	8002e52 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 800032e:	79bb      	ldrb	r3, [r7, #6]
 8000330:	b29a      	uxth	r2, r3
 8000332:	2364      	movs	r3, #100	; 0x64
 8000334:	6839      	ldr	r1, [r7, #0]
 8000336:	4805      	ldr	r0, [pc, #20]	; (800034c <NRF24_write_registerN+0x4c>)
 8000338:	f002 fd8b 	bl	8002e52 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 800033c:	2001      	movs	r0, #1
 800033e:	f7ff ff2d 	bl	800019c <NRF24_csn>
}
 8000342:	bf00      	nop
 8000344:	3710      	adds	r7, #16
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	200000a4 	.word	0x200000a4

08000350 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	b084      	sub	sp, #16
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 800035c:	2000      	movs	r0, #0
 800035e:	f7ff ff1d 	bl	800019c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000362:	23a0      	movs	r3, #160	; 0xa0
 8000364:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000366:	f107 010f 	add.w	r1, r7, #15
 800036a:	2364      	movs	r3, #100	; 0x64
 800036c:	2201      	movs	r2, #1
 800036e:	4808      	ldr	r0, [pc, #32]	; (8000390 <NRF24_write_payload+0x40>)
 8000370:	f002 fd6f 	bl	8002e52 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000374:	78fb      	ldrb	r3, [r7, #3]
 8000376:	b29a      	uxth	r2, r3
 8000378:	2364      	movs	r3, #100	; 0x64
 800037a:	6879      	ldr	r1, [r7, #4]
 800037c:	4804      	ldr	r0, [pc, #16]	; (8000390 <NRF24_write_payload+0x40>)
 800037e:	f002 fd68 	bl	8002e52 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000382:	2001      	movs	r0, #1
 8000384:	f7ff ff0a 	bl	800019c <NRF24_csn>
}
 8000388:	bf00      	nop
 800038a:	3710      	adds	r7, #16
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	200000a4 	.word	0x200000a4

08000394 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000398:	21ff      	movs	r1, #255	; 0xff
 800039a:	20e1      	movs	r0, #225	; 0xe1
 800039c:	f7ff ff8e 	bl	80002bc <NRF24_write_register>
}
 80003a0:	bf00      	nop
 80003a2:	bd80      	pop	{r7, pc}

080003a4 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 80003a8:	21ff      	movs	r1, #255	; 0xff
 80003aa:	20e2      	movs	r0, #226	; 0xe2
 80003ac:	f7ff ff86 	bl	80002bc <NRF24_write_register>
}
 80003b0:	bf00      	nop
 80003b2:	bd80      	pop	{r7, pc}

080003b4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 80003ba:	2007      	movs	r0, #7
 80003bc:	f7ff ff2e 	bl	800021c <NRF24_read_register>
 80003c0:	4603      	mov	r3, r0
 80003c2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 80003c4:	79fb      	ldrb	r3, [r7, #7]
}
 80003c6:	4618      	mov	r0, r3
 80003c8:	3708      	adds	r7, #8
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 80003d0:	b082      	sub	sp, #8
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b084      	sub	sp, #16
 80003d6:	af00      	add	r7, sp, #0
 80003d8:	6078      	str	r0, [r7, #4]
 80003da:	61fb      	str	r3, [r7, #28]
 80003dc:	460b      	mov	r3, r1
 80003de:	807b      	strh	r3, [r7, #2]
 80003e0:	4613      	mov	r3, r2
 80003e2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 80003e4:	4b66      	ldr	r3, [pc, #408]	; (8000580 <NRF24_begin+0x1b0>)
 80003e6:	4618      	mov	r0, r3
 80003e8:	f107 031c 	add.w	r3, r7, #28
 80003ec:	2258      	movs	r2, #88	; 0x58
 80003ee:	4619      	mov	r1, r3
 80003f0:	f003 fc1c 	bl	8003c2c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 80003f4:	4a63      	ldr	r2, [pc, #396]	; (8000584 <NRF24_begin+0x1b4>)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 80003fa:	4a63      	ldr	r2, [pc, #396]	; (8000588 <NRF24_begin+0x1b8>)
 80003fc:	887b      	ldrh	r3, [r7, #2]
 80003fe:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000400:	4a62      	ldr	r2, [pc, #392]	; (800058c <NRF24_begin+0x1bc>)
 8000402:	883b      	ldrh	r3, [r7, #0]
 8000404:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000406:	2001      	movs	r0, #1
 8000408:	f7ff fec8 	bl	800019c <NRF24_csn>
	NRF24_ce(0);
 800040c:	2000      	movs	r0, #0
 800040e:	f7ff fee5 	bl	80001dc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000412:	2005      	movs	r0, #5
 8000414:	f001 fb6e 	bl	8001af4 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000418:	2108      	movs	r1, #8
 800041a:	2000      	movs	r0, #0
 800041c:	f7ff ff4e 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000420:	213f      	movs	r1, #63	; 0x3f
 8000422:	2001      	movs	r0, #1
 8000424:	f7ff ff4a 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000428:	2103      	movs	r1, #3
 800042a:	2002      	movs	r0, #2
 800042c:	f7ff ff46 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000430:	2103      	movs	r1, #3
 8000432:	2003      	movs	r0, #3
 8000434:	f7ff ff42 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000438:	2103      	movs	r1, #3
 800043a:	2004      	movs	r0, #4
 800043c:	f7ff ff3e 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000440:	2102      	movs	r1, #2
 8000442:	2005      	movs	r0, #5
 8000444:	f7ff ff3a 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000448:	210f      	movs	r1, #15
 800044a:	2006      	movs	r0, #6
 800044c:	f7ff ff36 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000450:	210e      	movs	r1, #14
 8000452:	2007      	movs	r0, #7
 8000454:	f7ff ff32 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000458:	2100      	movs	r1, #0
 800045a:	2008      	movs	r0, #8
 800045c:	f7ff ff2e 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000460:	2100      	movs	r1, #0
 8000462:	2009      	movs	r0, #9
 8000464:	f7ff ff2a 	bl	80002bc <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000468:	23e7      	movs	r3, #231	; 0xe7
 800046a:	733b      	strb	r3, [r7, #12]
 800046c:	23e7      	movs	r3, #231	; 0xe7
 800046e:	72fb      	strb	r3, [r7, #11]
 8000470:	23e7      	movs	r3, #231	; 0xe7
 8000472:	72bb      	strb	r3, [r7, #10]
 8000474:	23e7      	movs	r3, #231	; 0xe7
 8000476:	727b      	strb	r3, [r7, #9]
 8000478:	23e7      	movs	r3, #231	; 0xe7
 800047a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 800047c:	f107 0308 	add.w	r3, r7, #8
 8000480:	2205      	movs	r2, #5
 8000482:	4619      	mov	r1, r3
 8000484:	200a      	movs	r0, #10
 8000486:	f7ff ff3b 	bl	8000300 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800048a:	23c2      	movs	r3, #194	; 0xc2
 800048c:	733b      	strb	r3, [r7, #12]
 800048e:	23c2      	movs	r3, #194	; 0xc2
 8000490:	72fb      	strb	r3, [r7, #11]
 8000492:	23c2      	movs	r3, #194	; 0xc2
 8000494:	72bb      	strb	r3, [r7, #10]
 8000496:	23c2      	movs	r3, #194	; 0xc2
 8000498:	727b      	strb	r3, [r7, #9]
 800049a:	23c2      	movs	r3, #194	; 0xc2
 800049c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 800049e:	f107 0308 	add.w	r3, r7, #8
 80004a2:	2205      	movs	r2, #5
 80004a4:	4619      	mov	r1, r3
 80004a6:	200b      	movs	r0, #11
 80004a8:	f7ff ff2a 	bl	8000300 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 80004ac:	21c3      	movs	r1, #195	; 0xc3
 80004ae:	200c      	movs	r0, #12
 80004b0:	f7ff ff04 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 80004b4:	21c4      	movs	r1, #196	; 0xc4
 80004b6:	200d      	movs	r0, #13
 80004b8:	f7ff ff00 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 80004bc:	21c5      	movs	r1, #197	; 0xc5
 80004be:	200e      	movs	r0, #14
 80004c0:	f7ff fefc 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 80004c4:	21c6      	movs	r1, #198	; 0xc6
 80004c6:	200f      	movs	r0, #15
 80004c8:	f7ff fef8 	bl	80002bc <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80004cc:	23e7      	movs	r3, #231	; 0xe7
 80004ce:	733b      	strb	r3, [r7, #12]
 80004d0:	23e7      	movs	r3, #231	; 0xe7
 80004d2:	72fb      	strb	r3, [r7, #11]
 80004d4:	23e7      	movs	r3, #231	; 0xe7
 80004d6:	72bb      	strb	r3, [r7, #10]
 80004d8:	23e7      	movs	r3, #231	; 0xe7
 80004da:	727b      	strb	r3, [r7, #9]
 80004dc:	23e7      	movs	r3, #231	; 0xe7
 80004de:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	2205      	movs	r2, #5
 80004e6:	4619      	mov	r1, r3
 80004e8:	2010      	movs	r0, #16
 80004ea:	f7ff ff09 	bl	8000300 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 80004ee:	2100      	movs	r1, #0
 80004f0:	2011      	movs	r0, #17
 80004f2:	f7ff fee3 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 80004f6:	2100      	movs	r1, #0
 80004f8:	2012      	movs	r0, #18
 80004fa:	f7ff fedf 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 80004fe:	2100      	movs	r1, #0
 8000500:	2013      	movs	r0, #19
 8000502:	f7ff fedb 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000506:	2100      	movs	r1, #0
 8000508:	2014      	movs	r0, #20
 800050a:	f7ff fed7 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 800050e:	2100      	movs	r1, #0
 8000510:	2015      	movs	r0, #21
 8000512:	f7ff fed3 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000516:	2100      	movs	r1, #0
 8000518:	2016      	movs	r0, #22
 800051a:	f7ff fecf 	bl	80002bc <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 800051e:	f000 fa81 	bl	8000a24 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000522:	2100      	movs	r1, #0
 8000524:	201c      	movs	r0, #28
 8000526:	f7ff fec9 	bl	80002bc <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 800052a:	2100      	movs	r1, #0
 800052c:	201d      	movs	r0, #29
 800052e:	f7ff fec5 	bl	80002bc <NRF24_write_register>
	printRadioSettings();
 8000532:	f000 fa91 	bl	8000a58 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000536:	210f      	movs	r1, #15
 8000538:	200f      	movs	r0, #15
 800053a:	f000 f8ad 	bl	8000698 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 800053e:	2003      	movs	r0, #3
 8000540:	f000 f925 	bl	800078e <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000544:	2001      	movs	r0, #1
 8000546:	f000 f95b 	bl	8000800 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 800054a:	2002      	movs	r0, #2
 800054c:	f000 f99e 	bl	800088c <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000550:	f000 f8f0 	bl	8000734 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000554:	2020      	movs	r0, #32
 8000556:	f000 f8cf 	bl	80006f8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 800055a:	f000 fa5a 	bl	8000a12 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 800055e:	204c      	movs	r0, #76	; 0x4c
 8000560:	f000 f8b5 	bl	80006ce <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000564:	f7ff ff16 	bl	8000394 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000568:	f7ff ff1c 	bl	80003a4 <NRF24_flush_rx>
	
	NRF24_powerDown();
 800056c:	f000 f9b6 	bl	80008dc <NRF24_powerDown>
	
}
 8000570:	bf00      	nop
 8000572:	3710      	adds	r7, #16
 8000574:	46bd      	mov	sp, r7
 8000576:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800057a:	b002      	add	sp, #8
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	200000a4 	.word	0x200000a4
 8000584:	2000009c 	.word	0x2000009c
 8000588:	200000a0 	.word	0x200000a0
 800058c:	200000a2 	.word	0x200000a2

08000590 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff fe21 	bl	80001dc <NRF24_ce>
	NRF24_flush_tx();
 800059a:	f7ff fefb 	bl	8000394 <NRF24_flush_tx>
	NRF24_flush_rx();
 800059e:	f7ff ff01 	bl	80003a4 <NRF24_flush_rx>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
	...

080005a8 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b086      	sub	sp, #24
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
 80005b0:	460b      	mov	r3, r1
 80005b2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 80005b4:	f000 fa2d 	bl	8000a12 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 80005b8:	78fb      	ldrb	r3, [r7, #3]
 80005ba:	4619      	mov	r1, r3
 80005bc:	6878      	ldr	r0, [r7, #4]
 80005be:	f000 f9cc 	bl	800095a <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 80005c2:	f001 fa8d 	bl	8001ae0 <HAL_GetTick>
 80005c6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 80005c8:	230a      	movs	r3, #10
 80005ca:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 80005cc:	f107 030d 	add.w	r3, r7, #13
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	2008      	movs	r0, #8
 80005d6:	f7ff fe49 	bl	800026c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 80005da:	f7ff feeb 	bl	80003b4 <NRF24_get_status>
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d107      	bne.n	80005fc <NRF24_write+0x54>
 80005ec:	f001 fa78 	bl	8001ae0 <HAL_GetTick>
 80005f0:	4602      	mov	r2, r0
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	693a      	ldr	r2, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d8e7      	bhi.n	80005cc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 80005fc:	f107 010b 	add.w	r1, r7, #11
 8000600:	f107 030c 	add.w	r3, r7, #12
 8000604:	4a0c      	ldr	r2, [pc, #48]	; (8000638 <NRF24_write+0x90>)
 8000606:	4618      	mov	r0, r3
 8000608:	f000 f9d0 	bl	80009ac <NRF24_whatHappened>
	retStatus = tx_ok;
 800060c:	7b3b      	ldrb	r3, [r7, #12]
 800060e:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <NRF24_write+0x90>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d005      	beq.n	8000624 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8000618:	f000 f884 	bl	8000724 <NRF24_getDynamicPayloadSize>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <NRF24_write+0x94>)
 8000622:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8000624:	f000 f80c 	bl	8000640 <NRF24_available>
	NRF24_flush_tx();
 8000628:	f7ff feb4 	bl	8000394 <NRF24_flush_tx>
	return retStatus;
 800062c:	7bbb      	ldrb	r3, [r7, #14]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000094 	.word	0x20000094
 800063c:	20000095 	.word	0x20000095

08000640 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f958 	bl	80008fa <NRF24_availablePipe>
 800064a:	4603      	mov	r3, r0
}
 800064c:	4618      	mov	r0, r3
 800064e:	bd80      	pop	{r7, pc}

08000650 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800065a:	463b      	mov	r3, r7
 800065c:	2205      	movs	r2, #5
 800065e:	4619      	mov	r1, r3
 8000660:	200a      	movs	r0, #10
 8000662:	f7ff fe4d 	bl	8000300 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8000666:	463b      	mov	r3, r7
 8000668:	2205      	movs	r2, #5
 800066a:	4619      	mov	r1, r3
 800066c:	2010      	movs	r0, #16
 800066e:	f7ff fe47 	bl	8000300 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8000672:	2320      	movs	r3, #32
 8000674:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <NRF24_openWritingPipe+0x44>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	7bfa      	ldrb	r2, [r7, #15]
 800067c:	4293      	cmp	r3, r2
 800067e:	bf28      	it	cs
 8000680:	4613      	movcs	r3, r2
 8000682:	b2db      	uxtb	r3, r3
 8000684:	4619      	mov	r1, r3
 8000686:	2011      	movs	r0, #17
 8000688:	f7ff fe18 	bl	80002bc <NRF24_write_register>
}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000096 	.word	0x20000096

08000698 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	460a      	mov	r2, r1
 80006a2:	71fb      	strb	r3, [r7, #7]
 80006a4:	4613      	mov	r3, r2
 80006a6:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	b25a      	sxtb	r2, r3
 80006ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006b2:	f003 030f 	and.w	r3, r3, #15
 80006b6:	b25b      	sxtb	r3, r3
 80006b8:	4313      	orrs	r3, r2
 80006ba:	b25b      	sxtb	r3, r3
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4619      	mov	r1, r3
 80006c0:	2004      	movs	r0, #4
 80006c2:	f7ff fdfb 	bl	80002bc <NRF24_write_register>
}
 80006c6:	bf00      	nop
 80006c8:	3708      	adds	r7, #8
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}

080006ce <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80006ce:	b580      	push	{r7, lr}
 80006d0:	b084      	sub	sp, #16
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	4603      	mov	r3, r0
 80006d6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80006d8:	237f      	movs	r3, #127	; 0x7f
 80006da:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80006dc:	7bfa      	ldrb	r2, [r7, #15]
 80006de:	79fb      	ldrb	r3, [r7, #7]
 80006e0:	4293      	cmp	r3, r2
 80006e2:	bf28      	it	cs
 80006e4:	4613      	movcs	r3, r2
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	4619      	mov	r1, r3
 80006ea:	2005      	movs	r0, #5
 80006ec:	f7ff fde6 	bl	80002bc <NRF24_write_register>
}
 80006f0:	bf00      	nop
 80006f2:	3710      	adds	r7, #16
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b085      	sub	sp, #20
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8000702:	2320      	movs	r3, #32
 8000704:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 8000706:	7bfa      	ldrb	r2, [r7, #15]
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	4293      	cmp	r3, r2
 800070c:	bf28      	it	cs
 800070e:	4613      	movcs	r3, r2
 8000710:	b2da      	uxtb	r2, r3
 8000712:	4b03      	ldr	r3, [pc, #12]	; (8000720 <NRF24_setPayloadSize+0x28>)
 8000714:	701a      	strb	r2, [r3, #0]
}
 8000716:	bf00      	nop
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr
 8000720:	20000096 	.word	0x20000096

08000724 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 8000728:	2060      	movs	r0, #96	; 0x60
 800072a:	f7ff fd77 	bl	800021c <NRF24_read_register>
 800072e:	4603      	mov	r3, r0
}
 8000730:	4618      	mov	r0, r3
 8000732:	bd80      	pop	{r7, pc}

08000734 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 8000738:	201d      	movs	r0, #29
 800073a:	f7ff fd6f 	bl	800021c <NRF24_read_register>
 800073e:	4603      	mov	r3, r0
 8000740:	f023 0304 	bic.w	r3, r3, #4
 8000744:	b2db      	uxtb	r3, r3
 8000746:	4619      	mov	r1, r3
 8000748:	201d      	movs	r0, #29
 800074a:	f7ff fdb7 	bl	80002bc <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800074e:	2100      	movs	r1, #0
 8000750:	201c      	movs	r0, #28
 8000752:	f7ff fdb3 	bl	80002bc <NRF24_write_register>
	dynamic_payloads_enabled = false;
 8000756:	4b02      	ldr	r3, [pc, #8]	; (8000760 <NRF24_disableDynamicPayloads+0x2c>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000097 	.word	0x20000097

08000764 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d004      	beq.n	800077e <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8000774:	213f      	movs	r1, #63	; 0x3f
 8000776:	2001      	movs	r0, #1
 8000778:	f7ff fda0 	bl	80002bc <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800077c:	e003      	b.n	8000786 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800077e:	2100      	movs	r1, #0
 8000780:	2001      	movs	r0, #1
 8000782:	f7ff fd9b 	bl	80002bc <NRF24_write_register>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800078e:	b580      	push	{r7, lr}
 8000790:	b084      	sub	sp, #16
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8000798:	2006      	movs	r0, #6
 800079a:	f7ff fd3f 	bl	800021c <NRF24_read_register>
 800079e:	4603      	mov	r3, r0
 80007a0:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	f023 0306 	bic.w	r3, r3, #6
 80007a8:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d104      	bne.n	80007ba <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	f043 0306 	orr.w	r3, r3, #6
 80007b6:	73fb      	strb	r3, [r7, #15]
 80007b8:	e019      	b.n	80007ee <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b02      	cmp	r3, #2
 80007be:	d104      	bne.n	80007ca <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80007c0:	7bfb      	ldrb	r3, [r7, #15]
 80007c2:	f043 0304 	orr.w	r3, r3, #4
 80007c6:	73fb      	strb	r3, [r7, #15]
 80007c8:	e011      	b.n	80007ee <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	2b01      	cmp	r3, #1
 80007ce:	d104      	bne.n	80007da <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	f043 0302 	orr.w	r3, r3, #2
 80007d6:	73fb      	strb	r3, [r7, #15]
 80007d8:	e009      	b.n	80007ee <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d006      	beq.n	80007ee <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80007e0:	79fb      	ldrb	r3, [r7, #7]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	d103      	bne.n	80007ee <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	f043 0306 	orr.w	r3, r3, #6
 80007ec:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	4619      	mov	r1, r3
 80007f2:	2006      	movs	r0, #6
 80007f4:	f7ff fd62 	bl	80002bc <NRF24_write_register>
}
 80007f8:	bf00      	nop
 80007fa:	3710      	adds	r7, #16
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}

08000800 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 800080a:	2300      	movs	r3, #0
 800080c:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800080e:	2006      	movs	r0, #6
 8000810:	f7ff fd04 	bl	800021c <NRF24_read_register>
 8000814:	4603      	mov	r3, r0
 8000816:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 8000818:	4b1b      	ldr	r3, [pc, #108]	; (8000888 <NRF24_setDataRate+0x88>)
 800081a:	2200      	movs	r2, #0
 800081c:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800081e:	7bbb      	ldrb	r3, [r7, #14]
 8000820:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8000824:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d107      	bne.n	800083c <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <NRF24_setDataRate+0x88>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8000832:	7bbb      	ldrb	r3, [r7, #14]
 8000834:	f043 0320 	orr.w	r3, r3, #32
 8000838:	73bb      	strb	r3, [r7, #14]
 800083a:	e00d      	b.n	8000858 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800083c:	79fb      	ldrb	r3, [r7, #7]
 800083e:	2b01      	cmp	r3, #1
 8000840:	d107      	bne.n	8000852 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <NRF24_setDataRate+0x88>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 8000848:	7bbb      	ldrb	r3, [r7, #14]
 800084a:	f043 0308 	orr.w	r3, r3, #8
 800084e:	73bb      	strb	r3, [r7, #14]
 8000850:	e002      	b.n	8000858 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <NRF24_setDataRate+0x88>)
 8000854:	2200      	movs	r2, #0
 8000856:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 8000858:	7bbb      	ldrb	r3, [r7, #14]
 800085a:	4619      	mov	r1, r3
 800085c:	2006      	movs	r0, #6
 800085e:	f7ff fd2d 	bl	80002bc <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8000862:	2006      	movs	r0, #6
 8000864:	f7ff fcda 	bl	800021c <NRF24_read_register>
 8000868:	4603      	mov	r3, r0
 800086a:	461a      	mov	r2, r3
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	4293      	cmp	r3, r2
 8000870:	d102      	bne.n	8000878 <NRF24_setDataRate+0x78>
  {
    result = true;
 8000872:	2301      	movs	r3, #1
 8000874:	73fb      	strb	r3, [r7, #15]
 8000876:	e002      	b.n	800087e <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8000878:	4b03      	ldr	r3, [pc, #12]	; (8000888 <NRF24_setDataRate+0x88>)
 800087a:	2200      	movs	r2, #0
 800087c:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800087e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000098 	.word	0x20000098

0800088c <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 8000896:	2000      	movs	r0, #0
 8000898:	f7ff fcc0 	bl	800021c <NRF24_read_register>
 800089c:	4603      	mov	r3, r0
 800089e:	f023 030c 	bic.w	r3, r3, #12
 80008a2:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 80008a4:	79fb      	ldrb	r3, [r7, #7]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d00f      	beq.n	80008ca <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d104      	bne.n	80008ba <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80008b0:	7bfb      	ldrb	r3, [r7, #15]
 80008b2:	f043 0308 	orr.w	r3, r3, #8
 80008b6:	73fb      	strb	r3, [r7, #15]
 80008b8:	e007      	b.n	80008ca <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80008c2:	7bfb      	ldrb	r3, [r7, #15]
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80008ca:	7bfb      	ldrb	r3, [r7, #15]
 80008cc:	4619      	mov	r1, r3
 80008ce:	2000      	movs	r0, #0
 80008d0:	f7ff fcf4 	bl	80002bc <NRF24_write_register>
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80008e0:	2000      	movs	r0, #0
 80008e2:	f7ff fc9b 	bl	800021c <NRF24_read_register>
 80008e6:	4603      	mov	r3, r0
 80008e8:	f023 0302 	bic.w	r3, r3, #2
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	4619      	mov	r1, r3
 80008f0:	2000      	movs	r0, #0
 80008f2:	f7ff fce3 	bl	80002bc <NRF24_write_register>
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}

080008fa <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b084      	sub	sp, #16
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 8000902:	f7ff fd57 	bl	80003b4 <NRF24_get_status>
 8000906:	4603      	mov	r3, r0
 8000908:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800090a:	7bfb      	ldrb	r3, [r7, #15]
 800090c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000910:	2b00      	cmp	r3, #0
 8000912:	bf14      	ite	ne
 8000914:	2301      	movne	r3, #1
 8000916:	2300      	moveq	r3, #0
 8000918:	73bb      	strb	r3, [r7, #14]

  if (result)
 800091a:	7bbb      	ldrb	r3, [r7, #14]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d017      	beq.n	8000950 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d007      	beq.n	8000936 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 8000926:	7bfb      	ldrb	r3, [r7, #15]
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	b2db      	uxtb	r3, r3
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	b2da      	uxtb	r2, r3
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 8000936:	2140      	movs	r1, #64	; 0x40
 8000938:	2007      	movs	r0, #7
 800093a:	f7ff fcbf 	bl	80002bc <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800093e:	7bfb      	ldrb	r3, [r7, #15]
 8000940:	f003 0320 	and.w	r3, r3, #32
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 8000948:	2120      	movs	r1, #32
 800094a:	2007      	movs	r0, #7
 800094c:	f7ff fcb6 	bl	80002bc <NRF24_write_register>
    }
  }
  return result;
 8000950:	7bbb      	ldrb	r3, [r7, #14]
}
 8000952:	4618      	mov	r0, r3
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}

0800095a <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b082      	sub	sp, #8
 800095e:	af00      	add	r7, sp, #0
 8000960:	6078      	str	r0, [r7, #4]
 8000962:	460b      	mov	r3, r1
 8000964:	70fb      	strb	r3, [r7, #3]
	// Transmitter power-up
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8000966:	2000      	movs	r0, #0
 8000968:	f7ff fc58 	bl	800021c <NRF24_read_register>
 800096c:	4603      	mov	r3, r0
 800096e:	f043 0302 	orr.w	r3, r3, #2
 8000972:	b2db      	uxtb	r3, r3
 8000974:	f023 0301 	bic.w	r3, r3, #1
 8000978:	b2db      	uxtb	r3, r3
 800097a:	4619      	mov	r1, r3
 800097c:	2000      	movs	r0, #0
 800097e:	f7ff fc9d 	bl	80002bc <NRF24_write_register>
  NRF24_DelayMicroSeconds(150);
 8000982:	2096      	movs	r0, #150	; 0x96
 8000984:	f7ff fbea 	bl	800015c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8000988:	78fb      	ldrb	r3, [r7, #3]
 800098a:	4619      	mov	r1, r3
 800098c:	6878      	ldr	r0, [r7, #4]
 800098e:	f7ff fcdf 	bl	8000350 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff fc22 	bl	80001dc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8000998:	200f      	movs	r0, #15
 800099a:	f7ff fbdf 	bl	800015c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff fc1c 	bl	80001dc <NRF24_ce>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80009b8:	f7ff fcfc 	bl	80003b4 <NRF24_get_status>
 80009bc:	4603      	mov	r3, r0
 80009be:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80009c6:	2170      	movs	r1, #112	; 0x70
 80009c8:	2007      	movs	r0, #7
 80009ca:	f7ff fc77 	bl	80002bc <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80009ce:	7dfb      	ldrb	r3, [r7, #23]
 80009d0:	f003 0320 	and.w	r3, r3, #32
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	bf14      	ite	ne
 80009d8:	2301      	movne	r3, #1
 80009da:	2300      	moveq	r3, #0
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80009e2:	7dfb      	ldrb	r3, [r7, #23]
 80009e4:	f003 0310 	and.w	r3, r3, #16
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	bf14      	ite	ne
 80009ec:	2301      	movne	r3, #1
 80009ee:	2300      	moveq	r3, #0
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	68bb      	ldr	r3, [r7, #8]
 80009f4:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80009f6:	7dfb      	ldrb	r3, [r7, #23]
 80009f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	bf14      	ite	ne
 8000a00:	2301      	movne	r3, #1
 8000a02:	2300      	moveq	r3, #0
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	701a      	strb	r2, [r3, #0]
}
 8000a0a:	bf00      	nop
 8000a0c:	3718      	adds	r7, #24
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8000a16:	2170      	movs	r1, #112	; 0x70
 8000a18:	2007      	movs	r0, #7
 8000a1a:	f7ff fc4f 	bl	80002bc <NRF24_write_register>
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f7ff fbb6 	bl	800019c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8000a30:	2350      	movs	r3, #80	; 0x50
 8000a32:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8000a34:	2373      	movs	r3, #115	; 0x73
 8000a36:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8000a38:	1d39      	adds	r1, r7, #4
 8000a3a:	2364      	movs	r3, #100	; 0x64
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <NRF24_ACTIVATE_cmd+0x30>)
 8000a40:	f002 fa07 	bl	8002e52 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8000a44:	2001      	movs	r0, #1
 8000a46:	f7ff fba9 	bl	800019c <NRF24_csn>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000a4 	.word	0x200000a4

08000a58 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8000a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a5a:	b0a1      	sub	sp, #132	; 0x84
 8000a5c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8000a5e:	f107 0308 	add.w	r3, r7, #8
 8000a62:	4ab6      	ldr	r2, [pc, #728]	; (8000d3c <printRadioSettings+0x2e4>)
 8000a64:	461c      	mov	r4, r3
 8000a66:	4615      	mov	r5, r2
 8000a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a74:	682b      	ldr	r3, [r5, #0]
 8000a76:	461a      	mov	r2, r3
 8000a78:	8022      	strh	r2, [r4, #0]
 8000a7a:	3402      	adds	r4, #2
 8000a7c:	0c1b      	lsrs	r3, r3, #16
 8000a7e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000a80:	f107 0308 	add.w	r3, r7, #8
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fb61 	bl	800014c <strlen>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29a      	uxth	r2, r3
 8000a8e:	f107 0108 	add.w	r1, r7, #8
 8000a92:	230a      	movs	r3, #10
 8000a94:	48aa      	ldr	r0, [pc, #680]	; (8000d40 <printRadioSettings+0x2e8>)
 8000a96:	f002 fee2 	bl	800385e <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff fbbe 	bl	800021c <NRF24_read_register>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8000aa6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000aaa:	f003 0308 	and.w	r3, r3, #8
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d020      	beq.n	8000af4 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8000ab2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000ab6:	f003 0304 	and.w	r3, r3, #4
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d00b      	beq.n	8000ad6 <printRadioSettings+0x7e>
 8000abe:	f107 0308 	add.w	r3, r7, #8
 8000ac2:	4aa0      	ldr	r2, [pc, #640]	; (8000d44 <printRadioSettings+0x2ec>)
 8000ac4:	461c      	mov	r4, r3
 8000ac6:	4615      	mov	r5, r2
 8000ac8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000acc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ad0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ad4:	e017      	b.n	8000b06 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8000ad6:	f107 0308 	add.w	r3, r7, #8
 8000ada:	4a9b      	ldr	r2, [pc, #620]	; (8000d48 <printRadioSettings+0x2f0>)
 8000adc:	461c      	mov	r4, r3
 8000ade:	4615      	mov	r5, r2
 8000ae0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ae8:	c403      	stmia	r4!, {r0, r1}
 8000aea:	8022      	strh	r2, [r4, #0]
 8000aec:	3402      	adds	r4, #2
 8000aee:	0c13      	lsrs	r3, r2, #16
 8000af0:	7023      	strb	r3, [r4, #0]
 8000af2:	e008      	b.n	8000b06 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8000af4:	f107 0308 	add.w	r3, r7, #8
 8000af8:	4a94      	ldr	r2, [pc, #592]	; (8000d4c <printRadioSettings+0x2f4>)
 8000afa:	461c      	mov	r4, r3
 8000afc:	4615      	mov	r5, r2
 8000afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b02:	682b      	ldr	r3, [r5, #0]
 8000b04:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000b06:	f107 0308 	add.w	r3, r7, #8
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fb1e 	bl	800014c <strlen>
 8000b10:	4603      	mov	r3, r0
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	f107 0108 	add.w	r1, r7, #8
 8000b18:	230a      	movs	r3, #10
 8000b1a:	4889      	ldr	r0, [pc, #548]	; (8000d40 <printRadioSettings+0x2e8>)
 8000b1c:	f002 fe9f 	bl	800385e <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8000b20:	2001      	movs	r0, #1
 8000b22:	f7ff fb7b 	bl	800021c <NRF24_read_register>
 8000b26:	4603      	mov	r3, r0
 8000b28:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b30:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	bfcc      	ite	gt
 8000b38:	2301      	movgt	r3, #1
 8000b3a:	2300      	movle	r3, #0
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b44:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	bfcc      	ite	gt
 8000b4c:	2301      	movgt	r3, #1
 8000b4e:	2300      	movle	r3, #0
 8000b50:	b2db      	uxtb	r3, r3
 8000b52:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b58:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	bfcc      	ite	gt
 8000b60:	2301      	movgt	r3, #1
 8000b62:	2300      	movle	r3, #0
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b6c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	bfcc      	ite	gt
 8000b74:	2301      	movgt	r3, #1
 8000b76:	2300      	movle	r3, #0
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b80:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	bfcc      	ite	gt
 8000b88:	2301      	movgt	r3, #1
 8000b8a:	2300      	movle	r3, #0
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000b90:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000b94:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	bfcc      	ite	gt
 8000b9c:	2301      	movgt	r3, #1
 8000b9e:	2300      	movle	r3, #0
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	f107 0008 	add.w	r0, r7, #8
 8000ba6:	9303      	str	r3, [sp, #12]
 8000ba8:	9402      	str	r4, [sp, #8]
 8000baa:	9101      	str	r1, [sp, #4]
 8000bac:	9200      	str	r2, [sp, #0]
 8000bae:	4633      	mov	r3, r6
 8000bb0:	462a      	mov	r2, r5
 8000bb2:	4967      	ldr	r1, [pc, #412]	; (8000d50 <printRadioSettings+0x2f8>)
 8000bb4:	f003 f84e 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000bb8:	f107 0308 	add.w	r3, r7, #8
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fac5 	bl	800014c <strlen>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	b29a      	uxth	r2, r3
 8000bc6:	f107 0108 	add.w	r1, r7, #8
 8000bca:	230a      	movs	r3, #10
 8000bcc:	485c      	ldr	r0, [pc, #368]	; (8000d40 <printRadioSettings+0x2e8>)
 8000bce:	f002 fe46 	bl	800385e <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8000bd2:	2002      	movs	r0, #2
 8000bd4:	f7ff fb22 	bl	800021c <NRF24_read_register>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000bde:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000be2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	bfcc      	ite	gt
 8000bea:	2301      	movgt	r3, #1
 8000bec:	2300      	movle	r3, #0
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000bf2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000bf6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	bfcc      	ite	gt
 8000bfe:	2301      	movgt	r3, #1
 8000c00:	2300      	movle	r3, #0
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c06:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c0a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	bfcc      	ite	gt
 8000c12:	2301      	movgt	r3, #1
 8000c14:	2300      	movle	r3, #0
 8000c16:	b2db      	uxtb	r3, r3
 8000c18:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c1a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c1e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	bfcc      	ite	gt
 8000c26:	2301      	movgt	r3, #1
 8000c28:	2300      	movle	r3, #0
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c2e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c32:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	bfcc      	ite	gt
 8000c3a:	2301      	movgt	r3, #1
 8000c3c:	2300      	movle	r3, #0
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8000c42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c46:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bfcc      	ite	gt
 8000c4e:	2301      	movgt	r3, #1
 8000c50:	2300      	movle	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
 8000c54:	f107 0008 	add.w	r0, r7, #8
 8000c58:	9303      	str	r3, [sp, #12]
 8000c5a:	9402      	str	r4, [sp, #8]
 8000c5c:	9101      	str	r1, [sp, #4]
 8000c5e:	9200      	str	r2, [sp, #0]
 8000c60:	4633      	mov	r3, r6
 8000c62:	462a      	mov	r2, r5
 8000c64:	493b      	ldr	r1, [pc, #236]	; (8000d54 <printRadioSettings+0x2fc>)
 8000c66:	f002 fff5 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f7ff fa6c 	bl	800014c <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f107 0108 	add.w	r1, r7, #8
 8000c7c:	230a      	movs	r3, #10
 8000c7e:	4830      	ldr	r0, [pc, #192]	; (8000d40 <printRadioSettings+0x2e8>)
 8000c80:	f002 fded 	bl	800385e <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8000c84:	2003      	movs	r0, #3
 8000c86:	f7ff fac9 	bl	800021c <NRF24_read_register>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8000c94:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000c98:	3302      	adds	r3, #2
 8000c9a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8000c9e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8000ca2:	f107 0308 	add.w	r3, r7, #8
 8000ca6:	492c      	ldr	r1, [pc, #176]	; (8000d58 <printRadioSettings+0x300>)
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f002 ffd3 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000cae:	f107 0308 	add.w	r3, r7, #8
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fa4a 	bl	800014c <strlen>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	b29a      	uxth	r2, r3
 8000cbc:	f107 0108 	add.w	r1, r7, #8
 8000cc0:	230a      	movs	r3, #10
 8000cc2:	481f      	ldr	r0, [pc, #124]	; (8000d40 <printRadioSettings+0x2e8>)
 8000cc4:	f002 fdcb 	bl	800385e <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8000cc8:	2005      	movs	r0, #5
 8000cca:	f7ff faa7 	bl	800021c <NRF24_read_register>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8000cd4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000cd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000cdc:	f107 0308 	add.w	r3, r7, #8
 8000ce0:	491e      	ldr	r1, [pc, #120]	; (8000d5c <printRadioSettings+0x304>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f002 ffb6 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ce8:	f107 0308 	add.w	r3, r7, #8
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff fa2d 	bl	800014c <strlen>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	f107 0108 	add.w	r1, r7, #8
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	4810      	ldr	r0, [pc, #64]	; (8000d40 <printRadioSettings+0x2e8>)
 8000cfe:	f002 fdae 	bl	800385e <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8000d02:	2006      	movs	r0, #6
 8000d04:	f7ff fa8a 	bl	800021c <NRF24_read_register>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8000d0e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000d12:	f003 0308 	and.w	r3, r3, #8
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d024      	beq.n	8000d64 <printRadioSettings+0x30c>
 8000d1a:	f107 0308 	add.w	r3, r7, #8
 8000d1e:	4a10      	ldr	r2, [pc, #64]	; (8000d60 <printRadioSettings+0x308>)
 8000d20:	461c      	mov	r4, r3
 8000d22:	4615      	mov	r5, r2
 8000d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d28:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d2c:	6020      	str	r0, [r4, #0]
 8000d2e:	3404      	adds	r4, #4
 8000d30:	8021      	strh	r1, [r4, #0]
 8000d32:	3402      	adds	r4, #2
 8000d34:	0c0b      	lsrs	r3, r1, #16
 8000d36:	7023      	strb	r3, [r4, #0]
 8000d38:	e023      	b.n	8000d82 <printRadioSettings+0x32a>
 8000d3a:	bf00      	nop
 8000d3c:	0800447c 	.word	0x0800447c
 8000d40:	200000fc 	.word	0x200000fc
 8000d44:	080044b0 	.word	0x080044b0
 8000d48:	080044cc 	.word	0x080044cc
 8000d4c:	080044e8 	.word	0x080044e8
 8000d50:	080044fc 	.word	0x080044fc
 8000d54:	08004540 	.word	0x08004540
 8000d58:	0800458c 	.word	0x0800458c
 8000d5c:	080045a8 	.word	0x080045a8
 8000d60:	080045bc 	.word	0x080045bc
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8000d64:	f107 0308 	add.w	r3, r7, #8
 8000d68:	4a29      	ldr	r2, [pc, #164]	; (8000e10 <printRadioSettings+0x3b8>)
 8000d6a:	461c      	mov	r4, r3
 8000d6c:	4615      	mov	r5, r2
 8000d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d72:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000d76:	6020      	str	r0, [r4, #0]
 8000d78:	3404      	adds	r4, #4
 8000d7a:	8021      	strh	r1, [r4, #0]
 8000d7c:	3402      	adds	r4, #2
 8000d7e:	0c0b      	lsrs	r3, r1, #16
 8000d80:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4618      	mov	r0, r3
 8000d88:	f7ff f9e0 	bl	800014c <strlen>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	f107 0108 	add.w	r1, r7, #8
 8000d94:	230a      	movs	r3, #10
 8000d96:	481f      	ldr	r0, [pc, #124]	; (8000e14 <printRadioSettings+0x3bc>)
 8000d98:	f002 fd61 	bl	800385e <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8000d9c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000da0:	f003 0306 	and.w	r3, r3, #6
 8000da4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8000da8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dac:	085b      	lsrs	r3, r3, #1
 8000dae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8000db2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d109      	bne.n	8000dce <printRadioSettings+0x376>
 8000dba:	f107 0308 	add.w	r3, r7, #8
 8000dbe:	4a16      	ldr	r2, [pc, #88]	; (8000e18 <printRadioSettings+0x3c0>)
 8000dc0:	461c      	mov	r4, r3
 8000dc2:	4615      	mov	r5, r2
 8000dc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000dc8:	682b      	ldr	r3, [r5, #0]
 8000dca:	6023      	str	r3, [r4, #0]
 8000dcc:	e037      	b.n	8000e3e <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8000dce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dd2:	2b01      	cmp	r3, #1
 8000dd4:	d109      	bne.n	8000dea <printRadioSettings+0x392>
 8000dd6:	f107 0308 	add.w	r3, r7, #8
 8000dda:	4a10      	ldr	r2, [pc, #64]	; (8000e1c <printRadioSettings+0x3c4>)
 8000ddc:	461c      	mov	r4, r3
 8000dde:	4615      	mov	r5, r2
 8000de0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000de2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000de4:	682b      	ldr	r3, [r5, #0]
 8000de6:	6023      	str	r3, [r4, #0]
 8000de8:	e029      	b.n	8000e3e <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8000dea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dee:	2b02      	cmp	r3, #2
 8000df0:	d118      	bne.n	8000e24 <printRadioSettings+0x3cc>
 8000df2:	f107 0308 	add.w	r3, r7, #8
 8000df6:	4a0a      	ldr	r2, [pc, #40]	; (8000e20 <printRadioSettings+0x3c8>)
 8000df8:	461c      	mov	r4, r3
 8000dfa:	4615      	mov	r5, r2
 8000dfc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000dfe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e00:	682b      	ldr	r3, [r5, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	8022      	strh	r2, [r4, #0]
 8000e06:	3402      	adds	r4, #2
 8000e08:	0c1b      	lsrs	r3, r3, #16
 8000e0a:	7023      	strb	r3, [r4, #0]
 8000e0c:	e017      	b.n	8000e3e <printRadioSettings+0x3e6>
 8000e0e:	bf00      	nop
 8000e10:	080045d4 	.word	0x080045d4
 8000e14:	200000fc 	.word	0x200000fc
 8000e18:	080045ec 	.word	0x080045ec
 8000e1c:	08004600 	.word	0x08004600
 8000e20:	08004614 	.word	0x08004614
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8000e24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e28:	2b03      	cmp	r3, #3
 8000e2a:	d108      	bne.n	8000e3e <printRadioSettings+0x3e6>
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4ad7      	ldr	r2, [pc, #860]	; (8001190 <printRadioSettings+0x738>)
 8000e32:	461c      	mov	r4, r3
 8000e34:	4615      	mov	r5, r2
 8000e36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e3a:	682b      	ldr	r3, [r5, #0]
 8000e3c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e3e:	f107 0308 	add.w	r3, r7, #8
 8000e42:	4618      	mov	r0, r3
 8000e44:	f7ff f982 	bl	800014c <strlen>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	f107 0108 	add.w	r1, r7, #8
 8000e50:	230a      	movs	r3, #10
 8000e52:	48d0      	ldr	r0, [pc, #832]	; (8001194 <printRadioSettings+0x73c>)
 8000e54:	f002 fd03 	bl	800385e <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2205      	movs	r2, #5
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	200a      	movs	r0, #10
 8000e60:	f7ff fa04 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000e64:	793b      	ldrb	r3, [r7, #4]
 8000e66:	461c      	mov	r4, r3
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	461d      	mov	r5, r3
 8000e6c:	78bb      	ldrb	r3, [r7, #2]
 8000e6e:	787a      	ldrb	r2, [r7, #1]
 8000e70:	7839      	ldrb	r1, [r7, #0]
 8000e72:	f107 0008 	add.w	r0, r7, #8
 8000e76:	9102      	str	r1, [sp, #8]
 8000e78:	9201      	str	r2, [sp, #4]
 8000e7a:	9300      	str	r3, [sp, #0]
 8000e7c:	462b      	mov	r3, r5
 8000e7e:	4622      	mov	r2, r4
 8000e80:	49c5      	ldr	r1, [pc, #788]	; (8001198 <printRadioSettings+0x740>)
 8000e82:	f002 fee7 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff f95e 	bl	800014c <strlen>
 8000e90:	4603      	mov	r3, r0
 8000e92:	b29a      	uxth	r2, r3
 8000e94:	f107 0108 	add.w	r1, r7, #8
 8000e98:	230a      	movs	r3, #10
 8000e9a:	48be      	ldr	r0, [pc, #760]	; (8001194 <printRadioSettings+0x73c>)
 8000e9c:	f002 fcdf 	bl	800385e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	2205      	movs	r2, #5
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	200b      	movs	r0, #11
 8000ea8:	f7ff f9e0 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000eac:	793b      	ldrb	r3, [r7, #4]
 8000eae:	461c      	mov	r4, r3
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	461d      	mov	r5, r3
 8000eb4:	78bb      	ldrb	r3, [r7, #2]
 8000eb6:	787a      	ldrb	r2, [r7, #1]
 8000eb8:	7839      	ldrb	r1, [r7, #0]
 8000eba:	f107 0008 	add.w	r0, r7, #8
 8000ebe:	9102      	str	r1, [sp, #8]
 8000ec0:	9201      	str	r2, [sp, #4]
 8000ec2:	9300      	str	r3, [sp, #0]
 8000ec4:	462b      	mov	r3, r5
 8000ec6:	4622      	mov	r2, r4
 8000ec8:	49b4      	ldr	r1, [pc, #720]	; (800119c <printRadioSettings+0x744>)
 8000eca:	f002 fec3 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000ece:	f107 0308 	add.w	r3, r7, #8
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f7ff f93a 	bl	800014c <strlen>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	f107 0108 	add.w	r1, r7, #8
 8000ee0:	230a      	movs	r3, #10
 8000ee2:	48ac      	ldr	r0, [pc, #688]	; (8001194 <printRadioSettings+0x73c>)
 8000ee4:	f002 fcbb 	bl	800385e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8000ee8:	463b      	mov	r3, r7
 8000eea:	2201      	movs	r2, #1
 8000eec:	4619      	mov	r1, r3
 8000eee:	200c      	movs	r0, #12
 8000ef0:	f7ff f9bc 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000ef4:	783b      	ldrb	r3, [r7, #0]
 8000ef6:	461a      	mov	r2, r3
 8000ef8:	f107 0308 	add.w	r3, r7, #8
 8000efc:	49a8      	ldr	r1, [pc, #672]	; (80011a0 <printRadioSettings+0x748>)
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 fea8 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff f91f 	bl	800014c <strlen>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	b29a      	uxth	r2, r3
 8000f12:	f107 0108 	add.w	r1, r7, #8
 8000f16:	230a      	movs	r3, #10
 8000f18:	489e      	ldr	r0, [pc, #632]	; (8001194 <printRadioSettings+0x73c>)
 8000f1a:	f002 fca0 	bl	800385e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8000f1e:	463b      	mov	r3, r7
 8000f20:	2201      	movs	r2, #1
 8000f22:	4619      	mov	r1, r3
 8000f24:	200d      	movs	r0, #13
 8000f26:	f7ff f9a1 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000f2a:	783b      	ldrb	r3, [r7, #0]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	f107 0308 	add.w	r3, r7, #8
 8000f32:	499c      	ldr	r1, [pc, #624]	; (80011a4 <printRadioSettings+0x74c>)
 8000f34:	4618      	mov	r0, r3
 8000f36:	f002 fe8d 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f3a:	f107 0308 	add.w	r3, r7, #8
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff f904 	bl	800014c <strlen>
 8000f44:	4603      	mov	r3, r0
 8000f46:	b29a      	uxth	r2, r3
 8000f48:	f107 0108 	add.w	r1, r7, #8
 8000f4c:	230a      	movs	r3, #10
 8000f4e:	4891      	ldr	r0, [pc, #580]	; (8001194 <printRadioSettings+0x73c>)
 8000f50:	f002 fc85 	bl	800385e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8000f54:	463b      	mov	r3, r7
 8000f56:	2201      	movs	r2, #1
 8000f58:	4619      	mov	r1, r3
 8000f5a:	200e      	movs	r0, #14
 8000f5c:	f7ff f986 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000f60:	783b      	ldrb	r3, [r7, #0]
 8000f62:	461a      	mov	r2, r3
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	498f      	ldr	r1, [pc, #572]	; (80011a8 <printRadioSettings+0x750>)
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f002 fe72 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000f70:	f107 0308 	add.w	r3, r7, #8
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff f8e9 	bl	800014c <strlen>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	b29a      	uxth	r2, r3
 8000f7e:	f107 0108 	add.w	r1, r7, #8
 8000f82:	230a      	movs	r3, #10
 8000f84:	4883      	ldr	r0, [pc, #524]	; (8001194 <printRadioSettings+0x73c>)
 8000f86:	f002 fc6a 	bl	800385e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8000f8a:	463b      	mov	r3, r7
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	4619      	mov	r1, r3
 8000f90:	200f      	movs	r0, #15
 8000f92:	f7ff f96b 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8000f96:	783b      	ldrb	r3, [r7, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f107 0308 	add.w	r3, r7, #8
 8000f9e:	4983      	ldr	r1, [pc, #524]	; (80011ac <printRadioSettings+0x754>)
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f002 fe57 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fa6:	f107 0308 	add.w	r3, r7, #8
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff f8ce 	bl	800014c <strlen>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	f107 0108 	add.w	r1, r7, #8
 8000fb8:	230a      	movs	r3, #10
 8000fba:	4876      	ldr	r0, [pc, #472]	; (8001194 <printRadioSettings+0x73c>)
 8000fbc:	f002 fc4f 	bl	800385e <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8000fc0:	463b      	mov	r3, r7
 8000fc2:	2205      	movs	r2, #5
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	2010      	movs	r0, #16
 8000fc8:	f7ff f950 	bl	800026c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8000fcc:	793b      	ldrb	r3, [r7, #4]
 8000fce:	461c      	mov	r4, r3
 8000fd0:	78fb      	ldrb	r3, [r7, #3]
 8000fd2:	461d      	mov	r5, r3
 8000fd4:	78bb      	ldrb	r3, [r7, #2]
 8000fd6:	787a      	ldrb	r2, [r7, #1]
 8000fd8:	7839      	ldrb	r1, [r7, #0]
 8000fda:	f107 0008 	add.w	r0, r7, #8
 8000fde:	9102      	str	r1, [sp, #8]
 8000fe0:	9201      	str	r2, [sp, #4]
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	462b      	mov	r3, r5
 8000fe6:	4622      	mov	r2, r4
 8000fe8:	4971      	ldr	r1, [pc, #452]	; (80011b0 <printRadioSettings+0x758>)
 8000fea:	f002 fe33 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8000fee:	f107 0308 	add.w	r3, r7, #8
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f7ff f8aa 	bl	800014c <strlen>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	b29a      	uxth	r2, r3
 8000ffc:	f107 0108 	add.w	r1, r7, #8
 8001000:	230a      	movs	r3, #10
 8001002:	4864      	ldr	r0, [pc, #400]	; (8001194 <printRadioSettings+0x73c>)
 8001004:	f002 fc2b 	bl	800385e <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001008:	2011      	movs	r0, #17
 800100a:	f7ff f907 	bl	800021c <NRF24_read_register>
 800100e:	4603      	mov	r3, r0
 8001010:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001014:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001018:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800101c:	f107 0308 	add.w	r3, r7, #8
 8001020:	4964      	ldr	r1, [pc, #400]	; (80011b4 <printRadioSettings+0x75c>)
 8001022:	4618      	mov	r0, r3
 8001024:	f002 fe16 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff f88d 	bl	800014c <strlen>
 8001032:	4603      	mov	r3, r0
 8001034:	b29a      	uxth	r2, r3
 8001036:	f107 0108 	add.w	r1, r7, #8
 800103a:	230a      	movs	r3, #10
 800103c:	4855      	ldr	r0, [pc, #340]	; (8001194 <printRadioSettings+0x73c>)
 800103e:	f002 fc0e 	bl	800385e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001042:	2012      	movs	r0, #18
 8001044:	f7ff f8ea 	bl	800021c <NRF24_read_register>
 8001048:	4603      	mov	r3, r0
 800104a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800104e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001052:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001056:	f107 0308 	add.w	r3, r7, #8
 800105a:	4957      	ldr	r1, [pc, #348]	; (80011b8 <printRadioSettings+0x760>)
 800105c:	4618      	mov	r0, r3
 800105e:	f002 fdf9 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff f870 	bl	800014c <strlen>
 800106c:	4603      	mov	r3, r0
 800106e:	b29a      	uxth	r2, r3
 8001070:	f107 0108 	add.w	r1, r7, #8
 8001074:	230a      	movs	r3, #10
 8001076:	4847      	ldr	r0, [pc, #284]	; (8001194 <printRadioSettings+0x73c>)
 8001078:	f002 fbf1 	bl	800385e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 800107c:	2013      	movs	r0, #19
 800107e:	f7ff f8cd 	bl	800021c <NRF24_read_register>
 8001082:	4603      	mov	r3, r0
 8001084:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001088:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800108c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001090:	f107 0308 	add.w	r3, r7, #8
 8001094:	4949      	ldr	r1, [pc, #292]	; (80011bc <printRadioSettings+0x764>)
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fddc 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800109c:	f107 0308 	add.w	r3, r7, #8
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff f853 	bl	800014c <strlen>
 80010a6:	4603      	mov	r3, r0
 80010a8:	b29a      	uxth	r2, r3
 80010aa:	f107 0108 	add.w	r1, r7, #8
 80010ae:	230a      	movs	r3, #10
 80010b0:	4838      	ldr	r0, [pc, #224]	; (8001194 <printRadioSettings+0x73c>)
 80010b2:	f002 fbd4 	bl	800385e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 80010b6:	2014      	movs	r0, #20
 80010b8:	f7ff f8b0 	bl	800021c <NRF24_read_register>
 80010bc:	4603      	mov	r3, r0
 80010be:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80010c2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80010c6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	493c      	ldr	r1, [pc, #240]	; (80011c0 <printRadioSettings+0x768>)
 80010d0:	4618      	mov	r0, r3
 80010d2:	f002 fdbf 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80010d6:	f107 0308 	add.w	r3, r7, #8
 80010da:	4618      	mov	r0, r3
 80010dc:	f7ff f836 	bl	800014c <strlen>
 80010e0:	4603      	mov	r3, r0
 80010e2:	b29a      	uxth	r2, r3
 80010e4:	f107 0108 	add.w	r1, r7, #8
 80010e8:	230a      	movs	r3, #10
 80010ea:	482a      	ldr	r0, [pc, #168]	; (8001194 <printRadioSettings+0x73c>)
 80010ec:	f002 fbb7 	bl	800385e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 80010f0:	2015      	movs	r0, #21
 80010f2:	f7ff f893 	bl	800021c <NRF24_read_register>
 80010f6:	4603      	mov	r3, r0
 80010f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80010fc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001100:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001104:	f107 0308 	add.w	r3, r7, #8
 8001108:	492e      	ldr	r1, [pc, #184]	; (80011c4 <printRadioSettings+0x76c>)
 800110a:	4618      	mov	r0, r3
 800110c:	f002 fda2 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001110:	f107 0308 	add.w	r3, r7, #8
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff f819 	bl	800014c <strlen>
 800111a:	4603      	mov	r3, r0
 800111c:	b29a      	uxth	r2, r3
 800111e:	f107 0108 	add.w	r1, r7, #8
 8001122:	230a      	movs	r3, #10
 8001124:	481b      	ldr	r0, [pc, #108]	; (8001194 <printRadioSettings+0x73c>)
 8001126:	f002 fb9a 	bl	800385e <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 800112a:	2016      	movs	r0, #22
 800112c:	f7ff f876 	bl	800021c <NRF24_read_register>
 8001130:	4603      	mov	r3, r0
 8001132:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001136:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800113a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800113e:	f107 0308 	add.w	r3, r7, #8
 8001142:	4921      	ldr	r1, [pc, #132]	; (80011c8 <printRadioSettings+0x770>)
 8001144:	4618      	mov	r0, r3
 8001146:	f002 fd85 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800114a:	f107 0308 	add.w	r3, r7, #8
 800114e:	4618      	mov	r0, r3
 8001150:	f7fe fffc 	bl	800014c <strlen>
 8001154:	4603      	mov	r3, r0
 8001156:	b29a      	uxth	r2, r3
 8001158:	f107 0108 	add.w	r1, r7, #8
 800115c:	230a      	movs	r3, #10
 800115e:	480d      	ldr	r0, [pc, #52]	; (8001194 <printRadioSettings+0x73c>)
 8001160:	f002 fb7d 	bl	800385e <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001164:	201c      	movs	r0, #28
 8001166:	f7ff f859 	bl	800021c <NRF24_read_register>
 800116a:	4603      	mov	r3, r0
 800116c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001170:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001174:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001178:	2b00      	cmp	r3, #0
 800117a:	bfcc      	ite	gt
 800117c:	2301      	movgt	r3, #1
 800117e:	2300      	movle	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001184:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001188:	f003 0302 	and.w	r3, r3, #2
 800118c:	e01e      	b.n	80011cc <printRadioSettings+0x774>
 800118e:	bf00      	nop
 8001190:	08004628 	.word	0x08004628
 8001194:	200000fc 	.word	0x200000fc
 8001198:	0800463c 	.word	0x0800463c
 800119c:	0800466c 	.word	0x0800466c
 80011a0:	0800469c 	.word	0x0800469c
 80011a4:	080046c4 	.word	0x080046c4
 80011a8:	080046ec 	.word	0x080046ec
 80011ac:	08004714 	.word	0x08004714
 80011b0:	0800473c 	.word	0x0800473c
 80011b4:	08004768 	.word	0x08004768
 80011b8:	08004784 	.word	0x08004784
 80011bc:	080047a0 	.word	0x080047a0
 80011c0:	080047bc 	.word	0x080047bc
 80011c4:	080047d8 	.word	0x080047d8
 80011c8:	080047f4 	.word	0x080047f4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	bfcc      	ite	gt
 80011d0:	2301      	movgt	r3, #1
 80011d2:	2300      	movle	r3, #0
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011d8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011dc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bfcc      	ite	gt
 80011e4:	2301      	movgt	r3, #1
 80011e6:	2300      	movle	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80011ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80011f0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bfcc      	ite	gt
 80011f8:	2301      	movgt	r3, #1
 80011fa:	2300      	movle	r3, #0
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001200:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001204:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001208:	2b00      	cmp	r3, #0
 800120a:	bfcc      	ite	gt
 800120c:	2301      	movgt	r3, #1
 800120e:	2300      	movle	r3, #0
 8001210:	b2db      	uxtb	r3, r3
 8001212:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001214:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001218:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800121c:	2b00      	cmp	r3, #0
 800121e:	bfcc      	ite	gt
 8001220:	2301      	movgt	r3, #1
 8001222:	2300      	movle	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	f107 0008 	add.w	r0, r7, #8
 800122a:	9303      	str	r3, [sp, #12]
 800122c:	9402      	str	r4, [sp, #8]
 800122e:	9101      	str	r1, [sp, #4]
 8001230:	9200      	str	r2, [sp, #0]
 8001232:	4633      	mov	r3, r6
 8001234:	462a      	mov	r2, r5
 8001236:	494a      	ldr	r1, [pc, #296]	; (8001360 <printRadioSettings+0x908>)
 8001238:	f002 fd0c 	bl	8003c54 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800123c:	f107 0308 	add.w	r3, r7, #8
 8001240:	4618      	mov	r0, r3
 8001242:	f7fe ff83 	bl	800014c <strlen>
 8001246:	4603      	mov	r3, r0
 8001248:	b29a      	uxth	r2, r3
 800124a:	f107 0108 	add.w	r1, r7, #8
 800124e:	230a      	movs	r3, #10
 8001250:	4844      	ldr	r0, [pc, #272]	; (8001364 <printRadioSettings+0x90c>)
 8001252:	f002 fb04 	bl	800385e <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001256:	201d      	movs	r0, #29
 8001258:	f7fe ffe0 	bl	800021c <NRF24_read_register>
 800125c:	4603      	mov	r3, r0
 800125e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001262:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00c      	beq.n	8001288 <printRadioSettings+0x830>
 800126e:	f107 0308 	add.w	r3, r7, #8
 8001272:	4a3d      	ldr	r2, [pc, #244]	; (8001368 <printRadioSettings+0x910>)
 8001274:	461c      	mov	r4, r3
 8001276:	4615      	mov	r5, r2
 8001278:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800127a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800127c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001280:	6020      	str	r0, [r4, #0]
 8001282:	3404      	adds	r4, #4
 8001284:	8021      	strh	r1, [r4, #0]
 8001286:	e00e      	b.n	80012a6 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	4a37      	ldr	r2, [pc, #220]	; (800136c <printRadioSettings+0x914>)
 800128e:	461c      	mov	r4, r3
 8001290:	4615      	mov	r5, r2
 8001292:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001296:	e895 0003 	ldmia.w	r5, {r0, r1}
 800129a:	6020      	str	r0, [r4, #0]
 800129c:	3404      	adds	r4, #4
 800129e:	8021      	strh	r1, [r4, #0]
 80012a0:	3402      	adds	r4, #2
 80012a2:	0c0b      	lsrs	r3, r1, #16
 80012a4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80012a6:	f107 0308 	add.w	r3, r7, #8
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7fe ff4e 	bl	800014c <strlen>
 80012b0:	4603      	mov	r3, r0
 80012b2:	b29a      	uxth	r2, r3
 80012b4:	f107 0108 	add.w	r1, r7, #8
 80012b8:	230a      	movs	r3, #10
 80012ba:	482a      	ldr	r0, [pc, #168]	; (8001364 <printRadioSettings+0x90c>)
 80012bc:	f002 facf 	bl	800385e <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 80012c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00b      	beq.n	80012e4 <printRadioSettings+0x88c>
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	4a27      	ldr	r2, [pc, #156]	; (8001370 <printRadioSettings+0x918>)
 80012d2:	461c      	mov	r4, r3
 80012d4:	4615      	mov	r5, r2
 80012d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012de:	c403      	stmia	r4!, {r0, r1}
 80012e0:	8022      	strh	r2, [r4, #0]
 80012e2:	e00d      	b.n	8001300 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	4a22      	ldr	r2, [pc, #136]	; (8001374 <printRadioSettings+0x91c>)
 80012ea:	461c      	mov	r4, r3
 80012ec:	4615      	mov	r5, r2
 80012ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80012f6:	c403      	stmia	r4!, {r0, r1}
 80012f8:	8022      	strh	r2, [r4, #0]
 80012fa:	3402      	adds	r4, #2
 80012fc:	0c13      	lsrs	r3, r2, #16
 80012fe:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001300:	f107 0308 	add.w	r3, r7, #8
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ff21 	bl	800014c <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b29a      	uxth	r2, r3
 800130e:	f107 0108 	add.w	r1, r7, #8
 8001312:	230a      	movs	r3, #10
 8001314:	4813      	ldr	r0, [pc, #76]	; (8001364 <printRadioSettings+0x90c>)
 8001316:	f002 faa2 	bl	800385e <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800131a:	f107 0308 	add.w	r3, r7, #8
 800131e:	4a16      	ldr	r2, [pc, #88]	; (8001378 <printRadioSettings+0x920>)
 8001320:	461c      	mov	r4, r3
 8001322:	4615      	mov	r5, r2
 8001324:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001326:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001328:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800132c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800132e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001330:	682b      	ldr	r3, [r5, #0]
 8001332:	461a      	mov	r2, r3
 8001334:	8022      	strh	r2, [r4, #0]
 8001336:	3402      	adds	r4, #2
 8001338:	0c1b      	lsrs	r3, r3, #16
 800133a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800133c:	f107 0308 	add.w	r3, r7, #8
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe ff03 	bl	800014c <strlen>
 8001346:	4603      	mov	r3, r0
 8001348:	b29a      	uxth	r2, r3
 800134a:	f107 0108 	add.w	r1, r7, #8
 800134e:	230a      	movs	r3, #10
 8001350:	4804      	ldr	r0, [pc, #16]	; (8001364 <printRadioSettings+0x90c>)
 8001352:	f002 fa84 	bl	800385e <HAL_UART_Transmit>
}
 8001356:	bf00      	nop
 8001358:	3774      	adds	r7, #116	; 0x74
 800135a:	46bd      	mov	sp, r7
 800135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800135e:	bf00      	nop
 8001360:	08004810 	.word	0x08004810
 8001364:	200000fc 	.word	0x200000fc
 8001368:	0800485c 	.word	0x0800485c
 800136c:	08004874 	.word	0x08004874
 8001370:	0800488c 	.word	0x0800488c
 8001374:	080048a8 	.word	0x080048a8
 8001378:	0800447c 	.word	0x0800447c

0800137c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800137c:	b590      	push	{r4, r7, lr}
 800137e:	b0ab      	sub	sp, #172	; 0xac
 8001380:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE BEGIN 1 */
	MPU_ConfigTypeDef MpuConfig;
	RawData_Def AccelData, GyroData;
	ScaledData_Def AccelScaled, GyroScaled;
	char Msg[32] = "HI";
 8001382:	f644 1348 	movw	r3, #18760	; 0x4948
 8001386:	603b      	str	r3, [r7, #0]
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]
 8001396:	615a      	str	r2, [r3, #20]
 8001398:	619a      	str	r2, [r3, #24]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800139a:	f000 fb49 	bl	8001a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800139e:	f000 f849 	bl	8001434 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a2:	f000 f91b 	bl	80015dc <MX_GPIO_Init>
  MX_I2C2_Init();
 80013a6:	f000 f88b 	bl	80014c0 <MX_I2C2_Init>
  MX_SPI1_Init();
 80013aa:	f000 f8b7 	bl	800151c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80013ae:	f000 f8eb 	bl	8001588 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  NRF24_begin(CSN_GPIO_Port, CSN_Pin, CE_Pin, hspi1);
 80013b2:	4c1b      	ldr	r4, [pc, #108]	; (8001420 <main+0xa4>)
 80013b4:	4668      	mov	r0, sp
 80013b6:	1d23      	adds	r3, r4, #4
 80013b8:	2254      	movs	r2, #84	; 0x54
 80013ba:	4619      	mov	r1, r3
 80013bc:	f002 fc36 	bl	8003c2c <memcpy>
 80013c0:	6823      	ldr	r3, [r4, #0]
 80013c2:	2202      	movs	r2, #2
 80013c4:	2101      	movs	r1, #1
 80013c6:	4817      	ldr	r0, [pc, #92]	; (8001424 <main+0xa8>)
 80013c8:	f7ff f802 	bl	80003d0 <NRF24_begin>

  NRF24_stopListening();
 80013cc:	f7ff f8e0 	bl	8000590 <NRF24_stopListening>
  NRF24_openWritingPipe(PipeAddres);
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <main+0xac>)
 80013d2:	cb18      	ldmia	r3, {r3, r4}
 80013d4:	4618      	mov	r0, r3
 80013d6:	4621      	mov	r1, r4
 80013d8:	f7ff f93a 	bl	8000650 <NRF24_openWritingPipe>
  NRF24_setAutoAck(false);
 80013dc:	2000      	movs	r0, #0
 80013de:	f7ff f9c1 	bl	8000764 <NRF24_setAutoAck>
  NRF24_setChannel(52);
 80013e2:	2034      	movs	r0, #52	; 0x34
 80013e4:	f7ff f973 	bl	80006ce <NRF24_setChannel>
  NRF24_setPayloadSize(16);
 80013e8:	2010      	movs	r0, #16
 80013ea:	f7ff f985 	bl	80006f8 <NRF24_setPayloadSize>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_I2C_IsDeviceReady(&hi2c2, MPU_ADDR, 3, 1000) != HAL_OK) {
 80013ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013f2:	2203      	movs	r2, #3
 80013f4:	2168      	movs	r1, #104	; 0x68
 80013f6:	480d      	ldr	r0, [pc, #52]	; (800142c <main+0xb0>)
 80013f8:	f000 ff34 	bl	8002264 <HAL_I2C_IsDeviceReady>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d004      	beq.n	800140c <main+0x90>
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);	// Error
 8001402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001406:	480a      	ldr	r0, [pc, #40]	; (8001430 <main+0xb4>)
 8001408:	f000 fdec 	bl	8001fe4 <HAL_GPIO_TogglePin>


	  	  }
	  if (NRF24_write(Msg, 32)){
 800140c:	463b      	mov	r3, r7
 800140e:	2120      	movs	r1, #32
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f8c9 	bl	80005a8 <NRF24_write>

	  	  }

	  HAL_Delay(1000);
 8001416:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800141a:	f000 fb6b 	bl	8001af4 <HAL_Delay>
	  if (HAL_I2C_IsDeviceReady(&hi2c2, MPU_ADDR, 3, 1000) != HAL_OK) {
 800141e:	e7e6      	b.n	80013ee <main+0x72>
 8001420:	200001dc 	.word	0x200001dc
 8001424:	40010c00 	.word	0x40010c00
 8001428:	20000000 	.word	0x20000000
 800142c:	20000148 	.word	0x20000148
 8001430:	40011000 	.word	0x40011000

08001434 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b090      	sub	sp, #64	; 0x40
 8001438:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	2228      	movs	r2, #40	; 0x28
 8001440:	2100      	movs	r1, #0
 8001442:	4618      	mov	r0, r3
 8001444:	f002 fbfd 	bl	8003c42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001456:	2301      	movs	r3, #1
 8001458:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800145a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800145e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001460:	2300      	movs	r3, #0
 8001462:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001464:	2301      	movs	r3, #1
 8001466:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001468:	2302      	movs	r3, #2
 800146a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800146c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001470:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001472:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001476:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	4618      	mov	r0, r3
 800147e:	f001 f86b 	bl	8002558 <HAL_RCC_OscConfig>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001488:	f000 f914 	bl	80016b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800148c:	230f      	movs	r3, #15
 800148e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001490:	2302      	movs	r3, #2
 8001492:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001498:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2102      	movs	r1, #2
 80014a6:	4618      	mov	r0, r3
 80014a8:	f001 fad6 	bl	8002a58 <HAL_RCC_ClockConfig>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80014b2:	f000 f8ff 	bl	80016b4 <Error_Handler>
  }
}
 80014b6:	bf00      	nop
 80014b8:	3740      	adds	r7, #64	; 0x40
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
	...

080014c0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <MX_I2C2_Init+0x50>)
 80014c6:	4a13      	ldr	r2, [pc, #76]	; (8001514 <MX_I2C2_Init+0x54>)
 80014c8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80014ca:	4b11      	ldr	r3, [pc, #68]	; (8001510 <MX_I2C2_Init+0x50>)
 80014cc:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_I2C2_Init+0x58>)
 80014ce:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80014d0:	4b0f      	ldr	r3, [pc, #60]	; (8001510 <MX_I2C2_Init+0x50>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80014d6:	4b0e      	ldr	r3, [pc, #56]	; (8001510 <MX_I2C2_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <MX_I2C2_Init+0x50>)
 80014de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80014e2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014e4:	4b0a      	ldr	r3, [pc, #40]	; (8001510 <MX_I2C2_Init+0x50>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <MX_I2C2_Init+0x50>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <MX_I2C2_Init+0x50>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <MX_I2C2_Init+0x50>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80014fc:	4804      	ldr	r0, [pc, #16]	; (8001510 <MX_I2C2_Init+0x50>)
 80014fe:	f000 fd89 	bl	8002014 <HAL_I2C_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001508:	f000 f8d4 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800150c:	bf00      	nop
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000148 	.word	0x20000148
 8001514:	40005800 	.word	0x40005800
 8001518:	000186a0 	.word	0x000186a0

0800151c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <MX_SPI1_Init+0x64>)
 8001522:	4a18      	ldr	r2, [pc, #96]	; (8001584 <MX_SPI1_Init+0x68>)
 8001524:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <MX_SPI1_Init+0x64>)
 8001528:	f44f 7282 	mov.w	r2, #260	; 0x104
 800152c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800152e:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_SPI1_Init+0x64>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_SPI1_Init+0x64>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_SPI1_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_SPI1_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_SPI1_Init+0x64>)
 8001548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800154c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800154e:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_SPI1_Init+0x64>)
 8001550:	2220      	movs	r2, #32
 8001552:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_SPI1_Init+0x64>)
 8001556:	2200      	movs	r2, #0
 8001558:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_SPI1_Init+0x64>)
 800155c:	2200      	movs	r2, #0
 800155e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_SPI1_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_SPI1_Init+0x64>)
 8001568:	220a      	movs	r2, #10
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_SPI1_Init+0x64>)
 800156e:	f001 fc0f 	bl	8002d90 <HAL_SPI_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001578:	f000 f89c 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	200001dc 	.word	0x200001dc
 8001584:	40013000 	.word	0x40013000

08001588 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800158c:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 800158e:	4a12      	ldr	r2, [pc, #72]	; (80015d8 <MX_USART1_UART_Init+0x50>)
 8001590:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 8001594:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001598:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 800159c:	2200      	movs	r2, #0
 800159e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ae:	220c      	movs	r2, #12
 80015b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USART1_UART_Init+0x4c>)
 80015c0:	f002 f900 	bl	80037c4 <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80015ca:	f000 f873 	bl	80016b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	2000019c 	.word	0x2000019c
 80015d8:	40013800 	.word	0x40013800

080015dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b088      	sub	sp, #32
 80015e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e2:	f107 0310 	add.w	r3, r7, #16
 80015e6:	2200      	movs	r2, #0
 80015e8:	601a      	str	r2, [r3, #0]
 80015ea:	605a      	str	r2, [r3, #4]
 80015ec:	609a      	str	r2, [r3, #8]
 80015ee:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <MX_GPIO_Init+0xcc>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a2c      	ldr	r2, [pc, #176]	; (80016a8 <MX_GPIO_Init+0xcc>)
 80015f6:	f043 0310 	orr.w	r3, r3, #16
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <MX_GPIO_Init+0xcc>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0310 	and.w	r3, r3, #16
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001608:	4b27      	ldr	r3, [pc, #156]	; (80016a8 <MX_GPIO_Init+0xcc>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a26      	ldr	r2, [pc, #152]	; (80016a8 <MX_GPIO_Init+0xcc>)
 800160e:	f043 0320 	orr.w	r3, r3, #32
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <MX_GPIO_Init+0xcc>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f003 0320 	and.w	r3, r3, #32
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b21      	ldr	r3, [pc, #132]	; (80016a8 <MX_GPIO_Init+0xcc>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a20      	ldr	r2, [pc, #128]	; (80016a8 <MX_GPIO_Init+0xcc>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <MX_GPIO_Init+0xcc>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <MX_GPIO_Init+0xcc>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	4a1a      	ldr	r2, [pc, #104]	; (80016a8 <MX_GPIO_Init+0xcc>)
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	6193      	str	r3, [r2, #24]
 8001644:	4b18      	ldr	r3, [pc, #96]	; (80016a8 <MX_GPIO_Init+0xcc>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001650:	2200      	movs	r2, #0
 8001652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001656:	4815      	ldr	r0, [pc, #84]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001658:	f000 fcac 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CSN_Pin|CE_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	2103      	movs	r1, #3
 8001660:	4813      	ldr	r0, [pc, #76]	; (80016b0 <MX_GPIO_Init+0xd4>)
 8001662:	f000 fca7 	bl	8001fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001666:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800166c:	2301      	movs	r3, #1
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001674:	2302      	movs	r3, #2
 8001676:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0310 	add.w	r3, r7, #16
 800167c:	4619      	mov	r1, r3
 800167e:	480b      	ldr	r0, [pc, #44]	; (80016ac <MX_GPIO_Init+0xd0>)
 8001680:	f000 fb3e 	bl	8001d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : CSN_Pin CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|CE_Pin;
 8001684:	2303      	movs	r3, #3
 8001686:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2302      	movs	r3, #2
 8001692:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	4619      	mov	r1, r3
 800169a:	4805      	ldr	r0, [pc, #20]	; (80016b0 <MX_GPIO_Init+0xd4>)
 800169c:	f000 fb30 	bl	8001d00 <HAL_GPIO_Init>

}
 80016a0:	bf00      	nop
 80016a2:	3720      	adds	r7, #32
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40011000 	.word	0x40011000
 80016b0:	40010c00 	.word	0x40010c00

080016b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_MspInit+0x5c>)
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	4a14      	ldr	r2, [pc, #80]	; (800171c <HAL_MspInit+0x5c>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6193      	str	r3, [r2, #24]
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_MspInit+0x5c>)
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	60bb      	str	r3, [r7, #8]
 80016dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <HAL_MspInit+0x5c>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_MspInit+0x5c>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b0c      	ldr	r3, [pc, #48]	; (800171c <HAL_MspInit+0x5c>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_MspInit+0x60>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	4a04      	ldr	r2, [pc, #16]	; (8001720 <HAL_MspInit+0x60>)
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	40021000 	.word	0x40021000
 8001720:	40010000 	.word	0x40010000

08001724 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b088      	sub	sp, #32
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800172c:	f107 0310 	add.w	r3, r7, #16
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	605a      	str	r2, [r3, #4]
 8001736:	609a      	str	r2, [r3, #8]
 8001738:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a16      	ldr	r2, [pc, #88]	; (8001798 <HAL_I2C_MspInit+0x74>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d124      	bne.n	800178e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001744:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_I2C_MspInit+0x78>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <HAL_I2C_MspInit+0x78>)
 800174a:	f043 0308 	orr.w	r3, r3, #8
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_I2C_MspInit+0x78>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800175c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001760:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001762:	2312      	movs	r3, #18
 8001764:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	f107 0310 	add.w	r3, r7, #16
 800176e:	4619      	mov	r1, r3
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <HAL_I2C_MspInit+0x7c>)
 8001772:	f000 fac5 	bl	8001d00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <HAL_I2C_MspInit+0x78>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	4a08      	ldr	r2, [pc, #32]	; (800179c <HAL_I2C_MspInit+0x78>)
 800177c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001780:	61d3      	str	r3, [r2, #28]
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_I2C_MspInit+0x78>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	3720      	adds	r7, #32
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40005800 	.word	0x40005800
 800179c:	40021000 	.word	0x40021000
 80017a0:	40010c00 	.word	0x40010c00

080017a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b088      	sub	sp, #32
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0310 	add.w	r3, r7, #16
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a1b      	ldr	r2, [pc, #108]	; (800182c <HAL_SPI_MspInit+0x88>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d12f      	bne.n	8001824 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80017c4:	4b1a      	ldr	r3, [pc, #104]	; (8001830 <HAL_SPI_MspInit+0x8c>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	4a19      	ldr	r2, [pc, #100]	; (8001830 <HAL_SPI_MspInit+0x8c>)
 80017ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80017ce:	6193      	str	r3, [r2, #24]
 80017d0:	4b17      	ldr	r3, [pc, #92]	; (8001830 <HAL_SPI_MspInit+0x8c>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017dc:	4b14      	ldr	r3, [pc, #80]	; (8001830 <HAL_SPI_MspInit+0x8c>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	4a13      	ldr	r2, [pc, #76]	; (8001830 <HAL_SPI_MspInit+0x8c>)
 80017e2:	f043 0304 	orr.w	r3, r3, #4
 80017e6:	6193      	str	r3, [r2, #24]
 80017e8:	4b11      	ldr	r3, [pc, #68]	; (8001830 <HAL_SPI_MspInit+0x8c>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	f003 0304 	and.w	r3, r3, #4
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80017f4:	23a0      	movs	r3, #160	; 0xa0
 80017f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001800:	f107 0310 	add.w	r3, r7, #16
 8001804:	4619      	mov	r1, r3
 8001806:	480b      	ldr	r0, [pc, #44]	; (8001834 <HAL_SPI_MspInit+0x90>)
 8001808:	f000 fa7a 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800180c:	2340      	movs	r3, #64	; 0x40
 800180e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001810:	2300      	movs	r3, #0
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001818:	f107 0310 	add.w	r3, r7, #16
 800181c:	4619      	mov	r1, r3
 800181e:	4805      	ldr	r0, [pc, #20]	; (8001834 <HAL_SPI_MspInit+0x90>)
 8001820:	f000 fa6e 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001824:	bf00      	nop
 8001826:	3720      	adds	r7, #32
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	40013000 	.word	0x40013000
 8001830:	40021000 	.word	0x40021000
 8001834:	40010800 	.word	0x40010800

08001838 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <HAL_UART_MspInit+0x8c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d131      	bne.n	80018bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_UART_MspInit+0x90>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a1a      	ldr	r2, [pc, #104]	; (80018c8 <HAL_UART_MspInit+0x90>)
 800185e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_UART_MspInit+0x90>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001870:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_UART_MspInit+0x90>)
 8001872:	699b      	ldr	r3, [r3, #24]
 8001874:	4a14      	ldr	r2, [pc, #80]	; (80018c8 <HAL_UART_MspInit+0x90>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6193      	str	r3, [r2, #24]
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_UART_MspInit+0x90>)
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800188c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0310 	add.w	r3, r7, #16
 800189a:	4619      	mov	r1, r3
 800189c:	480b      	ldr	r0, [pc, #44]	; (80018cc <HAL_UART_MspInit+0x94>)
 800189e:	f000 fa2f 	bl	8001d00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	2300      	movs	r3, #0
 80018ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b0:	f107 0310 	add.w	r3, r7, #16
 80018b4:	4619      	mov	r1, r3
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <HAL_UART_MspInit+0x94>)
 80018b8:	f000 fa22 	bl	8001d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80018bc:	bf00      	nop
 80018be:	3720      	adds	r7, #32
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40013800 	.word	0x40013800
 80018c8:	40021000 	.word	0x40021000
 80018cc:	40010800 	.word	0x40010800

080018d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80018d4:	bf00      	nop
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bc80      	pop	{r7}
 80018da:	4770      	bx	lr

080018dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018e0:	e7fe      	b.n	80018e0 <HardFault_Handler+0x4>

080018e2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018e2:	b480      	push	{r7}
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018e6:	e7fe      	b.n	80018e6 <MemManage_Handler+0x4>

080018e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ec:	e7fe      	b.n	80018ec <BusFault_Handler+0x4>

080018ee <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018ee:	b480      	push	{r7}
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018f2:	e7fe      	b.n	80018f2 <UsageFault_Handler+0x4>

080018f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001904:	bf00      	nop
 8001906:	46bd      	mov	sp, r7
 8001908:	bc80      	pop	{r7}
 800190a:	4770      	bx	lr

0800190c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001910:	bf00      	nop
 8001912:	46bd      	mov	sp, r7
 8001914:	bc80      	pop	{r7}
 8001916:	4770      	bx	lr

08001918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800191c:	f000 f8ce 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001920:	bf00      	nop
 8001922:	bd80      	pop	{r7, pc}

08001924 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800192c:	4b11      	ldr	r3, [pc, #68]	; (8001974 <_sbrk+0x50>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x16>
		heap_end = &end;
 8001934:	4b0f      	ldr	r3, [pc, #60]	; (8001974 <_sbrk+0x50>)
 8001936:	4a10      	ldr	r2, [pc, #64]	; (8001978 <_sbrk+0x54>)
 8001938:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800193a:	4b0e      	ldr	r3, [pc, #56]	; (8001974 <_sbrk+0x50>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <_sbrk+0x50>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	4413      	add	r3, r2
 8001948:	466a      	mov	r2, sp
 800194a:	4293      	cmp	r3, r2
 800194c:	d907      	bls.n	800195e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800194e:	f002 f943 	bl	8003bd8 <__errno>
 8001952:	4602      	mov	r2, r0
 8001954:	230c      	movs	r3, #12
 8001956:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001958:	f04f 33ff 	mov.w	r3, #4294967295
 800195c:	e006      	b.n	800196c <_sbrk+0x48>
	}

	heap_end += incr;
 800195e:	4b05      	ldr	r3, [pc, #20]	; (8001974 <_sbrk+0x50>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a03      	ldr	r2, [pc, #12]	; (8001974 <_sbrk+0x50>)
 8001968:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3710      	adds	r7, #16
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	2000013c 	.word	0x2000013c
 8001978:	20000240 	.word	0x20000240

0800197c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <SystemInit+0x5c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a14      	ldr	r2, [pc, #80]	; (80019d8 <SystemInit+0x5c>)
 8001986:	f043 0301 	orr.w	r3, r3, #1
 800198a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800198c:	4b12      	ldr	r3, [pc, #72]	; (80019d8 <SystemInit+0x5c>)
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	4911      	ldr	r1, [pc, #68]	; (80019d8 <SystemInit+0x5c>)
 8001992:	4b12      	ldr	r3, [pc, #72]	; (80019dc <SystemInit+0x60>)
 8001994:	4013      	ands	r3, r2
 8001996:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <SystemInit+0x5c>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <SystemInit+0x5c>)
 800199e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80019a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <SystemInit+0x5c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <SystemInit+0x5c>)
 80019ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019b2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <SystemInit+0x5c>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <SystemInit+0x5c>)
 80019ba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80019be:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80019c0:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <SystemInit+0x5c>)
 80019c2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80019c6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80019c8:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <SystemInit+0x64>)
 80019ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019ce:	609a      	str	r2, [r3, #8]
#endif 
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40021000 	.word	0x40021000
 80019dc:	f8ff0000 	.word	0xf8ff0000
 80019e0:	e000ed00 	.word	0xe000ed00

080019e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80019e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80019e6:	e003      	b.n	80019f0 <LoopCopyDataInit>

080019e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80019e8:	4b0b      	ldr	r3, [pc, #44]	; (8001a18 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80019ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80019ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80019ee:	3104      	adds	r1, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80019f0:	480a      	ldr	r0, [pc, #40]	; (8001a1c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80019f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80019f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80019f8:	d3f6      	bcc.n	80019e8 <CopyDataInit>
  ldr r2, =_sbss
 80019fa:	4a0a      	ldr	r2, [pc, #40]	; (8001a24 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80019fc:	e002      	b.n	8001a04 <LoopFillZerobss>

080019fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80019fe:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001a00:	f842 3b04 	str.w	r3, [r2], #4

08001a04 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001a04:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001a06:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001a08:	d3f9      	bcc.n	80019fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a0a:	f7ff ffb7 	bl	800197c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f002 f8e9 	bl	8003be4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a12:	f7ff fcb3 	bl	800137c <main>
  bx lr
 8001a16:	4770      	bx	lr
  ldr r3, =_sidata
 8001a18:	08004a28 	.word	0x08004a28
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001a20:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8001a24:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8001a28:	2000023c 	.word	0x2000023c

08001a2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC1_2_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_Init+0x28>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_Init+0x28>)
 8001a3a:	f043 0310 	orr.w	r3, r3, #16
 8001a3e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 f929 	bl	8001c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fe38 	bl	80016c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40022000 	.word	0x40022000

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f933 	bl	8001ce6 <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f000 f909 	bl	8001cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000008 	.word	0x20000008
 8001ab4:	20000010 	.word	0x20000010
 8001ab8:	2000000c 	.word	0x2000000c

08001abc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_IncTick+0x1c>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_IncTick+0x20>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a03      	ldr	r2, [pc, #12]	; (8001adc <HAL_IncTick+0x20>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	20000010 	.word	0x20000010
 8001adc:	20000234 	.word	0x20000234

08001ae0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae4:	4b02      	ldr	r3, [pc, #8]	; (8001af0 <HAL_GetTick+0x10>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bc80      	pop	{r7}
 8001aee:	4770      	bx	lr
 8001af0:	20000234 	.word	0x20000234

08001af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff fff0 	bl	8001ae0 <HAL_GetTick>
 8001b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0c:	d005      	beq.n	8001b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b0e:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <HAL_Delay+0x40>)
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	461a      	mov	r2, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	4413      	add	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b1a:	bf00      	nop
 8001b1c:	f7ff ffe0 	bl	8001ae0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d8f7      	bhi.n	8001b1c <HAL_Delay+0x28>
  {
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	3710      	adds	r7, #16
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000010 	.word	0x20000010

08001b38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b4e:	68ba      	ldr	r2, [r7, #8]
 8001b50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b54:	4013      	ands	r3, r2
 8001b56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b6a:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <__NVIC_SetPriorityGrouping+0x44>)
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	60d3      	str	r3, [r2, #12]
}
 8001b70:	bf00      	nop
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000ed00 	.word	0xe000ed00

08001b80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <__NVIC_GetPriorityGrouping+0x18>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	0a1b      	lsrs	r3, r3, #8
 8001b8a:	f003 0307 	and.w	r3, r3, #7
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
 8001b96:	bf00      	nop
 8001b98:	e000ed00 	.word	0xe000ed00

08001b9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	db0a      	blt.n	8001bc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	490c      	ldr	r1, [pc, #48]	; (8001be8 <__NVIC_SetPriority+0x4c>)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	0112      	lsls	r2, r2, #4
 8001bbc:	b2d2      	uxtb	r2, r2
 8001bbe:	440b      	add	r3, r1
 8001bc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	b2da      	uxtb	r2, r3
 8001bca:	4908      	ldr	r1, [pc, #32]	; (8001bec <__NVIC_SetPriority+0x50>)
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	3b04      	subs	r3, #4
 8001bd4:	0112      	lsls	r2, r2, #4
 8001bd6:	b2d2      	uxtb	r2, r2
 8001bd8:	440b      	add	r3, r1
 8001bda:	761a      	strb	r2, [r3, #24]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	e000e100 	.word	0xe000e100
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b089      	sub	sp, #36	; 0x24
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f003 0307 	and.w	r3, r3, #7
 8001c02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f1c3 0307 	rsb	r3, r3, #7
 8001c0a:	2b04      	cmp	r3, #4
 8001c0c:	bf28      	it	cs
 8001c0e:	2304      	movcs	r3, #4
 8001c10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3304      	adds	r3, #4
 8001c16:	2b06      	cmp	r3, #6
 8001c18:	d902      	bls.n	8001c20 <NVIC_EncodePriority+0x30>
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	3b03      	subs	r3, #3
 8001c1e:	e000      	b.n	8001c22 <NVIC_EncodePriority+0x32>
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c24:	f04f 32ff 	mov.w	r2, #4294967295
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	401a      	ands	r2, r3
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c38:	f04f 31ff 	mov.w	r1, #4294967295
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c42:	43d9      	mvns	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c48:	4313      	orrs	r3, r2
         );
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	; 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c64:	d301      	bcc.n	8001c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c66:	2301      	movs	r3, #1
 8001c68:	e00f      	b.n	8001c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c6a:	4a0a      	ldr	r2, [pc, #40]	; (8001c94 <SysTick_Config+0x40>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	3b01      	subs	r3, #1
 8001c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c72:	210f      	movs	r1, #15
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f7ff ff90 	bl	8001b9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <SysTick_Config+0x40>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c82:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <SysTick_Config+0x40>)
 8001c84:	2207      	movs	r2, #7
 8001c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	e000e010 	.word	0xe000e010

08001c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ff49 	bl	8001b38 <__NVIC_SetPriorityGrouping>
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}

08001cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cae:	b580      	push	{r7, lr}
 8001cb0:	b086      	sub	sp, #24
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	60b9      	str	r1, [r7, #8]
 8001cb8:	607a      	str	r2, [r7, #4]
 8001cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cc0:	f7ff ff5e 	bl	8001b80 <__NVIC_GetPriorityGrouping>
 8001cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	68b9      	ldr	r1, [r7, #8]
 8001cca:	6978      	ldr	r0, [r7, #20]
 8001ccc:	f7ff ff90 	bl	8001bf0 <NVIC_EncodePriority>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cd6:	4611      	mov	r1, r2
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff5f 	bl	8001b9c <__NVIC_SetPriority>
}
 8001cde:	bf00      	nop
 8001ce0:	3718      	adds	r7, #24
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ce6:	b580      	push	{r7, lr}
 8001ce8:	b082      	sub	sp, #8
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffb0 	bl	8001c54 <SysTick_Config>
 8001cf4:	4603      	mov	r3, r0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b08b      	sub	sp, #44	; 0x2c
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d12:	e127      	b.n	8001f64 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d14:	2201      	movs	r2, #1
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	69fa      	ldr	r2, [r7, #28]
 8001d24:	4013      	ands	r3, r2
 8001d26:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	f040 8116 	bne.w	8001f5e <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b12      	cmp	r3, #18
 8001d38:	d034      	beq.n	8001da4 <HAL_GPIO_Init+0xa4>
 8001d3a:	2b12      	cmp	r3, #18
 8001d3c:	d80d      	bhi.n	8001d5a <HAL_GPIO_Init+0x5a>
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d02b      	beq.n	8001d9a <HAL_GPIO_Init+0x9a>
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	d804      	bhi.n	8001d50 <HAL_GPIO_Init+0x50>
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d031      	beq.n	8001dae <HAL_GPIO_Init+0xae>
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d01c      	beq.n	8001d88 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d4e:	e048      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d50:	2b03      	cmp	r3, #3
 8001d52:	d043      	beq.n	8001ddc <HAL_GPIO_Init+0xdc>
 8001d54:	2b11      	cmp	r3, #17
 8001d56:	d01b      	beq.n	8001d90 <HAL_GPIO_Init+0x90>
          break;
 8001d58:	e043      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d5a:	4a89      	ldr	r2, [pc, #548]	; (8001f80 <HAL_GPIO_Init+0x280>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d026      	beq.n	8001dae <HAL_GPIO_Init+0xae>
 8001d60:	4a87      	ldr	r2, [pc, #540]	; (8001f80 <HAL_GPIO_Init+0x280>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d806      	bhi.n	8001d74 <HAL_GPIO_Init+0x74>
 8001d66:	4a87      	ldr	r2, [pc, #540]	; (8001f84 <HAL_GPIO_Init+0x284>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d020      	beq.n	8001dae <HAL_GPIO_Init+0xae>
 8001d6c:	4a86      	ldr	r2, [pc, #536]	; (8001f88 <HAL_GPIO_Init+0x288>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d01d      	beq.n	8001dae <HAL_GPIO_Init+0xae>
          break;
 8001d72:	e036      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001d74:	4a85      	ldr	r2, [pc, #532]	; (8001f8c <HAL_GPIO_Init+0x28c>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d019      	beq.n	8001dae <HAL_GPIO_Init+0xae>
 8001d7a:	4a85      	ldr	r2, [pc, #532]	; (8001f90 <HAL_GPIO_Init+0x290>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d016      	beq.n	8001dae <HAL_GPIO_Init+0xae>
 8001d80:	4a84      	ldr	r2, [pc, #528]	; (8001f94 <HAL_GPIO_Init+0x294>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0xae>
          break;
 8001d86:	e02c      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e028      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	3304      	adds	r3, #4
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	e023      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	623b      	str	r3, [r7, #32]
          break;
 8001da2:	e01e      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	330c      	adds	r3, #12
 8001daa:	623b      	str	r3, [r7, #32]
          break;
 8001dac:	e019      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001db6:	2304      	movs	r3, #4
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e012      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	611a      	str	r2, [r3, #16]
          break;
 8001dce:	e008      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	615a      	str	r2, [r3, #20]
          break;
 8001dda:	e002      	b.n	8001de2 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	2bff      	cmp	r3, #255	; 0xff
 8001de6:	d801      	bhi.n	8001dec <HAL_GPIO_Init+0xec>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	e001      	b.n	8001df0 <HAL_GPIO_Init+0xf0>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3304      	adds	r3, #4
 8001df0:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	2bff      	cmp	r3, #255	; 0xff
 8001df6:	d802      	bhi.n	8001dfe <HAL_GPIO_Init+0xfe>
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_Init+0x104>
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	3b08      	subs	r3, #8
 8001e02:	009b      	lsls	r3, r3, #2
 8001e04:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	401a      	ands	r2, r3
 8001e16:	6a39      	ldr	r1, [r7, #32]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8096 	beq.w	8001f5e <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e32:	4b59      	ldr	r3, [pc, #356]	; (8001f98 <HAL_GPIO_Init+0x298>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	4a58      	ldr	r2, [pc, #352]	; (8001f98 <HAL_GPIO_Init+0x298>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6193      	str	r3, [r2, #24]
 8001e3e:	4b56      	ldr	r3, [pc, #344]	; (8001f98 <HAL_GPIO_Init+0x298>)
 8001e40:	699b      	ldr	r3, [r3, #24]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e4a:	4a54      	ldr	r2, [pc, #336]	; (8001f9c <HAL_GPIO_Init+0x29c>)
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	089b      	lsrs	r3, r3, #2
 8001e50:	3302      	adds	r3, #2
 8001e52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e56:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	f003 0303 	and.w	r3, r3, #3
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	220f      	movs	r2, #15
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	43db      	mvns	r3, r3
 8001e68:	68fa      	ldr	r2, [r7, #12]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a4b      	ldr	r2, [pc, #300]	; (8001fa0 <HAL_GPIO_Init+0x2a0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d013      	beq.n	8001e9e <HAL_GPIO_Init+0x19e>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a4a      	ldr	r2, [pc, #296]	; (8001fa4 <HAL_GPIO_Init+0x2a4>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d00d      	beq.n	8001e9a <HAL_GPIO_Init+0x19a>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a49      	ldr	r2, [pc, #292]	; (8001fa8 <HAL_GPIO_Init+0x2a8>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d007      	beq.n	8001e96 <HAL_GPIO_Init+0x196>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a48      	ldr	r2, [pc, #288]	; (8001fac <HAL_GPIO_Init+0x2ac>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_GPIO_Init+0x192>
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x1a0>
 8001e92:	2304      	movs	r3, #4
 8001e94:	e004      	b.n	8001ea0 <HAL_GPIO_Init+0x1a0>
 8001e96:	2302      	movs	r3, #2
 8001e98:	e002      	b.n	8001ea0 <HAL_GPIO_Init+0x1a0>
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <HAL_GPIO_Init+0x1a0>
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ea2:	f002 0203 	and.w	r2, r2, #3
 8001ea6:	0092      	lsls	r2, r2, #2
 8001ea8:	4093      	lsls	r3, r2
 8001eaa:	68fa      	ldr	r2, [r7, #12]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eb0:	493a      	ldr	r1, [pc, #232]	; (8001f9c <HAL_GPIO_Init+0x29c>)
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	089b      	lsrs	r3, r3, #2
 8001eb6:	3302      	adds	r3, #2
 8001eb8:	68fa      	ldr	r2, [r7, #12]
 8001eba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d006      	beq.n	8001ed8 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eca:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	4938      	ldr	r1, [pc, #224]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
 8001ed6:	e006      	b.n	8001ee6 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ed8:	4b35      	ldr	r3, [pc, #212]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	4933      	ldr	r1, [pc, #204]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ef2:	4b2f      	ldr	r3, [pc, #188]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	492e      	ldr	r1, [pc, #184]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
 8001efe:	e006      	b.n	8001f0e <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f00:	4b2b      	ldr	r3, [pc, #172]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	4929      	ldr	r1, [pc, #164]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d006      	beq.n	8001f28 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f1a:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	4924      	ldr	r1, [pc, #144]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	4313      	orrs	r3, r2
 8001f24:	608b      	str	r3, [r1, #8]
 8001f26:	e006      	b.n	8001f36 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	491f      	ldr	r1, [pc, #124]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	491a      	ldr	r1, [pc, #104]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f48:	69bb      	ldr	r3, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60cb      	str	r3, [r1, #12]
 8001f4e:	e006      	b.n	8001f5e <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f50:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	4915      	ldr	r1, [pc, #84]	; (8001fb0 <HAL_GPIO_Init+0x2b0>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f60:	3301      	adds	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f47f aed0 	bne.w	8001d14 <HAL_GPIO_Init+0x14>
  }
}
 8001f74:	bf00      	nop
 8001f76:	372c      	adds	r7, #44	; 0x2c
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	10210000 	.word	0x10210000
 8001f84:	10110000 	.word	0x10110000
 8001f88:	10120000 	.word	0x10120000
 8001f8c:	10310000 	.word	0x10310000
 8001f90:	10320000 	.word	0x10320000
 8001f94:	10220000 	.word	0x10220000
 8001f98:	40021000 	.word	0x40021000
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40010800 	.word	0x40010800
 8001fa4:	40010c00 	.word	0x40010c00
 8001fa8:	40011000 	.word	0x40011000
 8001fac:	40011400 	.word	0x40011400
 8001fb0:	40010400 	.word	0x40010400

08001fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	807b      	strh	r3, [r7, #2]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fc4:	787b      	ldrb	r3, [r7, #1]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d003      	beq.n	8001fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fca:	887a      	ldrh	r2, [r7, #2]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fd0:	e003      	b.n	8001fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fd2:	887b      	ldrh	r3, [r7, #2]
 8001fd4:	041a      	lsls	r2, r3, #16
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	611a      	str	r2, [r3, #16]
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bc80      	pop	{r7}
 8001fe2:	4770      	bx	lr

08001fe4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	887b      	ldrh	r3, [r7, #2]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ffc:	887a      	ldrh	r2, [r7, #2]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8002002:	e002      	b.n	800200a <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002004:	887a      	ldrh	r2, [r7, #2]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	611a      	str	r2, [r3, #16]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr

08002014 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e10f      	b.n	8002246 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f7ff fb72 	bl	8001724 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2224      	movs	r2, #36	; 0x24
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f022 0201 	bic.w	r2, r2, #1
 8002056:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002058:	f000 fe54 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 800205c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4a7b      	ldr	r2, [pc, #492]	; (8002250 <HAL_I2C_Init+0x23c>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d807      	bhi.n	8002078 <HAL_I2C_Init+0x64>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4a7a      	ldr	r2, [pc, #488]	; (8002254 <HAL_I2C_Init+0x240>)
 800206c:	4293      	cmp	r3, r2
 800206e:	bf94      	ite	ls
 8002070:	2301      	movls	r3, #1
 8002072:	2300      	movhi	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e006      	b.n	8002086 <HAL_I2C_Init+0x72>
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4a77      	ldr	r2, [pc, #476]	; (8002258 <HAL_I2C_Init+0x244>)
 800207c:	4293      	cmp	r3, r2
 800207e:	bf94      	ite	ls
 8002080:	2301      	movls	r3, #1
 8002082:	2300      	movhi	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e0db      	b.n	8002246 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4a72      	ldr	r2, [pc, #456]	; (800225c <HAL_I2C_Init+0x248>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0c9b      	lsrs	r3, r3, #18
 8002098:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68ba      	ldr	r2, [r7, #8]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	4a64      	ldr	r2, [pc, #400]	; (8002250 <HAL_I2C_Init+0x23c>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d802      	bhi.n	80020c8 <HAL_I2C_Init+0xb4>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3301      	adds	r3, #1
 80020c6:	e009      	b.n	80020dc <HAL_I2C_Init+0xc8>
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80020ce:	fb02 f303 	mul.w	r3, r2, r3
 80020d2:	4a63      	ldr	r2, [pc, #396]	; (8002260 <HAL_I2C_Init+0x24c>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	099b      	lsrs	r3, r3, #6
 80020da:	3301      	adds	r3, #1
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	430b      	orrs	r3, r1
 80020e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	69db      	ldr	r3, [r3, #28]
 80020ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80020ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	4956      	ldr	r1, [pc, #344]	; (8002250 <HAL_I2C_Init+0x23c>)
 80020f8:	428b      	cmp	r3, r1
 80020fa:	d80d      	bhi.n	8002118 <HAL_I2C_Init+0x104>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e59      	subs	r1, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	fbb1 f3f3 	udiv	r3, r1, r3
 800210a:	3301      	adds	r3, #1
 800210c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002110:	2b04      	cmp	r3, #4
 8002112:	bf38      	it	cc
 8002114:	2304      	movcc	r3, #4
 8002116:	e04f      	b.n	80021b8 <HAL_I2C_Init+0x1a4>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d111      	bne.n	8002144 <HAL_I2C_Init+0x130>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	1e58      	subs	r0, r3, #1
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6859      	ldr	r1, [r3, #4]
 8002128:	460b      	mov	r3, r1
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	440b      	add	r3, r1
 800212e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002132:	3301      	adds	r3, #1
 8002134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002138:	2b00      	cmp	r3, #0
 800213a:	bf0c      	ite	eq
 800213c:	2301      	moveq	r3, #1
 800213e:	2300      	movne	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e012      	b.n	800216a <HAL_I2C_Init+0x156>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	1e58      	subs	r0, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6859      	ldr	r1, [r3, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	0099      	lsls	r1, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	fbb0 f3f3 	udiv	r3, r0, r3
 800215a:	3301      	adds	r3, #1
 800215c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002160:	2b00      	cmp	r3, #0
 8002162:	bf0c      	ite	eq
 8002164:	2301      	moveq	r3, #1
 8002166:	2300      	movne	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <HAL_I2C_Init+0x15e>
 800216e:	2301      	movs	r3, #1
 8002170:	e022      	b.n	80021b8 <HAL_I2C_Init+0x1a4>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10e      	bne.n	8002198 <HAL_I2C_Init+0x184>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1e58      	subs	r0, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6859      	ldr	r1, [r3, #4]
 8002182:	460b      	mov	r3, r1
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	440b      	add	r3, r1
 8002188:	fbb0 f3f3 	udiv	r3, r0, r3
 800218c:	3301      	adds	r3, #1
 800218e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002196:	e00f      	b.n	80021b8 <HAL_I2C_Init+0x1a4>
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1e58      	subs	r0, r3, #1
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6859      	ldr	r1, [r3, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	0099      	lsls	r1, r3, #2
 80021a8:	440b      	add	r3, r1
 80021aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ae:	3301      	adds	r3, #1
 80021b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	6809      	ldr	r1, [r1, #0]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69da      	ldr	r2, [r3, #28]
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	430a      	orrs	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80021e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	6911      	ldr	r1, [r2, #16]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	68d2      	ldr	r2, [r2, #12]
 80021f2:	4311      	orrs	r1, r2
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6812      	ldr	r2, [r2, #0]
 80021f8:	430b      	orrs	r3, r1
 80021fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	695a      	ldr	r2, [r3, #20]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	431a      	orrs	r2, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	430a      	orrs	r2, r1
 8002216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3710      	adds	r7, #16
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	000186a0 	.word	0x000186a0
 8002254:	001e847f 	.word	0x001e847f
 8002258:	003d08ff 	.word	0x003d08ff
 800225c:	431bde83 	.word	0x431bde83
 8002260:	10624dd3 	.word	0x10624dd3

08002264 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b08a      	sub	sp, #40	; 0x28
 8002268:	af02      	add	r7, sp, #8
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	460b      	mov	r3, r1
 8002272:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff fc34 	bl	8001ae0 <HAL_GetTick>
 8002278:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800227a:	2301      	movs	r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b20      	cmp	r3, #32
 8002288:	f040 8105 	bne.w	8002496 <HAL_I2C_IsDeviceReady+0x232>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800228c:	69fb      	ldr	r3, [r7, #28]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	2319      	movs	r3, #25
 8002292:	2201      	movs	r2, #1
 8002294:	4982      	ldr	r1, [pc, #520]	; (80024a0 <HAL_I2C_IsDeviceReady+0x23c>)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f906 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	e0f8      	b.n	8002498 <HAL_I2C_IsDeviceReady+0x234>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_I2C_IsDeviceReady+0x50>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e0f1      	b.n	8002498 <HAL_I2C_IsDeviceReady+0x234>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0301 	and.w	r3, r3, #1
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d007      	beq.n	80022da <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 0201 	orr.w	r2, r2, #1
 80022d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2224      	movs	r2, #36	; 0x24
 80022ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2200      	movs	r2, #0
 80022f6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	4a6a      	ldr	r2, [pc, #424]	; (80024a4 <HAL_I2C_IsDeviceReady+0x240>)
 80022fc:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800230c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2200      	movs	r2, #0
 8002316:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800231a:	68f8      	ldr	r0, [r7, #12]
 800231c:	f000 f8c4 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_I2C_IsDeviceReady+0xc6>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e0b6      	b.n	8002498 <HAL_I2C_IsDeviceReady+0x234>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800232a:	897b      	ldrh	r3, [r7, #10]
 800232c:	b2db      	uxtb	r3, r3
 800232e:	461a      	mov	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002338:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800233a:	f7ff fbd1 	bl	8001ae0 <HAL_GetTick>
 800233e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b02      	cmp	r3, #2
 800234c:	bf0c      	ite	eq
 800234e:	2301      	moveq	r3, #1
 8002350:	2300      	movne	r3, #0
 8002352:	b2db      	uxtb	r3, r3
 8002354:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	695b      	ldr	r3, [r3, #20]
 800235c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002360:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002364:	bf0c      	ite	eq
 8002366:	2301      	moveq	r3, #1
 8002368:	2300      	movne	r3, #0
 800236a:	b2db      	uxtb	r3, r3
 800236c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800236e:	e025      	b.n	80023bc <HAL_I2C_IsDeviceReady+0x158>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002370:	f7ff fbb6 	bl	8001ae0 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d302      	bcc.n	8002386 <HAL_I2C_IsDeviceReady+0x122>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d103      	bne.n	800238e <HAL_I2C_IsDeviceReady+0x12a>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	22a0      	movs	r2, #160	; 0xa0
 800238a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	695b      	ldr	r3, [r3, #20]
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b02      	cmp	r3, #2
 800239a:	bf0c      	ite	eq
 800239c:	2301      	moveq	r3, #1
 800239e:	2300      	movne	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2ba0      	cmp	r3, #160	; 0xa0
 80023c6:	d005      	beq.n	80023d4 <HAL_I2C_IsDeviceReady+0x170>
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d102      	bne.n	80023d4 <HAL_I2C_IsDeviceReady+0x170>
 80023ce:	7dbb      	ldrb	r3, [r7, #22]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d0cd      	beq.n	8002370 <HAL_I2C_IsDeviceReady+0x10c>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2220      	movs	r2, #32
 80023d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d129      	bne.n	800243e <HAL_I2C_IsDeviceReady+0x1da>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023f8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023fa:	2300      	movs	r3, #0
 80023fc:	613b      	str	r3, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	695b      	ldr	r3, [r3, #20]
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	699b      	ldr	r3, [r3, #24]
 800240c:	613b      	str	r3, [r7, #16]
 800240e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	2319      	movs	r3, #25
 8002416:	2201      	movs	r2, #1
 8002418:	4921      	ldr	r1, [pc, #132]	; (80024a0 <HAL_I2C_IsDeviceReady+0x23c>)
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f000 f844 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <HAL_I2C_IsDeviceReady+0x1c6>
        {
          return HAL_ERROR;
 8002426:	2301      	movs	r3, #1
 8002428:	e036      	b.n	8002498 <HAL_I2C_IsDeviceReady+0x234>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800243a:	2300      	movs	r3, #0
 800243c:	e02c      	b.n	8002498 <HAL_I2C_IsDeviceReady+0x234>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800244c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002456:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	2319      	movs	r3, #25
 800245e:	2201      	movs	r2, #1
 8002460:	490f      	ldr	r1, [pc, #60]	; (80024a0 <HAL_I2C_IsDeviceReady+0x23c>)
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 f820 	bl	80024a8 <I2C_WaitOnFlagUntilTimeout>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_I2C_IsDeviceReady+0x20e>
        {
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e012      	b.n	8002498 <HAL_I2C_IsDeviceReady+0x234>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	3301      	adds	r3, #1
 8002476:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	429a      	cmp	r2, r3
 800247e:	f4ff af3e 	bcc.w	80022fe <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	2200      	movs	r2, #0
 800248e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e000      	b.n	8002498 <HAL_I2C_IsDeviceReady+0x234>
  }
  else
  {
    return HAL_BUSY;
 8002496:	2302      	movs	r3, #2
  }
}
 8002498:	4618      	mov	r0, r3
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	00100002 	.word	0x00100002
 80024a4:	ffff0000 	.word	0xffff0000

080024a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b084      	sub	sp, #16
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	603b      	str	r3, [r7, #0]
 80024b4:	4613      	mov	r3, r2
 80024b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b8:	e025      	b.n	8002506 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024c0:	d021      	beq.n	8002506 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024c2:	f7ff fb0d 	bl	8001ae0 <HAL_GetTick>
 80024c6:	4602      	mov	r2, r0
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	683a      	ldr	r2, [r7, #0]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d302      	bcc.n	80024d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d116      	bne.n	8002506 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2200      	movs	r2, #0
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2220      	movs	r2, #32
 80024e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f043 0220 	orr.w	r2, r3, #32
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e023      	b.n	800254e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	0c1b      	lsrs	r3, r3, #16
 800250a:	b2db      	uxtb	r3, r3
 800250c:	2b01      	cmp	r3, #1
 800250e:	d10d      	bne.n	800252c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	43da      	mvns	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4013      	ands	r3, r2
 800251c:	b29b      	uxth	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	bf0c      	ite	eq
 8002522:	2301      	moveq	r3, #1
 8002524:	2300      	movne	r3, #0
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	e00c      	b.n	8002546 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	43da      	mvns	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	4013      	ands	r3, r2
 8002538:	b29b      	uxth	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	461a      	mov	r2, r3
 8002546:	79fb      	ldrb	r3, [r7, #7]
 8002548:	429a      	cmp	r2, r3
 800254a:	d0b6      	beq.n	80024ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
	...

08002558 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e26c      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 8087 	beq.w	8002686 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002578:	4b92      	ldr	r3, [pc, #584]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 030c 	and.w	r3, r3, #12
 8002580:	2b04      	cmp	r3, #4
 8002582:	d00c      	beq.n	800259e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002584:	4b8f      	ldr	r3, [pc, #572]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d112      	bne.n	80025b6 <HAL_RCC_OscConfig+0x5e>
 8002590:	4b8c      	ldr	r3, [pc, #560]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259c:	d10b      	bne.n	80025b6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800259e:	4b89      	ldr	r3, [pc, #548]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d06c      	beq.n	8002684 <HAL_RCC_OscConfig+0x12c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d168      	bne.n	8002684 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e246      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025be:	d106      	bne.n	80025ce <HAL_RCC_OscConfig+0x76>
 80025c0:	4b80      	ldr	r3, [pc, #512]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a7f      	ldr	r2, [pc, #508]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e02e      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <HAL_RCC_OscConfig+0x98>
 80025d6:	4b7b      	ldr	r3, [pc, #492]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a7a      	ldr	r2, [pc, #488]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e0:	6013      	str	r3, [r2, #0]
 80025e2:	4b78      	ldr	r3, [pc, #480]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e01d      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025f8:	d10c      	bne.n	8002614 <HAL_RCC_OscConfig+0xbc>
 80025fa:	4b72      	ldr	r3, [pc, #456]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a71      	ldr	r2, [pc, #452]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002600:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002604:	6013      	str	r3, [r2, #0]
 8002606:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6e      	ldr	r2, [pc, #440]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800260c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	e00b      	b.n	800262c <HAL_RCC_OscConfig+0xd4>
 8002614:	4b6b      	ldr	r3, [pc, #428]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a6a      	ldr	r2, [pc, #424]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800261a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b68      	ldr	r3, [pc, #416]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a67      	ldr	r2, [pc, #412]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d013      	beq.n	800265c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff fa54 	bl	8001ae0 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263c:	f7ff fa50 	bl	8001ae0 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1fa      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264e:	4b5d      	ldr	r3, [pc, #372]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0xe4>
 800265a:	e014      	b.n	8002686 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265c:	f7ff fa40 	bl	8001ae0 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7ff fa3c 	bl	8001ae0 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e1e6      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002676:	4b53      	ldr	r3, [pc, #332]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x10c>
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d063      	beq.n	800275a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002692:	4b4c      	ldr	r3, [pc, #304]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f003 030c 	and.w	r3, r3, #12
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800269e:	4b49      	ldr	r3, [pc, #292]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f003 030c 	and.w	r3, r3, #12
 80026a6:	2b08      	cmp	r3, #8
 80026a8:	d11c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x18c>
 80026aa:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d116      	bne.n	80026e4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b6:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d005      	beq.n	80026ce <HAL_RCC_OscConfig+0x176>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e1ba      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ce:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	4939      	ldr	r1, [pc, #228]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e2:	e03a      	b.n	800275a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	691b      	ldr	r3, [r3, #16]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d020      	beq.n	800272e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 80026ee:	2201      	movs	r2, #1
 80026f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f2:	f7ff f9f5 	bl	8001ae0 <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	e008      	b.n	800270c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7ff f9f1 	bl	8001ae0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d901      	bls.n	800270c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e19b      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d0f0      	beq.n	80026fa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4927      	ldr	r1, [pc, #156]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]
 800272c:	e015      	b.n	800275a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800272e:	4b26      	ldr	r3, [pc, #152]	; (80027c8 <HAL_RCC_OscConfig+0x270>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7ff f9d4 	bl	8001ae0 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800273c:	f7ff f9d0 	bl	8001ae0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e17a      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800274e:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b00      	cmp	r3, #0
 8002764:	d03a      	beq.n	80027dc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d019      	beq.n	80027a2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800276e:	4b17      	ldr	r3, [pc, #92]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 8002770:	2201      	movs	r2, #1
 8002772:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7ff f9b4 	bl	8001ae0 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800277c:	f7ff f9b0 	bl	8001ae0 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e15a      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <HAL_RCC_OscConfig+0x26c>)
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800279a:	2001      	movs	r0, #1
 800279c:	f000 fada 	bl	8002d54 <RCC_Delay>
 80027a0:	e01c      	b.n	80027dc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a2:	4b0a      	ldr	r3, [pc, #40]	; (80027cc <HAL_RCC_OscConfig+0x274>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a8:	f7ff f99a 	bl	8001ae0 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027ae:	e00f      	b.n	80027d0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7ff f996 	bl	8001ae0 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d908      	bls.n	80027d0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e140      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	42420000 	.word	0x42420000
 80027cc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027d0:	4b9e      	ldr	r3, [pc, #632]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d1e9      	bne.n	80027b0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 80a6 	beq.w	8002936 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ea:	2300      	movs	r3, #0
 80027ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ee:	4b97      	ldr	r3, [pc, #604]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10d      	bne.n	8002816 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027fa:	4b94      	ldr	r3, [pc, #592]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a93      	ldr	r2, [pc, #588]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	61d3      	str	r3, [r2, #28]
 8002806:	4b91      	ldr	r3, [pc, #580]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002812:	2301      	movs	r3, #1
 8002814:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4b8e      	ldr	r3, [pc, #568]	; (8002a50 <HAL_RCC_OscConfig+0x4f8>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d118      	bne.n	8002854 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002822:	4b8b      	ldr	r3, [pc, #556]	; (8002a50 <HAL_RCC_OscConfig+0x4f8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a8a      	ldr	r2, [pc, #552]	; (8002a50 <HAL_RCC_OscConfig+0x4f8>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282e:	f7ff f957 	bl	8001ae0 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002836:	f7ff f953 	bl	8001ae0 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	; 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0fd      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	4b81      	ldr	r3, [pc, #516]	; (8002a50 <HAL_RCC_OscConfig+0x4f8>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x312>
 800285c:	4b7b      	ldr	r3, [pc, #492]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	4a7a      	ldr	r2, [pc, #488]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6213      	str	r3, [r2, #32]
 8002868:	e02d      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0x334>
 8002872:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	4a75      	ldr	r2, [pc, #468]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002878:	f023 0301 	bic.w	r3, r3, #1
 800287c:	6213      	str	r3, [r2, #32]
 800287e:	4b73      	ldr	r3, [pc, #460]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002880:	6a1b      	ldr	r3, [r3, #32]
 8002882:	4a72      	ldr	r2, [pc, #456]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002884:	f023 0304 	bic.w	r3, r3, #4
 8002888:	6213      	str	r3, [r2, #32]
 800288a:	e01c      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	2b05      	cmp	r3, #5
 8002892:	d10c      	bne.n	80028ae <HAL_RCC_OscConfig+0x356>
 8002894:	4b6d      	ldr	r3, [pc, #436]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002896:	6a1b      	ldr	r3, [r3, #32]
 8002898:	4a6c      	ldr	r2, [pc, #432]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 800289a:	f043 0304 	orr.w	r3, r3, #4
 800289e:	6213      	str	r3, [r2, #32]
 80028a0:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	4a69      	ldr	r2, [pc, #420]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80028a6:	f043 0301 	orr.w	r3, r3, #1
 80028aa:	6213      	str	r3, [r2, #32]
 80028ac:	e00b      	b.n	80028c6 <HAL_RCC_OscConfig+0x36e>
 80028ae:	4b67      	ldr	r3, [pc, #412]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	4a66      	ldr	r2, [pc, #408]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80028b4:	f023 0301 	bic.w	r3, r3, #1
 80028b8:	6213      	str	r3, [r2, #32]
 80028ba:	4b64      	ldr	r3, [pc, #400]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	4a63      	ldr	r2, [pc, #396]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80028c0:	f023 0304 	bic.w	r3, r3, #4
 80028c4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d015      	beq.n	80028fa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ce:	f7ff f907 	bl	8001ae0 <HAL_GetTick>
 80028d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d4:	e00a      	b.n	80028ec <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d6:	f7ff f903 	bl	8001ae0 <HAL_GetTick>
 80028da:	4602      	mov	r2, r0
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	1ad3      	subs	r3, r2, r3
 80028e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e0ab      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ec:	4b57      	ldr	r3, [pc, #348]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80028ee:	6a1b      	ldr	r3, [r3, #32]
 80028f0:	f003 0302 	and.w	r3, r3, #2
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0ee      	beq.n	80028d6 <HAL_RCC_OscConfig+0x37e>
 80028f8:	e014      	b.n	8002924 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028fa:	f7ff f8f1 	bl	8001ae0 <HAL_GetTick>
 80028fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002902:	f7ff f8ed 	bl	8001ae0 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002910:	4293      	cmp	r3, r2
 8002912:	d901      	bls.n	8002918 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002914:	2303      	movs	r3, #3
 8002916:	e095      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002918:	4b4c      	ldr	r3, [pc, #304]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ee      	bne.n	8002902 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002924:	7dfb      	ldrb	r3, [r7, #23]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d105      	bne.n	8002936 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800292a:	4b48      	ldr	r3, [pc, #288]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 800292c:	69db      	ldr	r3, [r3, #28]
 800292e:	4a47      	ldr	r2, [pc, #284]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002930:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002934:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f000 8081 	beq.w	8002a42 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002940:	4b42      	ldr	r3, [pc, #264]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b08      	cmp	r3, #8
 800294a:	d061      	beq.n	8002a10 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69db      	ldr	r3, [r3, #28]
 8002950:	2b02      	cmp	r3, #2
 8002952:	d146      	bne.n	80029e2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002954:	4b3f      	ldr	r3, [pc, #252]	; (8002a54 <HAL_RCC_OscConfig+0x4fc>)
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800295a:	f7ff f8c1 	bl	8001ae0 <HAL_GetTick>
 800295e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002960:	e008      	b.n	8002974 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002962:	f7ff f8bd 	bl	8001ae0 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d901      	bls.n	8002974 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002970:	2303      	movs	r3, #3
 8002972:	e067      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002974:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f0      	bne.n	8002962 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002988:	d108      	bne.n	800299c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800298a:	4b30      	ldr	r3, [pc, #192]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	492d      	ldr	r1, [pc, #180]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800299c:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a19      	ldr	r1, [r3, #32]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	430b      	orrs	r3, r1
 80029ae:	4927      	ldr	r1, [pc, #156]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029b4:	4b27      	ldr	r3, [pc, #156]	; (8002a54 <HAL_RCC_OscConfig+0x4fc>)
 80029b6:	2201      	movs	r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ba:	f7ff f891 	bl	8001ae0 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c2:	f7ff f88d 	bl	8001ae0 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e037      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCC_OscConfig+0x46a>
 80029e0:	e02f      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e2:	4b1c      	ldr	r3, [pc, #112]	; (8002a54 <HAL_RCC_OscConfig+0x4fc>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e8:	f7ff f87a 	bl	8001ae0 <HAL_GetTick>
 80029ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f0:	f7ff f876 	bl	8001ae0 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e020      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a02:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f0      	bne.n	80029f0 <HAL_RCC_OscConfig+0x498>
 8002a0e:	e018      	b.n	8002a42 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e013      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_OscConfig+0x4f4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d106      	bne.n	8002a3e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d001      	beq.n	8002a42 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40007000 	.word	0x40007000
 8002a54:	42420060 	.word	0x42420060

08002a58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0d0      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b6a      	ldr	r3, [pc, #424]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d910      	bls.n	8002a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b67      	ldr	r3, [pc, #412]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f023 0207 	bic.w	r2, r3, #7
 8002a82:	4965      	ldr	r1, [pc, #404]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8a:	4b63      	ldr	r3, [pc, #396]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0307 	and.w	r3, r3, #7
 8002a92:	683a      	ldr	r2, [r7, #0]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d001      	beq.n	8002a9c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0b8      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d020      	beq.n	8002aea <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0304 	and.w	r3, r3, #4
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d005      	beq.n	8002ac0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ab4:	4b59      	ldr	r3, [pc, #356]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a58      	ldr	r2, [pc, #352]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002aba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002abe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d005      	beq.n	8002ad8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002acc:	4b53      	ldr	r3, [pc, #332]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4a52      	ldr	r2, [pc, #328]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002ad6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad8:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	494d      	ldr	r1, [pc, #308]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d040      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d107      	bne.n	8002b0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002afe:	4b47      	ldr	r3, [pc, #284]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d115      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e07f      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b41      	ldr	r3, [pc, #260]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e073      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b3d      	ldr	r3, [pc, #244]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e06b      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b39      	ldr	r3, [pc, #228]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4936      	ldr	r1, [pc, #216]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7fe ffca 	bl	8001ae0 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7fe ffc6 	bl	8001ae0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e053      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b2d      	ldr	r3, [pc, #180]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b27      	ldr	r3, [pc, #156]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0307 	and.w	r3, r3, #7
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d210      	bcs.n	8002ba8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b24      	ldr	r3, [pc, #144]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 0207 	bic.w	r2, r3, #7
 8002b8e:	4922      	ldr	r1, [pc, #136]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b96:	4b20      	ldr	r3, [pc, #128]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d001      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e032      	b.n	8002c0e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d008      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bb4:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	4916      	ldr	r1, [pc, #88]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d009      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	490e      	ldr	r1, [pc, #56]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002be6:	f000 f821 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bea:	4601      	mov	r1, r0
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf8:	5cd3      	ldrb	r3, [r2, r3]
 8002bfa:	fa21 f303 	lsr.w	r3, r1, r3
 8002bfe:	4a09      	ldr	r2, [pc, #36]	; (8002c24 <HAL_RCC_ClockConfig+0x1cc>)
 8002c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_ClockConfig+0x1d0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe ff28 	bl	8001a5c <HAL_InitTick>

  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	40022000 	.word	0x40022000
 8002c1c:	40021000 	.word	0x40021000
 8002c20:	080049d4 	.word	0x080049d4
 8002c24:	20000008 	.word	0x20000008
 8002c28:	2000000c 	.word	0x2000000c

08002c2c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	b490      	push	{r4, r7}
 8002c2e:	b08a      	sub	sp, #40	; 0x28
 8002c30:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002c32:	4b2a      	ldr	r3, [pc, #168]	; (8002cdc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c34:	1d3c      	adds	r4, r7, #4
 8002c36:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c38:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002c3c:	4b28      	ldr	r3, [pc, #160]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002c4e:	2300      	movs	r3, #0
 8002c50:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c56:	4b23      	ldr	r3, [pc, #140]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f003 030c 	and.w	r3, r3, #12
 8002c62:	2b04      	cmp	r3, #4
 8002c64:	d002      	beq.n	8002c6c <HAL_RCC_GetSysClockFreq+0x40>
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0x46>
 8002c6a:	e02d      	b.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c6e:	623b      	str	r3, [r7, #32]
      break;
 8002c70:	e02d      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	0c9b      	lsrs	r3, r3, #18
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c7e:	4413      	add	r3, r2
 8002c80:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002c84:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d013      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c90:	4b14      	ldr	r3, [pc, #80]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	0c5b      	lsrs	r3, r3, #17
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002c9e:	4413      	add	r3, r2
 8002ca0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002ca4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	4a0f      	ldr	r2, [pc, #60]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002caa:	fb02 f203 	mul.w	r2, r2, r3
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cb6:	e004      	b.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	4a0c      	ldr	r2, [pc, #48]	; (8002cec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cbc:	fb02 f303 	mul.w	r3, r2, r3
 8002cc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc4:	623b      	str	r3, [r7, #32]
      break;
 8002cc6:	e002      	b.n	8002cce <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002cca:	623b      	str	r3, [r7, #32]
      break;
 8002ccc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cce:	6a3b      	ldr	r3, [r7, #32]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3728      	adds	r7, #40	; 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc90      	pop	{r4, r7}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	080049c0 	.word	0x080049c0
 8002ce0:	080049d0 	.word	0x080049d0
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	007a1200 	.word	0x007a1200
 8002cec:	003d0900 	.word	0x003d0900

08002cf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cf4:	4b02      	ldr	r3, [pc, #8]	; (8002d00 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bc80      	pop	{r7}
 8002cfe:	4770      	bx	lr
 8002d00:	20000008 	.word	0x20000008

08002d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d08:	f7ff fff2 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4601      	mov	r1, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	0a1b      	lsrs	r3, r3, #8
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4a03      	ldr	r2, [pc, #12]	; (8002d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d1a:	5cd3      	ldrb	r3, [r2, r3]
 8002d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40021000 	.word	0x40021000
 8002d28:	080049e4 	.word	0x080049e4

08002d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d30:	f7ff ffde 	bl	8002cf0 <HAL_RCC_GetHCLKFreq>
 8002d34:	4601      	mov	r1, r0
 8002d36:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	0adb      	lsrs	r3, r3, #11
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	4a03      	ldr	r2, [pc, #12]	; (8002d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d42:	5cd3      	ldrb	r3, [r2, r3]
 8002d44:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40021000 	.word	0x40021000
 8002d50:	080049e4 	.word	0x080049e4

08002d54 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d5c:	4b0a      	ldr	r3, [pc, #40]	; (8002d88 <RCC_Delay+0x34>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <RCC_Delay+0x38>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	0a5b      	lsrs	r3, r3, #9
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d70:	bf00      	nop
  }
  while (Delay --);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	1e5a      	subs	r2, r3, #1
 8002d76:	60fa      	str	r2, [r7, #12]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f9      	bne.n	8002d70 <RCC_Delay+0x1c>
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bc80      	pop	{r7}
 8002d84:	4770      	bx	lr
 8002d86:	bf00      	nop
 8002d88:	20000008 	.word	0x20000008
 8002d8c:	10624dd3 	.word	0x10624dd3

08002d90 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d101      	bne.n	8002da2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e053      	b.n	8002e4a <HAL_SPI_Init+0xba>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d106      	bne.n	8002dc2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7fe fcf1 	bl	80017a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002dd8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	431a      	orrs	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	431a      	orrs	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	695b      	ldr	r3, [r3, #20]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	431a      	orrs	r2, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	ea42 0103 	orr.w	r1, r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	430a      	orrs	r2, r1
 8002e18:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	0c1a      	lsrs	r2, r3, #16
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f002 0204 	and.w	r2, r2, #4
 8002e28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	69da      	ldr	r2, [r3, #28]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b088      	sub	sp, #32
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	603b      	str	r3, [r7, #0]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_SPI_Transmit+0x22>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e11e      	b.n	80030b2 <HAL_SPI_Transmit+0x260>
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e7c:	f7fe fe30 	bl	8001ae0 <HAL_GetTick>
 8002e80:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e82:	88fb      	ldrh	r3, [r7, #6]
 8002e84:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d002      	beq.n	8002e98 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
 8002e94:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e96:	e103      	b.n	80030a0 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d002      	beq.n	8002ea4 <HAL_SPI_Transmit+0x52>
 8002e9e:	88fb      	ldrh	r3, [r7, #6]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d102      	bne.n	8002eaa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ea8:	e0fa      	b.n	80030a0 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2203      	movs	r2, #3
 8002eae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	88fa      	ldrh	r2, [r7, #6]
 8002ec2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	88fa      	ldrh	r2, [r7, #6]
 8002ec8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ef0:	d107      	bne.n	8002f02 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f00:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0c:	2b40      	cmp	r3, #64	; 0x40
 8002f0e:	d007      	beq.n	8002f20 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f28:	d14b      	bne.n	8002fc2 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <HAL_SPI_Transmit+0xe6>
 8002f32:	8afb      	ldrh	r3, [r7, #22]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d13e      	bne.n	8002fb6 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3c:	881a      	ldrh	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f48:	1c9a      	adds	r2, r3, #2
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f5c:	e02b      	b.n	8002fb6 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d112      	bne.n	8002f92 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7c:	1c9a      	adds	r2, r3, #2
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29a      	uxth	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	86da      	strh	r2, [r3, #54]	; 0x36
 8002f90:	e011      	b.n	8002fb6 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f92:	f7fe fda5 	bl	8001ae0 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d803      	bhi.n	8002faa <HAL_SPI_Transmit+0x158>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa8:	d102      	bne.n	8002fb0 <HAL_SPI_Transmit+0x15e>
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fb4:	e074      	b.n	80030a0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ce      	bne.n	8002f5e <HAL_SPI_Transmit+0x10c>
 8002fc0:	e04c      	b.n	800305c <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_Transmit+0x17e>
 8002fca:	8afb      	ldrh	r3, [r7, #22]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d140      	bne.n	8003052 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ff6:	e02c      	b.n	8003052 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d113      	bne.n	800302e <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	330c      	adds	r3, #12
 8003010:	7812      	ldrb	r2, [r2, #0]
 8003012:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	86da      	strh	r2, [r3, #54]	; 0x36
 800302c:	e011      	b.n	8003052 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302e:	f7fe fd57 	bl	8001ae0 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d803      	bhi.n	8003046 <HAL_SPI_Transmit+0x1f4>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d102      	bne.n	800304c <HAL_SPI_Transmit+0x1fa>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d102      	bne.n	8003052 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003050:	e026      	b.n	80030a0 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003056:	b29b      	uxth	r3, r3
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1cd      	bne.n	8002ff8 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800305c:	69ba      	ldr	r2, [r7, #24]
 800305e:	6839      	ldr	r1, [r7, #0]
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fb91 	bl	8003788 <SPI_EndRxTxTransaction>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2220      	movs	r2, #32
 8003070:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10a      	bne.n	8003090 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800307a:	2300      	movs	r3, #0
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003094:	2b00      	cmp	r3, #0
 8003096:	d002      	beq.n	800309e <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	77fb      	strb	r3, [r7, #31]
 800309c:	e000      	b.n	80030a0 <HAL_SPI_Transmit+0x24e>
  }

error:
 800309e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80030b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3720      	adds	r7, #32
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b088      	sub	sp, #32
 80030be:	af02      	add	r7, sp, #8
 80030c0:	60f8      	str	r0, [r7, #12]
 80030c2:	60b9      	str	r1, [r7, #8]
 80030c4:	603b      	str	r3, [r7, #0]
 80030c6:	4613      	mov	r3, r2
 80030c8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030d6:	d112      	bne.n	80030fe <HAL_SPI_Receive+0x44>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10e      	bne.n	80030fe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2204      	movs	r2, #4
 80030e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030e8:	88fa      	ldrh	r2, [r7, #6]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f000 f8e9 	bl	80032cc <HAL_SPI_TransmitReceive>
 80030fa:	4603      	mov	r3, r0
 80030fc:	e0e2      	b.n	80032c4 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_SPI_Receive+0x52>
 8003108:	2302      	movs	r3, #2
 800310a:	e0db      	b.n	80032c4 <HAL_SPI_Receive+0x20a>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003114:	f7fe fce4 	bl	8001ae0 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b01      	cmp	r3, #1
 8003124:	d002      	beq.n	800312c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003126:	2302      	movs	r3, #2
 8003128:	75fb      	strb	r3, [r7, #23]
    goto error;
 800312a:	e0c2      	b.n	80032b2 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d002      	beq.n	8003138 <HAL_SPI_Receive+0x7e>
 8003132:	88fb      	ldrh	r3, [r7, #6]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d102      	bne.n	800313e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800313c:	e0b9      	b.n	80032b2 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2204      	movs	r2, #4
 8003142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	88fa      	ldrh	r2, [r7, #6]
 8003156:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	88fa      	ldrh	r2, [r7, #6]
 800315c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003184:	d107      	bne.n	8003196 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003194:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a0:	2b40      	cmp	r3, #64	; 0x40
 80031a2:	d007      	beq.n	80031b4 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d162      	bne.n	8003282 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80031bc:	e02e      	b.n	800321c <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d115      	bne.n	80031f8 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f103 020c 	add.w	r2, r3, #12
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	7812      	ldrb	r2, [r2, #0]
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	1c5a      	adds	r2, r3, #1
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031f6:	e011      	b.n	800321c <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031f8:	f7fe fc72 	bl	8001ae0 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d803      	bhi.n	8003210 <HAL_SPI_Receive+0x156>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800320e:	d102      	bne.n	8003216 <HAL_SPI_Receive+0x15c>
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	75fb      	strb	r3, [r7, #23]
          goto error;
 800321a:	e04a      	b.n	80032b2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003220:	b29b      	uxth	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1cb      	bne.n	80031be <HAL_SPI_Receive+0x104>
 8003226:	e031      	b.n	800328c <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d113      	bne.n	800325e <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003240:	b292      	uxth	r2, r2
 8003242:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	1c9a      	adds	r2, r3, #2
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003252:	b29b      	uxth	r3, r3
 8003254:	3b01      	subs	r3, #1
 8003256:	b29a      	uxth	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800325c:	e011      	b.n	8003282 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800325e:	f7fe fc3f 	bl	8001ae0 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d803      	bhi.n	8003276 <HAL_SPI_Receive+0x1bc>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d102      	bne.n	800327c <HAL_SPI_Receive+0x1c2>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d102      	bne.n	8003282 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003280:	e017      	b.n	80032b2 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003286:	b29b      	uxth	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1cd      	bne.n	8003228 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	6839      	ldr	r1, [r7, #0]
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 fa27 	bl	80036e4 <SPI_EndRxTransaction>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d002      	beq.n	80032a2 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	75fb      	strb	r3, [r7, #23]
 80032ae:	e000      	b.n	80032b2 <HAL_SPI_Receive+0x1f8>
  }

error :
 80032b0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80032c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}

080032cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08c      	sub	sp, #48	; 0x30
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032da:	2301      	movs	r3, #1
 80032dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032de:	2300      	movs	r3, #0
 80032e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d101      	bne.n	80032f2 <HAL_SPI_TransmitReceive+0x26>
 80032ee:	2302      	movs	r3, #2
 80032f0:	e18a      	b.n	8003608 <HAL_SPI_TransmitReceive+0x33c>
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032fa:	f7fe fbf1 	bl	8001ae0 <HAL_GetTick>
 80032fe:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003310:	887b      	ldrh	r3, [r7, #2]
 8003312:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003318:	2b01      	cmp	r3, #1
 800331a:	d00f      	beq.n	800333c <HAL_SPI_TransmitReceive+0x70>
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003322:	d107      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x68>
 800332c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003330:	2b04      	cmp	r3, #4
 8003332:	d003      	beq.n	800333c <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003334:	2302      	movs	r3, #2
 8003336:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800333a:	e15b      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d005      	beq.n	800334e <HAL_SPI_TransmitReceive+0x82>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_SPI_TransmitReceive+0x82>
 8003348:	887b      	ldrh	r3, [r7, #2]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d103      	bne.n	8003356 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003354:	e14e      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800335c:	b2db      	uxtb	r3, r3
 800335e:	2b04      	cmp	r3, #4
 8003360:	d003      	beq.n	800336a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2205      	movs	r2, #5
 8003366:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	887a      	ldrh	r2, [r7, #2]
 800337a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	68ba      	ldr	r2, [r7, #8]
 8003386:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	887a      	ldrh	r2, [r7, #2]
 8003392:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033aa:	2b40      	cmp	r3, #64	; 0x40
 80033ac:	d007      	beq.n	80033be <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033bc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033c6:	d178      	bne.n	80034ba <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_SPI_TransmitReceive+0x10a>
 80033d0:	8b7b      	ldrh	r3, [r7, #26]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d166      	bne.n	80034a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033da:	881a      	ldrh	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	1c9a      	adds	r2, r3, #2
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033fa:	e053      	b.n	80034a4 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b02      	cmp	r3, #2
 8003408:	d11b      	bne.n	8003442 <HAL_SPI_TransmitReceive+0x176>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	d016      	beq.n	8003442 <HAL_SPI_TransmitReceive+0x176>
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003416:	2b01      	cmp	r3, #1
 8003418:	d113      	bne.n	8003442 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	881a      	ldrh	r2, [r3, #0]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342a:	1c9a      	adds	r2, r3, #2
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b01      	cmp	r3, #1
 800344e:	d119      	bne.n	8003484 <HAL_SPI_TransmitReceive+0x1b8>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d014      	beq.n	8003484 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	68da      	ldr	r2, [r3, #12]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003464:	b292      	uxth	r2, r2
 8003466:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800346c:	1c9a      	adds	r2, r3, #2
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003480:	2301      	movs	r3, #1
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003484:	f7fe fb2c 	bl	8001ae0 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003490:	429a      	cmp	r2, r3
 8003492:	d807      	bhi.n	80034a4 <HAL_SPI_TransmitReceive+0x1d8>
 8003494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003496:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349a:	d003      	beq.n	80034a4 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80034a2:	e0a7      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1a6      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x130>
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1a1      	bne.n	80033fc <HAL_SPI_TransmitReceive+0x130>
 80034b8:	e07c      	b.n	80035b4 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d002      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0x1fc>
 80034c2:	8b7b      	ldrh	r3, [r7, #26]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d16b      	bne.n	80035a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	330c      	adds	r3, #12
 80034d2:	7812      	ldrb	r2, [r2, #0]
 80034d4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034da:	1c5a      	adds	r2, r3, #1
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	3b01      	subs	r3, #1
 80034e8:	b29a      	uxth	r2, r3
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ee:	e057      	b.n	80035a0 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d11c      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x26c>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d017      	beq.n	8003538 <HAL_SPI_TransmitReceive+0x26c>
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	2b01      	cmp	r3, #1
 800350c:	d114      	bne.n	8003538 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	330c      	adds	r3, #12
 8003518:	7812      	ldrb	r2, [r2, #0]
 800351a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800352a:	b29b      	uxth	r3, r3
 800352c:	3b01      	subs	r3, #1
 800352e:	b29a      	uxth	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003534:	2300      	movs	r3, #0
 8003536:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d119      	bne.n	800357a <HAL_SPI_TransmitReceive+0x2ae>
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d014      	beq.n	800357a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	68da      	ldr	r2, [r3, #12]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	b2d2      	uxtb	r2, r2
 800355c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003576:	2301      	movs	r3, #1
 8003578:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800357a:	f7fe fab1 	bl	8001ae0 <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003586:	429a      	cmp	r2, r3
 8003588:	d803      	bhi.n	8003592 <HAL_SPI_TransmitReceive+0x2c6>
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003590:	d102      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x2cc>
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	2b00      	cmp	r3, #0
 8003596:	d103      	bne.n	80035a0 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800359e:	e029      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1a2      	bne.n	80034f0 <HAL_SPI_TransmitReceive+0x224>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035ae:	b29b      	uxth	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d19d      	bne.n	80034f0 <HAL_SPI_TransmitReceive+0x224>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f000 f8e5 	bl	8003788 <SPI_EndRxTxTransaction>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d006      	beq.n	80035d2 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2220      	movs	r2, #32
 80035ce:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80035d0:	e010      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d10b      	bne.n	80035f2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	617b      	str	r3, [r7, #20]
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	e000      	b.n	80035f4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80035f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003604:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003608:	4618      	mov	r0, r3
 800360a:	3730      	adds	r7, #48	; 0x30
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	4613      	mov	r3, r2
 800361e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003620:	e04c      	b.n	80036bc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003628:	d048      	beq.n	80036bc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800362a:	f7fe fa59 	bl	8001ae0 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d902      	bls.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x30>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d13d      	bne.n	80036bc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800364e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003658:	d111      	bne.n	800367e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003662:	d004      	beq.n	800366e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800366c:	d107      	bne.n	800367e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800367c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003686:	d10f      	bne.n	80036a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003696:	601a      	str	r2, [r3, #0]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e00f      	b.n	80036dc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689a      	ldr	r2, [r3, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	4013      	ands	r3, r2
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	429a      	cmp	r2, r3
 80036ca:	bf0c      	ite	eq
 80036cc:	2301      	moveq	r3, #1
 80036ce:	2300      	movne	r3, #0
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	461a      	mov	r2, r3
 80036d4:	79fb      	ldrb	r3, [r7, #7]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d1a3      	bne.n	8003622 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3710      	adds	r7, #16
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af02      	add	r7, sp, #8
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036f8:	d111      	bne.n	800371e <SPI_EndRxTransaction+0x3a>
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003702:	d004      	beq.n	800370e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800370c:	d107      	bne.n	800371e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800371c:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003726:	d117      	bne.n	8003758 <SPI_EndRxTransaction+0x74>
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003730:	d112      	bne.n	8003758 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	9300      	str	r3, [sp, #0]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	2200      	movs	r2, #0
 800373a:	2101      	movs	r1, #1
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f7ff ff67 	bl	8003610 <SPI_WaitFlagStateUntilTimeout>
 8003742:	4603      	mov	r3, r0
 8003744:	2b00      	cmp	r3, #0
 8003746:	d01a      	beq.n	800377e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800374c:	f043 0220 	orr.w	r2, r3, #32
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e013      	b.n	8003780 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	2200      	movs	r2, #0
 8003760:	2180      	movs	r1, #128	; 0x80
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f7ff ff54 	bl	8003610 <SPI_WaitFlagStateUntilTimeout>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d007      	beq.n	800377e <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	f043 0220 	orr.w	r2, r3, #32
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e000      	b.n	8003780 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2200      	movs	r2, #0
 800379c:	2180      	movs	r1, #128	; 0x80
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f7ff ff36 	bl	8003610 <SPI_WaitFlagStateUntilTimeout>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d007      	beq.n	80037ba <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	f043 0220 	orr.w	r2, r3, #32
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e000      	b.n	80037bc <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3710      	adds	r7, #16
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d101      	bne.n	80037d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e03f      	b.n	8003856 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d106      	bne.n	80037f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f7fe f824 	bl	8001838 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2224      	movs	r2, #36	; 0x24
 80037f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68da      	ldr	r2, [r3, #12]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003806:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 f90b 	bl	8003a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691a      	ldr	r2, [r3, #16]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800381c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	695a      	ldr	r2, [r3, #20]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800382c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	68da      	ldr	r2, [r3, #12]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800383c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003854:	2300      	movs	r3, #0
}
 8003856:	4618      	mov	r0, r3
 8003858:	3708      	adds	r7, #8
 800385a:	46bd      	mov	sp, r7
 800385c:	bd80      	pop	{r7, pc}

0800385e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800385e:	b580      	push	{r7, lr}
 8003860:	b088      	sub	sp, #32
 8003862:	af02      	add	r7, sp, #8
 8003864:	60f8      	str	r0, [r7, #12]
 8003866:	60b9      	str	r1, [r7, #8]
 8003868:	603b      	str	r3, [r7, #0]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	f040 8083 	bne.w	8003986 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d002      	beq.n	800388c <HAL_UART_Transmit+0x2e>
 8003886:	88fb      	ldrh	r3, [r7, #6]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e07b      	b.n	8003988 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003896:	2b01      	cmp	r3, #1
 8003898:	d101      	bne.n	800389e <HAL_UART_Transmit+0x40>
 800389a:	2302      	movs	r3, #2
 800389c:	e074      	b.n	8003988 <HAL_UART_Transmit+0x12a>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2221      	movs	r2, #33	; 0x21
 80038b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 80038b4:	f7fe f914 	bl	8001ae0 <HAL_GetTick>
 80038b8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	88fa      	ldrh	r2, [r7, #6]
 80038be:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	88fa      	ldrh	r2, [r7, #6]
 80038c4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80038c6:	e042      	b.n	800394e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80038cc:	b29b      	uxth	r3, r3
 80038ce:	3b01      	subs	r3, #1
 80038d0:	b29a      	uxth	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038de:	d122      	bne.n	8003926 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2200      	movs	r2, #0
 80038e8:	2180      	movs	r1, #128	; 0x80
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 f850 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e046      	b.n	8003988 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	881b      	ldrh	r3, [r3, #0]
 8003902:	461a      	mov	r2, r3
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800390c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	691b      	ldr	r3, [r3, #16]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	3302      	adds	r3, #2
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	e017      	b.n	800394e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3301      	adds	r3, #1
 8003922:	60bb      	str	r3, [r7, #8]
 8003924:	e013      	b.n	800394e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2200      	movs	r2, #0
 800392e:	2180      	movs	r1, #128	; 0x80
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f000 f82d 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	e023      	b.n	8003988 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	60ba      	str	r2, [r7, #8]
 8003946:	781a      	ldrb	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003952:	b29b      	uxth	r3, r3
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1b7      	bne.n	80038c8 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2200      	movs	r2, #0
 8003960:	2140      	movs	r1, #64	; 0x40
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f814 	bl	8003990 <UART_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e00a      	b.n	8003988 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8003982:	2300      	movs	r3, #0
 8003984:	e000      	b.n	8003988 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003986:	2302      	movs	r3, #2
  }
}
 8003988:	4618      	mov	r0, r3
 800398a:	3718      	adds	r7, #24
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}

08003990 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	603b      	str	r3, [r7, #0]
 800399c:	4613      	mov	r3, r2
 800399e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a0:	e02c      	b.n	80039fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a8:	d028      	beq.n	80039fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d007      	beq.n	80039c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80039b0:	f7fe f896 	bl	8001ae0 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d21d      	bcs.n	80039fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80039ce:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0201 	bic.w	r2, r2, #1
 80039de:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e00f      	b.n	8003a1c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	4013      	ands	r3, r2
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	bf0c      	ite	eq
 8003a0c:	2301      	moveq	r3, #1
 8003a0e:	2300      	movne	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d0c3      	beq.n	80039a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3710      	adds	r7, #16
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	431a      	orrs	r2, r3
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003a5e:	f023 030c 	bic.w	r3, r3, #12
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	6812      	ldr	r2, [r2, #0]
 8003a66:	68f9      	ldr	r1, [r7, #12]
 8003a68:	430b      	orrs	r3, r1
 8003a6a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699a      	ldr	r2, [r3, #24]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a52      	ldr	r2, [pc, #328]	; (8003bd0 <UART_SetConfig+0x1ac>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d14e      	bne.n	8003b2a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a8c:	f7ff f94e 	bl	8002d2c <HAL_RCC_GetPCLK2Freq>
 8003a90:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	4613      	mov	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	009a      	lsls	r2, r3, #2
 8003a9c:	441a      	add	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa8:	4a4a      	ldr	r2, [pc, #296]	; (8003bd4 <UART_SetConfig+0x1b0>)
 8003aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	0119      	lsls	r1, r3, #4
 8003ab2:	68ba      	ldr	r2, [r7, #8]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	009a      	lsls	r2, r3, #2
 8003abc:	441a      	add	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ac8:	4b42      	ldr	r3, [pc, #264]	; (8003bd4 <UART_SetConfig+0x1b0>)
 8003aca:	fba3 0302 	umull	r0, r3, r3, r2
 8003ace:	095b      	lsrs	r3, r3, #5
 8003ad0:	2064      	movs	r0, #100	; 0x64
 8003ad2:	fb00 f303 	mul.w	r3, r0, r3
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	3332      	adds	r3, #50	; 0x32
 8003adc:	4a3d      	ldr	r2, [pc, #244]	; (8003bd4 <UART_SetConfig+0x1b0>)
 8003ade:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae2:	095b      	lsrs	r3, r3, #5
 8003ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae8:	4419      	add	r1, r3
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	4613      	mov	r3, r2
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	4413      	add	r3, r2
 8003af2:	009a      	lsls	r2, r3, #2
 8003af4:	441a      	add	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b00:	4b34      	ldr	r3, [pc, #208]	; (8003bd4 <UART_SetConfig+0x1b0>)
 8003b02:	fba3 0302 	umull	r0, r3, r3, r2
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	2064      	movs	r0, #100	; 0x64
 8003b0a:	fb00 f303 	mul.w	r3, r0, r3
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	3332      	adds	r3, #50	; 0x32
 8003b14:	4a2f      	ldr	r2, [pc, #188]	; (8003bd4 <UART_SetConfig+0x1b0>)
 8003b16:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	f003 020f 	and.w	r2, r3, #15
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	440a      	add	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8003b28:	e04d      	b.n	8003bc6 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b2a:	f7ff f8eb 	bl	8002d04 <HAL_RCC_GetPCLK1Freq>
 8003b2e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	009a      	lsls	r2, r3, #2
 8003b3a:	441a      	add	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b46:	4a23      	ldr	r2, [pc, #140]	; (8003bd4 <UART_SetConfig+0x1b0>)
 8003b48:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4c:	095b      	lsrs	r3, r3, #5
 8003b4e:	0119      	lsls	r1, r3, #4
 8003b50:	68ba      	ldr	r2, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4413      	add	r3, r2
 8003b58:	009a      	lsls	r2, r3, #2
 8003b5a:	441a      	add	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	009b      	lsls	r3, r3, #2
 8003b62:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b66:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <UART_SetConfig+0x1b0>)
 8003b68:	fba3 0302 	umull	r0, r3, r3, r2
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	2064      	movs	r0, #100	; 0x64
 8003b70:	fb00 f303 	mul.w	r3, r0, r3
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	011b      	lsls	r3, r3, #4
 8003b78:	3332      	adds	r3, #50	; 0x32
 8003b7a:	4a16      	ldr	r2, [pc, #88]	; (8003bd4 <UART_SetConfig+0x1b0>)
 8003b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b80:	095b      	lsrs	r3, r3, #5
 8003b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b86:	4419      	add	r1, r3
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	009a      	lsls	r2, r3, #2
 8003b92:	441a      	add	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <UART_SetConfig+0x1b0>)
 8003ba0:	fba3 0302 	umull	r0, r3, r3, r2
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	2064      	movs	r0, #100	; 0x64
 8003ba8:	fb00 f303 	mul.w	r3, r0, r3
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	3332      	adds	r3, #50	; 0x32
 8003bb2:	4a08      	ldr	r2, [pc, #32]	; (8003bd4 <UART_SetConfig+0x1b0>)
 8003bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb8:	095b      	lsrs	r3, r3, #5
 8003bba:	f003 020f 	and.w	r2, r3, #15
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	440a      	add	r2, r1
 8003bc4:	609a      	str	r2, [r3, #8]
}
 8003bc6:	bf00      	nop
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40013800 	.word	0x40013800
 8003bd4:	51eb851f 	.word	0x51eb851f

08003bd8 <__errno>:
 8003bd8:	4b01      	ldr	r3, [pc, #4]	; (8003be0 <__errno+0x8>)
 8003bda:	6818      	ldr	r0, [r3, #0]
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000014 	.word	0x20000014

08003be4 <__libc_init_array>:
 8003be4:	b570      	push	{r4, r5, r6, lr}
 8003be6:	2500      	movs	r5, #0
 8003be8:	4e0c      	ldr	r6, [pc, #48]	; (8003c1c <__libc_init_array+0x38>)
 8003bea:	4c0d      	ldr	r4, [pc, #52]	; (8003c20 <__libc_init_array+0x3c>)
 8003bec:	1ba4      	subs	r4, r4, r6
 8003bee:	10a4      	asrs	r4, r4, #2
 8003bf0:	42a5      	cmp	r5, r4
 8003bf2:	d109      	bne.n	8003c08 <__libc_init_array+0x24>
 8003bf4:	f000 fc36 	bl	8004464 <_init>
 8003bf8:	2500      	movs	r5, #0
 8003bfa:	4e0a      	ldr	r6, [pc, #40]	; (8003c24 <__libc_init_array+0x40>)
 8003bfc:	4c0a      	ldr	r4, [pc, #40]	; (8003c28 <__libc_init_array+0x44>)
 8003bfe:	1ba4      	subs	r4, r4, r6
 8003c00:	10a4      	asrs	r4, r4, #2
 8003c02:	42a5      	cmp	r5, r4
 8003c04:	d105      	bne.n	8003c12 <__libc_init_array+0x2e>
 8003c06:	bd70      	pop	{r4, r5, r6, pc}
 8003c08:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c0c:	4798      	blx	r3
 8003c0e:	3501      	adds	r5, #1
 8003c10:	e7ee      	b.n	8003bf0 <__libc_init_array+0xc>
 8003c12:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003c16:	4798      	blx	r3
 8003c18:	3501      	adds	r5, #1
 8003c1a:	e7f2      	b.n	8003c02 <__libc_init_array+0x1e>
 8003c1c:	08004a20 	.word	0x08004a20
 8003c20:	08004a20 	.word	0x08004a20
 8003c24:	08004a20 	.word	0x08004a20
 8003c28:	08004a24 	.word	0x08004a24

08003c2c <memcpy>:
 8003c2c:	b510      	push	{r4, lr}
 8003c2e:	1e43      	subs	r3, r0, #1
 8003c30:	440a      	add	r2, r1
 8003c32:	4291      	cmp	r1, r2
 8003c34:	d100      	bne.n	8003c38 <memcpy+0xc>
 8003c36:	bd10      	pop	{r4, pc}
 8003c38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003c3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003c40:	e7f7      	b.n	8003c32 <memcpy+0x6>

08003c42 <memset>:
 8003c42:	4603      	mov	r3, r0
 8003c44:	4402      	add	r2, r0
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d100      	bne.n	8003c4c <memset+0xa>
 8003c4a:	4770      	bx	lr
 8003c4c:	f803 1b01 	strb.w	r1, [r3], #1
 8003c50:	e7f9      	b.n	8003c46 <memset+0x4>
	...

08003c54 <siprintf>:
 8003c54:	b40e      	push	{r1, r2, r3}
 8003c56:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c5a:	b500      	push	{lr}
 8003c5c:	b09c      	sub	sp, #112	; 0x70
 8003c5e:	ab1d      	add	r3, sp, #116	; 0x74
 8003c60:	9002      	str	r0, [sp, #8]
 8003c62:	9006      	str	r0, [sp, #24]
 8003c64:	9107      	str	r1, [sp, #28]
 8003c66:	9104      	str	r1, [sp, #16]
 8003c68:	4808      	ldr	r0, [pc, #32]	; (8003c8c <siprintf+0x38>)
 8003c6a:	4909      	ldr	r1, [pc, #36]	; (8003c90 <siprintf+0x3c>)
 8003c6c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c70:	9105      	str	r1, [sp, #20]
 8003c72:	6800      	ldr	r0, [r0, #0]
 8003c74:	a902      	add	r1, sp, #8
 8003c76:	9301      	str	r3, [sp, #4]
 8003c78:	f000 f866 	bl	8003d48 <_svfiprintf_r>
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	9b02      	ldr	r3, [sp, #8]
 8003c80:	701a      	strb	r2, [r3, #0]
 8003c82:	b01c      	add	sp, #112	; 0x70
 8003c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c88:	b003      	add	sp, #12
 8003c8a:	4770      	bx	lr
 8003c8c:	20000014 	.word	0x20000014
 8003c90:	ffff0208 	.word	0xffff0208

08003c94 <__ssputs_r>:
 8003c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c98:	688e      	ldr	r6, [r1, #8]
 8003c9a:	4682      	mov	sl, r0
 8003c9c:	429e      	cmp	r6, r3
 8003c9e:	460c      	mov	r4, r1
 8003ca0:	4690      	mov	r8, r2
 8003ca2:	4699      	mov	r9, r3
 8003ca4:	d837      	bhi.n	8003d16 <__ssputs_r+0x82>
 8003ca6:	898a      	ldrh	r2, [r1, #12]
 8003ca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003cac:	d031      	beq.n	8003d12 <__ssputs_r+0x7e>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	6825      	ldr	r5, [r4, #0]
 8003cb2:	6909      	ldr	r1, [r1, #16]
 8003cb4:	1a6f      	subs	r7, r5, r1
 8003cb6:	6965      	ldr	r5, [r4, #20]
 8003cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003cbc:	fb95 f5f3 	sdiv	r5, r5, r3
 8003cc0:	f109 0301 	add.w	r3, r9, #1
 8003cc4:	443b      	add	r3, r7
 8003cc6:	429d      	cmp	r5, r3
 8003cc8:	bf38      	it	cc
 8003cca:	461d      	movcc	r5, r3
 8003ccc:	0553      	lsls	r3, r2, #21
 8003cce:	d530      	bpl.n	8003d32 <__ssputs_r+0x9e>
 8003cd0:	4629      	mov	r1, r5
 8003cd2:	f000 fb2d 	bl	8004330 <_malloc_r>
 8003cd6:	4606      	mov	r6, r0
 8003cd8:	b950      	cbnz	r0, 8003cf0 <__ssputs_r+0x5c>
 8003cda:	230c      	movs	r3, #12
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	f8ca 3000 	str.w	r3, [sl]
 8003ce4:	89a3      	ldrh	r3, [r4, #12]
 8003ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cea:	81a3      	strh	r3, [r4, #12]
 8003cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf0:	463a      	mov	r2, r7
 8003cf2:	6921      	ldr	r1, [r4, #16]
 8003cf4:	f7ff ff9a 	bl	8003c2c <memcpy>
 8003cf8:	89a3      	ldrh	r3, [r4, #12]
 8003cfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d02:	81a3      	strh	r3, [r4, #12]
 8003d04:	6126      	str	r6, [r4, #16]
 8003d06:	443e      	add	r6, r7
 8003d08:	6026      	str	r6, [r4, #0]
 8003d0a:	464e      	mov	r6, r9
 8003d0c:	6165      	str	r5, [r4, #20]
 8003d0e:	1bed      	subs	r5, r5, r7
 8003d10:	60a5      	str	r5, [r4, #8]
 8003d12:	454e      	cmp	r6, r9
 8003d14:	d900      	bls.n	8003d18 <__ssputs_r+0x84>
 8003d16:	464e      	mov	r6, r9
 8003d18:	4632      	mov	r2, r6
 8003d1a:	4641      	mov	r1, r8
 8003d1c:	6820      	ldr	r0, [r4, #0]
 8003d1e:	f000 faa1 	bl	8004264 <memmove>
 8003d22:	68a3      	ldr	r3, [r4, #8]
 8003d24:	2000      	movs	r0, #0
 8003d26:	1b9b      	subs	r3, r3, r6
 8003d28:	60a3      	str	r3, [r4, #8]
 8003d2a:	6823      	ldr	r3, [r4, #0]
 8003d2c:	441e      	add	r6, r3
 8003d2e:	6026      	str	r6, [r4, #0]
 8003d30:	e7dc      	b.n	8003cec <__ssputs_r+0x58>
 8003d32:	462a      	mov	r2, r5
 8003d34:	f000 fb56 	bl	80043e4 <_realloc_r>
 8003d38:	4606      	mov	r6, r0
 8003d3a:	2800      	cmp	r0, #0
 8003d3c:	d1e2      	bne.n	8003d04 <__ssputs_r+0x70>
 8003d3e:	6921      	ldr	r1, [r4, #16]
 8003d40:	4650      	mov	r0, sl
 8003d42:	f000 faa9 	bl	8004298 <_free_r>
 8003d46:	e7c8      	b.n	8003cda <__ssputs_r+0x46>

08003d48 <_svfiprintf_r>:
 8003d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d4c:	461d      	mov	r5, r3
 8003d4e:	898b      	ldrh	r3, [r1, #12]
 8003d50:	b09d      	sub	sp, #116	; 0x74
 8003d52:	061f      	lsls	r7, r3, #24
 8003d54:	4680      	mov	r8, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	4616      	mov	r6, r2
 8003d5a:	d50f      	bpl.n	8003d7c <_svfiprintf_r+0x34>
 8003d5c:	690b      	ldr	r3, [r1, #16]
 8003d5e:	b96b      	cbnz	r3, 8003d7c <_svfiprintf_r+0x34>
 8003d60:	2140      	movs	r1, #64	; 0x40
 8003d62:	f000 fae5 	bl	8004330 <_malloc_r>
 8003d66:	6020      	str	r0, [r4, #0]
 8003d68:	6120      	str	r0, [r4, #16]
 8003d6a:	b928      	cbnz	r0, 8003d78 <_svfiprintf_r+0x30>
 8003d6c:	230c      	movs	r3, #12
 8003d6e:	f8c8 3000 	str.w	r3, [r8]
 8003d72:	f04f 30ff 	mov.w	r0, #4294967295
 8003d76:	e0c8      	b.n	8003f0a <_svfiprintf_r+0x1c2>
 8003d78:	2340      	movs	r3, #64	; 0x40
 8003d7a:	6163      	str	r3, [r4, #20]
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d80:	2320      	movs	r3, #32
 8003d82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003d86:	2330      	movs	r3, #48	; 0x30
 8003d88:	f04f 0b01 	mov.w	fp, #1
 8003d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003d90:	9503      	str	r5, [sp, #12]
 8003d92:	4637      	mov	r7, r6
 8003d94:	463d      	mov	r5, r7
 8003d96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003d9a:	b10b      	cbz	r3, 8003da0 <_svfiprintf_r+0x58>
 8003d9c:	2b25      	cmp	r3, #37	; 0x25
 8003d9e:	d13e      	bne.n	8003e1e <_svfiprintf_r+0xd6>
 8003da0:	ebb7 0a06 	subs.w	sl, r7, r6
 8003da4:	d00b      	beq.n	8003dbe <_svfiprintf_r+0x76>
 8003da6:	4653      	mov	r3, sl
 8003da8:	4632      	mov	r2, r6
 8003daa:	4621      	mov	r1, r4
 8003dac:	4640      	mov	r0, r8
 8003dae:	f7ff ff71 	bl	8003c94 <__ssputs_r>
 8003db2:	3001      	adds	r0, #1
 8003db4:	f000 80a4 	beq.w	8003f00 <_svfiprintf_r+0x1b8>
 8003db8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003dba:	4453      	add	r3, sl
 8003dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8003dbe:	783b      	ldrb	r3, [r7, #0]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 809d 	beq.w	8003f00 <_svfiprintf_r+0x1b8>
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dcc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003dd0:	9304      	str	r3, [sp, #16]
 8003dd2:	9307      	str	r3, [sp, #28]
 8003dd4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003dd8:	931a      	str	r3, [sp, #104]	; 0x68
 8003dda:	462f      	mov	r7, r5
 8003ddc:	2205      	movs	r2, #5
 8003dde:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003de2:	4850      	ldr	r0, [pc, #320]	; (8003f24 <_svfiprintf_r+0x1dc>)
 8003de4:	f000 fa30 	bl	8004248 <memchr>
 8003de8:	9b04      	ldr	r3, [sp, #16]
 8003dea:	b9d0      	cbnz	r0, 8003e22 <_svfiprintf_r+0xda>
 8003dec:	06d9      	lsls	r1, r3, #27
 8003dee:	bf44      	itt	mi
 8003df0:	2220      	movmi	r2, #32
 8003df2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003df6:	071a      	lsls	r2, r3, #28
 8003df8:	bf44      	itt	mi
 8003dfa:	222b      	movmi	r2, #43	; 0x2b
 8003dfc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003e00:	782a      	ldrb	r2, [r5, #0]
 8003e02:	2a2a      	cmp	r2, #42	; 0x2a
 8003e04:	d015      	beq.n	8003e32 <_svfiprintf_r+0xea>
 8003e06:	462f      	mov	r7, r5
 8003e08:	2000      	movs	r0, #0
 8003e0a:	250a      	movs	r5, #10
 8003e0c:	9a07      	ldr	r2, [sp, #28]
 8003e0e:	4639      	mov	r1, r7
 8003e10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e14:	3b30      	subs	r3, #48	; 0x30
 8003e16:	2b09      	cmp	r3, #9
 8003e18:	d94d      	bls.n	8003eb6 <_svfiprintf_r+0x16e>
 8003e1a:	b1b8      	cbz	r0, 8003e4c <_svfiprintf_r+0x104>
 8003e1c:	e00f      	b.n	8003e3e <_svfiprintf_r+0xf6>
 8003e1e:	462f      	mov	r7, r5
 8003e20:	e7b8      	b.n	8003d94 <_svfiprintf_r+0x4c>
 8003e22:	4a40      	ldr	r2, [pc, #256]	; (8003f24 <_svfiprintf_r+0x1dc>)
 8003e24:	463d      	mov	r5, r7
 8003e26:	1a80      	subs	r0, r0, r2
 8003e28:	fa0b f000 	lsl.w	r0, fp, r0
 8003e2c:	4318      	orrs	r0, r3
 8003e2e:	9004      	str	r0, [sp, #16]
 8003e30:	e7d3      	b.n	8003dda <_svfiprintf_r+0x92>
 8003e32:	9a03      	ldr	r2, [sp, #12]
 8003e34:	1d11      	adds	r1, r2, #4
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	9103      	str	r1, [sp, #12]
 8003e3a:	2a00      	cmp	r2, #0
 8003e3c:	db01      	blt.n	8003e42 <_svfiprintf_r+0xfa>
 8003e3e:	9207      	str	r2, [sp, #28]
 8003e40:	e004      	b.n	8003e4c <_svfiprintf_r+0x104>
 8003e42:	4252      	negs	r2, r2
 8003e44:	f043 0302 	orr.w	r3, r3, #2
 8003e48:	9207      	str	r2, [sp, #28]
 8003e4a:	9304      	str	r3, [sp, #16]
 8003e4c:	783b      	ldrb	r3, [r7, #0]
 8003e4e:	2b2e      	cmp	r3, #46	; 0x2e
 8003e50:	d10c      	bne.n	8003e6c <_svfiprintf_r+0x124>
 8003e52:	787b      	ldrb	r3, [r7, #1]
 8003e54:	2b2a      	cmp	r3, #42	; 0x2a
 8003e56:	d133      	bne.n	8003ec0 <_svfiprintf_r+0x178>
 8003e58:	9b03      	ldr	r3, [sp, #12]
 8003e5a:	3702      	adds	r7, #2
 8003e5c:	1d1a      	adds	r2, r3, #4
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	9203      	str	r2, [sp, #12]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	bfb8      	it	lt
 8003e66:	f04f 33ff 	movlt.w	r3, #4294967295
 8003e6a:	9305      	str	r3, [sp, #20]
 8003e6c:	4d2e      	ldr	r5, [pc, #184]	; (8003f28 <_svfiprintf_r+0x1e0>)
 8003e6e:	2203      	movs	r2, #3
 8003e70:	7839      	ldrb	r1, [r7, #0]
 8003e72:	4628      	mov	r0, r5
 8003e74:	f000 f9e8 	bl	8004248 <memchr>
 8003e78:	b138      	cbz	r0, 8003e8a <_svfiprintf_r+0x142>
 8003e7a:	2340      	movs	r3, #64	; 0x40
 8003e7c:	1b40      	subs	r0, r0, r5
 8003e7e:	fa03 f000 	lsl.w	r0, r3, r0
 8003e82:	9b04      	ldr	r3, [sp, #16]
 8003e84:	3701      	adds	r7, #1
 8003e86:	4303      	orrs	r3, r0
 8003e88:	9304      	str	r3, [sp, #16]
 8003e8a:	7839      	ldrb	r1, [r7, #0]
 8003e8c:	2206      	movs	r2, #6
 8003e8e:	4827      	ldr	r0, [pc, #156]	; (8003f2c <_svfiprintf_r+0x1e4>)
 8003e90:	1c7e      	adds	r6, r7, #1
 8003e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003e96:	f000 f9d7 	bl	8004248 <memchr>
 8003e9a:	2800      	cmp	r0, #0
 8003e9c:	d038      	beq.n	8003f10 <_svfiprintf_r+0x1c8>
 8003e9e:	4b24      	ldr	r3, [pc, #144]	; (8003f30 <_svfiprintf_r+0x1e8>)
 8003ea0:	bb13      	cbnz	r3, 8003ee8 <_svfiprintf_r+0x1a0>
 8003ea2:	9b03      	ldr	r3, [sp, #12]
 8003ea4:	3307      	adds	r3, #7
 8003ea6:	f023 0307 	bic.w	r3, r3, #7
 8003eaa:	3308      	adds	r3, #8
 8003eac:	9303      	str	r3, [sp, #12]
 8003eae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003eb0:	444b      	add	r3, r9
 8003eb2:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb4:	e76d      	b.n	8003d92 <_svfiprintf_r+0x4a>
 8003eb6:	fb05 3202 	mla	r2, r5, r2, r3
 8003eba:	2001      	movs	r0, #1
 8003ebc:	460f      	mov	r7, r1
 8003ebe:	e7a6      	b.n	8003e0e <_svfiprintf_r+0xc6>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	250a      	movs	r5, #10
 8003ec4:	4619      	mov	r1, r3
 8003ec6:	3701      	adds	r7, #1
 8003ec8:	9305      	str	r3, [sp, #20]
 8003eca:	4638      	mov	r0, r7
 8003ecc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003ed0:	3a30      	subs	r2, #48	; 0x30
 8003ed2:	2a09      	cmp	r2, #9
 8003ed4:	d903      	bls.n	8003ede <_svfiprintf_r+0x196>
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d0c8      	beq.n	8003e6c <_svfiprintf_r+0x124>
 8003eda:	9105      	str	r1, [sp, #20]
 8003edc:	e7c6      	b.n	8003e6c <_svfiprintf_r+0x124>
 8003ede:	fb05 2101 	mla	r1, r5, r1, r2
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	4607      	mov	r7, r0
 8003ee6:	e7f0      	b.n	8003eca <_svfiprintf_r+0x182>
 8003ee8:	ab03      	add	r3, sp, #12
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	4622      	mov	r2, r4
 8003eee:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <_svfiprintf_r+0x1ec>)
 8003ef0:	a904      	add	r1, sp, #16
 8003ef2:	4640      	mov	r0, r8
 8003ef4:	f3af 8000 	nop.w
 8003ef8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003efc:	4681      	mov	r9, r0
 8003efe:	d1d6      	bne.n	8003eae <_svfiprintf_r+0x166>
 8003f00:	89a3      	ldrh	r3, [r4, #12]
 8003f02:	065b      	lsls	r3, r3, #25
 8003f04:	f53f af35 	bmi.w	8003d72 <_svfiprintf_r+0x2a>
 8003f08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003f0a:	b01d      	add	sp, #116	; 0x74
 8003f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f10:	ab03      	add	r3, sp, #12
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	4622      	mov	r2, r4
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <_svfiprintf_r+0x1ec>)
 8003f18:	a904      	add	r1, sp, #16
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	f000 f882 	bl	8004024 <_printf_i>
 8003f20:	e7ea      	b.n	8003ef8 <_svfiprintf_r+0x1b0>
 8003f22:	bf00      	nop
 8003f24:	080049ec 	.word	0x080049ec
 8003f28:	080049f2 	.word	0x080049f2
 8003f2c:	080049f6 	.word	0x080049f6
 8003f30:	00000000 	.word	0x00000000
 8003f34:	08003c95 	.word	0x08003c95

08003f38 <_printf_common>:
 8003f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003f3c:	4691      	mov	r9, r2
 8003f3e:	461f      	mov	r7, r3
 8003f40:	688a      	ldr	r2, [r1, #8]
 8003f42:	690b      	ldr	r3, [r1, #16]
 8003f44:	4606      	mov	r6, r0
 8003f46:	4293      	cmp	r3, r2
 8003f48:	bfb8      	it	lt
 8003f4a:	4613      	movlt	r3, r2
 8003f4c:	f8c9 3000 	str.w	r3, [r9]
 8003f50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003f54:	460c      	mov	r4, r1
 8003f56:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f5a:	b112      	cbz	r2, 8003f62 <_printf_common+0x2a>
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f8c9 3000 	str.w	r3, [r9]
 8003f62:	6823      	ldr	r3, [r4, #0]
 8003f64:	0699      	lsls	r1, r3, #26
 8003f66:	bf42      	ittt	mi
 8003f68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003f6c:	3302      	addmi	r3, #2
 8003f6e:	f8c9 3000 	strmi.w	r3, [r9]
 8003f72:	6825      	ldr	r5, [r4, #0]
 8003f74:	f015 0506 	ands.w	r5, r5, #6
 8003f78:	d107      	bne.n	8003f8a <_printf_common+0x52>
 8003f7a:	f104 0a19 	add.w	sl, r4, #25
 8003f7e:	68e3      	ldr	r3, [r4, #12]
 8003f80:	f8d9 2000 	ldr.w	r2, [r9]
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	42ab      	cmp	r3, r5
 8003f88:	dc29      	bgt.n	8003fde <_printf_common+0xa6>
 8003f8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003f8e:	6822      	ldr	r2, [r4, #0]
 8003f90:	3300      	adds	r3, #0
 8003f92:	bf18      	it	ne
 8003f94:	2301      	movne	r3, #1
 8003f96:	0692      	lsls	r2, r2, #26
 8003f98:	d42e      	bmi.n	8003ff8 <_printf_common+0xc0>
 8003f9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f9e:	4639      	mov	r1, r7
 8003fa0:	4630      	mov	r0, r6
 8003fa2:	47c0      	blx	r8
 8003fa4:	3001      	adds	r0, #1
 8003fa6:	d021      	beq.n	8003fec <_printf_common+0xb4>
 8003fa8:	6823      	ldr	r3, [r4, #0]
 8003faa:	68e5      	ldr	r5, [r4, #12]
 8003fac:	f003 0306 	and.w	r3, r3, #6
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	bf18      	it	ne
 8003fb4:	2500      	movne	r5, #0
 8003fb6:	f8d9 2000 	ldr.w	r2, [r9]
 8003fba:	f04f 0900 	mov.w	r9, #0
 8003fbe:	bf08      	it	eq
 8003fc0:	1aad      	subeq	r5, r5, r2
 8003fc2:	68a3      	ldr	r3, [r4, #8]
 8003fc4:	6922      	ldr	r2, [r4, #16]
 8003fc6:	bf08      	it	eq
 8003fc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	bfc4      	itt	gt
 8003fd0:	1a9b      	subgt	r3, r3, r2
 8003fd2:	18ed      	addgt	r5, r5, r3
 8003fd4:	341a      	adds	r4, #26
 8003fd6:	454d      	cmp	r5, r9
 8003fd8:	d11a      	bne.n	8004010 <_printf_common+0xd8>
 8003fda:	2000      	movs	r0, #0
 8003fdc:	e008      	b.n	8003ff0 <_printf_common+0xb8>
 8003fde:	2301      	movs	r3, #1
 8003fe0:	4652      	mov	r2, sl
 8003fe2:	4639      	mov	r1, r7
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	47c0      	blx	r8
 8003fe8:	3001      	adds	r0, #1
 8003fea:	d103      	bne.n	8003ff4 <_printf_common+0xbc>
 8003fec:	f04f 30ff 	mov.w	r0, #4294967295
 8003ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ff4:	3501      	adds	r5, #1
 8003ff6:	e7c2      	b.n	8003f7e <_printf_common+0x46>
 8003ff8:	2030      	movs	r0, #48	; 0x30
 8003ffa:	18e1      	adds	r1, r4, r3
 8003ffc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004006:	4422      	add	r2, r4
 8004008:	3302      	adds	r3, #2
 800400a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800400e:	e7c4      	b.n	8003f9a <_printf_common+0x62>
 8004010:	2301      	movs	r3, #1
 8004012:	4622      	mov	r2, r4
 8004014:	4639      	mov	r1, r7
 8004016:	4630      	mov	r0, r6
 8004018:	47c0      	blx	r8
 800401a:	3001      	adds	r0, #1
 800401c:	d0e6      	beq.n	8003fec <_printf_common+0xb4>
 800401e:	f109 0901 	add.w	r9, r9, #1
 8004022:	e7d8      	b.n	8003fd6 <_printf_common+0x9e>

08004024 <_printf_i>:
 8004024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004028:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800402c:	460c      	mov	r4, r1
 800402e:	7e09      	ldrb	r1, [r1, #24]
 8004030:	b085      	sub	sp, #20
 8004032:	296e      	cmp	r1, #110	; 0x6e
 8004034:	4617      	mov	r7, r2
 8004036:	4606      	mov	r6, r0
 8004038:	4698      	mov	r8, r3
 800403a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800403c:	f000 80b3 	beq.w	80041a6 <_printf_i+0x182>
 8004040:	d822      	bhi.n	8004088 <_printf_i+0x64>
 8004042:	2963      	cmp	r1, #99	; 0x63
 8004044:	d036      	beq.n	80040b4 <_printf_i+0x90>
 8004046:	d80a      	bhi.n	800405e <_printf_i+0x3a>
 8004048:	2900      	cmp	r1, #0
 800404a:	f000 80b9 	beq.w	80041c0 <_printf_i+0x19c>
 800404e:	2958      	cmp	r1, #88	; 0x58
 8004050:	f000 8083 	beq.w	800415a <_printf_i+0x136>
 8004054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004058:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800405c:	e032      	b.n	80040c4 <_printf_i+0xa0>
 800405e:	2964      	cmp	r1, #100	; 0x64
 8004060:	d001      	beq.n	8004066 <_printf_i+0x42>
 8004062:	2969      	cmp	r1, #105	; 0x69
 8004064:	d1f6      	bne.n	8004054 <_printf_i+0x30>
 8004066:	6820      	ldr	r0, [r4, #0]
 8004068:	6813      	ldr	r3, [r2, #0]
 800406a:	0605      	lsls	r5, r0, #24
 800406c:	f103 0104 	add.w	r1, r3, #4
 8004070:	d52a      	bpl.n	80040c8 <_printf_i+0xa4>
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6011      	str	r1, [r2, #0]
 8004076:	2b00      	cmp	r3, #0
 8004078:	da03      	bge.n	8004082 <_printf_i+0x5e>
 800407a:	222d      	movs	r2, #45	; 0x2d
 800407c:	425b      	negs	r3, r3
 800407e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004082:	486f      	ldr	r0, [pc, #444]	; (8004240 <_printf_i+0x21c>)
 8004084:	220a      	movs	r2, #10
 8004086:	e039      	b.n	80040fc <_printf_i+0xd8>
 8004088:	2973      	cmp	r1, #115	; 0x73
 800408a:	f000 809d 	beq.w	80041c8 <_printf_i+0x1a4>
 800408e:	d808      	bhi.n	80040a2 <_printf_i+0x7e>
 8004090:	296f      	cmp	r1, #111	; 0x6f
 8004092:	d020      	beq.n	80040d6 <_printf_i+0xb2>
 8004094:	2970      	cmp	r1, #112	; 0x70
 8004096:	d1dd      	bne.n	8004054 <_printf_i+0x30>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	f043 0320 	orr.w	r3, r3, #32
 800409e:	6023      	str	r3, [r4, #0]
 80040a0:	e003      	b.n	80040aa <_printf_i+0x86>
 80040a2:	2975      	cmp	r1, #117	; 0x75
 80040a4:	d017      	beq.n	80040d6 <_printf_i+0xb2>
 80040a6:	2978      	cmp	r1, #120	; 0x78
 80040a8:	d1d4      	bne.n	8004054 <_printf_i+0x30>
 80040aa:	2378      	movs	r3, #120	; 0x78
 80040ac:	4865      	ldr	r0, [pc, #404]	; (8004244 <_printf_i+0x220>)
 80040ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80040b2:	e055      	b.n	8004160 <_printf_i+0x13c>
 80040b4:	6813      	ldr	r3, [r2, #0]
 80040b6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80040ba:	1d19      	adds	r1, r3, #4
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6011      	str	r1, [r2, #0]
 80040c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80040c4:	2301      	movs	r3, #1
 80040c6:	e08c      	b.n	80041e2 <_printf_i+0x1be>
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f010 0f40 	tst.w	r0, #64	; 0x40
 80040ce:	6011      	str	r1, [r2, #0]
 80040d0:	bf18      	it	ne
 80040d2:	b21b      	sxthne	r3, r3
 80040d4:	e7cf      	b.n	8004076 <_printf_i+0x52>
 80040d6:	6813      	ldr	r3, [r2, #0]
 80040d8:	6825      	ldr	r5, [r4, #0]
 80040da:	1d18      	adds	r0, r3, #4
 80040dc:	6010      	str	r0, [r2, #0]
 80040de:	0628      	lsls	r0, r5, #24
 80040e0:	d501      	bpl.n	80040e6 <_printf_i+0xc2>
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	e002      	b.n	80040ec <_printf_i+0xc8>
 80040e6:	0668      	lsls	r0, r5, #25
 80040e8:	d5fb      	bpl.n	80040e2 <_printf_i+0xbe>
 80040ea:	881b      	ldrh	r3, [r3, #0]
 80040ec:	296f      	cmp	r1, #111	; 0x6f
 80040ee:	bf14      	ite	ne
 80040f0:	220a      	movne	r2, #10
 80040f2:	2208      	moveq	r2, #8
 80040f4:	4852      	ldr	r0, [pc, #328]	; (8004240 <_printf_i+0x21c>)
 80040f6:	2100      	movs	r1, #0
 80040f8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040fc:	6865      	ldr	r5, [r4, #4]
 80040fe:	2d00      	cmp	r5, #0
 8004100:	60a5      	str	r5, [r4, #8]
 8004102:	f2c0 8095 	blt.w	8004230 <_printf_i+0x20c>
 8004106:	6821      	ldr	r1, [r4, #0]
 8004108:	f021 0104 	bic.w	r1, r1, #4
 800410c:	6021      	str	r1, [r4, #0]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d13d      	bne.n	800418e <_printf_i+0x16a>
 8004112:	2d00      	cmp	r5, #0
 8004114:	f040 808e 	bne.w	8004234 <_printf_i+0x210>
 8004118:	4665      	mov	r5, ip
 800411a:	2a08      	cmp	r2, #8
 800411c:	d10b      	bne.n	8004136 <_printf_i+0x112>
 800411e:	6823      	ldr	r3, [r4, #0]
 8004120:	07db      	lsls	r3, r3, #31
 8004122:	d508      	bpl.n	8004136 <_printf_i+0x112>
 8004124:	6923      	ldr	r3, [r4, #16]
 8004126:	6862      	ldr	r2, [r4, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	bfde      	ittt	le
 800412c:	2330      	movle	r3, #48	; 0x30
 800412e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004132:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004136:	ebac 0305 	sub.w	r3, ip, r5
 800413a:	6123      	str	r3, [r4, #16]
 800413c:	f8cd 8000 	str.w	r8, [sp]
 8004140:	463b      	mov	r3, r7
 8004142:	aa03      	add	r2, sp, #12
 8004144:	4621      	mov	r1, r4
 8004146:	4630      	mov	r0, r6
 8004148:	f7ff fef6 	bl	8003f38 <_printf_common>
 800414c:	3001      	adds	r0, #1
 800414e:	d14d      	bne.n	80041ec <_printf_i+0x1c8>
 8004150:	f04f 30ff 	mov.w	r0, #4294967295
 8004154:	b005      	add	sp, #20
 8004156:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800415a:	4839      	ldr	r0, [pc, #228]	; (8004240 <_printf_i+0x21c>)
 800415c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004160:	6813      	ldr	r3, [r2, #0]
 8004162:	6821      	ldr	r1, [r4, #0]
 8004164:	1d1d      	adds	r5, r3, #4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6015      	str	r5, [r2, #0]
 800416a:	060a      	lsls	r2, r1, #24
 800416c:	d50b      	bpl.n	8004186 <_printf_i+0x162>
 800416e:	07ca      	lsls	r2, r1, #31
 8004170:	bf44      	itt	mi
 8004172:	f041 0120 	orrmi.w	r1, r1, #32
 8004176:	6021      	strmi	r1, [r4, #0]
 8004178:	b91b      	cbnz	r3, 8004182 <_printf_i+0x15e>
 800417a:	6822      	ldr	r2, [r4, #0]
 800417c:	f022 0220 	bic.w	r2, r2, #32
 8004180:	6022      	str	r2, [r4, #0]
 8004182:	2210      	movs	r2, #16
 8004184:	e7b7      	b.n	80040f6 <_printf_i+0xd2>
 8004186:	064d      	lsls	r5, r1, #25
 8004188:	bf48      	it	mi
 800418a:	b29b      	uxthmi	r3, r3
 800418c:	e7ef      	b.n	800416e <_printf_i+0x14a>
 800418e:	4665      	mov	r5, ip
 8004190:	fbb3 f1f2 	udiv	r1, r3, r2
 8004194:	fb02 3311 	mls	r3, r2, r1, r3
 8004198:	5cc3      	ldrb	r3, [r0, r3]
 800419a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800419e:	460b      	mov	r3, r1
 80041a0:	2900      	cmp	r1, #0
 80041a2:	d1f5      	bne.n	8004190 <_printf_i+0x16c>
 80041a4:	e7b9      	b.n	800411a <_printf_i+0xf6>
 80041a6:	6813      	ldr	r3, [r2, #0]
 80041a8:	6825      	ldr	r5, [r4, #0]
 80041aa:	1d18      	adds	r0, r3, #4
 80041ac:	6961      	ldr	r1, [r4, #20]
 80041ae:	6010      	str	r0, [r2, #0]
 80041b0:	0628      	lsls	r0, r5, #24
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	d501      	bpl.n	80041ba <_printf_i+0x196>
 80041b6:	6019      	str	r1, [r3, #0]
 80041b8:	e002      	b.n	80041c0 <_printf_i+0x19c>
 80041ba:	066a      	lsls	r2, r5, #25
 80041bc:	d5fb      	bpl.n	80041b6 <_printf_i+0x192>
 80041be:	8019      	strh	r1, [r3, #0]
 80041c0:	2300      	movs	r3, #0
 80041c2:	4665      	mov	r5, ip
 80041c4:	6123      	str	r3, [r4, #16]
 80041c6:	e7b9      	b.n	800413c <_printf_i+0x118>
 80041c8:	6813      	ldr	r3, [r2, #0]
 80041ca:	1d19      	adds	r1, r3, #4
 80041cc:	6011      	str	r1, [r2, #0]
 80041ce:	681d      	ldr	r5, [r3, #0]
 80041d0:	6862      	ldr	r2, [r4, #4]
 80041d2:	2100      	movs	r1, #0
 80041d4:	4628      	mov	r0, r5
 80041d6:	f000 f837 	bl	8004248 <memchr>
 80041da:	b108      	cbz	r0, 80041e0 <_printf_i+0x1bc>
 80041dc:	1b40      	subs	r0, r0, r5
 80041de:	6060      	str	r0, [r4, #4]
 80041e0:	6863      	ldr	r3, [r4, #4]
 80041e2:	6123      	str	r3, [r4, #16]
 80041e4:	2300      	movs	r3, #0
 80041e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041ea:	e7a7      	b.n	800413c <_printf_i+0x118>
 80041ec:	6923      	ldr	r3, [r4, #16]
 80041ee:	462a      	mov	r2, r5
 80041f0:	4639      	mov	r1, r7
 80041f2:	4630      	mov	r0, r6
 80041f4:	47c0      	blx	r8
 80041f6:	3001      	adds	r0, #1
 80041f8:	d0aa      	beq.n	8004150 <_printf_i+0x12c>
 80041fa:	6823      	ldr	r3, [r4, #0]
 80041fc:	079b      	lsls	r3, r3, #30
 80041fe:	d413      	bmi.n	8004228 <_printf_i+0x204>
 8004200:	68e0      	ldr	r0, [r4, #12]
 8004202:	9b03      	ldr	r3, [sp, #12]
 8004204:	4298      	cmp	r0, r3
 8004206:	bfb8      	it	lt
 8004208:	4618      	movlt	r0, r3
 800420a:	e7a3      	b.n	8004154 <_printf_i+0x130>
 800420c:	2301      	movs	r3, #1
 800420e:	464a      	mov	r2, r9
 8004210:	4639      	mov	r1, r7
 8004212:	4630      	mov	r0, r6
 8004214:	47c0      	blx	r8
 8004216:	3001      	adds	r0, #1
 8004218:	d09a      	beq.n	8004150 <_printf_i+0x12c>
 800421a:	3501      	adds	r5, #1
 800421c:	68e3      	ldr	r3, [r4, #12]
 800421e:	9a03      	ldr	r2, [sp, #12]
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	42ab      	cmp	r3, r5
 8004224:	dcf2      	bgt.n	800420c <_printf_i+0x1e8>
 8004226:	e7eb      	b.n	8004200 <_printf_i+0x1dc>
 8004228:	2500      	movs	r5, #0
 800422a:	f104 0919 	add.w	r9, r4, #25
 800422e:	e7f5      	b.n	800421c <_printf_i+0x1f8>
 8004230:	2b00      	cmp	r3, #0
 8004232:	d1ac      	bne.n	800418e <_printf_i+0x16a>
 8004234:	7803      	ldrb	r3, [r0, #0]
 8004236:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800423a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800423e:	e76c      	b.n	800411a <_printf_i+0xf6>
 8004240:	080049fd 	.word	0x080049fd
 8004244:	08004a0e 	.word	0x08004a0e

08004248 <memchr>:
 8004248:	b510      	push	{r4, lr}
 800424a:	b2c9      	uxtb	r1, r1
 800424c:	4402      	add	r2, r0
 800424e:	4290      	cmp	r0, r2
 8004250:	4603      	mov	r3, r0
 8004252:	d101      	bne.n	8004258 <memchr+0x10>
 8004254:	2300      	movs	r3, #0
 8004256:	e003      	b.n	8004260 <memchr+0x18>
 8004258:	781c      	ldrb	r4, [r3, #0]
 800425a:	3001      	adds	r0, #1
 800425c:	428c      	cmp	r4, r1
 800425e:	d1f6      	bne.n	800424e <memchr+0x6>
 8004260:	4618      	mov	r0, r3
 8004262:	bd10      	pop	{r4, pc}

08004264 <memmove>:
 8004264:	4288      	cmp	r0, r1
 8004266:	b510      	push	{r4, lr}
 8004268:	eb01 0302 	add.w	r3, r1, r2
 800426c:	d807      	bhi.n	800427e <memmove+0x1a>
 800426e:	1e42      	subs	r2, r0, #1
 8004270:	4299      	cmp	r1, r3
 8004272:	d00a      	beq.n	800428a <memmove+0x26>
 8004274:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004278:	f802 4f01 	strb.w	r4, [r2, #1]!
 800427c:	e7f8      	b.n	8004270 <memmove+0xc>
 800427e:	4283      	cmp	r3, r0
 8004280:	d9f5      	bls.n	800426e <memmove+0xa>
 8004282:	1881      	adds	r1, r0, r2
 8004284:	1ad2      	subs	r2, r2, r3
 8004286:	42d3      	cmn	r3, r2
 8004288:	d100      	bne.n	800428c <memmove+0x28>
 800428a:	bd10      	pop	{r4, pc}
 800428c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004290:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004294:	e7f7      	b.n	8004286 <memmove+0x22>
	...

08004298 <_free_r>:
 8004298:	b538      	push	{r3, r4, r5, lr}
 800429a:	4605      	mov	r5, r0
 800429c:	2900      	cmp	r1, #0
 800429e:	d043      	beq.n	8004328 <_free_r+0x90>
 80042a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042a4:	1f0c      	subs	r4, r1, #4
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	bfb8      	it	lt
 80042aa:	18e4      	addlt	r4, r4, r3
 80042ac:	f000 f8d0 	bl	8004450 <__malloc_lock>
 80042b0:	4a1e      	ldr	r2, [pc, #120]	; (800432c <_free_r+0x94>)
 80042b2:	6813      	ldr	r3, [r2, #0]
 80042b4:	4610      	mov	r0, r2
 80042b6:	b933      	cbnz	r3, 80042c6 <_free_r+0x2e>
 80042b8:	6063      	str	r3, [r4, #4]
 80042ba:	6014      	str	r4, [r2, #0]
 80042bc:	4628      	mov	r0, r5
 80042be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80042c2:	f000 b8c6 	b.w	8004452 <__malloc_unlock>
 80042c6:	42a3      	cmp	r3, r4
 80042c8:	d90b      	bls.n	80042e2 <_free_r+0x4a>
 80042ca:	6821      	ldr	r1, [r4, #0]
 80042cc:	1862      	adds	r2, r4, r1
 80042ce:	4293      	cmp	r3, r2
 80042d0:	bf01      	itttt	eq
 80042d2:	681a      	ldreq	r2, [r3, #0]
 80042d4:	685b      	ldreq	r3, [r3, #4]
 80042d6:	1852      	addeq	r2, r2, r1
 80042d8:	6022      	streq	r2, [r4, #0]
 80042da:	6063      	str	r3, [r4, #4]
 80042dc:	6004      	str	r4, [r0, #0]
 80042de:	e7ed      	b.n	80042bc <_free_r+0x24>
 80042e0:	4613      	mov	r3, r2
 80042e2:	685a      	ldr	r2, [r3, #4]
 80042e4:	b10a      	cbz	r2, 80042ea <_free_r+0x52>
 80042e6:	42a2      	cmp	r2, r4
 80042e8:	d9fa      	bls.n	80042e0 <_free_r+0x48>
 80042ea:	6819      	ldr	r1, [r3, #0]
 80042ec:	1858      	adds	r0, r3, r1
 80042ee:	42a0      	cmp	r0, r4
 80042f0:	d10b      	bne.n	800430a <_free_r+0x72>
 80042f2:	6820      	ldr	r0, [r4, #0]
 80042f4:	4401      	add	r1, r0
 80042f6:	1858      	adds	r0, r3, r1
 80042f8:	4282      	cmp	r2, r0
 80042fa:	6019      	str	r1, [r3, #0]
 80042fc:	d1de      	bne.n	80042bc <_free_r+0x24>
 80042fe:	6810      	ldr	r0, [r2, #0]
 8004300:	6852      	ldr	r2, [r2, #4]
 8004302:	4401      	add	r1, r0
 8004304:	6019      	str	r1, [r3, #0]
 8004306:	605a      	str	r2, [r3, #4]
 8004308:	e7d8      	b.n	80042bc <_free_r+0x24>
 800430a:	d902      	bls.n	8004312 <_free_r+0x7a>
 800430c:	230c      	movs	r3, #12
 800430e:	602b      	str	r3, [r5, #0]
 8004310:	e7d4      	b.n	80042bc <_free_r+0x24>
 8004312:	6820      	ldr	r0, [r4, #0]
 8004314:	1821      	adds	r1, r4, r0
 8004316:	428a      	cmp	r2, r1
 8004318:	bf01      	itttt	eq
 800431a:	6811      	ldreq	r1, [r2, #0]
 800431c:	6852      	ldreq	r2, [r2, #4]
 800431e:	1809      	addeq	r1, r1, r0
 8004320:	6021      	streq	r1, [r4, #0]
 8004322:	6062      	str	r2, [r4, #4]
 8004324:	605c      	str	r4, [r3, #4]
 8004326:	e7c9      	b.n	80042bc <_free_r+0x24>
 8004328:	bd38      	pop	{r3, r4, r5, pc}
 800432a:	bf00      	nop
 800432c:	20000140 	.word	0x20000140

08004330 <_malloc_r>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	1ccd      	adds	r5, r1, #3
 8004334:	f025 0503 	bic.w	r5, r5, #3
 8004338:	3508      	adds	r5, #8
 800433a:	2d0c      	cmp	r5, #12
 800433c:	bf38      	it	cc
 800433e:	250c      	movcc	r5, #12
 8004340:	2d00      	cmp	r5, #0
 8004342:	4606      	mov	r6, r0
 8004344:	db01      	blt.n	800434a <_malloc_r+0x1a>
 8004346:	42a9      	cmp	r1, r5
 8004348:	d903      	bls.n	8004352 <_malloc_r+0x22>
 800434a:	230c      	movs	r3, #12
 800434c:	6033      	str	r3, [r6, #0]
 800434e:	2000      	movs	r0, #0
 8004350:	bd70      	pop	{r4, r5, r6, pc}
 8004352:	f000 f87d 	bl	8004450 <__malloc_lock>
 8004356:	4a21      	ldr	r2, [pc, #132]	; (80043dc <_malloc_r+0xac>)
 8004358:	6814      	ldr	r4, [r2, #0]
 800435a:	4621      	mov	r1, r4
 800435c:	b991      	cbnz	r1, 8004384 <_malloc_r+0x54>
 800435e:	4c20      	ldr	r4, [pc, #128]	; (80043e0 <_malloc_r+0xb0>)
 8004360:	6823      	ldr	r3, [r4, #0]
 8004362:	b91b      	cbnz	r3, 800436c <_malloc_r+0x3c>
 8004364:	4630      	mov	r0, r6
 8004366:	f000 f863 	bl	8004430 <_sbrk_r>
 800436a:	6020      	str	r0, [r4, #0]
 800436c:	4629      	mov	r1, r5
 800436e:	4630      	mov	r0, r6
 8004370:	f000 f85e 	bl	8004430 <_sbrk_r>
 8004374:	1c43      	adds	r3, r0, #1
 8004376:	d124      	bne.n	80043c2 <_malloc_r+0x92>
 8004378:	230c      	movs	r3, #12
 800437a:	4630      	mov	r0, r6
 800437c:	6033      	str	r3, [r6, #0]
 800437e:	f000 f868 	bl	8004452 <__malloc_unlock>
 8004382:	e7e4      	b.n	800434e <_malloc_r+0x1e>
 8004384:	680b      	ldr	r3, [r1, #0]
 8004386:	1b5b      	subs	r3, r3, r5
 8004388:	d418      	bmi.n	80043bc <_malloc_r+0x8c>
 800438a:	2b0b      	cmp	r3, #11
 800438c:	d90f      	bls.n	80043ae <_malloc_r+0x7e>
 800438e:	600b      	str	r3, [r1, #0]
 8004390:	18cc      	adds	r4, r1, r3
 8004392:	50cd      	str	r5, [r1, r3]
 8004394:	4630      	mov	r0, r6
 8004396:	f000 f85c 	bl	8004452 <__malloc_unlock>
 800439a:	f104 000b 	add.w	r0, r4, #11
 800439e:	1d23      	adds	r3, r4, #4
 80043a0:	f020 0007 	bic.w	r0, r0, #7
 80043a4:	1ac3      	subs	r3, r0, r3
 80043a6:	d0d3      	beq.n	8004350 <_malloc_r+0x20>
 80043a8:	425a      	negs	r2, r3
 80043aa:	50e2      	str	r2, [r4, r3]
 80043ac:	e7d0      	b.n	8004350 <_malloc_r+0x20>
 80043ae:	684b      	ldr	r3, [r1, #4]
 80043b0:	428c      	cmp	r4, r1
 80043b2:	bf16      	itet	ne
 80043b4:	6063      	strne	r3, [r4, #4]
 80043b6:	6013      	streq	r3, [r2, #0]
 80043b8:	460c      	movne	r4, r1
 80043ba:	e7eb      	b.n	8004394 <_malloc_r+0x64>
 80043bc:	460c      	mov	r4, r1
 80043be:	6849      	ldr	r1, [r1, #4]
 80043c0:	e7cc      	b.n	800435c <_malloc_r+0x2c>
 80043c2:	1cc4      	adds	r4, r0, #3
 80043c4:	f024 0403 	bic.w	r4, r4, #3
 80043c8:	42a0      	cmp	r0, r4
 80043ca:	d005      	beq.n	80043d8 <_malloc_r+0xa8>
 80043cc:	1a21      	subs	r1, r4, r0
 80043ce:	4630      	mov	r0, r6
 80043d0:	f000 f82e 	bl	8004430 <_sbrk_r>
 80043d4:	3001      	adds	r0, #1
 80043d6:	d0cf      	beq.n	8004378 <_malloc_r+0x48>
 80043d8:	6025      	str	r5, [r4, #0]
 80043da:	e7db      	b.n	8004394 <_malloc_r+0x64>
 80043dc:	20000140 	.word	0x20000140
 80043e0:	20000144 	.word	0x20000144

080043e4 <_realloc_r>:
 80043e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e6:	4607      	mov	r7, r0
 80043e8:	4614      	mov	r4, r2
 80043ea:	460e      	mov	r6, r1
 80043ec:	b921      	cbnz	r1, 80043f8 <_realloc_r+0x14>
 80043ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80043f2:	4611      	mov	r1, r2
 80043f4:	f7ff bf9c 	b.w	8004330 <_malloc_r>
 80043f8:	b922      	cbnz	r2, 8004404 <_realloc_r+0x20>
 80043fa:	f7ff ff4d 	bl	8004298 <_free_r>
 80043fe:	4625      	mov	r5, r4
 8004400:	4628      	mov	r0, r5
 8004402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004404:	f000 f826 	bl	8004454 <_malloc_usable_size_r>
 8004408:	42a0      	cmp	r0, r4
 800440a:	d20f      	bcs.n	800442c <_realloc_r+0x48>
 800440c:	4621      	mov	r1, r4
 800440e:	4638      	mov	r0, r7
 8004410:	f7ff ff8e 	bl	8004330 <_malloc_r>
 8004414:	4605      	mov	r5, r0
 8004416:	2800      	cmp	r0, #0
 8004418:	d0f2      	beq.n	8004400 <_realloc_r+0x1c>
 800441a:	4631      	mov	r1, r6
 800441c:	4622      	mov	r2, r4
 800441e:	f7ff fc05 	bl	8003c2c <memcpy>
 8004422:	4631      	mov	r1, r6
 8004424:	4638      	mov	r0, r7
 8004426:	f7ff ff37 	bl	8004298 <_free_r>
 800442a:	e7e9      	b.n	8004400 <_realloc_r+0x1c>
 800442c:	4635      	mov	r5, r6
 800442e:	e7e7      	b.n	8004400 <_realloc_r+0x1c>

08004430 <_sbrk_r>:
 8004430:	b538      	push	{r3, r4, r5, lr}
 8004432:	2300      	movs	r3, #0
 8004434:	4c05      	ldr	r4, [pc, #20]	; (800444c <_sbrk_r+0x1c>)
 8004436:	4605      	mov	r5, r0
 8004438:	4608      	mov	r0, r1
 800443a:	6023      	str	r3, [r4, #0]
 800443c:	f7fd fa72 	bl	8001924 <_sbrk>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d102      	bne.n	800444a <_sbrk_r+0x1a>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	b103      	cbz	r3, 800444a <_sbrk_r+0x1a>
 8004448:	602b      	str	r3, [r5, #0]
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	20000238 	.word	0x20000238

08004450 <__malloc_lock>:
 8004450:	4770      	bx	lr

08004452 <__malloc_unlock>:
 8004452:	4770      	bx	lr

08004454 <_malloc_usable_size_r>:
 8004454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004458:	1f18      	subs	r0, r3, #4
 800445a:	2b00      	cmp	r3, #0
 800445c:	bfbc      	itt	lt
 800445e:	580b      	ldrlt	r3, [r1, r0]
 8004460:	18c0      	addlt	r0, r0, r3
 8004462:	4770      	bx	lr

08004464 <_init>:
 8004464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004466:	bf00      	nop
 8004468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800446a:	bc08      	pop	{r3}
 800446c:	469e      	mov	lr, r3
 800446e:	4770      	bx	lr

08004470 <_fini>:
 8004470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004472:	bf00      	nop
 8004474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004476:	bc08      	pop	{r3}
 8004478:	469e      	mov	lr, r3
 800447a:	4770      	bx	lr
